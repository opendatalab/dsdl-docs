{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Data is the cornerstone of artificial intelligence. The efficiency of data acquisition, exchange, and application directly impacts the advances in technologies and applications. Over the long history of AI, a vast quantity of data sets have been developed and distributed. However, these datasets are defined in very different forms, which incurs significant overhead when it comes to exchange, integration, and utilization -- it is often the case that one needs to develop a new customized tool or script in order to incorporate a new dataset into a workflow. To overcome such difficulties, we develop Data Set Description Language (DSDL) . Design Goals The design of DSDL is driven by three goals, namely generic , portable , extensible . We refer to these three goals together as GPE . Generic This language aims to provide a unified representation standard for data in multiple fields of artificial intelligence, rather than being designed for a single field or task. It should be able to express data sets with different modalities and structures in a consistent format. Portable Write once, distribute everywhere. Dataset descriptions can be widely distributed and exchanged, and used in different environments without modification of the source files. The achievement of this goal is crucial for creating an open and thriving ecosystem. To this end, we need to carefully examine the details of the design, and remove unnecessary dependencies on specific assumptions about the underlying facilities or organizations. Extensible One should be able to extend the boundary of expression without modifying the core standard. For a programming language such as C++ or Python, its application boundaries can be significantly extended by libraries or packages, while the core language remains stable over a long period. Such libraries and packages form a rich ecosystem, making the language stay alive for a very long time. Design Overview A data set is essentially a data structure stored in persistent storages. In general, it comprises unstructured objects, e.g. images, videos, and texts, together with associated annotations. Such elements are aggregated in certain ways into a data set. It is noteworthy that the unstructured objects mentioned above usually contain large volume of data. To facilitate quick distribution of data sets, our design separates the structured description of a dataset from the content of unstructured objects. Below is an overall summary of the language design: Basic data model DSDL describes a data set with a collection of basic elements organized via containers such as structs , lists , and sets . Basic elements are individual units in a data set description, which include not only the primitives such as numbers, strings, but also those elements that facilitate the expression of object locations, annotations, etc. Unstructured objects such as images, videos, and texts, are special basic elements, as they are indivisible in a data set description. In particular, an unstructured object is represented by an object locator which tells where it is stored instead of being embedded into the description entirely. Optionally, additional descriptors can be used to provide additional information about the object, e.g. the format or resolution of an image. Aggregates are used to organize basic elements into a data structure. DSDL provides list and struct types to express aggregate data structures. In particular, individual samples are represented by a struct (an aggregate of multiple fields), while a data set consists of a list of samples. Extensible type system All elements and structured units in DSDL have types. DSDL adopts a simple yet extensible type systems. Specifically, there are three kinds of types in DSDL: Primitive types are the types of primitive values such as booleans, numbers, and strings. DSDL provides a large collection of primitive types, which serve as the basic building blocks of the description. Note that different primitive types in DSDL can be expressed in the same form. For example, object locators and time stamps both use strings as their expression form, but the string values will be interpreted diffferently depending on the underlying types. Unstructured object classes are the abstractions for unstructured objects, such as images, videos, audios, point clouds, texts, etc. Such objects, despite their rich internal structures, are considered as indivisible units in data set definitions. DSDL provides a collection of pre-defined unstructured object classes to cover common applications, while allowing 3rd parties to extend this collection by registering new unstructured object classes via a minimal set of interfaces. Struct classes are the abstractions for aggregate data structures in DSDL. Each instance of a struct class is called a struct , which contains multiple fields, each with its own type. An important application of structs are to represent data samples. DSDL comes with a collection of predefined struct classes for commonly seen tasks in the standard library, while allowing users to define their own struct classes for special tasks. Types need to be defined (either builtin, by 3rd parties, or by the user) before they are used. Circular references are not allowed in this version of DSDL. Object locators As mentioned, unstructured objects are not embedded entirely into the data set description. Instead, they are referred to by object locators . In particular, an object locator is a string with special format, which will be converted into an actual address by the DSDL interpreter when the corresponding object is to be loaded. The introduction of object locators is the key to separating the structured description of the data set from the unstructured media content. This way not only enables light-weight distribution of data set descriptions without moving the large volume of media data, but also allows quick manipulation of a data set, e.g. combining multiple sets, merging properties, or taking a subset. Based on JSON or YAML DSDL is a domain-specific language based on popular data exchange languages: JSON or YAML . Note that the elements in JSON or YAML are not associated with specific meanings at the language level. By endowing such elements with semantics, DSDL can describe a data set in a meaningful manner. This design choice allows one to leverage the rich tool systems already available for JSON and YAML. With such tools, one can readily build a full-fledged system that fully supports interpretation, validation, and query, and as well as the interoperability with the Internet ecosystem.","title":"Overview"},{"location":"#overview","text":"Data is the cornerstone of artificial intelligence. The efficiency of data acquisition, exchange, and application directly impacts the advances in technologies and applications. Over the long history of AI, a vast quantity of data sets have been developed and distributed. However, these datasets are defined in very different forms, which incurs significant overhead when it comes to exchange, integration, and utilization -- it is often the case that one needs to develop a new customized tool or script in order to incorporate a new dataset into a workflow. To overcome such difficulties, we develop Data Set Description Language (DSDL) .","title":"Overview"},{"location":"#design-goals","text":"The design of DSDL is driven by three goals, namely generic , portable , extensible . We refer to these three goals together as GPE . Generic This language aims to provide a unified representation standard for data in multiple fields of artificial intelligence, rather than being designed for a single field or task. It should be able to express data sets with different modalities and structures in a consistent format. Portable Write once, distribute everywhere. Dataset descriptions can be widely distributed and exchanged, and used in different environments without modification of the source files. The achievement of this goal is crucial for creating an open and thriving ecosystem. To this end, we need to carefully examine the details of the design, and remove unnecessary dependencies on specific assumptions about the underlying facilities or organizations. Extensible One should be able to extend the boundary of expression without modifying the core standard. For a programming language such as C++ or Python, its application boundaries can be significantly extended by libraries or packages, while the core language remains stable over a long period. Such libraries and packages form a rich ecosystem, making the language stay alive for a very long time.","title":"Design Goals"},{"location":"#design-overview","text":"A data set is essentially a data structure stored in persistent storages. In general, it comprises unstructured objects, e.g. images, videos, and texts, together with associated annotations. Such elements are aggregated in certain ways into a data set. It is noteworthy that the unstructured objects mentioned above usually contain large volume of data. To facilitate quick distribution of data sets, our design separates the structured description of a dataset from the content of unstructured objects. Below is an overall summary of the language design:","title":"Design Overview"},{"location":"#basic-data-model","text":"DSDL describes a data set with a collection of basic elements organized via containers such as structs , lists , and sets . Basic elements are individual units in a data set description, which include not only the primitives such as numbers, strings, but also those elements that facilitate the expression of object locations, annotations, etc. Unstructured objects such as images, videos, and texts, are special basic elements, as they are indivisible in a data set description. In particular, an unstructured object is represented by an object locator which tells where it is stored instead of being embedded into the description entirely. Optionally, additional descriptors can be used to provide additional information about the object, e.g. the format or resolution of an image. Aggregates are used to organize basic elements into a data structure. DSDL provides list and struct types to express aggregate data structures. In particular, individual samples are represented by a struct (an aggregate of multiple fields), while a data set consists of a list of samples.","title":"Basic data model"},{"location":"#extensible-type-system","text":"All elements and structured units in DSDL have types. DSDL adopts a simple yet extensible type systems. Specifically, there are three kinds of types in DSDL: Primitive types are the types of primitive values such as booleans, numbers, and strings. DSDL provides a large collection of primitive types, which serve as the basic building blocks of the description. Note that different primitive types in DSDL can be expressed in the same form. For example, object locators and time stamps both use strings as their expression form, but the string values will be interpreted diffferently depending on the underlying types. Unstructured object classes are the abstractions for unstructured objects, such as images, videos, audios, point clouds, texts, etc. Such objects, despite their rich internal structures, are considered as indivisible units in data set definitions. DSDL provides a collection of pre-defined unstructured object classes to cover common applications, while allowing 3rd parties to extend this collection by registering new unstructured object classes via a minimal set of interfaces. Struct classes are the abstractions for aggregate data structures in DSDL. Each instance of a struct class is called a struct , which contains multiple fields, each with its own type. An important application of structs are to represent data samples. DSDL comes with a collection of predefined struct classes for commonly seen tasks in the standard library, while allowing users to define their own struct classes for special tasks. Types need to be defined (either builtin, by 3rd parties, or by the user) before they are used. Circular references are not allowed in this version of DSDL.","title":"Extensible type system"},{"location":"#object-locators","text":"As mentioned, unstructured objects are not embedded entirely into the data set description. Instead, they are referred to by object locators . In particular, an object locator is a string with special format, which will be converted into an actual address by the DSDL interpreter when the corresponding object is to be loaded. The introduction of object locators is the key to separating the structured description of the data set from the unstructured media content. This way not only enables light-weight distribution of data set descriptions without moving the large volume of media data, but also allows quick manipulation of a data set, e.g. combining multiple sets, merging properties, or taking a subset.","title":"Object locators"},{"location":"#based-on-json-or-yaml","text":"DSDL is a domain-specific language based on popular data exchange languages: JSON or YAML . Note that the elements in JSON or YAML are not associated with specific meanings at the language level. By endowing such elements with semantics, DSDL can describe a data set in a meaningful manner. This design choice allows one to leverage the rich tool systems already available for JSON and YAML. With such tools, one can readily build a full-fledged system that fully supports interpretation, validation, and query, and as well as the interoperability with the Internet ecosystem.","title":"Based on JSON or YAML"},{"location":"install/","text":"Install","title":"Install"},{"location":"install/#install","text":"","title":"Install"},{"location":"overview/","text":"Overview Data is the cornerstone of artificial intelligence. The efficiency of data acquisition, exchange, and application directly impacts the advances in technologies and applications. Over the long history of AI, a vast quantity of data sets have been developed and distributed. However, these datasets are defined in very different forms, which incurs significant overhead when it comes to exchange, integration, and utilization -- it is often the case that one needs to develop a new customized tool or script in order to incorporate a new dataset into a workflow. To overcome such difficulties, we develop Data Set Description Language (DSDL) . Design Goals The design of DSDL is driven by three goals, namely generic , portable , extensible . We refer to these three goals together as GPE . Generic This language aims to provide a unified representation standard for data in multiple fields of artificial intelligence, rather than being designed for a single field or task. It should be able to express data sets with different modalities and structures in a consistent format. Portable Write once, distribute everywhere. Dataset descriptions can be widely distributed and exchanged, and used in different environments without modification of the source files. The achievement of this goal is crucial for creating an open and thriving ecosystem. To this end, we need to carefully examine the details of the design, and remove unnecessary dependencies on specific assumptions about the underlying facilities or organizations. Extensible One should be able to extend the boundary of expression without modifying the core standard. For a programming language such as C++ or Python, its application boundaries can be significantly extended by libraries or packages, while the core language remains stable over a long period. Such libraries and packages form a rich ecosystem, making the language stay alive for a very long time. Design Overview A data set is essentially a data structure stored in persistent storages. In general, it comprises unstructured objects, e.g. images, videos, and texts, together with associated annotations. Such elements are aggregated in certain ways into a data set. It is noteworthy that the unstructured objects mentioned above usually contain large volume of data. To facilitate quick distribution of data sets, our design separates the structured description of a dataset from the content of unstructured objects. Below is an overall summary of the language design: Basic data model DSDL describes a data set with a collection of basic elements organized via containers such as structs , lists , and sets . Basic elements are individual units in a data set description, which include not only the primitives such as numbers, strings, but also those elements that facilitate the expression of object locations, annotations, etc. Unstructured objects such as images, videos, and texts, are special basic elements, as they are indivisible in a data set description. In particular, an unstructured object is represented by an object locator which tells where it is stored instead of being embedded into the description entirely. Optionally, additional descriptors can be used to provide additional information about the object, e.g. the format or resolution of an image. Aggregates are used to organize basic elements into a data structure. DSDL provides list and struct types to express aggregate data structures. In particular, individual samples are represented by a struct (an aggregate of multiple fields), while a data set consists of a list of samples. Extensible type system All elements and structured units in DSDL have types. DSDL adopts a simple yet extensible type systems. Specifically, there are three kinds of types in DSDL: Primitive types are the types of primitive values such as booleans, numbers, and strings. DSDL provides a large collection of primitive types, which serve as the basic building blocks of the description. Note that different primitive types in DSDL can be expressed in the same form. For example, object locators and time stamps both use strings as their expression form, but the string values will be interpreted diffferently depending on the underlying types. Unstructured object classes are the abstractions for unstructured objects, such as images, videos, audios, point clouds, texts, etc. Such objects, despite their rich internal structures, are considered as indivisible units in data set definitions. DSDL provides a collection of pre-defined unstructured object classes to cover common applications, while allowing 3rd parties to extend this collection by registering new unstructured object classes via a minimal set of interfaces. Struct classes are the abstractions for aggregate data structures in DSDL. Each instance of a struct class is called a struct , which contains multiple fields, each with its own type. An important application of structs are to represent data samples. DSDL comes with a collection of predefined struct classes for commonly seen tasks in the standard library, while allowing users to define their own struct classes for special tasks. Types need to be defined (either builtin, by 3rd parties, or by the user) before they are used. Circular references are not allowed in this version of DSDL. Object locators As mentioned, unstructured objects are not embedded entirely into the data set description. Instead, they are referred to by object locators . In particular, an object locator is a string with special format, which will be converted into an actual address by the DSDL interpreter when the corresponding object is to be loaded. The introduction of object locators is the key to separating the structured description of the data set from the unstructured media content. This way not only enables light-weight distribution of data set descriptions without moving the large volume of media data, but also allows quick manipulation of a data set, e.g. combining multiple sets, merging properties, or taking a subset. Based on JSON or YAML DSDL is a domain-specific language based on popular data exchange languages: JSON or YAML . Note that the elements in JSON or YAML are not associated with specific meanings at the language level. By endowing such elements with semantics, DSDL can describe a data set in a meaningful manner. This design choice allows one to leverage the rich tool systems already available for JSON and YAML. With such tools, one can readily build a full-fledged system that fully supports interpretation, validation, and query, and as well as the interoperability with the Internet ecosystem.","title":"Overview"},{"location":"overview/#overview","text":"Data is the cornerstone of artificial intelligence. The efficiency of data acquisition, exchange, and application directly impacts the advances in technologies and applications. Over the long history of AI, a vast quantity of data sets have been developed and distributed. However, these datasets are defined in very different forms, which incurs significant overhead when it comes to exchange, integration, and utilization -- it is often the case that one needs to develop a new customized tool or script in order to incorporate a new dataset into a workflow. To overcome such difficulties, we develop Data Set Description Language (DSDL) .","title":"Overview"},{"location":"overview/#design-goals","text":"The design of DSDL is driven by three goals, namely generic , portable , extensible . We refer to these three goals together as GPE . Generic This language aims to provide a unified representation standard for data in multiple fields of artificial intelligence, rather than being designed for a single field or task. It should be able to express data sets with different modalities and structures in a consistent format. Portable Write once, distribute everywhere. Dataset descriptions can be widely distributed and exchanged, and used in different environments without modification of the source files. The achievement of this goal is crucial for creating an open and thriving ecosystem. To this end, we need to carefully examine the details of the design, and remove unnecessary dependencies on specific assumptions about the underlying facilities or organizations. Extensible One should be able to extend the boundary of expression without modifying the core standard. For a programming language such as C++ or Python, its application boundaries can be significantly extended by libraries or packages, while the core language remains stable over a long period. Such libraries and packages form a rich ecosystem, making the language stay alive for a very long time.","title":"Design Goals"},{"location":"overview/#design-overview","text":"A data set is essentially a data structure stored in persistent storages. In general, it comprises unstructured objects, e.g. images, videos, and texts, together with associated annotations. Such elements are aggregated in certain ways into a data set. It is noteworthy that the unstructured objects mentioned above usually contain large volume of data. To facilitate quick distribution of data sets, our design separates the structured description of a dataset from the content of unstructured objects. Below is an overall summary of the language design:","title":"Design Overview"},{"location":"overview/#basic-data-model","text":"DSDL describes a data set with a collection of basic elements organized via containers such as structs , lists , and sets . Basic elements are individual units in a data set description, which include not only the primitives such as numbers, strings, but also those elements that facilitate the expression of object locations, annotations, etc. Unstructured objects such as images, videos, and texts, are special basic elements, as they are indivisible in a data set description. In particular, an unstructured object is represented by an object locator which tells where it is stored instead of being embedded into the description entirely. Optionally, additional descriptors can be used to provide additional information about the object, e.g. the format or resolution of an image. Aggregates are used to organize basic elements into a data structure. DSDL provides list and struct types to express aggregate data structures. In particular, individual samples are represented by a struct (an aggregate of multiple fields), while a data set consists of a list of samples.","title":"Basic data model"},{"location":"overview/#extensible-type-system","text":"All elements and structured units in DSDL have types. DSDL adopts a simple yet extensible type systems. Specifically, there are three kinds of types in DSDL: Primitive types are the types of primitive values such as booleans, numbers, and strings. DSDL provides a large collection of primitive types, which serve as the basic building blocks of the description. Note that different primitive types in DSDL can be expressed in the same form. For example, object locators and time stamps both use strings as their expression form, but the string values will be interpreted diffferently depending on the underlying types. Unstructured object classes are the abstractions for unstructured objects, such as images, videos, audios, point clouds, texts, etc. Such objects, despite their rich internal structures, are considered as indivisible units in data set definitions. DSDL provides a collection of pre-defined unstructured object classes to cover common applications, while allowing 3rd parties to extend this collection by registering new unstructured object classes via a minimal set of interfaces. Struct classes are the abstractions for aggregate data structures in DSDL. Each instance of a struct class is called a struct , which contains multiple fields, each with its own type. An important application of structs are to represent data samples. DSDL comes with a collection of predefined struct classes for commonly seen tasks in the standard library, while allowing users to define their own struct classes for special tasks. Types need to be defined (either builtin, by 3rd parties, or by the user) before they are used. Circular references are not allowed in this version of DSDL.","title":"Extensible type system"},{"location":"overview/#object-locators","text":"As mentioned, unstructured objects are not embedded entirely into the data set description. Instead, they are referred to by object locators . In particular, an object locator is a string with special format, which will be converted into an actual address by the DSDL interpreter when the corresponding object is to be loaded. The introduction of object locators is the key to separating the structured description of the data set from the unstructured media content. This way not only enables light-weight distribution of data set descriptions without moving the large volume of media data, but also allows quick manipulation of a data set, e.g. combining multiple sets, merging properties, or taking a subset.","title":"Object locators"},{"location":"overview/#based-on-json-or-yaml","text":"DSDL is a domain-specific language based on popular data exchange languages: JSON or YAML . Note that the elements in JSON or YAML are not associated with specific meanings at the language level. By endowing such elements with semantics, DSDL can describe a data set in a meaningful manner. This design choice allows one to leverage the rich tool systems already available for JSON and YAML. With such tools, one can readily build a full-fledged system that fully supports interpretation, validation, and query, and as well as the interoperability with the Internet ecosystem.","title":"Based on JSON or YAML"},{"location":"tutorial/","text":"Tutorial","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"examples/cv/","text":"Computer Vision Examples All classes defined in this section will be provided in a standard library named ``cv``. General users just need to import ``cv``, and don't need to write the class definitions by themselves. Through out the example below, we use a class domain named ``MyClassDom``. Image Classification The task of image classification is to assign a class label to each image. Sample class definition: ImageClassificationSample : # Each sample contains an image together with a class label (optional). $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] $optional : [ 'label' ] Here, the fields in the $optional list can be omitted in the data samples. When label is omitted, the corresponding field value will be set to a null value (in Python it is None ). Data samples: data : sample-type : ImageClassificationSample[cdom=MyClassDom] samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } - { image : \"xyz/0003.jpg\" } Object Detection The task of object detection is to detect meaningful objects on an image. Each detected object can be represented by a bounding box together with an object class label. Sample class definition: LocalObjectEntry : # Each sample contains a bounding box together a class label (optional). $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] $optional : [ 'label' ] ObjectDetectionSample : # Each sample contains an image together with a list of local objects. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] Data samples: data : sample-type : ObjectDetectionSample[cdom=MyClassDom] samples : - image : \"xyz/0001.jpg\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 } Object Detection with Scene Classification In certain applications, scene classification (at the image level) and object detection are combined into a joint task. For such a task, we can have two class domains, say SceneDom and ObjectDom , respectively for scene classes and object classes. Sample class definition: SceneAndObjectSample : # Each samples contains an image, a scene label (optional) # together with a list of local objects. $def : struct $params : [ 'scenedom' , 'objectdom' ] $fields : image : Image sclabel : Label[dom=$scenedom] objects : List[LocalObjectEntry[cdom=$objectdom]] $optional : [ 'sclabel' ] Data samples: data : sample-type : SceneAndObjectSample[scenedom=SceneDom, objectdom=ObjectDom] samples : - image : \"xyz/0001.jpg\" sclabel : \"street\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" sclabel : \"river\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 } Image Segmentation The image segmentation task is to assign pixel-wise labels to an image. A common practice is to use a labelmap, which is stored as an unstructured object in an external file. Sample class definition: ImageSegmentationSample : # Each sample contains an image together with a label map. $def : struct $params : [ 'cdom' ] $fields : image : Image labelmap : LabelMap[dom=$cdom] Data samples: data : sample-type : ImageSegmentationSample[cdom=MyClassDom] samples : - { image : \"imgs/0001.jpg\" , labelmap : \"maps/0001.ppm\" } - { image : \"imgs/0002.jpg\" , labelmap : \"maps/0002.ppm\" } - { image : \"imgs/0003.jpg\" , labelmap : \"maps/0003.ppm\" }","title":"Computer Vision"},{"location":"examples/cv/#computer-vision-examples","text":"All classes defined in this section will be provided in a standard library named ``cv``. General users just need to import ``cv``, and don't need to write the class definitions by themselves. Through out the example below, we use a class domain named ``MyClassDom``.","title":"Computer Vision Examples"},{"location":"examples/cv/#image-classification","text":"The task of image classification is to assign a class label to each image. Sample class definition: ImageClassificationSample : # Each sample contains an image together with a class label (optional). $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] $optional : [ 'label' ] Here, the fields in the $optional list can be omitted in the data samples. When label is omitted, the corresponding field value will be set to a null value (in Python it is None ). Data samples: data : sample-type : ImageClassificationSample[cdom=MyClassDom] samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } - { image : \"xyz/0003.jpg\" }","title":"Image Classification"},{"location":"examples/cv/#object-detection","text":"The task of object detection is to detect meaningful objects on an image. Each detected object can be represented by a bounding box together with an object class label. Sample class definition: LocalObjectEntry : # Each sample contains a bounding box together a class label (optional). $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] $optional : [ 'label' ] ObjectDetectionSample : # Each sample contains an image together with a list of local objects. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] Data samples: data : sample-type : ObjectDetectionSample[cdom=MyClassDom] samples : - image : \"xyz/0001.jpg\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 }","title":"Object Detection"},{"location":"examples/cv/#object-detection-with-scene-classification","text":"In certain applications, scene classification (at the image level) and object detection are combined into a joint task. For such a task, we can have two class domains, say SceneDom and ObjectDom , respectively for scene classes and object classes. Sample class definition: SceneAndObjectSample : # Each samples contains an image, a scene label (optional) # together with a list of local objects. $def : struct $params : [ 'scenedom' , 'objectdom' ] $fields : image : Image sclabel : Label[dom=$scenedom] objects : List[LocalObjectEntry[cdom=$objectdom]] $optional : [ 'sclabel' ] Data samples: data : sample-type : SceneAndObjectSample[scenedom=SceneDom, objectdom=ObjectDom] samples : - image : \"xyz/0001.jpg\" sclabel : \"street\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" sclabel : \"river\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 }","title":"Object Detection with Scene Classification"},{"location":"examples/cv/#image-segmentation","text":"The image segmentation task is to assign pixel-wise labels to an image. A common practice is to use a labelmap, which is stored as an unstructured object in an external file. Sample class definition: ImageSegmentationSample : # Each sample contains an image together with a label map. $def : struct $params : [ 'cdom' ] $fields : image : Image labelmap : LabelMap[dom=$cdom] Data samples: data : sample-type : ImageSegmentationSample[cdom=MyClassDom] samples : - { image : \"imgs/0001.jpg\" , labelmap : \"maps/0001.ppm\" } - { image : \"imgs/0002.jpg\" , labelmap : \"maps/0002.ppm\" } - { image : \"imgs/0003.jpg\" , labelmap : \"maps/0003.ppm\" }","title":"Image Segmentation"},{"location":"lang/basic_types/","text":"Basic Types Basic types are the types for basic elements in DSDL. The instances of basic types serve as the basic building blocks of a data set description. Note : The underlying language, namely JSON and YAML, provides several primitive literals, such as boolean, number, string. While using such literals to express values, DSDL maintains its own basic types. It is important to note that association between DSDL basic types and JSON primitive types is NOT one-to-one. Different DSDL basic types can adopt the same primitive type for expressing their values. For example, object locators and labels are of different types ( Loc and Label in this example) in DSDL, but they both use strings for expressing values. Generic basic types DSDL defines four generic basic types. The values of such types are simply interpreted, without special meaning. Bool : boolean type, which can take either of the two values: true and false . Int : integer type, which can take any integral values, such as 12 , -3 , or 0 . When a number has the Int type, the DSDL interpreter should verify if it is actually an integer. Num : general numeric type, which can take any numeric values, such as 12.5 , -13 , 1.25e-6 . Str : string type, which can take arbitrary strings, such as \"hello\" , \"a\" , \"\" . Special basic types DSDL defines a collection of basic types with special meanings. The values of these types are also expressed as strings or other common JSON forms, but they have specific semantics and DSDL interpreter will interpret them accordingly. Coord : 2D coordinate in the form of [x, y] . Coord3D```: 3D coordinate in the form of [x, y, z]``. Interval : sequential interval in the form of [begin, end] . BBox : bounding box in the form of [x, y, w, h] . Polygon : polygon represented in the form of a series of 2D coordinates as [[x1, y1], [x2, y2], ...] . Date : date represented by a string, according to the strftime spec . Time : time represented by a string, according to the strftime spec . Label: class label type Classification is a common way to endow an object with semantic meaning. In this approach, class labels are often used to express the category which an object belongs to. In DSDL, class labels are strings with type Label . In practice, labels in different classification domains are different. DSDL introduces the concept of class domain to represent different contexts for classification. Each class domain provides a class list or a class hierarchy. Given a class domain, the labels are can be expressed in either of the following two forms: name-based : with format \"<class-domain>::<class-name>\" , e.g. \"COCO::cat\" represents the class cat in the COCO domain. index-based : with format \"<class-domain>[class-index]\" , e.g. \"COCO[3]\" represents thr 3rd class in the COCO domain. For a class domain with a multi-level class hierarchy, the class label can be expressed as a dot-delimited path, such as \"MyDom::animal.dog.hound\" or \"MyDom[3.2.5]\" . Note : We are working on unifying class systems for specific areas. The efforts would result in a standard classification domain. We reserve the domain name std for this. Loc: object locator type Object locators are used as references to unstructured objects, such as images, videos, and texts. They are instances of the type Loc , and are represented by a specially-formatted string. Specifically, DSDL supports three ways to express an object locator: relative path : the path relative to the root data path. This is the default way. When there is no special prefix, an object locator string will be treated as a relative path. For example, \"abc/001.jpg\" will be interpreted as \"<data-root>/abc/001.jpg\" , where data-root is the root directory where all data objects are stored and can be specified via environment configurations. alias path : when a data set comprises data objects stored in multiple source directories, one can use alias to simplify the expression of paths, e.g. \"$mydir1/abc/001.jpg\" , where $ implies that mydir1 is an alias, which should be specified by either by a global variable in the description file or by an environment variable. object id : a string with prefix :: , e.g. \"::cuhk.ie::abcd1234xyz\" , where cuhk.ie is the name of a data domain, while abcd1234xyz is an ID string which uniquely identifies an data object in the data domain. When object ids are used, the data platform needs to provide a Key-value mapping facility to map an ID string to the corresponding actual address. Using type parameters From the standpoint of the DSDL interpretator, the type of an element determines how that element is intepreted and validated. In addition to the type name itself, DSDL allows one to provide type parameters to customize how the corresponding elements should be expressed, interpreted, and validated. Label type with parameters In the example in {ref} get_started , the field label of ImageClassificationSample has the type specified as Label[dom=MyClassDom] . Here, Label is a parametric type , which accepts a type parameter dom . This dom parameter specifies the class domain where the label comes from. When the domain is explicitly given (here it is given as MyClassDom ), there is no need to provide the class domain names in the values, and thus the labels can be expressed as either the class name or the index. For example, a value \"cat\" indicates the fully qualified label \"MyClassDom::cat\" ; an integer value 2 indicates the class label \"MyClassDom[2]\" . Date and Time types with parameters For Date and Time types, when no parameters are explicitly provided, the values should conform to the ISO 8601 format. The interpreter will invoke date.fromisoformat and time.fromisoformat methods to parse the string. One can also specify a customized format using the type parameter fmt . For example, one can use a type Time[fmt=\"%H:%M\"] , which requires the value should follow the %H:%M format, e.g. \"15:32\" . When fmt is explicitly specified, the value of fmt will be fed to strptime function to parse the time string. Note that this parameter also works for Date type. List type DSDL provides a parametric type List to express unordered or ordered lists. Specifically, an instance of List is a list that contains multiple elements of a certain element type. The parametric type List has two parameters: etype : the type of each individual element. This parameter must be explicitly specified. ordered : whether there is an sequential order among elements. This parameter is optional, and its default value is false . This need should only be set to true for truly sequential types, e.g. sequence of video frames or time series. For example, for a list of integers, we can specify the type as List[Int] ; for a list of class labels within the domain MyClassDom , we can specify the type as List[Label[MyClassDom]] .","title":"Basic Types"},{"location":"lang/basic_types/#basic-types","text":"Basic types are the types for basic elements in DSDL. The instances of basic types serve as the basic building blocks of a data set description. Note : The underlying language, namely JSON and YAML, provides several primitive literals, such as boolean, number, string. While using such literals to express values, DSDL maintains its own basic types. It is important to note that association between DSDL basic types and JSON primitive types is NOT one-to-one. Different DSDL basic types can adopt the same primitive type for expressing their values. For example, object locators and labels are of different types ( Loc and Label in this example) in DSDL, but they both use strings for expressing values.","title":"Basic Types"},{"location":"lang/basic_types/#generic-basic-types","text":"DSDL defines four generic basic types. The values of such types are simply interpreted, without special meaning. Bool : boolean type, which can take either of the two values: true and false . Int : integer type, which can take any integral values, such as 12 , -3 , or 0 . When a number has the Int type, the DSDL interpreter should verify if it is actually an integer. Num : general numeric type, which can take any numeric values, such as 12.5 , -13 , 1.25e-6 . Str : string type, which can take arbitrary strings, such as \"hello\" , \"a\" , \"\" .","title":"Generic basic types"},{"location":"lang/basic_types/#special-basic-types","text":"DSDL defines a collection of basic types with special meanings. The values of these types are also expressed as strings or other common JSON forms, but they have specific semantics and DSDL interpreter will interpret them accordingly. Coord : 2D coordinate in the form of [x, y] . Coord3D```: 3D coordinate in the form of [x, y, z]``. Interval : sequential interval in the form of [begin, end] . BBox : bounding box in the form of [x, y, w, h] . Polygon : polygon represented in the form of a series of 2D coordinates as [[x1, y1], [x2, y2], ...] . Date : date represented by a string, according to the strftime spec . Time : time represented by a string, according to the strftime spec .","title":"Special basic types"},{"location":"lang/basic_types/#label-class-label-type","text":"Classification is a common way to endow an object with semantic meaning. In this approach, class labels are often used to express the category which an object belongs to. In DSDL, class labels are strings with type Label . In practice, labels in different classification domains are different. DSDL introduces the concept of class domain to represent different contexts for classification. Each class domain provides a class list or a class hierarchy. Given a class domain, the labels are can be expressed in either of the following two forms: name-based : with format \"<class-domain>::<class-name>\" , e.g. \"COCO::cat\" represents the class cat in the COCO domain. index-based : with format \"<class-domain>[class-index]\" , e.g. \"COCO[3]\" represents thr 3rd class in the COCO domain. For a class domain with a multi-level class hierarchy, the class label can be expressed as a dot-delimited path, such as \"MyDom::animal.dog.hound\" or \"MyDom[3.2.5]\" . Note : We are working on unifying class systems for specific areas. The efforts would result in a standard classification domain. We reserve the domain name std for this.","title":"Label: class label type"},{"location":"lang/basic_types/#loc-object-locator-type","text":"Object locators are used as references to unstructured objects, such as images, videos, and texts. They are instances of the type Loc , and are represented by a specially-formatted string. Specifically, DSDL supports three ways to express an object locator: relative path : the path relative to the root data path. This is the default way. When there is no special prefix, an object locator string will be treated as a relative path. For example, \"abc/001.jpg\" will be interpreted as \"<data-root>/abc/001.jpg\" , where data-root is the root directory where all data objects are stored and can be specified via environment configurations. alias path : when a data set comprises data objects stored in multiple source directories, one can use alias to simplify the expression of paths, e.g. \"$mydir1/abc/001.jpg\" , where $ implies that mydir1 is an alias, which should be specified by either by a global variable in the description file or by an environment variable. object id : a string with prefix :: , e.g. \"::cuhk.ie::abcd1234xyz\" , where cuhk.ie is the name of a data domain, while abcd1234xyz is an ID string which uniquely identifies an data object in the data domain. When object ids are used, the data platform needs to provide a Key-value mapping facility to map an ID string to the corresponding actual address.","title":"Loc: object locator type"},{"location":"lang/basic_types/#using-type-parameters","text":"From the standpoint of the DSDL interpretator, the type of an element determines how that element is intepreted and validated. In addition to the type name itself, DSDL allows one to provide type parameters to customize how the corresponding elements should be expressed, interpreted, and validated. Label type with parameters In the example in {ref} get_started , the field label of ImageClassificationSample has the type specified as Label[dom=MyClassDom] . Here, Label is a parametric type , which accepts a type parameter dom . This dom parameter specifies the class domain where the label comes from. When the domain is explicitly given (here it is given as MyClassDom ), there is no need to provide the class domain names in the values, and thus the labels can be expressed as either the class name or the index. For example, a value \"cat\" indicates the fully qualified label \"MyClassDom::cat\" ; an integer value 2 indicates the class label \"MyClassDom[2]\" . Date and Time types with parameters For Date and Time types, when no parameters are explicitly provided, the values should conform to the ISO 8601 format. The interpreter will invoke date.fromisoformat and time.fromisoformat methods to parse the string. One can also specify a customized format using the type parameter fmt . For example, one can use a type Time[fmt=\"%H:%M\"] , which requires the value should follow the %H:%M format, e.g. \"15:32\" . When fmt is explicitly specified, the value of fmt will be fed to strptime function to parse the time string. Note that this parameter also works for Date type.","title":"Using type parameters"},{"location":"lang/basic_types/#list-type","text":"DSDL provides a parametric type List to express unordered or ordered lists. Specifically, an instance of List is a list that contains multiple elements of a certain element type. The parametric type List has two parameters: etype : the type of each individual element. This parameter must be explicitly specified. ordered : whether there is an sequential order among elements. This parameter is optional, and its default value is false . This need should only be set to true for truly sequential types, e.g. sequence of video frames or time series. For example, for a list of integers, we can specify the type as List[Int] ; for a list of class labels within the domain MyClassDom , we can specify the type as List[Label[MyClassDom]] .","title":"List type"},{"location":"lang/get_started/","text":"Get Started In DSDL, a data set is described by a data set description file . Below is an example that illustrates a typical data set description file. The data set description file can be in either JSON or YAML format. JSON Format: { \"$dsdl-version\" : \"0.5.0\" , \"meta\" : { \"name\" : \"my-dataset\" , \"creator\" : \"my-team\" , \"dataset-version\" : \"1.0.0\" }, \"defs\" : { \"MyClassDom\" : { \"$def\" : \"class_domain\" , \"classes\" : [ \"dog\" , \"cat\" , \"fish\" , \"tiger\" ] }, \"ImageClassificationSample\" : { \"$def\" : \"struct\" , \"$fields\" : { \"image\" : \"Image\" , \"label\" : \"Label[dom=MyClassDom]\" } } }, \"data\" : { \"sample-type\" : \"ImageClassificationSample\" , \"samples\" : [ { \"image\" : \"xyz/0001.jpg\" , \"label\" : \"cat\" }, { \"image\" : \"xyz/0002.jpg\" , \"label\" : \"dog\" } ] } } YAML format: $dsdl-version : \"0.5.0\" meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } Both JSON and YAML formats can express exactly the same data structure. Due to YAML's more concise form and that it allows comments, we will use YAML as the default format in later examples of this document, which can be easily translated into JSON format. At the top level, the file consists of four parts: header specifies about how the description file should be interpreted; meta section provides meta information about the data set; defs section provides global definitions, e.g. user-defined types; data section describes the data contained in the data set. Note : The property names with a prefix $ are reserved by DSDL for special meaning. DSDL version (the property with name $dsdl-version in the header) must be explicitly specified. It is crucial for the DSDL interpreter to know the language version in order to interpret the description correctly. The definition for common types are often provided in standard or extended libraries. In most cases, users don't need to define their own types. In this example, we define ImageClassificationSample just for the purpose of illustration and being self-contained.","title":"Get Started"},{"location":"lang/get_started/#get-started","text":"In DSDL, a data set is described by a data set description file . Below is an example that illustrates a typical data set description file. The data set description file can be in either JSON or YAML format. JSON Format: { \"$dsdl-version\" : \"0.5.0\" , \"meta\" : { \"name\" : \"my-dataset\" , \"creator\" : \"my-team\" , \"dataset-version\" : \"1.0.0\" }, \"defs\" : { \"MyClassDom\" : { \"$def\" : \"class_domain\" , \"classes\" : [ \"dog\" , \"cat\" , \"fish\" , \"tiger\" ] }, \"ImageClassificationSample\" : { \"$def\" : \"struct\" , \"$fields\" : { \"image\" : \"Image\" , \"label\" : \"Label[dom=MyClassDom]\" } } }, \"data\" : { \"sample-type\" : \"ImageClassificationSample\" , \"samples\" : [ { \"image\" : \"xyz/0001.jpg\" , \"label\" : \"cat\" }, { \"image\" : \"xyz/0002.jpg\" , \"label\" : \"dog\" } ] } } YAML format: $dsdl-version : \"0.5.0\" meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } Both JSON and YAML formats can express exactly the same data structure. Due to YAML's more concise form and that it allows comments, we will use YAML as the default format in later examples of this document, which can be easily translated into JSON format. At the top level, the file consists of four parts: header specifies about how the description file should be interpreted; meta section provides meta information about the data set; defs section provides global definitions, e.g. user-defined types; data section describes the data contained in the data set. Note : The property names with a prefix $ are reserved by DSDL for special meaning. DSDL version (the property with name $dsdl-version in the header) must be explicitly specified. It is crucial for the DSDL interpreter to know the language version in order to interpret the description correctly. The definition for common types are often provided in standard or extended libraries. In most cases, users don't need to define their own types. In this example, we define ImageClassificationSample just for the purpose of illustration and being self-contained.","title":"Get Started"},{"location":"lang/libraries/","text":"Libraries Whereas we are already trying to simplify the design of DSDL, some efforts remain needed to learn how to define classes in DSDL. However, we understand that most AI researchers or developers don't want to learn yet another language. Hence, we introduce libraries to further simplify the process of data set description. Define and import a library Consider the example in {ref} get_started , the part that defines the class ImageClassificationSample is quite generic and can be used in many data sets. Hence, we can extract it to a library file , while the data set description file can just import it. In general, a library file is a file in YAML or JSON format that provides a collection of definitions. In the example above, we can provide a library file named imageclass.yaml as follows: # file: imageclass.yaml # DSDL version is mandatory here. $dsdl-version : \"0.5.0\" # -- below are definitions -- MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] Note : This library file should be placed in the default library path so the system can find it. One can also supply additional library paths by setting an environment variable DSDL_LIBRARY_PATH . Then the data set description can be simplified by importing the library, as follows: $dsdl-version : \"0.5.0\" $import : - imageclass meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } Here, we use an $import directive in the header section. The content of $import should be a list, which means that one can import multiple files. Note : When multiple library files being imported contain definitions of the same name, then the definition imported later will overwrite previous ones. In this case, the interpreter should raise a warning. Better Practice of Using Libraries Here are some good practice for defining a DSDL library: Define generic classes: As discussed in :ref: parametric_class , it is not a good idea to involving specific settings of parameters in a generic class definition. Hence, it is strongly suggested that one defines a parametric class if the class requires specific information related to a particular application ( e.g. class domains) in order to be completed. Grouped definitions: It is advisable to put multiple definitions related to a certain area into one library file. This is makes it easier to distribute and import. Documentation: Document the definitions to make it easier for users to understand. Below is an example where we put multiple classes related to visual recognition into a single library file: # file: visualrecog.yaml ImageClassificationSample : # Each image classification sample contains an image and a label. $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] LocalObjectEntry : # Each local object entry contains a bounding box and a label. $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : # Each object detection sample contains an image and a list of local object entries. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] With this library, one can write a data set description as follows: $dsdl-version : \"0.5.0\" $import : - visualrecog meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } Since MyClassDom is a specific definition only used in this dataset. Hence, it is fine to define it in the description file itself as a customized definition, while importing common classes from a library. Note : The library visualrecog is an example just for illustration. Along with DSDL, we provide a standard library named cv that contains a rich collection of definitions related to computer vision, including various types and commonly used class domains, etc.","title":"Libraries"},{"location":"lang/libraries/#libraries","text":"Whereas we are already trying to simplify the design of DSDL, some efforts remain needed to learn how to define classes in DSDL. However, we understand that most AI researchers or developers don't want to learn yet another language. Hence, we introduce libraries to further simplify the process of data set description.","title":"Libraries"},{"location":"lang/libraries/#define-and-import-a-library","text":"Consider the example in {ref} get_started , the part that defines the class ImageClassificationSample is quite generic and can be used in many data sets. Hence, we can extract it to a library file , while the data set description file can just import it. In general, a library file is a file in YAML or JSON format that provides a collection of definitions. In the example above, we can provide a library file named imageclass.yaml as follows: # file: imageclass.yaml # DSDL version is mandatory here. $dsdl-version : \"0.5.0\" # -- below are definitions -- MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] Note : This library file should be placed in the default library path so the system can find it. One can also supply additional library paths by setting an environment variable DSDL_LIBRARY_PATH . Then the data set description can be simplified by importing the library, as follows: $dsdl-version : \"0.5.0\" $import : - imageclass meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } Here, we use an $import directive in the header section. The content of $import should be a list, which means that one can import multiple files. Note : When multiple library files being imported contain definitions of the same name, then the definition imported later will overwrite previous ones. In this case, the interpreter should raise a warning.","title":"Define and import a library"},{"location":"lang/libraries/#better-practice-of-using-libraries","text":"Here are some good practice for defining a DSDL library: Define generic classes: As discussed in :ref: parametric_class , it is not a good idea to involving specific settings of parameters in a generic class definition. Hence, it is strongly suggested that one defines a parametric class if the class requires specific information related to a particular application ( e.g. class domains) in order to be completed. Grouped definitions: It is advisable to put multiple definitions related to a certain area into one library file. This is makes it easier to distribute and import. Documentation: Document the definitions to make it easier for users to understand. Below is an example where we put multiple classes related to visual recognition into a single library file: # file: visualrecog.yaml ImageClassificationSample : # Each image classification sample contains an image and a label. $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] LocalObjectEntry : # Each local object entry contains a bounding box and a label. $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : # Each object detection sample contains an image and a list of local object entries. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] With this library, one can write a data set description as follows: $dsdl-version : \"0.5.0\" $import : - visualrecog meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } Since MyClassDom is a specific definition only used in this dataset. Hence, it is fine to define it in the description file itself as a customized definition, while importing common classes from a library. Note : The library visualrecog is an example just for illustration. Along with DSDL, we provide a standard library named cv that contains a rich collection of definitions related to computer vision, including various types and commonly used class domains, etc.","title":"Better Practice of Using Libraries"},{"location":"lang/structs/","text":"Struct Classes Structs are the most common way to represent composite entities. For example, a typical sample in a data set is comprised of multiple elements, e.g. an image with a class label. Hence, structs are a good fit for representing data samples or its composite components. DSDL allows one to define struct classes to provide an abstraction for a particular type of structs. Define a struct class In DSDL, one can define a customized struct class in the defs section of a data set description file. In the example in {ref} get_started , we defined a struct class named ImageClassificationSample as follows: ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] This class definition is a JSON object, with the following properties: $defs : its value must be \"struct\" , indicating that it is defining a struct class. $fields : its value must be a JSON object containing a set of properties, each corresponding to a field. In particular, for each property of $field , the key will be considered as the field name, while the value is the specification of the corresponding field. The field specification can be given in two ways: Just the type name : just give the type name of the field (if that type involves parameters, then the parameters will be set in the default way). With parameters : one can also specify certain type parameters using a JSON object, which contains a $type property to specify the type name, and other properties to specify the settings of type parameters. See thet label field specification above. Nested structs In DSDL, structs can be nested. For example, an object detection sample may be comprised of an image together with a set of \"local objects\", where each local object can be represented by a struct with a bounding box and a class label. For such a sample, we can define a struct class as follows: LocalObjectEntry : # Each entry refers to an individual detected object on an image. $def : struct $fields : bbox : BBox label : Label[dom=MyClassDom] ObjectDetectionSample : # Each sample contains the detection results on an image. $def : struct $fields : image : Image objects : List[etype=LocalObjectEntry] Here, the structs of class LocalObjectEntry are embedded into the struct of class ObjectDetectionSample . Parametric struct classes Note that in the example above, the struct class LocalObjectEntry uses a specific class domain MyClassDom , while the struct class ObjectDetectionSample , as it nests LocalObjectEntry , also assumes the use of this particular class domain. Hence, such definitions are not generic. To use another class domain, one has to rewrite both classes. DSDL provides parametric struct classes to address this problem. Specifically, a parametric struct class can be considered as a class template, which allows the setting of certain parameters when the class is used. With parametric struct classes, we can define classes in a more generic way. Take the object detection example for instance. We can re-define the classes above as follows: LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] Here, we introduce a property $params in struct class definition. When the $params property is explicitly given and non-empty, then the corresponding struct class is parametric . Note that when a parametric class is used, its parameters must be given in order to make it into a concrete class . Particularly, in the LocalObjectEntry class above, we introduce a class parameter cdom , which are used in specifying the domain attribute of label . Note that when a class parameter is used, it should be enclosed by [] . Then, the class ObjectDetectionSample is also defined as a parametric struct class with a parameter cdom , and the parameter is used when specifying the type of objects . With such class definitions, we can write the set of data samples as follows: data : sample-type : $type : ObjectDetectionSample cdom : MyClassDom samples : - image : \"abc/0001.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 1 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - image : \"abc/0002.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 3 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - { bbox : [ 4 , 3 , 5 , 8 ], label : 3 } Note that with the parameter cdom is given as MyClassDom , the parametric class ObjectDetectionSample is made into a concrete class and used in sample type specification.","title":"Struct Classes"},{"location":"lang/structs/#struct-classes","text":"Structs are the most common way to represent composite entities. For example, a typical sample in a data set is comprised of multiple elements, e.g. an image with a class label. Hence, structs are a good fit for representing data samples or its composite components. DSDL allows one to define struct classes to provide an abstraction for a particular type of structs.","title":"Struct Classes"},{"location":"lang/structs/#define-a-struct-class","text":"In DSDL, one can define a customized struct class in the defs section of a data set description file. In the example in {ref} get_started , we defined a struct class named ImageClassificationSample as follows: ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] This class definition is a JSON object, with the following properties: $defs : its value must be \"struct\" , indicating that it is defining a struct class. $fields : its value must be a JSON object containing a set of properties, each corresponding to a field. In particular, for each property of $field , the key will be considered as the field name, while the value is the specification of the corresponding field. The field specification can be given in two ways: Just the type name : just give the type name of the field (if that type involves parameters, then the parameters will be set in the default way). With parameters : one can also specify certain type parameters using a JSON object, which contains a $type property to specify the type name, and other properties to specify the settings of type parameters. See thet label field specification above.","title":"Define a struct class"},{"location":"lang/structs/#nested-structs","text":"In DSDL, structs can be nested. For example, an object detection sample may be comprised of an image together with a set of \"local objects\", where each local object can be represented by a struct with a bounding box and a class label. For such a sample, we can define a struct class as follows: LocalObjectEntry : # Each entry refers to an individual detected object on an image. $def : struct $fields : bbox : BBox label : Label[dom=MyClassDom] ObjectDetectionSample : # Each sample contains the detection results on an image. $def : struct $fields : image : Image objects : List[etype=LocalObjectEntry] Here, the structs of class LocalObjectEntry are embedded into the struct of class ObjectDetectionSample .","title":"Nested structs"},{"location":"lang/structs/#parametric-struct-classes","text":"Note that in the example above, the struct class LocalObjectEntry uses a specific class domain MyClassDom , while the struct class ObjectDetectionSample , as it nests LocalObjectEntry , also assumes the use of this particular class domain. Hence, such definitions are not generic. To use another class domain, one has to rewrite both classes. DSDL provides parametric struct classes to address this problem. Specifically, a parametric struct class can be considered as a class template, which allows the setting of certain parameters when the class is used. With parametric struct classes, we can define classes in a more generic way. Take the object detection example for instance. We can re-define the classes above as follows: LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] Here, we introduce a property $params in struct class definition. When the $params property is explicitly given and non-empty, then the corresponding struct class is parametric . Note that when a parametric class is used, its parameters must be given in order to make it into a concrete class . Particularly, in the LocalObjectEntry class above, we introduce a class parameter cdom , which are used in specifying the domain attribute of label . Note that when a class parameter is used, it should be enclosed by [] . Then, the class ObjectDetectionSample is also defined as a parametric struct class with a parameter cdom , and the parameter is used when specifying the type of objects . With such class definitions, we can write the set of data samples as follows: data : sample-type : $type : ObjectDetectionSample cdom : MyClassDom samples : - image : \"abc/0001.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 1 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - image : \"abc/0002.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 3 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - { bbox : [ 4 , 3 , 5 , 8 ], label : 3 } Note that with the parameter cdom is given as MyClassDom , the parametric class ObjectDetectionSample is made into a concrete class and used in sample type specification.","title":"Parametric struct classes"},{"location":"lang/unstructured_objs/","text":"Unstructured Object Classes Unstructured objects , such as images, videos, audios, point clouds, and texts, are digital representations of real-world objects. Despite their rich internal structures, they are treated as a whole in a data set description and their internal structures are not manifested. In DSDL, an unstructured object class provides an abstraction for all unstructured objects of a particular kind. Pre-defined unstructured object classes With the standard library, DSDL provides the following unstructured object classes out of the box: Image : each instance is an image that can be represented as a matrix of pixels. Video : each instance can be decoded into a sequence of frames, where each frame is an image. Audio : each instance an audio signal that can be represented as a wave sequence. Text : each instance is a sequence of words. PointCloud : each instance is a set of 3D points, which represents the shape of a 3D entity. LabelMap : each instance is a matrix of integer labels, where each label corresponds to a class. Describe an unstructured object In DSDL, an unstructured object can be specified with an object locator together with an optional descriptor that provides additional information about the object. Take an image stored at abc/0001.jpg for example. It can be expressed in either of the following ways: Just the object locator : simply use the object locator \"abc/0001.jpg\" . When a variable or a field has an unstructured object class type and its value is a string, then that string will be interpreted as an object locator. With a descriptor : if one wants to provide additional information, say the size and the color format, then it can be expressed with an JSON object with two properties $loc and $descr , like the following: $loc : \"abc/0001.jpg\" $descr : size : [ 640 , 480 ] color : \"rgb\" Here, the descriptive information is provided via the $descr field, which will be used by the object loader of the corresponding unstructured object classes. Extended unstructured object classes DSDL allows one to register extended unstructured object classes by specifying how to load the object from storage. At the client side, this can be accomplished by defining a sub-class of an abstract base class UnstructuredObject and implementing the load method for object loading. Specifically, in Python, the abstract base class UnstructuredObject are defined as follows. from abc import ABC , abstractmethod class UnstructuredObject ( ABC ): \"\"\"Abstract base class for unstructured objects.\"\"\" @abstractmethod def load ( file , descr ): \"\"\"Load an unstructured object from a given file-like object. Arguments: file: file-like, from which the unstructured object is loaded. descr: dict-like, which provides the descriptive information. Returns: The loaded object. \"\"\" pass Note : Note here that this load method accepts an file-like object, which is already open, instead of a file path. The design is based on the \"Separation of Concerns\" principle: it is the responsibility of the data system to interpret the object locator and construct a file reader accordingly. A specific subclass of UnstructuredObject only needs to care about how to load, interpret, and validate the object given a file reader.","title":"Unstructured Object Classes"},{"location":"lang/unstructured_objs/#unstructured-object-classes","text":"Unstructured objects , such as images, videos, audios, point clouds, and texts, are digital representations of real-world objects. Despite their rich internal structures, they are treated as a whole in a data set description and their internal structures are not manifested. In DSDL, an unstructured object class provides an abstraction for all unstructured objects of a particular kind.","title":"Unstructured Object Classes"},{"location":"lang/unstructured_objs/#pre-defined-unstructured-object-classes","text":"With the standard library, DSDL provides the following unstructured object classes out of the box: Image : each instance is an image that can be represented as a matrix of pixels. Video : each instance can be decoded into a sequence of frames, where each frame is an image. Audio : each instance an audio signal that can be represented as a wave sequence. Text : each instance is a sequence of words. PointCloud : each instance is a set of 3D points, which represents the shape of a 3D entity. LabelMap : each instance is a matrix of integer labels, where each label corresponds to a class.","title":"Pre-defined unstructured object classes"},{"location":"lang/unstructured_objs/#describe-an-unstructured-object","text":"In DSDL, an unstructured object can be specified with an object locator together with an optional descriptor that provides additional information about the object. Take an image stored at abc/0001.jpg for example. It can be expressed in either of the following ways: Just the object locator : simply use the object locator \"abc/0001.jpg\" . When a variable or a field has an unstructured object class type and its value is a string, then that string will be interpreted as an object locator. With a descriptor : if one wants to provide additional information, say the size and the color format, then it can be expressed with an JSON object with two properties $loc and $descr , like the following: $loc : \"abc/0001.jpg\" $descr : size : [ 640 , 480 ] color : \"rgb\" Here, the descriptive information is provided via the $descr field, which will be used by the object loader of the corresponding unstructured object classes.","title":"Describe an unstructured object"},{"location":"lang/unstructured_objs/#extended-unstructured-object-classes","text":"DSDL allows one to register extended unstructured object classes by specifying how to load the object from storage. At the client side, this can be accomplished by defining a sub-class of an abstract base class UnstructuredObject and implementing the load method for object loading. Specifically, in Python, the abstract base class UnstructuredObject are defined as follows. from abc import ABC , abstractmethod class UnstructuredObject ( ABC ): \"\"\"Abstract base class for unstructured objects.\"\"\" @abstractmethod def load ( file , descr ): \"\"\"Load an unstructured object from a given file-like object. Arguments: file: file-like, from which the unstructured object is loaded. descr: dict-like, which provides the descriptive information. Returns: The loaded object. \"\"\" pass Note : Note here that this load method accepts an file-like object, which is already open, instead of a file path. The design is based on the \"Separation of Concerns\" principle: it is the responsibility of the data system to interpret the object locator and construct a file reader accordingly. A specific subclass of UnstructuredObject only needs to care about how to load, interpret, and validate the object given a file reader.","title":"Extended unstructured object classes"},{"location":"template/cv/","text":"Computer Vision","title":"Computer Vision"},{"location":"template/cv/#computer-vision","text":"","title":"Computer Vision"},{"location":"template/nlp/","text":"Natural Language Processing","title":"Natural Language Processing"},{"location":"template/nlp/#natural-language-processing","text":"","title":"Natural Language Processing"},{"location":"zh/","text":"\u6570\u636e \u662f\u4eba\u5de5\u667a\u80fd\u7684\u57fa\u77f3\u3002\u6570\u636e\u83b7\u53d6\u3001\u4f20\u64ad\u548c\u4f7f\u7528\u7684\u6548\u7387\u76f4\u63a5\u5f71\u54cd\u79d1\u6280\u53d1\u5c55\u548c\u5e94\u7528\u8fdb\u6b65\u3002\u5728\u4eba\u5de5\u667a\u80fd\u6f2b\u957f\u5386\u53f2\u4e2d\uff0c\u5927\u91cf\u7684\u6570\u636e\u96c6\u88ab\u5236\u9020\u548c\u53d1\u5e03\u63a8\u52a8\u6574\u4e2a\u9886\u57df\u7684\u53d1\u5c55\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u6570\u636e\u96c6\u57fa\u4e8e\u4e0d\u540c\u7684\u5f62\u5f0f\u5b9a\u4e49\uff0c\u4f7f\u5f97\u5176\u5728\u4f20\u64ad\u3001\u878d\u5408\u548c\u4f7f\u7528\u65f6\u6210\u672c\u8f83\u9ad8\u3002\u8fd9\u901a\u5e38\u8868\u73b0\u4e3a\u6bcf\u4e2a\u4f7f\u7528\u8005/\u56e2\u961f\u9700\u8981\u5236\u5b9a\u4e00\u5957\u65b0\u7684\u683c\u5f0f\uff0c\u5f00\u53d1\u5b9a\u5236\u5316\u5de5\u5177\u6216\u811a\u672c\u5c06\u65b0\u7684\u6570\u636e\u96c6\u6807\u51c6\u5316\u5408\u5e76\u5230\u5df2\u6709\u7684\u5de5\u4f5c\u6d41\u3002 \u4e3a\u4e86\u514b\u670d\u4e0a\u8ff0\u95ee\u9898\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u4e00\u5957\u6570\u636e\u96c6\u63cf\u8ff0\u8bed\u8a00DSDL(Data Set Description Language)\u3002 1. \u8bbe\u8ba1\u76ee\u6807 DSDL\u7684\u8bbe\u8ba1\u76ee\u6807\u603b\u5171\u6709\u4e09\u70b9\uff1a \u901a\u7528\u6027(Generic) \uff0c \u4fbf\u643a\u6027(Portable) \uff0c\u4ee5\u53ca \u53ef\u62d3\u5c55\u6027(Extensible) \u3002\u4e09\u79cd\u7279\u6027\u603b\u79f0\u4e3a GPE \u3002 1.1 \u901a\u7528\u6027 \u8be5\u8bed\u8a00\u4e3b\u8981\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7edf\u4e00\u8868\u793a\u7684\u6807\u51c6\uff0c\u53ef\u4ee5\u8986\u76d6\u5404\u4e2a\u9886\u57df\u7684\u4eba\u5de5\u667a\u80fd\u6570\u636e\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u7279\u5b9a\u7684\u4e00\u79cd\u4efb\u52a1\u6216\u8005\u67d0\u4e2a\u9886\u57df\u8bbe\u8ba1\u3002\u8be5\u8bed\u8a00\u5e94\u8be5\u53ef\u4ee5\u7528\u4e00\u81f4\u7684\u683c\u5f0f\u6765\u8868\u8fbe\u4e0d\u540c\u6a21\u6001\u548c\u7ed3\u6784\u7684\u6570\u636e\u3002 1.2 \u4fbf\u643a\u6027 \u5199\u5b8c\u65e0\u9700\u4fee\u6539\uff0c\u968f\u5904\u5206\u53d1\u3002 \u6570\u636e\u96c6\u63cf\u8ff0\u53ef\u4ee5\u88ab\u5e7f\u6cdb\u7684\u5206\u53d1\u548c\u4ea4\u6362\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u5c31\u53ef\u4ee5\u5728\u5404\u79cd\u73af\u5883\u4e0b\u4f7f\u7528\u3002\u8fd9\u4e00\u76ee\u6807\u7684\u5b9e\u73b0\u5bf9\u4e8e\u5efa\u7acb\u5f00\u53d1\u7e41\u8363\u751f\u6001\u81f3\u5173\u91cd\u8981\u3002\u4e3a\u6b64\u6211\u4eec\u9700\u8981\u4ed4\u7ec6\u68c0\u67e5\u5b9e\u73b0\u7ec6\u8282\uff0c\u4f7f\u5176\u5bf9\u5e95\u5c42\u8bbe\u65bd\u6216\u7ec4\u7ec7\u65e0\u611f\u77e5\uff0c\u4ece\u800c\u53bb\u9664\u57fa\u4e8e\u7279\u5b9a\u5047\u8bbe\u7684\u65e0\u5fc5\u8981\u4f9d\u8d56\u3002 1.3 \u53ef\u62d3\u5c55\u6027 \u5728\u4e0d\u9700\u8981\u4fee\u6539\u6838\u5fc3\u6807\u51c6\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u62d3\u5c55\u8868\u8ff0\u7684\u8fb9\u754c\u3002\u5bf9\u4e8eC++\u6216\u8005Python\u7b49\u7f16\u7a0b\u8bed\u8a00\uff0c\u5e94\u7528\u8fb9\u754c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u94fe\u63a5\u5e93\u6216\u8005\u8f6f\u4ef6\u5305\u5f97\u4ee5\u663e\u8457\u62d3\u5c55\uff0c\u800c\u6838\u5fc3\u8bed\u6cd5\u53ef\u4ee5\u5728\u5f88\u957f\u7684\u65f6\u95f4\u5185\u4fdd\u6301\u7a33\u5b9a\u3002\u57fa\u4e8e\u94fe\u63a5\u5e93\u548c\u5305\uff0c\u53ef\u4ee5\u5f62\u6210\u4e30\u5bcc\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u4f7f\u5bf9\u5e94\u8bed\u8a00\u53ef\u4ee5\u957f\u65f6\u95f4\u4fdd\u6301\u6d3b\u8dc3\u5ea6\u548c\u53d1\u5c55\u3002 2. \u8bbe\u8ba1\u603b\u89c8 \u6570\u636e\u96c6\u672c\u8d28\u4e0a\u662f\u5b58\u50a8\u5728\u6c38\u4e45\u5b58\u50a8\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u3002\u901a\u5e38\u7531\u975e\u7ed3\u6784\u5316\u76ee\u6807\uff08\u5982\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u6587\u672c\u7b49\uff09\u548c\u4e0e\u4e4b\u5173\u8054\u7684\u6807\u6ce8\u7ec4\u6210\u3002\u8fd9\u4e9b\u5143\u7d20\u6309\u7167\u7279\u5b9a\u7684\u65b9\u5f0f\u7ec4\u5408\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8ff0\u63d0\u5230\u7684\u975e\u7ed3\u6784\u5316\u76ee\u6807\u901a\u5e38\u5305\u542b\u5927\u91cf\u7684\u6570\u636e\u3002\u4e3a\u4e86\u65b9\u4fbf\u6570\u636e\u7684\u5feb\u901f\u5206\u53d1\uff0c\u6211\u4eec\u7684\u8bbe\u8ba1\u5c06\u4e00\u4e2a\u6570\u636e\u96c6\u7684\u7ed3\u6784\u5316\u63cf\u8ff0\u4e0e\u975e\u7ed3\u6784\u5316\u5185\u5bb9\u5206\u79bb\u5f00\u3002 \u4e0b\u9762\u662f\u8bed\u8a00\u8bbe\u8ba1\u7684\u5168\u9762\u603b\u7ed3\uff1a 2.1 \u57fa\u7840\u6570\u636e\u6a21\u578b DSDL\u4f7f\u7528\u57fa\u672c\u5143\u7d20\u7684\u96c6\u5408\u6765\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u57fa\u672c\u5143\u7d20\u7531structs, lists, sets\u7b49\u5bb9\u5668\u7ec4\u6210\u3002 \u57fa\u7840\u5143\u7d20(Basic elements) \uff1a\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u72ec\u7acb\u5355\u5143\uff0c\u4e0d\u4ec5\u5305\u542b\u4e86\u8bf8\u5982\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u7840\u7c7b\u578b\uff0c\u4e5f\u5305\u542b\u4e86\u90a3\u4e9b\u53ef\u4ee5\u4fbf\u4e8e\u76ee\u6807\u5b9a\u4f4d\u3001\u6807\u6ce8\u7ed3\u679c\u8868\u8fbe\u7684\u5143\u7d20\u3002 \u975e\u7ed3\u6784\u5316\u76ee\u6807(Unstructured objects) \uff1a\u4f8b\u5982\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u6587\u672c\u7b49\u7279\u6b8a\u7684\u57fa\u672c\u5143\u7d20\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u5177\u4f53\u800c\u8a00\uff0c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7531\u76ee\u6807\u5b9a\u4f4d\u5668\u8868\u793a\uff0c\u7528\u6765\u6307\u5b9a\u5b83\u7684\u5b58\u653e\u4f4d\u7f6e\u800c\u4e0d\u662f\u5c06\u6574\u4e2a\u5a92\u4f53\u6587\u4ef6\u653e\u5165\u63cf\u8ff0\u4e2d\u3002\u53e6\u5916\uff0c\u53ef\u9009\u62e9\u7684\u989d\u5916\u63cf\u8ff0\u7b26\u53ef\u4ee5\u7528\u6765\u63d0\u4f9b\u76ee\u6807\u7684\u989d\u5916\u4fe1\u606f\uff0c\u4f8b\u5982\u4e00\u4e2a\u56fe\u50cf\u7684\u683c\u5f0f\u6216\u8005\u5206\u8fa8\u7387\u3002 \u805a\u5408\u4f53(Aggregates) \uff1a\u5c06\u57fa\u7840\u5143\u7d20\u7ec4\u5408\u6210\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002DSDL\u63d0\u4f9blist\u548cstruct\u7c7b\u578b\u6765\u8868\u793a\u6570\u636e\u7ed3\u6784\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5355\u4e2a\u6837\u672c\u7531\u4e00\u4e2a\u7ed3\u6784\u4f53\u8868\u793a\uff08\u591a\u4e2a\u5b57\u6bb5\u7684\u805a\u5408\uff09\uff0c\u800c\u6570\u636e\u96c6\u53c8\u7531\u4e00\u4e2a\u6837\u672c\u5217\u8868\u7ec4\u6210\u3002 2.2 \u62d3\u5c55\u7c7b\u578b\u7cfb\u7edf \u5728DSDL\u4e2d\uff0c\u6240\u6709\u7684\u5143\u7d20\u548c\u7ed3\u6784\u4f53\u5355\u5143\u90fd\u6709\u7c7b\u578b\u3002 DSDL\u91c7\u7528\u4e86\u4e00\u79cd\u7b80\u5355\u800c_\u6613\u62d3\u5c55_\u7684\u7c7b\u578b\u7cfb\u7edf\u3002\u5177\u4f53\u5730\uff0cDSDL\u6709\u4e09\u79cd\u7c7b\u578b\uff1a \u57fa\u7840\u7c7b\u578b(Primitive types) \uff1a\u5305\u542b\u5e03\u5c14\u7c7b\u578b\u3001\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u7840\u5143\u7d20\u503c\u7684\u7c7b\u578b\u3002 DSDL\u63d0\u4f9b\u4e86\u57fa\u7840\u7c7b\u578b\u7684\u7edf\u4e00\u5927\u96c6\u5408\u3002 \u975e\u7ed3\u6784\u76ee\u6807\u7c7b(Unstructured object classes) \uff1a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7684\u62bd\u8c61\u3002\u4f8b\u5982\uff1a\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u70b9\u4e91\u3001\u6587\u672c\u7b49\u7b49\u3002\u8fd9\u4e9b\u76ee\u6807\u5c3d\u7ba1\u5185\u90e8\u7ed3\u6784\u4e30\u5bcc\u591a\u6837\uff0c\u4f46\u5728\u6570\u636e\u96c6\u5b9a\u4e49\u4e2d\u4f1a\u88ab\u5f53\u6210\u4e0d\u53ef\u5206\u5272\u7684\u5355\u5143\u3002DSDL\u63d0\u4f9b\u4e00\u7cfb\u5217\u9884\u5b9a\u4e49\u597d\u7684\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u96c6\u5408\uff0c\u8986\u76d6\u5e38\u7528\u7684\u5e94\u7528\u573a\u666f\uff0c\u540c\u65f6\u5141\u8bb8\u5f00\u6e90\u529b\u91cf\u62d3\u5c55\u8be5\u96c6\u5408\uff0c\u901a\u8fc7\u6700\u5c0f\u63a5\u53e3\u96c6\u5408\u6ce8\u518c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\u3002 \u7ed3\u6784\u4f53\u7c7b(Struct classes) \uff1aDSDL\u4e2d\u805a\u5408\u6570\u636e\u7ed3\u6784\u7684\u62bd\u8c61\u3002\u7ed3\u6784\u4f53\u7c7b\u4e2d\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u88ab\u79f0\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53(struct)\uff0c\u5305\u542b\u591a\u4e2a\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u6709\u81ea\u5df1\u7c7b\u578b\u3002\u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8ff0\u6570\u636e\u6837\u672c\u3002DSDL\u4e3a\u6807\u51c6\u5e93\u4e2d\u7684\u5e38\u89c1\u4efb\u52a1\u63d0\u4f9b\u4e00\u5957\u9884\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u7c7b\uff0c\u540c\u65f6\u5141\u8bb8\u7528\u6237\u9488\u5bf9\u7279\u6b8a\u4efb\u52a1\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u3002 \u6ce8\u610f\uff1a\u7c7b\u578b\u5fc5\u987b\u5728\u4f7f\u7528\u524d\u88ab\u5b9a\u4e49\uff08\u65e0\u8bba\u662f\u5185\u7f6e\u7c7b\u578b\u3001\u7b2c\u4e09\u65b9\u5b9a\u4e49\u7c7b\u578b\uff0c\u53c8\u6216\u8005\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\uff09\u3002\u5faa\u73af\u5f15\u7528(circular references)\u5728\u5f53\u524dDSDL\u4e2d\u662f\u4e0d\u5141\u8bb8\u7684\u3002 2.3 \u76ee\u6807\u5b9a\u4f4d\u5668 (Object locators) \u5982\u524d\u6240\u8ff0\uff0c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u5e76\u6ca1\u6709\u5b8c\u5168\u5d4c\u5165\u5230\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u3002 \u5f85\u4e4b\u7531\u76ee\u6807\u5b9a\u4f4d\u5668\u6765\u8868\u793a\u3002\u5177\u4f53\u5730\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u3002\u5f53\u5bf9\u5e94\u7684\u76ee\u6807\u88ab\u52a0\u8f7d\u65f6\u4f1a\u7ecf\u8fc7DSDL\u89e3\u6790\u5668\u8f6c\u6362\u6210\u4e00\u4e2a\u771f\u6b63\u7684\u5730\u5740\u3002 \u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u5f15\u5165\u4f7f\u7528\u5206\u79bb\u6570\u636e\u96c6\u4e2d\u7ed3\u6784\u5316\u63cf\u8ff0\u548c\u975e\u7ed3\u6784\u5316\u5a92\u4f53\u6587\u4ef6\u7684\u5173\u952e\u3002\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u5f97\u65e0\u9700\u79fb\u52a8\u5927\u4f53\u91cf\u7684\u5a92\u4f53\u6570\u636e\uff0c\u4f7f\u6570\u636e\u96c6\u63cf\u8ff0\u5206\u53d1\u66f4\u52a0\u8f7b\u91cf\u5316\u3002\u4e0e\u6b64\u540c\u65f6\u5141\u8bb8\u5feb\u901f\u7684\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\uff1a\u7ec4\u5408\u591a\u4e2a\u96c6\u5408\u3001\u5408\u5e76\u5c5e\u6027\u6216\u8005\u53d6\u67d0\u4e2a\u5b50\u96c6\u3002 2.4 \u57fa\u4e8eYAML\u6216\u8005JSON DSDL\u5c5e\u4e8e\u7279\u5b9a\u9886\u57df\u7684\u8bed\u8a00\uff0c\u57fa\u4e8e\u5f53\u524d\u6d41\u884c\u7684\u6570\u636e\u4ea4\u4e92\u8bed\u8a00YAML\u6216\u8005JSON\u8fdb\u884c\u5b9a\u4e49\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cYAML\u6216JSON\u4e2d\u7684\u5143\u7d20\u5728\u8bed\u8a00\u7ea7\u522b\u4e0a\u5e76\u4e0d\u4e0e\u7279\u5b9a\u7684\u542b\u4e49\u76f8\u5173\u8054\u3002\u800c\u6211\u4eec\u901a\u8fc7\u8d4b\u4e88\u8fd9\u4e9b\u5143\u7d20\u4ee5\u7279\u5b9a\u8bed\u4e49\uff0cDSDL\u53ef\u4ee5\u4ee5\u4e00\u79cd\u6709\u610f\u4e49\u7684\u65b9\u5f0f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u4f7f\u5f97\u4f7f\u7528\u8005\u53ef\u4ee5\u4f7f\u7528YAML\u548cJSON\u8bed\u8a00\u5bf9\u5e94\u7684\u4e30\u5bcc\u5de5\u5177\u7cfb\u7edf\u3002\u57fa\u4e8e\u8fd9\u4e9b\u5de5\u5177\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6784\u5efa\u4e00\u5957\u5b8c\u6574\u7cfb\u7edf\uff1a\u652f\u6301\u89e3\u6790\u3001\u6821\u9a8c\u548c\u67e5\u8be2\u7b49\u529f\u80fd\uff0c\u5e76\u57fa\u4e8e\u4e92\u8054\u7f51\u751f\u6001\u7cfb\u7edf\u8fdb\u884c\u4fbf\u6377\u5730\u4ea4\u4e92\u3002","title":"Index"},{"location":"zh/#1","text":"DSDL\u7684\u8bbe\u8ba1\u76ee\u6807\u603b\u5171\u6709\u4e09\u70b9\uff1a \u901a\u7528\u6027(Generic) \uff0c \u4fbf\u643a\u6027(Portable) \uff0c\u4ee5\u53ca \u53ef\u62d3\u5c55\u6027(Extensible) \u3002\u4e09\u79cd\u7279\u6027\u603b\u79f0\u4e3a GPE \u3002","title":"1. \u8bbe\u8ba1\u76ee\u6807"},{"location":"zh/#11","text":"\u8be5\u8bed\u8a00\u4e3b\u8981\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7edf\u4e00\u8868\u793a\u7684\u6807\u51c6\uff0c\u53ef\u4ee5\u8986\u76d6\u5404\u4e2a\u9886\u57df\u7684\u4eba\u5de5\u667a\u80fd\u6570\u636e\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u7279\u5b9a\u7684\u4e00\u79cd\u4efb\u52a1\u6216\u8005\u67d0\u4e2a\u9886\u57df\u8bbe\u8ba1\u3002\u8be5\u8bed\u8a00\u5e94\u8be5\u53ef\u4ee5\u7528\u4e00\u81f4\u7684\u683c\u5f0f\u6765\u8868\u8fbe\u4e0d\u540c\u6a21\u6001\u548c\u7ed3\u6784\u7684\u6570\u636e\u3002","title":"1.1 \u901a\u7528\u6027"},{"location":"zh/#12","text":"\u5199\u5b8c\u65e0\u9700\u4fee\u6539\uff0c\u968f\u5904\u5206\u53d1\u3002 \u6570\u636e\u96c6\u63cf\u8ff0\u53ef\u4ee5\u88ab\u5e7f\u6cdb\u7684\u5206\u53d1\u548c\u4ea4\u6362\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u5c31\u53ef\u4ee5\u5728\u5404\u79cd\u73af\u5883\u4e0b\u4f7f\u7528\u3002\u8fd9\u4e00\u76ee\u6807\u7684\u5b9e\u73b0\u5bf9\u4e8e\u5efa\u7acb\u5f00\u53d1\u7e41\u8363\u751f\u6001\u81f3\u5173\u91cd\u8981\u3002\u4e3a\u6b64\u6211\u4eec\u9700\u8981\u4ed4\u7ec6\u68c0\u67e5\u5b9e\u73b0\u7ec6\u8282\uff0c\u4f7f\u5176\u5bf9\u5e95\u5c42\u8bbe\u65bd\u6216\u7ec4\u7ec7\u65e0\u611f\u77e5\uff0c\u4ece\u800c\u53bb\u9664\u57fa\u4e8e\u7279\u5b9a\u5047\u8bbe\u7684\u65e0\u5fc5\u8981\u4f9d\u8d56\u3002","title":"1.2 \u4fbf\u643a\u6027"},{"location":"zh/#13","text":"\u5728\u4e0d\u9700\u8981\u4fee\u6539\u6838\u5fc3\u6807\u51c6\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u62d3\u5c55\u8868\u8ff0\u7684\u8fb9\u754c\u3002\u5bf9\u4e8eC++\u6216\u8005Python\u7b49\u7f16\u7a0b\u8bed\u8a00\uff0c\u5e94\u7528\u8fb9\u754c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u94fe\u63a5\u5e93\u6216\u8005\u8f6f\u4ef6\u5305\u5f97\u4ee5\u663e\u8457\u62d3\u5c55\uff0c\u800c\u6838\u5fc3\u8bed\u6cd5\u53ef\u4ee5\u5728\u5f88\u957f\u7684\u65f6\u95f4\u5185\u4fdd\u6301\u7a33\u5b9a\u3002\u57fa\u4e8e\u94fe\u63a5\u5e93\u548c\u5305\uff0c\u53ef\u4ee5\u5f62\u6210\u4e30\u5bcc\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u4f7f\u5bf9\u5e94\u8bed\u8a00\u53ef\u4ee5\u957f\u65f6\u95f4\u4fdd\u6301\u6d3b\u8dc3\u5ea6\u548c\u53d1\u5c55\u3002","title":"1.3 \u53ef\u62d3\u5c55\u6027"},{"location":"zh/#2","text":"\u6570\u636e\u96c6\u672c\u8d28\u4e0a\u662f\u5b58\u50a8\u5728\u6c38\u4e45\u5b58\u50a8\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u3002\u901a\u5e38\u7531\u975e\u7ed3\u6784\u5316\u76ee\u6807\uff08\u5982\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u6587\u672c\u7b49\uff09\u548c\u4e0e\u4e4b\u5173\u8054\u7684\u6807\u6ce8\u7ec4\u6210\u3002\u8fd9\u4e9b\u5143\u7d20\u6309\u7167\u7279\u5b9a\u7684\u65b9\u5f0f\u7ec4\u5408\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8ff0\u63d0\u5230\u7684\u975e\u7ed3\u6784\u5316\u76ee\u6807\u901a\u5e38\u5305\u542b\u5927\u91cf\u7684\u6570\u636e\u3002\u4e3a\u4e86\u65b9\u4fbf\u6570\u636e\u7684\u5feb\u901f\u5206\u53d1\uff0c\u6211\u4eec\u7684\u8bbe\u8ba1\u5c06\u4e00\u4e2a\u6570\u636e\u96c6\u7684\u7ed3\u6784\u5316\u63cf\u8ff0\u4e0e\u975e\u7ed3\u6784\u5316\u5185\u5bb9\u5206\u79bb\u5f00\u3002 \u4e0b\u9762\u662f\u8bed\u8a00\u8bbe\u8ba1\u7684\u5168\u9762\u603b\u7ed3\uff1a","title":"2. \u8bbe\u8ba1\u603b\u89c8"},{"location":"zh/#21","text":"DSDL\u4f7f\u7528\u57fa\u672c\u5143\u7d20\u7684\u96c6\u5408\u6765\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u57fa\u672c\u5143\u7d20\u7531structs, lists, sets\u7b49\u5bb9\u5668\u7ec4\u6210\u3002 \u57fa\u7840\u5143\u7d20(Basic elements) \uff1a\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u72ec\u7acb\u5355\u5143\uff0c\u4e0d\u4ec5\u5305\u542b\u4e86\u8bf8\u5982\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u7840\u7c7b\u578b\uff0c\u4e5f\u5305\u542b\u4e86\u90a3\u4e9b\u53ef\u4ee5\u4fbf\u4e8e\u76ee\u6807\u5b9a\u4f4d\u3001\u6807\u6ce8\u7ed3\u679c\u8868\u8fbe\u7684\u5143\u7d20\u3002 \u975e\u7ed3\u6784\u5316\u76ee\u6807(Unstructured objects) \uff1a\u4f8b\u5982\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u6587\u672c\u7b49\u7279\u6b8a\u7684\u57fa\u672c\u5143\u7d20\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u5177\u4f53\u800c\u8a00\uff0c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7531\u76ee\u6807\u5b9a\u4f4d\u5668\u8868\u793a\uff0c\u7528\u6765\u6307\u5b9a\u5b83\u7684\u5b58\u653e\u4f4d\u7f6e\u800c\u4e0d\u662f\u5c06\u6574\u4e2a\u5a92\u4f53\u6587\u4ef6\u653e\u5165\u63cf\u8ff0\u4e2d\u3002\u53e6\u5916\uff0c\u53ef\u9009\u62e9\u7684\u989d\u5916\u63cf\u8ff0\u7b26\u53ef\u4ee5\u7528\u6765\u63d0\u4f9b\u76ee\u6807\u7684\u989d\u5916\u4fe1\u606f\uff0c\u4f8b\u5982\u4e00\u4e2a\u56fe\u50cf\u7684\u683c\u5f0f\u6216\u8005\u5206\u8fa8\u7387\u3002 \u805a\u5408\u4f53(Aggregates) \uff1a\u5c06\u57fa\u7840\u5143\u7d20\u7ec4\u5408\u6210\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002DSDL\u63d0\u4f9blist\u548cstruct\u7c7b\u578b\u6765\u8868\u793a\u6570\u636e\u7ed3\u6784\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5355\u4e2a\u6837\u672c\u7531\u4e00\u4e2a\u7ed3\u6784\u4f53\u8868\u793a\uff08\u591a\u4e2a\u5b57\u6bb5\u7684\u805a\u5408\uff09\uff0c\u800c\u6570\u636e\u96c6\u53c8\u7531\u4e00\u4e2a\u6837\u672c\u5217\u8868\u7ec4\u6210\u3002","title":"2.1 \u57fa\u7840\u6570\u636e\u6a21\u578b"},{"location":"zh/#22","text":"\u5728DSDL\u4e2d\uff0c\u6240\u6709\u7684\u5143\u7d20\u548c\u7ed3\u6784\u4f53\u5355\u5143\u90fd\u6709\u7c7b\u578b\u3002 DSDL\u91c7\u7528\u4e86\u4e00\u79cd\u7b80\u5355\u800c_\u6613\u62d3\u5c55_\u7684\u7c7b\u578b\u7cfb\u7edf\u3002\u5177\u4f53\u5730\uff0cDSDL\u6709\u4e09\u79cd\u7c7b\u578b\uff1a \u57fa\u7840\u7c7b\u578b(Primitive types) \uff1a\u5305\u542b\u5e03\u5c14\u7c7b\u578b\u3001\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u7840\u5143\u7d20\u503c\u7684\u7c7b\u578b\u3002 DSDL\u63d0\u4f9b\u4e86\u57fa\u7840\u7c7b\u578b\u7684\u7edf\u4e00\u5927\u96c6\u5408\u3002 \u975e\u7ed3\u6784\u76ee\u6807\u7c7b(Unstructured object classes) \uff1a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7684\u62bd\u8c61\u3002\u4f8b\u5982\uff1a\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u70b9\u4e91\u3001\u6587\u672c\u7b49\u7b49\u3002\u8fd9\u4e9b\u76ee\u6807\u5c3d\u7ba1\u5185\u90e8\u7ed3\u6784\u4e30\u5bcc\u591a\u6837\uff0c\u4f46\u5728\u6570\u636e\u96c6\u5b9a\u4e49\u4e2d\u4f1a\u88ab\u5f53\u6210\u4e0d\u53ef\u5206\u5272\u7684\u5355\u5143\u3002DSDL\u63d0\u4f9b\u4e00\u7cfb\u5217\u9884\u5b9a\u4e49\u597d\u7684\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u96c6\u5408\uff0c\u8986\u76d6\u5e38\u7528\u7684\u5e94\u7528\u573a\u666f\uff0c\u540c\u65f6\u5141\u8bb8\u5f00\u6e90\u529b\u91cf\u62d3\u5c55\u8be5\u96c6\u5408\uff0c\u901a\u8fc7\u6700\u5c0f\u63a5\u53e3\u96c6\u5408\u6ce8\u518c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\u3002 \u7ed3\u6784\u4f53\u7c7b(Struct classes) \uff1aDSDL\u4e2d\u805a\u5408\u6570\u636e\u7ed3\u6784\u7684\u62bd\u8c61\u3002\u7ed3\u6784\u4f53\u7c7b\u4e2d\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u88ab\u79f0\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53(struct)\uff0c\u5305\u542b\u591a\u4e2a\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u6709\u81ea\u5df1\u7c7b\u578b\u3002\u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8ff0\u6570\u636e\u6837\u672c\u3002DSDL\u4e3a\u6807\u51c6\u5e93\u4e2d\u7684\u5e38\u89c1\u4efb\u52a1\u63d0\u4f9b\u4e00\u5957\u9884\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u7c7b\uff0c\u540c\u65f6\u5141\u8bb8\u7528\u6237\u9488\u5bf9\u7279\u6b8a\u4efb\u52a1\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u3002 \u6ce8\u610f\uff1a\u7c7b\u578b\u5fc5\u987b\u5728\u4f7f\u7528\u524d\u88ab\u5b9a\u4e49\uff08\u65e0\u8bba\u662f\u5185\u7f6e\u7c7b\u578b\u3001\u7b2c\u4e09\u65b9\u5b9a\u4e49\u7c7b\u578b\uff0c\u53c8\u6216\u8005\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\uff09\u3002\u5faa\u73af\u5f15\u7528(circular references)\u5728\u5f53\u524dDSDL\u4e2d\u662f\u4e0d\u5141\u8bb8\u7684\u3002","title":"2.2 \u62d3\u5c55\u7c7b\u578b\u7cfb\u7edf"},{"location":"zh/#23-object-locators","text":"\u5982\u524d\u6240\u8ff0\uff0c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u5e76\u6ca1\u6709\u5b8c\u5168\u5d4c\u5165\u5230\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u3002 \u5f85\u4e4b\u7531\u76ee\u6807\u5b9a\u4f4d\u5668\u6765\u8868\u793a\u3002\u5177\u4f53\u5730\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u3002\u5f53\u5bf9\u5e94\u7684\u76ee\u6807\u88ab\u52a0\u8f7d\u65f6\u4f1a\u7ecf\u8fc7DSDL\u89e3\u6790\u5668\u8f6c\u6362\u6210\u4e00\u4e2a\u771f\u6b63\u7684\u5730\u5740\u3002 \u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u5f15\u5165\u4f7f\u7528\u5206\u79bb\u6570\u636e\u96c6\u4e2d\u7ed3\u6784\u5316\u63cf\u8ff0\u548c\u975e\u7ed3\u6784\u5316\u5a92\u4f53\u6587\u4ef6\u7684\u5173\u952e\u3002\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u5f97\u65e0\u9700\u79fb\u52a8\u5927\u4f53\u91cf\u7684\u5a92\u4f53\u6570\u636e\uff0c\u4f7f\u6570\u636e\u96c6\u63cf\u8ff0\u5206\u53d1\u66f4\u52a0\u8f7b\u91cf\u5316\u3002\u4e0e\u6b64\u540c\u65f6\u5141\u8bb8\u5feb\u901f\u7684\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\uff1a\u7ec4\u5408\u591a\u4e2a\u96c6\u5408\u3001\u5408\u5e76\u5c5e\u6027\u6216\u8005\u53d6\u67d0\u4e2a\u5b50\u96c6\u3002","title":"2.3 \u76ee\u6807\u5b9a\u4f4d\u5668 (Object locators)"},{"location":"zh/#24-yamljson","text":"DSDL\u5c5e\u4e8e\u7279\u5b9a\u9886\u57df\u7684\u8bed\u8a00\uff0c\u57fa\u4e8e\u5f53\u524d\u6d41\u884c\u7684\u6570\u636e\u4ea4\u4e92\u8bed\u8a00YAML\u6216\u8005JSON\u8fdb\u884c\u5b9a\u4e49\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cYAML\u6216JSON\u4e2d\u7684\u5143\u7d20\u5728\u8bed\u8a00\u7ea7\u522b\u4e0a\u5e76\u4e0d\u4e0e\u7279\u5b9a\u7684\u542b\u4e49\u76f8\u5173\u8054\u3002\u800c\u6211\u4eec\u901a\u8fc7\u8d4b\u4e88\u8fd9\u4e9b\u5143\u7d20\u4ee5\u7279\u5b9a\u8bed\u4e49\uff0cDSDL\u53ef\u4ee5\u4ee5\u4e00\u79cd\u6709\u610f\u4e49\u7684\u65b9\u5f0f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u4f7f\u5f97\u4f7f\u7528\u8005\u53ef\u4ee5\u4f7f\u7528YAML\u548cJSON\u8bed\u8a00\u5bf9\u5e94\u7684\u4e30\u5bcc\u5de5\u5177\u7cfb\u7edf\u3002\u57fa\u4e8e\u8fd9\u4e9b\u5de5\u5177\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6784\u5efa\u4e00\u5957\u5b8c\u6574\u7cfb\u7edf\uff1a\u652f\u6301\u89e3\u6790\u3001\u6821\u9a8c\u548c\u67e5\u8be2\u7b49\u529f\u80fd\uff0c\u5e76\u57fa\u4e8e\u4e92\u8054\u7f51\u751f\u6001\u7cfb\u7edf\u8fdb\u884c\u4fbf\u6377\u5730\u4ea4\u4e92\u3002","title":"2.4 \u57fa\u4e8eYAML\u6216\u8005JSON"},{"location":"zh/install/","text":"\u5b89\u88c5\u90e8\u7f72","title":"\u5b89\u88c5\u90e8\u7f72"},{"location":"zh/install/#_1","text":"","title":"\u5b89\u88c5\u90e8\u7f72"},{"location":"zh/overview/","text":"\u6570\u636e \u662f\u4eba\u5de5\u667a\u80fd\u7684\u57fa\u77f3\u3002\u6570\u636e\u83b7\u53d6\u3001\u4f20\u64ad\u548c\u4f7f\u7528\u7684\u6548\u7387\u76f4\u63a5\u5f71\u54cd\u79d1\u6280\u53d1\u5c55\u548c\u5e94\u7528\u8fdb\u6b65\u3002\u5728\u4eba\u5de5\u667a\u80fd\u6f2b\u957f\u5386\u53f2\u4e2d\uff0c\u5927\u91cf\u7684\u6570\u636e\u96c6\u88ab\u5236\u9020\u548c\u53d1\u5e03\u63a8\u52a8\u6574\u4e2a\u9886\u57df\u7684\u53d1\u5c55\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u6570\u636e\u96c6\u57fa\u4e8e\u4e0d\u540c\u7684\u5f62\u5f0f\u5b9a\u4e49\uff0c\u4f7f\u5f97\u5176\u5728\u4f20\u64ad\u3001\u878d\u5408\u548c\u4f7f\u7528\u65f6\u6210\u672c\u8f83\u9ad8\u3002\u8fd9\u901a\u5e38\u8868\u73b0\u4e3a\u6bcf\u4e2a\u4f7f\u7528\u8005/\u56e2\u961f\u9700\u8981\u5236\u5b9a\u4e00\u5957\u65b0\u7684\u683c\u5f0f\uff0c\u5f00\u53d1\u5b9a\u5236\u5316\u5de5\u5177\u6216\u811a\u672c\u5c06\u65b0\u7684\u6570\u636e\u96c6\u6807\u51c6\u5316\u5408\u5e76\u5230\u5df2\u6709\u7684\u5de5\u4f5c\u6d41\u3002 \u4e3a\u4e86\u514b\u670d\u4e0a\u8ff0\u95ee\u9898\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u4e00\u5957\u6570\u636e\u96c6\u63cf\u8ff0\u8bed\u8a00DSDL(Data Set Description Language)\u3002 1. \u8bbe\u8ba1\u76ee\u6807 DSDL\u7684\u8bbe\u8ba1\u76ee\u6807\u603b\u5171\u6709\u4e09\u70b9\uff1a \u901a\u7528\u6027(Generic) \uff0c \u4fbf\u643a\u6027(Portable) \uff0c\u4ee5\u53ca \u53ef\u62d3\u5c55\u6027(Extensible) \u3002\u4e09\u79cd\u7279\u6027\u603b\u79f0\u4e3a GPE \u3002 1.1 \u901a\u7528\u6027 \u8be5\u8bed\u8a00\u4e3b\u8981\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7edf\u4e00\u8868\u793a\u7684\u6807\u51c6\uff0c\u53ef\u4ee5\u8986\u76d6\u5404\u4e2a\u9886\u57df\u7684\u4eba\u5de5\u667a\u80fd\u6570\u636e\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u7279\u5b9a\u7684\u4e00\u79cd\u4efb\u52a1\u6216\u8005\u67d0\u4e2a\u9886\u57df\u8bbe\u8ba1\u3002\u8be5\u8bed\u8a00\u5e94\u8be5\u53ef\u4ee5\u7528\u4e00\u81f4\u7684\u683c\u5f0f\u6765\u8868\u8fbe\u4e0d\u540c\u6a21\u6001\u548c\u7ed3\u6784\u7684\u6570\u636e\u3002 1.2 \u4fbf\u643a\u6027 \u5199\u5b8c\u65e0\u9700\u4fee\u6539\uff0c\u968f\u5904\u5206\u53d1\u3002 \u6570\u636e\u96c6\u63cf\u8ff0\u53ef\u4ee5\u88ab\u5e7f\u6cdb\u7684\u5206\u53d1\u548c\u4ea4\u6362\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u5c31\u53ef\u4ee5\u5728\u5404\u79cd\u73af\u5883\u4e0b\u4f7f\u7528\u3002\u8fd9\u4e00\u76ee\u6807\u7684\u5b9e\u73b0\u5bf9\u4e8e\u5efa\u7acb\u5f00\u53d1\u7e41\u8363\u751f\u6001\u81f3\u5173\u91cd\u8981\u3002\u4e3a\u6b64\u6211\u4eec\u9700\u8981\u4ed4\u7ec6\u68c0\u67e5\u5b9e\u73b0\u7ec6\u8282\uff0c\u4f7f\u5176\u5bf9\u5e95\u5c42\u8bbe\u65bd\u6216\u7ec4\u7ec7\u65e0\u611f\u77e5\uff0c\u4ece\u800c\u53bb\u9664\u57fa\u4e8e\u7279\u5b9a\u5047\u8bbe\u7684\u65e0\u5fc5\u8981\u4f9d\u8d56\u3002 1.3 \u53ef\u62d3\u5c55\u6027 \u5728\u4e0d\u9700\u8981\u4fee\u6539\u6838\u5fc3\u6807\u51c6\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u62d3\u5c55\u8868\u8ff0\u7684\u8fb9\u754c\u3002\u5bf9\u4e8eC++\u6216\u8005Python\u7b49\u7f16\u7a0b\u8bed\u8a00\uff0c\u5e94\u7528\u8fb9\u754c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u94fe\u63a5\u5e93\u6216\u8005\u8f6f\u4ef6\u5305\u5f97\u4ee5\u663e\u8457\u62d3\u5c55\uff0c\u800c\u6838\u5fc3\u8bed\u6cd5\u53ef\u4ee5\u5728\u5f88\u957f\u7684\u65f6\u95f4\u5185\u4fdd\u6301\u7a33\u5b9a\u3002\u57fa\u4e8e\u94fe\u63a5\u5e93\u548c\u5305\uff0c\u53ef\u4ee5\u5f62\u6210\u4e30\u5bcc\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u4f7f\u5bf9\u5e94\u8bed\u8a00\u53ef\u4ee5\u957f\u65f6\u95f4\u4fdd\u6301\u6d3b\u8dc3\u5ea6\u548c\u53d1\u5c55\u3002 2. \u8bbe\u8ba1\u603b\u89c8 \u6570\u636e\u96c6\u672c\u8d28\u4e0a\u662f\u5b58\u50a8\u5728\u6c38\u4e45\u5b58\u50a8\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u3002\u901a\u5e38\u7531\u975e\u7ed3\u6784\u5316\u76ee\u6807\uff08\u5982\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u6587\u672c\u7b49\uff09\u548c\u4e0e\u4e4b\u5173\u8054\u7684\u6807\u6ce8\u7ec4\u6210\u3002\u8fd9\u4e9b\u5143\u7d20\u6309\u7167\u7279\u5b9a\u7684\u65b9\u5f0f\u7ec4\u5408\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8ff0\u63d0\u5230\u7684\u975e\u7ed3\u6784\u5316\u76ee\u6807\u901a\u5e38\u5305\u542b\u5927\u91cf\u7684\u6570\u636e\u3002\u4e3a\u4e86\u65b9\u4fbf\u6570\u636e\u7684\u5feb\u901f\u5206\u53d1\uff0c\u6211\u4eec\u7684\u8bbe\u8ba1\u5c06\u4e00\u4e2a\u6570\u636e\u96c6\u7684\u7ed3\u6784\u5316\u63cf\u8ff0\u4e0e\u975e\u7ed3\u6784\u5316\u5185\u5bb9\u5206\u79bb\u5f00\u3002 \u4e0b\u9762\u662f\u8bed\u8a00\u8bbe\u8ba1\u7684\u5168\u9762\u603b\u7ed3\uff1a 2.1 \u57fa\u7840\u6570\u636e\u6a21\u578b DSDL\u4f7f\u7528\u57fa\u672c\u5143\u7d20\u7684\u96c6\u5408\u6765\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u57fa\u672c\u5143\u7d20\u7531structs, lists, sets\u7b49\u5bb9\u5668\u7ec4\u6210\u3002 \u57fa\u7840\u5143\u7d20(Basic elements) \uff1a\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u72ec\u7acb\u5355\u5143\uff0c\u4e0d\u4ec5\u5305\u542b\u4e86\u8bf8\u5982\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u7840\u7c7b\u578b\uff0c\u4e5f\u5305\u542b\u4e86\u90a3\u4e9b\u53ef\u4ee5\u4fbf\u4e8e\u76ee\u6807\u5b9a\u4f4d\u3001\u6807\u6ce8\u7ed3\u679c\u8868\u8fbe\u7684\u5143\u7d20\u3002 \u975e\u7ed3\u6784\u5316\u76ee\u6807(Unstructured objects) \uff1a\u4f8b\u5982\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u6587\u672c\u7b49\u7279\u6b8a\u7684\u57fa\u672c\u5143\u7d20\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u5177\u4f53\u800c\u8a00\uff0c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7531\u76ee\u6807\u5b9a\u4f4d\u5668\u8868\u793a\uff0c\u7528\u6765\u6307\u5b9a\u5b83\u7684\u5b58\u653e\u4f4d\u7f6e\u800c\u4e0d\u662f\u5c06\u6574\u4e2a\u5a92\u4f53\u6587\u4ef6\u653e\u5165\u63cf\u8ff0\u4e2d\u3002\u53e6\u5916\uff0c\u53ef\u9009\u62e9\u7684\u989d\u5916\u63cf\u8ff0\u7b26\u53ef\u4ee5\u7528\u6765\u63d0\u4f9b\u76ee\u6807\u7684\u989d\u5916\u4fe1\u606f\uff0c\u4f8b\u5982\u4e00\u4e2a\u56fe\u50cf\u7684\u683c\u5f0f\u6216\u8005\u5206\u8fa8\u7387\u3002 \u805a\u5408\u4f53(Aggregates) \uff1a\u5c06\u57fa\u7840\u5143\u7d20\u7ec4\u5408\u6210\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002DSDL\u63d0\u4f9blist\u548cstruct\u7c7b\u578b\u6765\u8868\u793a\u6570\u636e\u7ed3\u6784\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5355\u4e2a\u6837\u672c\u7531\u4e00\u4e2a\u7ed3\u6784\u4f53\u8868\u793a\uff08\u591a\u4e2a\u5b57\u6bb5\u7684\u805a\u5408\uff09\uff0c\u800c\u6570\u636e\u96c6\u53c8\u7531\u4e00\u4e2a\u6837\u672c\u5217\u8868\u7ec4\u6210\u3002 2.2 \u62d3\u5c55\u7c7b\u578b\u7cfb\u7edf \u5728DSDL\u4e2d\uff0c\u6240\u6709\u7684\u5143\u7d20\u548c\u7ed3\u6784\u4f53\u5355\u5143\u90fd\u6709\u7c7b\u578b\u3002 DSDL\u91c7\u7528\u4e86\u4e00\u79cd\u7b80\u5355\u800c_\u6613\u62d3\u5c55_\u7684\u7c7b\u578b\u7cfb\u7edf\u3002\u5177\u4f53\u5730\uff0cDSDL\u6709\u4e09\u79cd\u7c7b\u578b\uff1a \u57fa\u7840\u7c7b\u578b(Primitive types) \uff1a\u5305\u542b\u5e03\u5c14\u7c7b\u578b\u3001\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u7840\u5143\u7d20\u503c\u7684\u7c7b\u578b\u3002 DSDL\u63d0\u4f9b\u4e86\u57fa\u7840\u7c7b\u578b\u7684\u7edf\u4e00\u5927\u96c6\u5408\u3002 \u975e\u7ed3\u6784\u76ee\u6807\u7c7b(Unstructured object classes) \uff1a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7684\u62bd\u8c61\u3002\u4f8b\u5982\uff1a\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u70b9\u4e91\u3001\u6587\u672c\u7b49\u7b49\u3002\u8fd9\u4e9b\u76ee\u6807\u5c3d\u7ba1\u5185\u90e8\u7ed3\u6784\u4e30\u5bcc\u591a\u6837\uff0c\u4f46\u5728\u6570\u636e\u96c6\u5b9a\u4e49\u4e2d\u4f1a\u88ab\u5f53\u6210\u4e0d\u53ef\u5206\u5272\u7684\u5355\u5143\u3002DSDL\u63d0\u4f9b\u4e00\u7cfb\u5217\u9884\u5b9a\u4e49\u597d\u7684\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u96c6\u5408\uff0c\u8986\u76d6\u5e38\u7528\u7684\u5e94\u7528\u573a\u666f\uff0c\u540c\u65f6\u5141\u8bb8\u5f00\u6e90\u529b\u91cf\u62d3\u5c55\u8be5\u96c6\u5408\uff0c\u901a\u8fc7\u6700\u5c0f\u63a5\u53e3\u96c6\u5408\u6ce8\u518c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\u3002 \u7ed3\u6784\u4f53\u7c7b(Struct classes) \uff1aDSDL\u4e2d\u805a\u5408\u6570\u636e\u7ed3\u6784\u7684\u62bd\u8c61\u3002\u7ed3\u6784\u4f53\u7c7b\u4e2d\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u88ab\u79f0\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53(struct)\uff0c\u5305\u542b\u591a\u4e2a\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u6709\u81ea\u5df1\u7c7b\u578b\u3002\u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8ff0\u6570\u636e\u6837\u672c\u3002DSDL\u4e3a\u6807\u51c6\u5e93\u4e2d\u7684\u5e38\u89c1\u4efb\u52a1\u63d0\u4f9b\u4e00\u5957\u9884\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u7c7b\uff0c\u540c\u65f6\u5141\u8bb8\u7528\u6237\u9488\u5bf9\u7279\u6b8a\u4efb\u52a1\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u3002 \u6ce8\u610f\uff1a\u7c7b\u578b\u5fc5\u987b\u5728\u4f7f\u7528\u524d\u88ab\u5b9a\u4e49\uff08\u65e0\u8bba\u662f\u5185\u7f6e\u7c7b\u578b\u3001\u7b2c\u4e09\u65b9\u5b9a\u4e49\u7c7b\u578b\uff0c\u53c8\u6216\u8005\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\uff09\u3002\u5faa\u73af\u5f15\u7528(circular references)\u5728\u5f53\u524dDSDL\u4e2d\u662f\u4e0d\u5141\u8bb8\u7684\u3002 2.3 \u76ee\u6807\u5b9a\u4f4d\u5668 (Object locators) \u5982\u524d\u6240\u8ff0\uff0c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u5e76\u6ca1\u6709\u5b8c\u5168\u5d4c\u5165\u5230\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u3002 \u5f85\u4e4b\u7531\u76ee\u6807\u5b9a\u4f4d\u5668\u6765\u8868\u793a\u3002\u5177\u4f53\u5730\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u3002\u5f53\u5bf9\u5e94\u7684\u76ee\u6807\u88ab\u52a0\u8f7d\u65f6\u4f1a\u7ecf\u8fc7DSDL\u89e3\u6790\u5668\u8f6c\u6362\u6210\u4e00\u4e2a\u771f\u6b63\u7684\u5730\u5740\u3002 \u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u5f15\u5165\u4f7f\u7528\u5206\u79bb\u6570\u636e\u96c6\u4e2d\u7ed3\u6784\u5316\u63cf\u8ff0\u548c\u975e\u7ed3\u6784\u5316\u5a92\u4f53\u6587\u4ef6\u7684\u5173\u952e\u3002\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u5f97\u65e0\u9700\u79fb\u52a8\u5927\u4f53\u91cf\u7684\u5a92\u4f53\u6570\u636e\uff0c\u4f7f\u6570\u636e\u96c6\u63cf\u8ff0\u5206\u53d1\u66f4\u52a0\u8f7b\u91cf\u5316\u3002\u4e0e\u6b64\u540c\u65f6\u5141\u8bb8\u5feb\u901f\u7684\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\uff1a\u7ec4\u5408\u591a\u4e2a\u96c6\u5408\u3001\u5408\u5e76\u5c5e\u6027\u6216\u8005\u53d6\u67d0\u4e2a\u5b50\u96c6\u3002 2.4 \u57fa\u4e8eYAML\u6216\u8005JSON DSDL\u5c5e\u4e8e\u7279\u5b9a\u9886\u57df\u7684\u8bed\u8a00\uff0c\u57fa\u4e8e\u5f53\u524d\u6d41\u884c\u7684\u6570\u636e\u4ea4\u4e92\u8bed\u8a00YAML\u6216\u8005JSON\u8fdb\u884c\u5b9a\u4e49\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cYAML\u6216JSON\u4e2d\u7684\u5143\u7d20\u5728\u8bed\u8a00\u7ea7\u522b\u4e0a\u5e76\u4e0d\u4e0e\u7279\u5b9a\u7684\u542b\u4e49\u76f8\u5173\u8054\u3002\u800c\u6211\u4eec\u901a\u8fc7\u8d4b\u4e88\u8fd9\u4e9b\u5143\u7d20\u4ee5\u7279\u5b9a\u8bed\u4e49\uff0cDSDL\u53ef\u4ee5\u4ee5\u4e00\u79cd\u6709\u610f\u4e49\u7684\u65b9\u5f0f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u4f7f\u5f97\u4f7f\u7528\u8005\u53ef\u4ee5\u4f7f\u7528YAML\u548cJSON\u8bed\u8a00\u5bf9\u5e94\u7684\u4e30\u5bcc\u5de5\u5177\u7cfb\u7edf\u3002\u57fa\u4e8e\u8fd9\u4e9b\u5de5\u5177\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6784\u5efa\u4e00\u5957\u5b8c\u6574\u7cfb\u7edf\uff1a\u652f\u6301\u89e3\u6790\u3001\u6821\u9a8c\u548c\u67e5\u8be2\u7b49\u529f\u80fd\uff0c\u5e76\u57fa\u4e8e\u4e92\u8054\u7f51\u751f\u6001\u7cfb\u7edf\u8fdb\u884c\u4fbf\u6377\u5730\u4ea4\u4e92\u3002","title":"\u8bed\u8a00\u7279\u6027"},{"location":"zh/overview/#1","text":"DSDL\u7684\u8bbe\u8ba1\u76ee\u6807\u603b\u5171\u6709\u4e09\u70b9\uff1a \u901a\u7528\u6027(Generic) \uff0c \u4fbf\u643a\u6027(Portable) \uff0c\u4ee5\u53ca \u53ef\u62d3\u5c55\u6027(Extensible) \u3002\u4e09\u79cd\u7279\u6027\u603b\u79f0\u4e3a GPE \u3002","title":"1. \u8bbe\u8ba1\u76ee\u6807"},{"location":"zh/overview/#11","text":"\u8be5\u8bed\u8a00\u4e3b\u8981\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7edf\u4e00\u8868\u793a\u7684\u6807\u51c6\uff0c\u53ef\u4ee5\u8986\u76d6\u5404\u4e2a\u9886\u57df\u7684\u4eba\u5de5\u667a\u80fd\u6570\u636e\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u7279\u5b9a\u7684\u4e00\u79cd\u4efb\u52a1\u6216\u8005\u67d0\u4e2a\u9886\u57df\u8bbe\u8ba1\u3002\u8be5\u8bed\u8a00\u5e94\u8be5\u53ef\u4ee5\u7528\u4e00\u81f4\u7684\u683c\u5f0f\u6765\u8868\u8fbe\u4e0d\u540c\u6a21\u6001\u548c\u7ed3\u6784\u7684\u6570\u636e\u3002","title":"1.1 \u901a\u7528\u6027"},{"location":"zh/overview/#12","text":"\u5199\u5b8c\u65e0\u9700\u4fee\u6539\uff0c\u968f\u5904\u5206\u53d1\u3002 \u6570\u636e\u96c6\u63cf\u8ff0\u53ef\u4ee5\u88ab\u5e7f\u6cdb\u7684\u5206\u53d1\u548c\u4ea4\u6362\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u5c31\u53ef\u4ee5\u5728\u5404\u79cd\u73af\u5883\u4e0b\u4f7f\u7528\u3002\u8fd9\u4e00\u76ee\u6807\u7684\u5b9e\u73b0\u5bf9\u4e8e\u5efa\u7acb\u5f00\u53d1\u7e41\u8363\u751f\u6001\u81f3\u5173\u91cd\u8981\u3002\u4e3a\u6b64\u6211\u4eec\u9700\u8981\u4ed4\u7ec6\u68c0\u67e5\u5b9e\u73b0\u7ec6\u8282\uff0c\u4f7f\u5176\u5bf9\u5e95\u5c42\u8bbe\u65bd\u6216\u7ec4\u7ec7\u65e0\u611f\u77e5\uff0c\u4ece\u800c\u53bb\u9664\u57fa\u4e8e\u7279\u5b9a\u5047\u8bbe\u7684\u65e0\u5fc5\u8981\u4f9d\u8d56\u3002","title":"1.2 \u4fbf\u643a\u6027"},{"location":"zh/overview/#13","text":"\u5728\u4e0d\u9700\u8981\u4fee\u6539\u6838\u5fc3\u6807\u51c6\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u62d3\u5c55\u8868\u8ff0\u7684\u8fb9\u754c\u3002\u5bf9\u4e8eC++\u6216\u8005Python\u7b49\u7f16\u7a0b\u8bed\u8a00\uff0c\u5e94\u7528\u8fb9\u754c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u94fe\u63a5\u5e93\u6216\u8005\u8f6f\u4ef6\u5305\u5f97\u4ee5\u663e\u8457\u62d3\u5c55\uff0c\u800c\u6838\u5fc3\u8bed\u6cd5\u53ef\u4ee5\u5728\u5f88\u957f\u7684\u65f6\u95f4\u5185\u4fdd\u6301\u7a33\u5b9a\u3002\u57fa\u4e8e\u94fe\u63a5\u5e93\u548c\u5305\uff0c\u53ef\u4ee5\u5f62\u6210\u4e30\u5bcc\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u4f7f\u5bf9\u5e94\u8bed\u8a00\u53ef\u4ee5\u957f\u65f6\u95f4\u4fdd\u6301\u6d3b\u8dc3\u5ea6\u548c\u53d1\u5c55\u3002","title":"1.3 \u53ef\u62d3\u5c55\u6027"},{"location":"zh/overview/#2","text":"\u6570\u636e\u96c6\u672c\u8d28\u4e0a\u662f\u5b58\u50a8\u5728\u6c38\u4e45\u5b58\u50a8\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u3002\u901a\u5e38\u7531\u975e\u7ed3\u6784\u5316\u76ee\u6807\uff08\u5982\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u6587\u672c\u7b49\uff09\u548c\u4e0e\u4e4b\u5173\u8054\u7684\u6807\u6ce8\u7ec4\u6210\u3002\u8fd9\u4e9b\u5143\u7d20\u6309\u7167\u7279\u5b9a\u7684\u65b9\u5f0f\u7ec4\u5408\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8ff0\u63d0\u5230\u7684\u975e\u7ed3\u6784\u5316\u76ee\u6807\u901a\u5e38\u5305\u542b\u5927\u91cf\u7684\u6570\u636e\u3002\u4e3a\u4e86\u65b9\u4fbf\u6570\u636e\u7684\u5feb\u901f\u5206\u53d1\uff0c\u6211\u4eec\u7684\u8bbe\u8ba1\u5c06\u4e00\u4e2a\u6570\u636e\u96c6\u7684\u7ed3\u6784\u5316\u63cf\u8ff0\u4e0e\u975e\u7ed3\u6784\u5316\u5185\u5bb9\u5206\u79bb\u5f00\u3002 \u4e0b\u9762\u662f\u8bed\u8a00\u8bbe\u8ba1\u7684\u5168\u9762\u603b\u7ed3\uff1a","title":"2. \u8bbe\u8ba1\u603b\u89c8"},{"location":"zh/overview/#21","text":"DSDL\u4f7f\u7528\u57fa\u672c\u5143\u7d20\u7684\u96c6\u5408\u6765\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u57fa\u672c\u5143\u7d20\u7531structs, lists, sets\u7b49\u5bb9\u5668\u7ec4\u6210\u3002 \u57fa\u7840\u5143\u7d20(Basic elements) \uff1a\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u72ec\u7acb\u5355\u5143\uff0c\u4e0d\u4ec5\u5305\u542b\u4e86\u8bf8\u5982\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u7840\u7c7b\u578b\uff0c\u4e5f\u5305\u542b\u4e86\u90a3\u4e9b\u53ef\u4ee5\u4fbf\u4e8e\u76ee\u6807\u5b9a\u4f4d\u3001\u6807\u6ce8\u7ed3\u679c\u8868\u8fbe\u7684\u5143\u7d20\u3002 \u975e\u7ed3\u6784\u5316\u76ee\u6807(Unstructured objects) \uff1a\u4f8b\u5982\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u6587\u672c\u7b49\u7279\u6b8a\u7684\u57fa\u672c\u5143\u7d20\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u5177\u4f53\u800c\u8a00\uff0c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7531\u76ee\u6807\u5b9a\u4f4d\u5668\u8868\u793a\uff0c\u7528\u6765\u6307\u5b9a\u5b83\u7684\u5b58\u653e\u4f4d\u7f6e\u800c\u4e0d\u662f\u5c06\u6574\u4e2a\u5a92\u4f53\u6587\u4ef6\u653e\u5165\u63cf\u8ff0\u4e2d\u3002\u53e6\u5916\uff0c\u53ef\u9009\u62e9\u7684\u989d\u5916\u63cf\u8ff0\u7b26\u53ef\u4ee5\u7528\u6765\u63d0\u4f9b\u76ee\u6807\u7684\u989d\u5916\u4fe1\u606f\uff0c\u4f8b\u5982\u4e00\u4e2a\u56fe\u50cf\u7684\u683c\u5f0f\u6216\u8005\u5206\u8fa8\u7387\u3002 \u805a\u5408\u4f53(Aggregates) \uff1a\u5c06\u57fa\u7840\u5143\u7d20\u7ec4\u5408\u6210\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002DSDL\u63d0\u4f9blist\u548cstruct\u7c7b\u578b\u6765\u8868\u793a\u6570\u636e\u7ed3\u6784\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5355\u4e2a\u6837\u672c\u7531\u4e00\u4e2a\u7ed3\u6784\u4f53\u8868\u793a\uff08\u591a\u4e2a\u5b57\u6bb5\u7684\u805a\u5408\uff09\uff0c\u800c\u6570\u636e\u96c6\u53c8\u7531\u4e00\u4e2a\u6837\u672c\u5217\u8868\u7ec4\u6210\u3002","title":"2.1 \u57fa\u7840\u6570\u636e\u6a21\u578b"},{"location":"zh/overview/#22","text":"\u5728DSDL\u4e2d\uff0c\u6240\u6709\u7684\u5143\u7d20\u548c\u7ed3\u6784\u4f53\u5355\u5143\u90fd\u6709\u7c7b\u578b\u3002 DSDL\u91c7\u7528\u4e86\u4e00\u79cd\u7b80\u5355\u800c_\u6613\u62d3\u5c55_\u7684\u7c7b\u578b\u7cfb\u7edf\u3002\u5177\u4f53\u5730\uff0cDSDL\u6709\u4e09\u79cd\u7c7b\u578b\uff1a \u57fa\u7840\u7c7b\u578b(Primitive types) \uff1a\u5305\u542b\u5e03\u5c14\u7c7b\u578b\u3001\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u7840\u5143\u7d20\u503c\u7684\u7c7b\u578b\u3002 DSDL\u63d0\u4f9b\u4e86\u57fa\u7840\u7c7b\u578b\u7684\u7edf\u4e00\u5927\u96c6\u5408\u3002 \u975e\u7ed3\u6784\u76ee\u6807\u7c7b(Unstructured object classes) \uff1a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7684\u62bd\u8c61\u3002\u4f8b\u5982\uff1a\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u70b9\u4e91\u3001\u6587\u672c\u7b49\u7b49\u3002\u8fd9\u4e9b\u76ee\u6807\u5c3d\u7ba1\u5185\u90e8\u7ed3\u6784\u4e30\u5bcc\u591a\u6837\uff0c\u4f46\u5728\u6570\u636e\u96c6\u5b9a\u4e49\u4e2d\u4f1a\u88ab\u5f53\u6210\u4e0d\u53ef\u5206\u5272\u7684\u5355\u5143\u3002DSDL\u63d0\u4f9b\u4e00\u7cfb\u5217\u9884\u5b9a\u4e49\u597d\u7684\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u96c6\u5408\uff0c\u8986\u76d6\u5e38\u7528\u7684\u5e94\u7528\u573a\u666f\uff0c\u540c\u65f6\u5141\u8bb8\u5f00\u6e90\u529b\u91cf\u62d3\u5c55\u8be5\u96c6\u5408\uff0c\u901a\u8fc7\u6700\u5c0f\u63a5\u53e3\u96c6\u5408\u6ce8\u518c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\u3002 \u7ed3\u6784\u4f53\u7c7b(Struct classes) \uff1aDSDL\u4e2d\u805a\u5408\u6570\u636e\u7ed3\u6784\u7684\u62bd\u8c61\u3002\u7ed3\u6784\u4f53\u7c7b\u4e2d\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u88ab\u79f0\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53(struct)\uff0c\u5305\u542b\u591a\u4e2a\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u6709\u81ea\u5df1\u7c7b\u578b\u3002\u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8ff0\u6570\u636e\u6837\u672c\u3002DSDL\u4e3a\u6807\u51c6\u5e93\u4e2d\u7684\u5e38\u89c1\u4efb\u52a1\u63d0\u4f9b\u4e00\u5957\u9884\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u7c7b\uff0c\u540c\u65f6\u5141\u8bb8\u7528\u6237\u9488\u5bf9\u7279\u6b8a\u4efb\u52a1\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u3002 \u6ce8\u610f\uff1a\u7c7b\u578b\u5fc5\u987b\u5728\u4f7f\u7528\u524d\u88ab\u5b9a\u4e49\uff08\u65e0\u8bba\u662f\u5185\u7f6e\u7c7b\u578b\u3001\u7b2c\u4e09\u65b9\u5b9a\u4e49\u7c7b\u578b\uff0c\u53c8\u6216\u8005\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\uff09\u3002\u5faa\u73af\u5f15\u7528(circular references)\u5728\u5f53\u524dDSDL\u4e2d\u662f\u4e0d\u5141\u8bb8\u7684\u3002","title":"2.2 \u62d3\u5c55\u7c7b\u578b\u7cfb\u7edf"},{"location":"zh/overview/#23-object-locators","text":"\u5982\u524d\u6240\u8ff0\uff0c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u5e76\u6ca1\u6709\u5b8c\u5168\u5d4c\u5165\u5230\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u3002 \u5f85\u4e4b\u7531\u76ee\u6807\u5b9a\u4f4d\u5668\u6765\u8868\u793a\u3002\u5177\u4f53\u5730\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u3002\u5f53\u5bf9\u5e94\u7684\u76ee\u6807\u88ab\u52a0\u8f7d\u65f6\u4f1a\u7ecf\u8fc7DSDL\u89e3\u6790\u5668\u8f6c\u6362\u6210\u4e00\u4e2a\u771f\u6b63\u7684\u5730\u5740\u3002 \u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u5f15\u5165\u4f7f\u7528\u5206\u79bb\u6570\u636e\u96c6\u4e2d\u7ed3\u6784\u5316\u63cf\u8ff0\u548c\u975e\u7ed3\u6784\u5316\u5a92\u4f53\u6587\u4ef6\u7684\u5173\u952e\u3002\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u5f97\u65e0\u9700\u79fb\u52a8\u5927\u4f53\u91cf\u7684\u5a92\u4f53\u6570\u636e\uff0c\u4f7f\u6570\u636e\u96c6\u63cf\u8ff0\u5206\u53d1\u66f4\u52a0\u8f7b\u91cf\u5316\u3002\u4e0e\u6b64\u540c\u65f6\u5141\u8bb8\u5feb\u901f\u7684\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\uff1a\u7ec4\u5408\u591a\u4e2a\u96c6\u5408\u3001\u5408\u5e76\u5c5e\u6027\u6216\u8005\u53d6\u67d0\u4e2a\u5b50\u96c6\u3002","title":"2.3 \u76ee\u6807\u5b9a\u4f4d\u5668 (Object locators)"},{"location":"zh/overview/#24-yamljson","text":"DSDL\u5c5e\u4e8e\u7279\u5b9a\u9886\u57df\u7684\u8bed\u8a00\uff0c\u57fa\u4e8e\u5f53\u524d\u6d41\u884c\u7684\u6570\u636e\u4ea4\u4e92\u8bed\u8a00YAML\u6216\u8005JSON\u8fdb\u884c\u5b9a\u4e49\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cYAML\u6216JSON\u4e2d\u7684\u5143\u7d20\u5728\u8bed\u8a00\u7ea7\u522b\u4e0a\u5e76\u4e0d\u4e0e\u7279\u5b9a\u7684\u542b\u4e49\u76f8\u5173\u8054\u3002\u800c\u6211\u4eec\u901a\u8fc7\u8d4b\u4e88\u8fd9\u4e9b\u5143\u7d20\u4ee5\u7279\u5b9a\u8bed\u4e49\uff0cDSDL\u53ef\u4ee5\u4ee5\u4e00\u79cd\u6709\u610f\u4e49\u7684\u65b9\u5f0f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u4f7f\u5f97\u4f7f\u7528\u8005\u53ef\u4ee5\u4f7f\u7528YAML\u548cJSON\u8bed\u8a00\u5bf9\u5e94\u7684\u4e30\u5bcc\u5de5\u5177\u7cfb\u7edf\u3002\u57fa\u4e8e\u8fd9\u4e9b\u5de5\u5177\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6784\u5efa\u4e00\u5957\u5b8c\u6574\u7cfb\u7edf\uff1a\u652f\u6301\u89e3\u6790\u3001\u6821\u9a8c\u548c\u67e5\u8be2\u7b49\u529f\u80fd\uff0c\u5e76\u57fa\u4e8e\u4e92\u8054\u7f51\u751f\u6001\u7cfb\u7edf\u8fdb\u884c\u4fbf\u6377\u5730\u4ea4\u4e92\u3002","title":"2.4 \u57fa\u4e8eYAML\u6216\u8005JSON"},{"location":"zh/tutorial/","text":"\u4f7f\u7528\u6559\u7a0b","title":"\u4f7f\u7528\u6559\u7a0b"},{"location":"zh/tutorial/#_1","text":"","title":"\u4f7f\u7528\u6559\u7a0b"},{"location":"zh/examples/cv/","text":"\u8ba1\u7b97\u673a\u89c6\u89c9 \u672c\u7ae0\u8282\u5b9a\u4e49\u7684\u6240\u6709\u7c7b\u90fd\u5c06\u901a\u8fc7\u6807\u51c6\u5e93cv\u63d0\u4f9b\u3002\u666e\u901a\u7528\u6237\u53ea\u9700\u901a\u8fc7import\u65b9\u5f0f\u5bfc\u5165cv\u6807\u51c6\u5e93\uff0c\u65e0\u9700\u81ea\u5df1\u5199\u7c7b\u522b\u5b9a\u4e49\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u540d\u4e3a``MyClassDom``\u7684\u7c7b\u522b\u57df\u3002 \u56fe\u50cf\u5206\u7c7b \u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u662f\u7ed9\u6bcf\u5f20\u56fe\u50cf\u5206\u914d\u4e00\u4e2a\u7c7b\u522b\u6807\u7b7e\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: ImageClassificationSample : # Each sample contains an image together with a class label (optional). $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] $optional : [ 'label' ] \u5176\u4e2d, $optional \u5b57\u6bb5\u5728\u6570\u636e\u6837\u4f8b\u4e2d\u53ef\u4ee5\u88ab\u7701\u7565\u3002\u5f53 $optional \u4e2d label \u88ab\u5ffd\u7565\u65f6\uff0c\u5bf9\u5e94\u7684\u5b57\u6bb5\u503c\u5c06\u88ab\u8bbe\u7f6e\u6210\u4e00\u4e2a\u7a7a\u503c\uff08\u5bf9\u5e94Python\u4e2d\u7684 None \uff09 \u6570\u636e\u793a\u4f8b: data : sample-type : ImageClassificationSample[cdom=MyClassDom] samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } - { image : \"xyz/0003.jpg\" } \u76ee\u6807\u68c0\u6d4b \u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u662f\u68c0\u6d4b\u7ed9\u5b9a\u56fe\u50cf\u4e2d\u7684\u6709\u610f\u4e49\u76ee\u6807\u3002\u6bcf\u4e2a\u88ab\u68c0\u6d4b\u7684\u76ee\u6807\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a\u5e26\u76ee\u6807\u7c7b\u522b\u4fe1\u606f\u7684\u8fb9\u754c\u6846\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: LocalObjectEntry : # Each sample contains a bounding box together a class label (optional). $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] $optional : [ 'label' ] ObjectDetectionSample : # Each sample contains an image together with a list of local objects. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] \u6570\u636e\u793a\u4f8b: data : sample-type : ObjectDetectionSample[cdom=MyClassDom] samples : - image : \"xyz/0001.jpg\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 } \u5e26\u573a\u666f\u5206\u7c7b\u7684\u76ee\u6807\u68c0\u6d4b \u5728\u67d0\u4e9b\u5e94\u7528\u4e2d\uff0c\u573a\u666f\u5206\u7c7b\uff08\u56fe\u50cf\u7ea7\u522b\uff09\u53ca\u76ee\u6807\u68c0\u6d4b\u4f1a\u7ec4\u6210\u4e00\u4e2a\u8054\u5408\u4efb\u52a1\u3002\u5bf9\u4e8e\u8fd9\u6837\u4e00\u4e2a\u4efb\u52a1\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u7c7b\u522b\u57df\uff0c\u8fd9\u91cc\u79f0\u4e3a SceneDom \u548c ObjectDom \uff0c\u5206\u522b\u9650\u5b9a\u573a\u666f\u7c7b\u522b\u548c\u76ee\u6807\u7c7b\u522b\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: SceneAndObjectSample : # Each samples contains an image, a scene label (optional) # together with a list of local objects. $def : struct $params : [ 'scenedom' , 'objectdom' ] $fields : image : Image sclabel : Label[dom=$scenedom] objects : List[LocalObjectEntry[cdom=$objectdom]] $optional : [ 'sclabel' ] \u6570\u636e\u793a\u4f8b: data : sample-type : SceneAndObjectSample[scenedom=SceneDom, objectdom=ObjectDom] samples : - image : \"xyz/0001.jpg\" sclabel : \"street\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" sclabel : \"river\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 } \u56fe\u50cf\u5206\u5272 \u56fe\u50cf\u5206\u5272\u4efb\u52a1\u662f\u5bf9\u7ed9\u5b9a\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u70b9\u6307\u5b9a\u50cf\u7d20\u7ea7\u6807\u7b7e\u3002\u60ef\u4f8b\u662f\u4f7f\u7528\u6807\u7b7e\u56fe\uff0c\u4e5f\u5c31\u662f\u5728\u4e00\u4e2a\u989d\u5916\u7684\u6587\u4ef6\u4e2d\u5b58\u50a8\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: ImageSegmentationSample : # Each sample contains an image together with a label map. $def : struct $params : [ 'cdom' ] $fields : image : Image labelmap : LabelMap[dom=$cdom] \u6570\u636e\u793a\u4f8b: data : sample-type : ImageSegmentationSample[cdom=MyClassDom] samples : - { image : \"imgs/0001.jpg\" , labelmap : \"maps/0001.ppm\" } - { image : \"imgs/0002.jpg\" , labelmap : \"maps/0002.ppm\" } - { image : \"imgs/0003.jpg\" , labelmap : \"maps/0003.ppm\" } \u5b9a\u4e49\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\u7684class domain 1. \u5355\u7ee7\u627f \u5728\u4e00\u4e9b\u6570\u636e\u96c6\u5f53\u4e2d\uff0c\u7c7b\u522b\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\uff0cdsdl\u4e2d\u5141\u8bb8\u4e3a\u6bcf\u4e2a\u7c7b\u522b\u6307\u5b9a\u81ea\u5df1\u7684\u7236\u7c7b\uff0c\u5177\u4f53\u64cd\u4f5c\u4e3a\uff1a \u9996\u5148\u8981\u5b9a\u4e49\u7236\u7c7b\u7684class domain ParentClassDom : $def : class_domain classes : - accessory - animal - appliance - electronic - food - furniture - indoor - kitchen - outdoor - person - sports - vehicle - fruit \u7136\u540e\u5b9a\u4e49\u5b50\u7c7bclass domain\u65f6\uff0c\u9700\u8981\u5728\u5b50\u7c7b\u7684\u540d\u79f0\u540e\u9762\u58f0\u660e\u5176\u5c5e\u4e8e\u7684\u7236\u7c7b\u7684class domain\uff0c\u5e76\u5728\u6bcf\u4e2alabel\u540e\u9762\u5199\u4e0a\u8be5label\u7684\u7236\u7c7b\u7684\u5177\u4f53\u7c7b\u522b\uff1a ClassDom[ParentClassDom] : # \u58f0\u660e\u7236\u7c7b $def : class_domain classes : - airplane[vehicle] # \u6307\u660eairplane\u7684\u7236\u7c7b\u4e3aParentClassDom\u4e2d\u7684vehicle - apple[food] - backpack[accessory] - banana[food,fruit] # \u6307\u660ebanana\u7684\u7236\u7c7b\u6709\u4e24\u4e2a\uff0c\u5206\u522b\u4e3aParentClassDom\u4e2d\u7684food\u548cfruit - baseball bat[sports] - baseball glove[sports] - bear[animal] - bed[furniture] - bench[outdoor] - bicycle[vehicle] - bird[animal] - boat[vehicle] 2. \u591a\u7ee7\u627f \u5b58\u5728\u4e00\u79cd\u60c5\u51b5\uff0c\u67d0\u4e2a\u7c7b\u522b\u7684\u7236\u7c7b\u6765\u81ea\u4e0d\u540c\u7684class domain\uff0cdsdl\u4e5f\u652f\u6301\u8fd9\u79cd\u591a\u7ee7\u627f\u7684\u5173\u7cfb\uff1a \u9996\u5148\u5b9a\u4e49\u4e24\u4e2a\u4e0d\u540c\u7684\u7236\u7c7bclass domain ParentClassDom1 : $def : class_domain classes : - fruit - tool - vegetable ParentClassDom2 : $def : class_domain classes : - food - sports tool \u7136\u540e\u5b9a\u4e49\u5b50\u7c7bclass domain\uff0c\u7ee7\u627f\u4e0a\u8ff0\u4e24\u4e2a\u7236\u7c7b\uff1a ClassDom[ParentClassDom1,ParentClassDom2] : # \u58f0\u660e\u7ee7\u627fParentClassDom1\u548cParentClassDom2\u4e24\u4e2a\u7236\u7c7b $def : class_domain classes : - airplane[tool][sports tool] # airplane\u7684\u7236\u7c7b\u4e3aParentClassDom1\u7684tool\u4e0eParentClassDom2\u4e2d\u7684sports tool - apple[fruit][food] - backpack[tool][] # backpack\u7684\u7236\u7c7b\u4e3aParentClassDom1\u7684tool\uff0c\u7531\u4e8e\u6ca1\u6709\u5c5e\u4e8eParentClassDom2\u7684\u7236\u7c7b\uff0c\u6240\u4ee5\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u4e3a\u7a7a - banana[fruit][food] - baseball bat[tool][sports tool] - baseball glove[tool][sports tool] - tomato[fruit,vegetable][food] # tomato\u7684\u7236\u7c7b\u4e3aParentClassDom1\u7684fruit\u548cvegetable\u4ee5\u53caParentClassDom2\u7684food","title":"\u8ba1\u7b97\u673a\u89c6\u89c9"},{"location":"zh/examples/cv/#_1","text":"\u672c\u7ae0\u8282\u5b9a\u4e49\u7684\u6240\u6709\u7c7b\u90fd\u5c06\u901a\u8fc7\u6807\u51c6\u5e93cv\u63d0\u4f9b\u3002\u666e\u901a\u7528\u6237\u53ea\u9700\u901a\u8fc7import\u65b9\u5f0f\u5bfc\u5165cv\u6807\u51c6\u5e93\uff0c\u65e0\u9700\u81ea\u5df1\u5199\u7c7b\u522b\u5b9a\u4e49\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u540d\u4e3a``MyClassDom``\u7684\u7c7b\u522b\u57df\u3002","title":"\u8ba1\u7b97\u673a\u89c6\u89c9"},{"location":"zh/examples/cv/#_2","text":"\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u662f\u7ed9\u6bcf\u5f20\u56fe\u50cf\u5206\u914d\u4e00\u4e2a\u7c7b\u522b\u6807\u7b7e\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: ImageClassificationSample : # Each sample contains an image together with a class label (optional). $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] $optional : [ 'label' ] \u5176\u4e2d, $optional \u5b57\u6bb5\u5728\u6570\u636e\u6837\u4f8b\u4e2d\u53ef\u4ee5\u88ab\u7701\u7565\u3002\u5f53 $optional \u4e2d label \u88ab\u5ffd\u7565\u65f6\uff0c\u5bf9\u5e94\u7684\u5b57\u6bb5\u503c\u5c06\u88ab\u8bbe\u7f6e\u6210\u4e00\u4e2a\u7a7a\u503c\uff08\u5bf9\u5e94Python\u4e2d\u7684 None \uff09 \u6570\u636e\u793a\u4f8b: data : sample-type : ImageClassificationSample[cdom=MyClassDom] samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } - { image : \"xyz/0003.jpg\" }","title":"\u56fe\u50cf\u5206\u7c7b"},{"location":"zh/examples/cv/#_3","text":"\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u662f\u68c0\u6d4b\u7ed9\u5b9a\u56fe\u50cf\u4e2d\u7684\u6709\u610f\u4e49\u76ee\u6807\u3002\u6bcf\u4e2a\u88ab\u68c0\u6d4b\u7684\u76ee\u6807\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a\u5e26\u76ee\u6807\u7c7b\u522b\u4fe1\u606f\u7684\u8fb9\u754c\u6846\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: LocalObjectEntry : # Each sample contains a bounding box together a class label (optional). $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] $optional : [ 'label' ] ObjectDetectionSample : # Each sample contains an image together with a list of local objects. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] \u6570\u636e\u793a\u4f8b: data : sample-type : ObjectDetectionSample[cdom=MyClassDom] samples : - image : \"xyz/0001.jpg\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 }","title":"\u76ee\u6807\u68c0\u6d4b"},{"location":"zh/examples/cv/#_4","text":"\u5728\u67d0\u4e9b\u5e94\u7528\u4e2d\uff0c\u573a\u666f\u5206\u7c7b\uff08\u56fe\u50cf\u7ea7\u522b\uff09\u53ca\u76ee\u6807\u68c0\u6d4b\u4f1a\u7ec4\u6210\u4e00\u4e2a\u8054\u5408\u4efb\u52a1\u3002\u5bf9\u4e8e\u8fd9\u6837\u4e00\u4e2a\u4efb\u52a1\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u7c7b\u522b\u57df\uff0c\u8fd9\u91cc\u79f0\u4e3a SceneDom \u548c ObjectDom \uff0c\u5206\u522b\u9650\u5b9a\u573a\u666f\u7c7b\u522b\u548c\u76ee\u6807\u7c7b\u522b\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: SceneAndObjectSample : # Each samples contains an image, a scene label (optional) # together with a list of local objects. $def : struct $params : [ 'scenedom' , 'objectdom' ] $fields : image : Image sclabel : Label[dom=$scenedom] objects : List[LocalObjectEntry[cdom=$objectdom]] $optional : [ 'sclabel' ] \u6570\u636e\u793a\u4f8b: data : sample-type : SceneAndObjectSample[scenedom=SceneDom, objectdom=ObjectDom] samples : - image : \"xyz/0001.jpg\" sclabel : \"street\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" sclabel : \"river\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 }","title":"\u5e26\u573a\u666f\u5206\u7c7b\u7684\u76ee\u6807\u68c0\u6d4b"},{"location":"zh/examples/cv/#_5","text":"\u56fe\u50cf\u5206\u5272\u4efb\u52a1\u662f\u5bf9\u7ed9\u5b9a\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u70b9\u6307\u5b9a\u50cf\u7d20\u7ea7\u6807\u7b7e\u3002\u60ef\u4f8b\u662f\u4f7f\u7528\u6807\u7b7e\u56fe\uff0c\u4e5f\u5c31\u662f\u5728\u4e00\u4e2a\u989d\u5916\u7684\u6587\u4ef6\u4e2d\u5b58\u50a8\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: ImageSegmentationSample : # Each sample contains an image together with a label map. $def : struct $params : [ 'cdom' ] $fields : image : Image labelmap : LabelMap[dom=$cdom] \u6570\u636e\u793a\u4f8b: data : sample-type : ImageSegmentationSample[cdom=MyClassDom] samples : - { image : \"imgs/0001.jpg\" , labelmap : \"maps/0001.ppm\" } - { image : \"imgs/0002.jpg\" , labelmap : \"maps/0002.ppm\" } - { image : \"imgs/0003.jpg\" , labelmap : \"maps/0003.ppm\" }","title":"\u56fe\u50cf\u5206\u5272"},{"location":"zh/examples/cv/#class-domain","text":"","title":"\u5b9a\u4e49\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\u7684class domain"},{"location":"zh/examples/cv/#1","text":"\u5728\u4e00\u4e9b\u6570\u636e\u96c6\u5f53\u4e2d\uff0c\u7c7b\u522b\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\uff0cdsdl\u4e2d\u5141\u8bb8\u4e3a\u6bcf\u4e2a\u7c7b\u522b\u6307\u5b9a\u81ea\u5df1\u7684\u7236\u7c7b\uff0c\u5177\u4f53\u64cd\u4f5c\u4e3a\uff1a \u9996\u5148\u8981\u5b9a\u4e49\u7236\u7c7b\u7684class domain ParentClassDom : $def : class_domain classes : - accessory - animal - appliance - electronic - food - furniture - indoor - kitchen - outdoor - person - sports - vehicle - fruit \u7136\u540e\u5b9a\u4e49\u5b50\u7c7bclass domain\u65f6\uff0c\u9700\u8981\u5728\u5b50\u7c7b\u7684\u540d\u79f0\u540e\u9762\u58f0\u660e\u5176\u5c5e\u4e8e\u7684\u7236\u7c7b\u7684class domain\uff0c\u5e76\u5728\u6bcf\u4e2alabel\u540e\u9762\u5199\u4e0a\u8be5label\u7684\u7236\u7c7b\u7684\u5177\u4f53\u7c7b\u522b\uff1a ClassDom[ParentClassDom] : # \u58f0\u660e\u7236\u7c7b $def : class_domain classes : - airplane[vehicle] # \u6307\u660eairplane\u7684\u7236\u7c7b\u4e3aParentClassDom\u4e2d\u7684vehicle - apple[food] - backpack[accessory] - banana[food,fruit] # \u6307\u660ebanana\u7684\u7236\u7c7b\u6709\u4e24\u4e2a\uff0c\u5206\u522b\u4e3aParentClassDom\u4e2d\u7684food\u548cfruit - baseball bat[sports] - baseball glove[sports] - bear[animal] - bed[furniture] - bench[outdoor] - bicycle[vehicle] - bird[animal] - boat[vehicle]","title":"1. \u5355\u7ee7\u627f"},{"location":"zh/examples/cv/#2","text":"\u5b58\u5728\u4e00\u79cd\u60c5\u51b5\uff0c\u67d0\u4e2a\u7c7b\u522b\u7684\u7236\u7c7b\u6765\u81ea\u4e0d\u540c\u7684class domain\uff0cdsdl\u4e5f\u652f\u6301\u8fd9\u79cd\u591a\u7ee7\u627f\u7684\u5173\u7cfb\uff1a \u9996\u5148\u5b9a\u4e49\u4e24\u4e2a\u4e0d\u540c\u7684\u7236\u7c7bclass domain ParentClassDom1 : $def : class_domain classes : - fruit - tool - vegetable ParentClassDom2 : $def : class_domain classes : - food - sports tool \u7136\u540e\u5b9a\u4e49\u5b50\u7c7bclass domain\uff0c\u7ee7\u627f\u4e0a\u8ff0\u4e24\u4e2a\u7236\u7c7b\uff1a ClassDom[ParentClassDom1,ParentClassDom2] : # \u58f0\u660e\u7ee7\u627fParentClassDom1\u548cParentClassDom2\u4e24\u4e2a\u7236\u7c7b $def : class_domain classes : - airplane[tool][sports tool] # airplane\u7684\u7236\u7c7b\u4e3aParentClassDom1\u7684tool\u4e0eParentClassDom2\u4e2d\u7684sports tool - apple[fruit][food] - backpack[tool][] # backpack\u7684\u7236\u7c7b\u4e3aParentClassDom1\u7684tool\uff0c\u7531\u4e8e\u6ca1\u6709\u5c5e\u4e8eParentClassDom2\u7684\u7236\u7c7b\uff0c\u6240\u4ee5\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u4e3a\u7a7a - banana[fruit][food] - baseball bat[tool][sports tool] - baseball glove[tool][sports tool] - tomato[fruit,vegetable][food] # tomato\u7684\u7236\u7c7b\u4e3aParentClassDom1\u7684fruit\u548cvegetable\u4ee5\u53caParentClassDom2\u7684food","title":"2. \u591a\u7ee7\u627f"},{"location":"zh/lang/basic_types/","text":"2.2 \u57fa\u672c\u6570\u636e\u7c7b\u578b \u57fa\u672c\u6570\u636e\u7c7b\u578b \uff08basic types\uff09\u662fDSDL\u4e2d\u7684\u57fa\u672c\u5143\u7d20\u62bd\u8c61\u51fa\u6765\u7684\u4e00\u4e9b\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u4e9b\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u4f8b\u662f\u6784\u5efa\u4e00\u4e2a\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684\u57fa\u7840\u6784\u5efa\u6a21\u5757\u3002 \u6ce8\u610f\uff1a \u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u6240\u4f7f\u7528\u7684JSON\u548cYAML\u683c\u5f0f\u672c\u8eab\u4e5f\u4f1a\u63d0\u4f9b\u4e86\u4e00\u4e9b\u8bed\u6cd5\u6765\u8868\u793a\u4e00\u4e9b\u7b80\u5355\u7684\u7c7b\u522b\uff0c\u6bd4\u5982\u5e03\u5c14\u7c7b\u578b\uff0c\u6570\u5b57\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\u3002\u5f53\u5728DSDL\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u8bed\u6cd5\u65f6\u6765\u8868\u793a\u4e00\u4e2a\u503c\u65f6\uff0cDSDL\u4f1a\u4fdd\u7559\u8fd9\u4e9b\u503c\u5728JSON/YAML\u683c\u5f0f\u4e2d\u539f\u672c\u7684\u542b\u4e49\u3002\u9700\u8981\u6ce8\u610f\u7684\u5f88\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0cDSDL\u57fa\u672c\u6570\u636e\u7c7b\u578b\u548cJSON\u4e2d\u6570\u636e\u7c7b\u578b \u4e0d\u662f \u4e00\u5bf9\u4e00\u7684\u3002DSDL\u4e2d\u4e0d\u540c\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u53ef\u80fd\u4f1a\u4f7f\u7528\u76f8\u540c\u7684JSON\u7c7b\u578b\u6765\u8868\u793a\u4ed6\u4eec\u5404\u81ea\u7684\u503c\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u7c7b\u578b\uff08 Loc \uff09\u548c\u7c7b\u522b\u6807\u6ce8\u7c7b\u578b\uff08 Label \uff09\u5728DSDL\u4e2d\u662f\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\u4ed6\u4eec\u90fd\u4f7f\u7528\u4e86\u5b57\u7b26\u4e32\u7c7b\u578b\u6765\u8868\u793a\u4ed6\u4eec\u5404\u81ea\u7684\u503c\u3002 2.2.1 \u901a\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b DSDL\u5b9a\u4e49\u4e864\u79cd\u901a\u7528\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002\u8fd94\u79cd\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u88ab\u7b80\u5355\u5730\u89e3\u91ca\uff0c\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 Bool \uff1a\u5e03\u5c14\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u4e3a true \u6216 false \u3002 Int \uff1a\u6574\u6570\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u4e3a\u4efb\u610f\u7684\u6574\u6570\uff0c\u4f8b\u598212\uff0c-3\u62160\u3002\u5f53\u4e00\u4e2a\u6570\u5b57\u88ab\u58f0\u660e\u4e3a Int \u7c7b\u578b\u65f6\uff0cDSDL\u89e3\u91ca\u5668\u4f1a\u9a8c\u8bc1\u5b83\u662f\u5426\u771f\u7684\u662f\u4e00\u4e2a\u6574\u6570\u3002 Num \uff1a\u901a\u7528\u6570\u503c\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u7684\u6570\u5b57\uff0c\u4f8b\u598212.5\uff0c-13\uff0c1.25e-6\u3002 Str \uff1a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\"hello\"\uff0c\"a\"\uff0c\"\"\u3002 2.2.2 \u7279\u6b8a\u57fa\u672c\u6570\u636e\u7c7b\u578b DSDL\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5177\u6709\u7279\u6b8a\u542b\u4e49\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u4e9b\u6570\u636e\u7c7b\u578b\u7684\u503c\u540c\u6837\u901a\u8fc7\u5b57\u7b26\u4e32\u6216\u5176\u4ed6JSON\u683c\u5f0f\u7684\u57fa\u672c\u7c7b\u578b\u6765\u8868\u793a\uff0c\u4f46\u662f\u4ed6\u4eec\u6709\u7279\u6b8a\u7684\u8bed\u4e49\uff0cDSDL\u89e3\u6790\u5668\u4f1a\u6839\u636e\u4ed6\u4eec\u5404\u81ea\u7684\u8bed\u4e49\u76f8\u5e94\u5730\u89e3\u6790\u4ed6\u4eec\u3002 Coord \uff1a2D\u5750\u6807\uff0c\u683c\u5f0f\u4e3a [x, y] Coord3D \uff1a3D\u5750\u6807\uff0c\u683c\u5f0f\u4e3a [x, y, z] Interval \uff1a\u5e8f\u5217\u95f4\u9694\uff0c\u683c\u5f0f\u4e3a [begin, end] BBox \uff1abounding box\uff0c\u683c\u5f0f\u4e3a [x, y, w, h] Polygon \uff1a\u591a\u8fb9\u5f62\u7531\u591a\u4e2a2D\u5750\u6807\u6765\u8868\u793a\uff0c\u683c\u5f0f\u4e3a [[x1, y1], [x2, y2], ...] Date \uff1a\u65e5\u671f\u7531\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\uff0c\u683c\u5f0f\u8be6\u89c1 strftime spec Time \uff1a\u65f6\u95f4\u7531\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\uff0c\u683c\u5f0f\u8be6\u89c1 strftime spec 2.2.3 Label\uff1a\u7c7b\u522b\u6807\u6ce8\u6570\u636e\u7c7b\u578b \u5206\u7c7b\u4efb\u52a1\u65e8\u5728\u8d4b\u4e88\u76ee\u6807\u8bed\u4e49\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u4f7f\u7528 \u7c7b\u522b\u6807\u6ce8 \u6765\u63cf\u8ff0\u76ee\u6807\u5c5e\u4e8e\u7684\u7c7b\u522b\u3002\u5728DSDL\u4e2d\uff0c\u7c7b\u522b\u6807\u6ce8\u662f\u7c7b\u578b\u6307\u5b9a\u4e3a Label \u7684\u5b57\u7b26\u4e32\u3002 \u5728\u5b9e\u9645\u5f53\u4e2d\uff0c\u4e0d\u540c\u7684\u5206\u7c7b\u4efb\u52a1\u4e2d\u7684\u7c7b\u522b\u4e5f\u5e94\u8be5\u662f\u4e0d\u540c\u7684\u3002DSDL\u5f15\u5165\u4e86 \u7c7b\u522b\u57df \uff08class domain\uff09\u7684\u6982\u5ff5\uff0c\u6765\u63cf\u8ff0\u4e0d\u540c\u5206\u7c7b\u4efb\u52a1\u4e2d\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u6bcf\u4e2a\u7c7b\u522b\u57df\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\u522b\u5217\u8868\u6216\u662f\u4e00\u4e2a\u7c7b\u522b\u5c42\u7ea7\u5173\u7cfb\u3002\u7ed9\u5b9a\u8981\u7ed9\u7c7b\u522b\u57df\uff0c\u7c7b\u522b\u6807\u6ce8\u5219\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u4e24\u79cd\u5f62\u5f0f\u4e4b\u4e00\u6765\u63cf\u8ff0\uff1a \u57fa\u4e8e\u7c7b\u522b\u540d \uff1a\u683c\u5f0f\u4e3a \"<class-domain>::<class-name>\" \uff0c\u6bd4\u5982 COCO::cat \u8868\u793a\u4e86 COCO \u7c7b\u522b\u57df\u5185\u7684\u7c7b\u522b cat \u3002 \u57fa\u4e8e\u7c7b\u522b\u7d22\u5f15 \uff1a\u683c\u5f0f\u4e3a \"<class-domain>[class-index]\" \uff0c\u6bd4\u5982 COCO[3] \u8868\u793a COCO \u7c7b\u522b\u57df\u5185\u7b2c\u4e09\u4e2a\u7c7b\u522b \u5bf9\u4e8e\u4e00\u4e2a\u6709\u5c42\u7ea7\u5173\u7cfb\u7684\u7c7b\u522b\u7684\u7c7b\u522b\u57df\uff0c\u7c7b\u522b\u6807\u6ce8\u53ef\u4ee5\u7528\u70b9\u5206\u9694\u7b26\u8def\u5f84\u6765\u8868\u793a\uff0c\u6bd4\u5982 \"MyDom::animal.dog.hound\" \u6216\u8005 \"MyDom[3.2.5]\" \u6ce8\u610f\uff1a \u6211\u4eec\u6b63\u5728\u8bd5\u56fe\u7edf\u4e00\u5404\u79cd\u4efb\u52a1\u7c7b\u578b\u7684\u7c7b\u522b\u6807\u6ce8\u7cfb\u7edf\u3002\u56e0\u6b64\u6211\u4eec\u5c06\u9884\u7559\u4e00\u4e2a\u57df\u540d std \uff0c\u7528\u4e8e\u5728\u4ee5\u540e\u63cf\u8ff0\u6807\u51c6\u7684\u5206\u7c7b\u4efb\u52a1\u7684\u5206\u7c7b\u57df\u3002 2.2.4 Attributes: \u5c5e\u6027\u7c7b\u578b \u5728DSDL\u4e2d\uff0c\u8fd8\u989d\u5916\u5b58\u5728\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\u578b\u2014\u2014\u5c5e\u6027\u7c7b\u578b\uff0c\u5982\u679c\u6570\u636e\u96c6\u5b58\u5728\u90a3\u4e9b\u7528\u6765\u63cf\u8ff0\u56fe\u50cf\u3001\u6807\u6ce8\u7684\u5143\u4fe1\u606f\uff0c\u5219\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4fe1\u606f\u58f0\u660e\u4e3a \u5c5e\u6027\u7c7b\u578b \uff0c\u800c\u5c06\u4e00\u4e2a\u5b57\u6bb5\u58f0\u660e\u4e3a\u5c5e\u6027\u7c7b\u578b\u7684\u65b9\u5f0f\u5f88\u7b80\u5355\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u5b57\u6bb5 iscrowd \u662f Bool \u7c7b\u578b\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u4e0b\u8ff0\u7684\u58f0\u660e\uff1a iscrowd : Bool[is_attr=True] \u8fd9\u6837\uff0cDSDL\u5728\u5904\u7406 iscrowd \u5b57\u6bb5\u65f6\uff0c\u5c31\u4f1a\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a \u5c5e\u6027 \uff0c\u5e76\u4e14\u5176\u503c\u5c06\u4f5c\u4e3a Bool \u7c7b\u578b\u5b58\u50a8\u8fdb\u5185\u5b58\u3002 2.2.5 Loc\uff1a\u5bf9\u8c61\u5b9a\u4f4d\u6570\u636e\u7c7b\u578b \u5bf9\u8c61\u5b9a\u4f4d\u5668\u7684\u4f5c\u7528\u662f\u4f5c\u4e3a\u5bf9\u56fe\u50cf\uff0c\u89c6\u9891\uff0c\u6587\u672c\u7b49\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u6570\u636e\u7c7b\u578b\u5373\u4e3a Loc \u6570\u636e\u7c7b\u578b\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u5177\u4f53\u503c\u901a\u8fc7\u4e00\u4e2a\u7279\u6b8a\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u6765\u8868\u793a\u3002\u5177\u4f53\u6765\u8bb2\uff0cDSDL\u652f\u63013\u79cd\u65b9\u5f0f\u6765\u63cf\u8ff0\u4e00\u4e2a\u5bf9\u8c61\u5b9a\u4f4d\u5668\uff1a relative path \uff1a\u76f8\u5bf9\u4e8e\u6570\u636e\u96c6\u7684\u6839\u8def\u5f84\u7684\u8def\u5f84\u3002\u5bf9\u8c61\u5b9a\u4f4d\u5668\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u5c31\u662f\u76f8\u5bf9\u8def\u5f84\u3002\u5f53\u5bf9\u8c61\u5b9a\u4f4d\u5668\u5b57\u7b26\u4e32\u6ca1\u6709\u7279\u6b8a\u7684\u524d\u7f00\u65f6\uff0c\u4ed6\u5c31\u4f1a\u88ab\u5f53\u4f5c\u662f\u4e00\u4e2a\u76f8\u5bf9\u8def\u5f84\u3002\u4f8b\u5982\uff0c \"abc/001.jpg\" \u5c06\u4f1a\u88ab\u89e3\u6790\u4e3a \"<data-root>/abc/001.jpg\" \uff0c\u5176\u4e2d data-root \u4e3a\u6839\u76ee\u5f55\uff0c\u6240\u6709\u7684\u6570\u636e\u5bf9\u8c61\u90fd\u5b58\u50a8\u5176\u4e2d\uff0c\u5e76\u4e14\u6839\u76ee\u5f55\u53ef\u4ee5\u5728\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002 alias path \uff1a\u5f53\u4e00\u4e2a\u6570\u636e\u96c6\u4e2d\u7684\u6570\u636e\u5bf9\u8c61\u5206\u6563\u5b58\u50a8\u5728\u591a\u4e2a\u6e90\u76ee\u5f55\u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u522b\u540d\u6765\u7b80\u5316\u8def\u5f84\u7684\u8868\u793a\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff0c $mydir1/abc/001.jpg \uff0c\u5176\u4e2d $ \u8868\u793a mydir1 \u662f\u4e00\u4e2a\u522b\u540d\uff0c\u5e94\u8be5\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u4e2d\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u6765\u6307\u5b9a\uff0c\u6216\u662f\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6765\u6307\u5b9a\u3002 object id \uff1a\u7531\u4e00\u4e2a\u524d\u7f00\u4e3a :: \u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff0c \"::cuhk.ie::abcd1234xyz\" \uff0c\u5176\u4e2d cuhk.ie \u4e3a\u6570\u636e\u57df\u7684\u540d\u5b57\uff0c\u800c abcd1234xyz \u4e3a\u4e00\u4e2aID\u5b57\u7b26\u4e32\uff0c\u662f\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61\u5728\u6570\u636e\u57df\u4e2d\u7684\u552f\u4e00\u7684\u8868\u793a\u3002\u5f53\u4f7f\u7528object id\u8868\u793a\u5f62\u5f0f\u662f\uff0c\u6570\u636e\u5e73\u53f0\u9700\u8981\u63d0\u4f9b\u4e00\u4e2akey-value\u6620\u5c04\uff0c\u5b9e\u73b0\u5c06ID\u5b57\u7b26\u4e32\u6620\u5c04\u5230\u6570\u636e\u6240\u5728\u7684\u5b9e\u9645\u5730\u5740\u3002 2.2.6 \u4f7f\u7528\u7c7b\u578b\u53c2\u6570 \u4eceDSDL\u7f16\u8bd1\u5668\u7684\u89c6\u89d2\u6765\u770b\uff0c\u5143\u7d20\u7684\u7c7b\u578b\u51b3\u5b9a\u4e86\u8be5\u5143\u7d20\u5982\u4f55\u88ab\u89e3\u6790\u4e0e\u9a8c\u8bc1\u3002\u9664\u4e86\u7c7b\u578b\u540d\u79f0\u4ee5\u5916\uff0cDSDL\u8fd8\u5141\u8bb8\u7528\u6237\u63d0\u4f9b \u7c7b\u578b\u53c2\u6570 \u6765\u81ea\u5b9a\u4e49\u5143\u7d20\u5982\u4f55\u88ab\u8868\u793a\uff0c\u89e3\u6790\u4e0e\u9a8c\u8bc1\u3002 \u4f7f\u7528\u7c7b\u578b\u53c2\u6570\u7684Label\u6570\u636e\u7c7b\u578b \u5728 \u5feb\u901f\u5165\u95e8 \u4e2d\u7684\u7684\u4f8b\u5b50\u4e2d\uff0c ImageClassificationSample \u4e2d\u7684 label \u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u6307\u5b9a\u4e3a\u4e86 Label[dom=MyClassDom] \u3002 \u8fd9\u91cc\uff0c Label \u5c31\u662f\u4e00\u4e2a \u542b\u53c2\u7684\u6570\u636e\u7c7b\u578b \uff08parametric type\uff09\uff0c\u6307\u5b9a\u4e86\u4e00\u4e2a \u7c7b\u578b\u53c2\u6570 dom \u3002\u8fd9\u91cc\u7684 dom \u53c2\u6570\u6307\u5b9a\u4e86label\u5c5e\u4e8e\u7684\u7c7b\u522b\u57df\u3002 \u5f53\u7c7b\u522b\u57df\u88ab\u663e\u793a\u5730\u6307\u5b9a\u4e4b\u540e\uff08\u4f8b\u5b50\u4e2d\u6307\u5b9a\u4e3a MyClassDom \uff09\uff0c\u5c31\u4e0d\u9700\u8981\u518d\u5728\u6570\u636e\u5bf9\u8c61\u4e2d\u6307\u660e\u6807\u6ce8\u7c7b\u522b\u7684\u7c7b\u522b\u57df\u4e86\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6570\u636e\u5bf9\u8c61\u4e2d\u7684\u6807\u6ce8\u7c7b\u522b MyClassDom::cat \u6b64\u65f6\u53ef\u4ee5\u76f4\u63a5\u7b80\u5199\u4e3a cat \uff1b\u6570\u636e\u5bf9\u8c61\u4e2d\u7684\u6807\u6ce8\u7c7b\u522b MyClassDom[2] \u6b64\u65f6\u53ef\u4ee5\u76f4\u63a5\u7b80\u5199\u4e3a 2 \u3002 \u4f7f\u7528\u7c7b\u578b\u53c2\u6570\u7684Date\u548cTime\u6570\u636e\u7c7b\u578b \u5bf9\u4e8e Date \u548c Time \u6570\u636e\u7c7b\u578b\uff0c\u5f53\u6ca1\u6709\u663e\u793a\u5730\u6307\u5b9a\u7c7b\u578b\u53c2\u6570\u7684\u8bdd\uff0c\u5b83\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u503c\u5e94\u8be5\u9075\u5faaISO 8601\u683c\u5f0f\u3002\u89e3\u6790\u5668\u4f1a date.fromisoformat \u548c time.fromisoformat \u6765\u89e3\u6790\u5b57\u7b26\u4e32\u3002 \u7528\u6237\u8fd8\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u7c7b\u578b\u53c2\u6570 fmt \u6765\u81ea\u5b9a\u4e49\u683c\u5f0f\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u6570\u636e\u7c7b\u578b Time[fmt=\"%H:%M\"] \u6765\u8981\u6c42\u6570\u636e\u503c\u9075\u5faa %H:%M \u7684\u683c\u5f0f\uff0c\u4f8b\u5982 \"15:32\" \u3002\u5f53 fmt \u88ab\u663e\u793a\u5730\u6307\u5b9a\u4e86\uff0c fmt \u7684\u503c\u4f1a\u88ab\u4f20\u5165 strptime \u51fd\u6570\u6765\u89e3\u6790\u65f6\u95f4\u5b57\u7b26\u4e32\u3002 Data \u6570\u636e\u7c7b\u578b\u540c\u6837\u53ef\u4ee5\u6307\u5b9a\u8be5\u53c2\u6570\u3002 2.2.7 \u5217\u8868\u6570\u636e\u7c7b\u578b DSDL\u63d0\u4f9b\u4e86\u542b\u53c2\u6570\u636e\u7c7b\u578b List \u6765\u8868\u793a\u65e0\u5e8f\u6216\u6709\u5e8f\u7684\u5217\u8868\u3002\u5177\u4f53\u6765\u8bf4\uff0c List \u6570\u636e\u7c7b\u578b\u7684\u5b9e\u4f8b\u662f\u5305\u542b\u4e86\u591a\u4e2a\u6570\u636e\u7c7b\u578b\u76f8\u540c\u7684\u5143\u7d20\u7684\u5217\u8868\u3002 \u542b\u53c2\u6570\u636e\u7c7b\u578b List \u6709\u4e24\u4e2a\u53c2\u6570\uff1a etype \uff1a\u5217\u8868\u4e2d\u5355\u4e2a\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u88ab\u663e\u793a\u5730\u6307\u5b9a\u3002 ordered \uff1a\u5217\u8868\u4e2d\u7684\u5143\u7d20\u4e4b\u95f4\u662f\u5426\u6709\u987a\u5e8f\u5173\u7cfb\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u503c\u4e3a false \u3002\u53ea\u6709\u5f53\u5e8f\u5217\u662f\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u53c2\u6570\u624d\u5e94\u8be5\u88ab\u8bbe\u4e3a true \uff0c\u6bd4\u5982\u89c6\u9891\u5e27\u5e8f\u5217\u4e0e\u65f6\u95f4\u5e8f\u5217\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5143\u7d20\u4e3a\u6574\u578b\u7684\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u5217\u8868\u6570\u636e\u7c7b\u578b\u8868\u793a\u4e3a List[Int] \uff1b\u5bf9\u4e8e\u5143\u7d20\u4e3a\u7c7b\u522b\u57df\u4e3a MyClassDom \u7684\u7c7b\u522b\u6807\u6ce8\u7684\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u5217\u8868\u6570\u636e\u7c7b\u578b\u8868\u793a\u4e3a List[Label[MyClassDom]]","title":"\u57fa\u672c\u6570\u636e\u7c7b\u578b"},{"location":"zh/lang/basic_types/#22","text":"\u57fa\u672c\u6570\u636e\u7c7b\u578b \uff08basic types\uff09\u662fDSDL\u4e2d\u7684\u57fa\u672c\u5143\u7d20\u62bd\u8c61\u51fa\u6765\u7684\u4e00\u4e9b\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u4e9b\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u4f8b\u662f\u6784\u5efa\u4e00\u4e2a\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684\u57fa\u7840\u6784\u5efa\u6a21\u5757\u3002 \u6ce8\u610f\uff1a \u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u6240\u4f7f\u7528\u7684JSON\u548cYAML\u683c\u5f0f\u672c\u8eab\u4e5f\u4f1a\u63d0\u4f9b\u4e86\u4e00\u4e9b\u8bed\u6cd5\u6765\u8868\u793a\u4e00\u4e9b\u7b80\u5355\u7684\u7c7b\u522b\uff0c\u6bd4\u5982\u5e03\u5c14\u7c7b\u578b\uff0c\u6570\u5b57\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\u3002\u5f53\u5728DSDL\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u8bed\u6cd5\u65f6\u6765\u8868\u793a\u4e00\u4e2a\u503c\u65f6\uff0cDSDL\u4f1a\u4fdd\u7559\u8fd9\u4e9b\u503c\u5728JSON/YAML\u683c\u5f0f\u4e2d\u539f\u672c\u7684\u542b\u4e49\u3002\u9700\u8981\u6ce8\u610f\u7684\u5f88\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0cDSDL\u57fa\u672c\u6570\u636e\u7c7b\u578b\u548cJSON\u4e2d\u6570\u636e\u7c7b\u578b \u4e0d\u662f \u4e00\u5bf9\u4e00\u7684\u3002DSDL\u4e2d\u4e0d\u540c\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u53ef\u80fd\u4f1a\u4f7f\u7528\u76f8\u540c\u7684JSON\u7c7b\u578b\u6765\u8868\u793a\u4ed6\u4eec\u5404\u81ea\u7684\u503c\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u7c7b\u578b\uff08 Loc \uff09\u548c\u7c7b\u522b\u6807\u6ce8\u7c7b\u578b\uff08 Label \uff09\u5728DSDL\u4e2d\u662f\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\u4ed6\u4eec\u90fd\u4f7f\u7528\u4e86\u5b57\u7b26\u4e32\u7c7b\u578b\u6765\u8868\u793a\u4ed6\u4eec\u5404\u81ea\u7684\u503c\u3002","title":"2.2 \u57fa\u672c\u6570\u636e\u7c7b\u578b"},{"location":"zh/lang/basic_types/#221","text":"DSDL\u5b9a\u4e49\u4e864\u79cd\u901a\u7528\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002\u8fd94\u79cd\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u88ab\u7b80\u5355\u5730\u89e3\u91ca\uff0c\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 Bool \uff1a\u5e03\u5c14\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u4e3a true \u6216 false \u3002 Int \uff1a\u6574\u6570\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u4e3a\u4efb\u610f\u7684\u6574\u6570\uff0c\u4f8b\u598212\uff0c-3\u62160\u3002\u5f53\u4e00\u4e2a\u6570\u5b57\u88ab\u58f0\u660e\u4e3a Int \u7c7b\u578b\u65f6\uff0cDSDL\u89e3\u91ca\u5668\u4f1a\u9a8c\u8bc1\u5b83\u662f\u5426\u771f\u7684\u662f\u4e00\u4e2a\u6574\u6570\u3002 Num \uff1a\u901a\u7528\u6570\u503c\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u7684\u6570\u5b57\uff0c\u4f8b\u598212.5\uff0c-13\uff0c1.25e-6\u3002 Str \uff1a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\"hello\"\uff0c\"a\"\uff0c\"\"\u3002","title":"2.2.1 \u901a\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b"},{"location":"zh/lang/basic_types/#222","text":"DSDL\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5177\u6709\u7279\u6b8a\u542b\u4e49\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u4e9b\u6570\u636e\u7c7b\u578b\u7684\u503c\u540c\u6837\u901a\u8fc7\u5b57\u7b26\u4e32\u6216\u5176\u4ed6JSON\u683c\u5f0f\u7684\u57fa\u672c\u7c7b\u578b\u6765\u8868\u793a\uff0c\u4f46\u662f\u4ed6\u4eec\u6709\u7279\u6b8a\u7684\u8bed\u4e49\uff0cDSDL\u89e3\u6790\u5668\u4f1a\u6839\u636e\u4ed6\u4eec\u5404\u81ea\u7684\u8bed\u4e49\u76f8\u5e94\u5730\u89e3\u6790\u4ed6\u4eec\u3002 Coord \uff1a2D\u5750\u6807\uff0c\u683c\u5f0f\u4e3a [x, y] Coord3D \uff1a3D\u5750\u6807\uff0c\u683c\u5f0f\u4e3a [x, y, z] Interval \uff1a\u5e8f\u5217\u95f4\u9694\uff0c\u683c\u5f0f\u4e3a [begin, end] BBox \uff1abounding box\uff0c\u683c\u5f0f\u4e3a [x, y, w, h] Polygon \uff1a\u591a\u8fb9\u5f62\u7531\u591a\u4e2a2D\u5750\u6807\u6765\u8868\u793a\uff0c\u683c\u5f0f\u4e3a [[x1, y1], [x2, y2], ...] Date \uff1a\u65e5\u671f\u7531\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\uff0c\u683c\u5f0f\u8be6\u89c1 strftime spec Time \uff1a\u65f6\u95f4\u7531\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\uff0c\u683c\u5f0f\u8be6\u89c1 strftime spec","title":"2.2.2 \u7279\u6b8a\u57fa\u672c\u6570\u636e\u7c7b\u578b"},{"location":"zh/lang/basic_types/#223-label","text":"\u5206\u7c7b\u4efb\u52a1\u65e8\u5728\u8d4b\u4e88\u76ee\u6807\u8bed\u4e49\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u4f7f\u7528 \u7c7b\u522b\u6807\u6ce8 \u6765\u63cf\u8ff0\u76ee\u6807\u5c5e\u4e8e\u7684\u7c7b\u522b\u3002\u5728DSDL\u4e2d\uff0c\u7c7b\u522b\u6807\u6ce8\u662f\u7c7b\u578b\u6307\u5b9a\u4e3a Label \u7684\u5b57\u7b26\u4e32\u3002 \u5728\u5b9e\u9645\u5f53\u4e2d\uff0c\u4e0d\u540c\u7684\u5206\u7c7b\u4efb\u52a1\u4e2d\u7684\u7c7b\u522b\u4e5f\u5e94\u8be5\u662f\u4e0d\u540c\u7684\u3002DSDL\u5f15\u5165\u4e86 \u7c7b\u522b\u57df \uff08class domain\uff09\u7684\u6982\u5ff5\uff0c\u6765\u63cf\u8ff0\u4e0d\u540c\u5206\u7c7b\u4efb\u52a1\u4e2d\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u6bcf\u4e2a\u7c7b\u522b\u57df\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\u522b\u5217\u8868\u6216\u662f\u4e00\u4e2a\u7c7b\u522b\u5c42\u7ea7\u5173\u7cfb\u3002\u7ed9\u5b9a\u8981\u7ed9\u7c7b\u522b\u57df\uff0c\u7c7b\u522b\u6807\u6ce8\u5219\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u4e24\u79cd\u5f62\u5f0f\u4e4b\u4e00\u6765\u63cf\u8ff0\uff1a \u57fa\u4e8e\u7c7b\u522b\u540d \uff1a\u683c\u5f0f\u4e3a \"<class-domain>::<class-name>\" \uff0c\u6bd4\u5982 COCO::cat \u8868\u793a\u4e86 COCO \u7c7b\u522b\u57df\u5185\u7684\u7c7b\u522b cat \u3002 \u57fa\u4e8e\u7c7b\u522b\u7d22\u5f15 \uff1a\u683c\u5f0f\u4e3a \"<class-domain>[class-index]\" \uff0c\u6bd4\u5982 COCO[3] \u8868\u793a COCO \u7c7b\u522b\u57df\u5185\u7b2c\u4e09\u4e2a\u7c7b\u522b \u5bf9\u4e8e\u4e00\u4e2a\u6709\u5c42\u7ea7\u5173\u7cfb\u7684\u7c7b\u522b\u7684\u7c7b\u522b\u57df\uff0c\u7c7b\u522b\u6807\u6ce8\u53ef\u4ee5\u7528\u70b9\u5206\u9694\u7b26\u8def\u5f84\u6765\u8868\u793a\uff0c\u6bd4\u5982 \"MyDom::animal.dog.hound\" \u6216\u8005 \"MyDom[3.2.5]\" \u6ce8\u610f\uff1a \u6211\u4eec\u6b63\u5728\u8bd5\u56fe\u7edf\u4e00\u5404\u79cd\u4efb\u52a1\u7c7b\u578b\u7684\u7c7b\u522b\u6807\u6ce8\u7cfb\u7edf\u3002\u56e0\u6b64\u6211\u4eec\u5c06\u9884\u7559\u4e00\u4e2a\u57df\u540d std \uff0c\u7528\u4e8e\u5728\u4ee5\u540e\u63cf\u8ff0\u6807\u51c6\u7684\u5206\u7c7b\u4efb\u52a1\u7684\u5206\u7c7b\u57df\u3002","title":"2.2.3 Label\uff1a\u7c7b\u522b\u6807\u6ce8\u6570\u636e\u7c7b\u578b"},{"location":"zh/lang/basic_types/#224-attributes","text":"\u5728DSDL\u4e2d\uff0c\u8fd8\u989d\u5916\u5b58\u5728\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\u578b\u2014\u2014\u5c5e\u6027\u7c7b\u578b\uff0c\u5982\u679c\u6570\u636e\u96c6\u5b58\u5728\u90a3\u4e9b\u7528\u6765\u63cf\u8ff0\u56fe\u50cf\u3001\u6807\u6ce8\u7684\u5143\u4fe1\u606f\uff0c\u5219\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4fe1\u606f\u58f0\u660e\u4e3a \u5c5e\u6027\u7c7b\u578b \uff0c\u800c\u5c06\u4e00\u4e2a\u5b57\u6bb5\u58f0\u660e\u4e3a\u5c5e\u6027\u7c7b\u578b\u7684\u65b9\u5f0f\u5f88\u7b80\u5355\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u5b57\u6bb5 iscrowd \u662f Bool \u7c7b\u578b\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u4e0b\u8ff0\u7684\u58f0\u660e\uff1a iscrowd : Bool[is_attr=True] \u8fd9\u6837\uff0cDSDL\u5728\u5904\u7406 iscrowd \u5b57\u6bb5\u65f6\uff0c\u5c31\u4f1a\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a \u5c5e\u6027 \uff0c\u5e76\u4e14\u5176\u503c\u5c06\u4f5c\u4e3a Bool \u7c7b\u578b\u5b58\u50a8\u8fdb\u5185\u5b58\u3002","title":"2.2.4 Attributes: \u5c5e\u6027\u7c7b\u578b"},{"location":"zh/lang/basic_types/#225-loc","text":"\u5bf9\u8c61\u5b9a\u4f4d\u5668\u7684\u4f5c\u7528\u662f\u4f5c\u4e3a\u5bf9\u56fe\u50cf\uff0c\u89c6\u9891\uff0c\u6587\u672c\u7b49\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u6570\u636e\u7c7b\u578b\u5373\u4e3a Loc \u6570\u636e\u7c7b\u578b\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u5177\u4f53\u503c\u901a\u8fc7\u4e00\u4e2a\u7279\u6b8a\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u6765\u8868\u793a\u3002\u5177\u4f53\u6765\u8bb2\uff0cDSDL\u652f\u63013\u79cd\u65b9\u5f0f\u6765\u63cf\u8ff0\u4e00\u4e2a\u5bf9\u8c61\u5b9a\u4f4d\u5668\uff1a relative path \uff1a\u76f8\u5bf9\u4e8e\u6570\u636e\u96c6\u7684\u6839\u8def\u5f84\u7684\u8def\u5f84\u3002\u5bf9\u8c61\u5b9a\u4f4d\u5668\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u5c31\u662f\u76f8\u5bf9\u8def\u5f84\u3002\u5f53\u5bf9\u8c61\u5b9a\u4f4d\u5668\u5b57\u7b26\u4e32\u6ca1\u6709\u7279\u6b8a\u7684\u524d\u7f00\u65f6\uff0c\u4ed6\u5c31\u4f1a\u88ab\u5f53\u4f5c\u662f\u4e00\u4e2a\u76f8\u5bf9\u8def\u5f84\u3002\u4f8b\u5982\uff0c \"abc/001.jpg\" \u5c06\u4f1a\u88ab\u89e3\u6790\u4e3a \"<data-root>/abc/001.jpg\" \uff0c\u5176\u4e2d data-root \u4e3a\u6839\u76ee\u5f55\uff0c\u6240\u6709\u7684\u6570\u636e\u5bf9\u8c61\u90fd\u5b58\u50a8\u5176\u4e2d\uff0c\u5e76\u4e14\u6839\u76ee\u5f55\u53ef\u4ee5\u5728\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002 alias path \uff1a\u5f53\u4e00\u4e2a\u6570\u636e\u96c6\u4e2d\u7684\u6570\u636e\u5bf9\u8c61\u5206\u6563\u5b58\u50a8\u5728\u591a\u4e2a\u6e90\u76ee\u5f55\u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u522b\u540d\u6765\u7b80\u5316\u8def\u5f84\u7684\u8868\u793a\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff0c $mydir1/abc/001.jpg \uff0c\u5176\u4e2d $ \u8868\u793a mydir1 \u662f\u4e00\u4e2a\u522b\u540d\uff0c\u5e94\u8be5\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u4e2d\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u6765\u6307\u5b9a\uff0c\u6216\u662f\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6765\u6307\u5b9a\u3002 object id \uff1a\u7531\u4e00\u4e2a\u524d\u7f00\u4e3a :: \u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff0c \"::cuhk.ie::abcd1234xyz\" \uff0c\u5176\u4e2d cuhk.ie \u4e3a\u6570\u636e\u57df\u7684\u540d\u5b57\uff0c\u800c abcd1234xyz \u4e3a\u4e00\u4e2aID\u5b57\u7b26\u4e32\uff0c\u662f\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61\u5728\u6570\u636e\u57df\u4e2d\u7684\u552f\u4e00\u7684\u8868\u793a\u3002\u5f53\u4f7f\u7528object id\u8868\u793a\u5f62\u5f0f\u662f\uff0c\u6570\u636e\u5e73\u53f0\u9700\u8981\u63d0\u4f9b\u4e00\u4e2akey-value\u6620\u5c04\uff0c\u5b9e\u73b0\u5c06ID\u5b57\u7b26\u4e32\u6620\u5c04\u5230\u6570\u636e\u6240\u5728\u7684\u5b9e\u9645\u5730\u5740\u3002","title":"2.2.5 Loc\uff1a\u5bf9\u8c61\u5b9a\u4f4d\u6570\u636e\u7c7b\u578b"},{"location":"zh/lang/basic_types/#226","text":"\u4eceDSDL\u7f16\u8bd1\u5668\u7684\u89c6\u89d2\u6765\u770b\uff0c\u5143\u7d20\u7684\u7c7b\u578b\u51b3\u5b9a\u4e86\u8be5\u5143\u7d20\u5982\u4f55\u88ab\u89e3\u6790\u4e0e\u9a8c\u8bc1\u3002\u9664\u4e86\u7c7b\u578b\u540d\u79f0\u4ee5\u5916\uff0cDSDL\u8fd8\u5141\u8bb8\u7528\u6237\u63d0\u4f9b \u7c7b\u578b\u53c2\u6570 \u6765\u81ea\u5b9a\u4e49\u5143\u7d20\u5982\u4f55\u88ab\u8868\u793a\uff0c\u89e3\u6790\u4e0e\u9a8c\u8bc1\u3002 \u4f7f\u7528\u7c7b\u578b\u53c2\u6570\u7684Label\u6570\u636e\u7c7b\u578b \u5728 \u5feb\u901f\u5165\u95e8 \u4e2d\u7684\u7684\u4f8b\u5b50\u4e2d\uff0c ImageClassificationSample \u4e2d\u7684 label \u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u6307\u5b9a\u4e3a\u4e86 Label[dom=MyClassDom] \u3002 \u8fd9\u91cc\uff0c Label \u5c31\u662f\u4e00\u4e2a \u542b\u53c2\u7684\u6570\u636e\u7c7b\u578b \uff08parametric type\uff09\uff0c\u6307\u5b9a\u4e86\u4e00\u4e2a \u7c7b\u578b\u53c2\u6570 dom \u3002\u8fd9\u91cc\u7684 dom \u53c2\u6570\u6307\u5b9a\u4e86label\u5c5e\u4e8e\u7684\u7c7b\u522b\u57df\u3002 \u5f53\u7c7b\u522b\u57df\u88ab\u663e\u793a\u5730\u6307\u5b9a\u4e4b\u540e\uff08\u4f8b\u5b50\u4e2d\u6307\u5b9a\u4e3a MyClassDom \uff09\uff0c\u5c31\u4e0d\u9700\u8981\u518d\u5728\u6570\u636e\u5bf9\u8c61\u4e2d\u6307\u660e\u6807\u6ce8\u7c7b\u522b\u7684\u7c7b\u522b\u57df\u4e86\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6570\u636e\u5bf9\u8c61\u4e2d\u7684\u6807\u6ce8\u7c7b\u522b MyClassDom::cat \u6b64\u65f6\u53ef\u4ee5\u76f4\u63a5\u7b80\u5199\u4e3a cat \uff1b\u6570\u636e\u5bf9\u8c61\u4e2d\u7684\u6807\u6ce8\u7c7b\u522b MyClassDom[2] \u6b64\u65f6\u53ef\u4ee5\u76f4\u63a5\u7b80\u5199\u4e3a 2 \u3002 \u4f7f\u7528\u7c7b\u578b\u53c2\u6570\u7684Date\u548cTime\u6570\u636e\u7c7b\u578b \u5bf9\u4e8e Date \u548c Time \u6570\u636e\u7c7b\u578b\uff0c\u5f53\u6ca1\u6709\u663e\u793a\u5730\u6307\u5b9a\u7c7b\u578b\u53c2\u6570\u7684\u8bdd\uff0c\u5b83\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u503c\u5e94\u8be5\u9075\u5faaISO 8601\u683c\u5f0f\u3002\u89e3\u6790\u5668\u4f1a date.fromisoformat \u548c time.fromisoformat \u6765\u89e3\u6790\u5b57\u7b26\u4e32\u3002 \u7528\u6237\u8fd8\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u7c7b\u578b\u53c2\u6570 fmt \u6765\u81ea\u5b9a\u4e49\u683c\u5f0f\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u6570\u636e\u7c7b\u578b Time[fmt=\"%H:%M\"] \u6765\u8981\u6c42\u6570\u636e\u503c\u9075\u5faa %H:%M \u7684\u683c\u5f0f\uff0c\u4f8b\u5982 \"15:32\" \u3002\u5f53 fmt \u88ab\u663e\u793a\u5730\u6307\u5b9a\u4e86\uff0c fmt \u7684\u503c\u4f1a\u88ab\u4f20\u5165 strptime \u51fd\u6570\u6765\u89e3\u6790\u65f6\u95f4\u5b57\u7b26\u4e32\u3002 Data \u6570\u636e\u7c7b\u578b\u540c\u6837\u53ef\u4ee5\u6307\u5b9a\u8be5\u53c2\u6570\u3002","title":"2.2.6 \u4f7f\u7528\u7c7b\u578b\u53c2\u6570"},{"location":"zh/lang/basic_types/#227","text":"DSDL\u63d0\u4f9b\u4e86\u542b\u53c2\u6570\u636e\u7c7b\u578b List \u6765\u8868\u793a\u65e0\u5e8f\u6216\u6709\u5e8f\u7684\u5217\u8868\u3002\u5177\u4f53\u6765\u8bf4\uff0c List \u6570\u636e\u7c7b\u578b\u7684\u5b9e\u4f8b\u662f\u5305\u542b\u4e86\u591a\u4e2a\u6570\u636e\u7c7b\u578b\u76f8\u540c\u7684\u5143\u7d20\u7684\u5217\u8868\u3002 \u542b\u53c2\u6570\u636e\u7c7b\u578b List \u6709\u4e24\u4e2a\u53c2\u6570\uff1a etype \uff1a\u5217\u8868\u4e2d\u5355\u4e2a\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u88ab\u663e\u793a\u5730\u6307\u5b9a\u3002 ordered \uff1a\u5217\u8868\u4e2d\u7684\u5143\u7d20\u4e4b\u95f4\u662f\u5426\u6709\u987a\u5e8f\u5173\u7cfb\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u503c\u4e3a false \u3002\u53ea\u6709\u5f53\u5e8f\u5217\u662f\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u53c2\u6570\u624d\u5e94\u8be5\u88ab\u8bbe\u4e3a true \uff0c\u6bd4\u5982\u89c6\u9891\u5e27\u5e8f\u5217\u4e0e\u65f6\u95f4\u5e8f\u5217\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5143\u7d20\u4e3a\u6574\u578b\u7684\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u5217\u8868\u6570\u636e\u7c7b\u578b\u8868\u793a\u4e3a List[Int] \uff1b\u5bf9\u4e8e\u5143\u7d20\u4e3a\u7c7b\u522b\u57df\u4e3a MyClassDom \u7684\u7c7b\u522b\u6807\u6ce8\u7684\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u5217\u8868\u6570\u636e\u7c7b\u578b\u8868\u793a\u4e3a List[Label[MyClassDom]]","title":"2.2.7 \u5217\u8868\u6570\u636e\u7c7b\u578b"},{"location":"zh/lang/get_started/","text":"2.1 \u5feb\u901f\u5165\u95e8 \u5728DSDL\u4e2d\uff0c\u4e00\u4e2a\u6570\u636e\u96c6\u4f1a\u901a\u8fc7\u4e00\u4e2a \u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6 \u6765\u8868\u793a\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e3a\u4e00\u4e2a\u6807\u51c6\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u3002 \u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u662fJSON\u683c\u5f0f\u6216\u662fYAML\u683c\u5f0f\u3002 JSON\u683c\u5f0f\uff1a { \"$dsdl-version\" : \"0.5.0\" , \"meta\" : { \"name\" : \"my-dataset\" , \"creator\" : \"my-team\" , \"dataset-version\" : \"1.0.0\" }, \"defs\" : { \"MyClassDom\" : { \"$def\" : \"class_domain\" , \"classes\" : [ \"dog\" , \"cat\" , \"fish\" , \"tiger\" ] }, \"ImageClassificationSample\" : { \"$def\" : \"struct\" , \"$fields\" : { \"image\" : \"Image\" , \"label\" : \"Label[dom=MyClassDom]\" } } }, \"data\" : { \"sample-type\" : \"ImageClassificationSample\" , \"samples\" : [ { \"image\" : \"xyz/0001.jpg\" , \"label\" : \"cat\" }, { \"image\" : \"xyz/0002.jpg\" , \"label\" : \"dog\" } ] } } YAML\u683c\u5f0f\uff1a $dsdl-version : \"0.5.0\" meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } JSON\u548cYAML\u683c\u5f0f\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u90fd\u53ef\u4ee5 \u51c6\u786e\u5730\u63cf\u8ff0\u76f8\u540c\u7684 \u6570\u636e\u7ed3\u6784\u3002 \u7531\u4e8eYAML\u683c\u5f0f\u7684\u5185\u5bb9\u66f4\u52a0\u7b80\u6d01\uff0c\u5e76\u4e14\u5141\u8bb8\u6ce8\u91ca\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528YAML\u683c\u5f0f\u4f5c\u4e3a\u672c\u6587\u6863\u4e2d\u540e\u7eed\u793a\u4f8b\u7684\u9ed8\u8ba4\u683c\u5f0f\u3002YAML\u683c\u5f0f\u4e5f\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8f6c\u6362\u4e3a\u7b49\u4ef7\u7684JSON\u683c\u5f0f\u3002 \u9996\u5148\uff0c\u4e00\u4e2a\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u88ab\u5927\u81f4\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\uff1a header \uff1a\u6307\u660e\u4e86\u5f53\u524d\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u9700\u8981\u88ab\u5982\u4f55\u89e3\u6790\uff1b meta section \uff1a\u63d0\u4f9b\u4e86\u5f53\u524d\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff1b defs section \uff1a\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5168\u5c40\u7684\u5b9a\u4e49\uff0c\u6bd4\u5982\uff1a\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u522b\uff1b data section \uff1a\u63cf\u8ff0\u4e86\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u6570\u636e \u6ce8\u610f \uff1a \u5e26\u6709\u524d\u7f00 $ \u7684\u5c5e\u6027\u540d\u4e3a\u5728DSDL\u4e2d\u9884\u7559\u7684\u6709\u7279\u6b8a\u542b\u4e49\u7684\u5c5e\u6027\u540d\u3002 DSDL\u7248\u672c\uff08header\u4e2d\u5c5e\u6027\u540d\u4e3a $dsdl-version \uff09\u5fc5\u987b\u88ab\u660e\u786e\u5730\u6307\u660e\u3002\u56e0\u4e3aDSDL\u89e3\u91ca\u5668\u9700\u8981\u901a\u8fc7\u8be5\u5c5e\u6027\u77e5\u9053\u5f53\u524d\u6587\u4ef6\u7684\u7248\u672c\u4fe1\u606f\uff0c\u4ece\u800c\u6b63\u786e\u7684\u89e3\u6790\u5f53\u524d\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e9b\u901a\u7528\u7c7b\u578b\u7684\u5b9a\u4e49\u4e00\u822c\u5728\u6807\u51c6\u5e93\u6216\u6269\u5c55\u5e93\u4e2d\u6709\u63d0\u4f9b\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u4e0d\u9700\u8981\u81ea\u5df1\u5b9a\u4e49\u7c7b\u522b\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49 ImageClassificationSample \u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u4ee5\u53ca\u4f7f\u8be5\u4f8b\u5b50\u5177\u6709\u72ec\u7acb\u6027\u3002","title":"\u5feb\u901f\u5165\u95e8"},{"location":"zh/lang/get_started/#21","text":"\u5728DSDL\u4e2d\uff0c\u4e00\u4e2a\u6570\u636e\u96c6\u4f1a\u901a\u8fc7\u4e00\u4e2a \u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6 \u6765\u8868\u793a\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e3a\u4e00\u4e2a\u6807\u51c6\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u3002 \u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u662fJSON\u683c\u5f0f\u6216\u662fYAML\u683c\u5f0f\u3002 JSON\u683c\u5f0f\uff1a { \"$dsdl-version\" : \"0.5.0\" , \"meta\" : { \"name\" : \"my-dataset\" , \"creator\" : \"my-team\" , \"dataset-version\" : \"1.0.0\" }, \"defs\" : { \"MyClassDom\" : { \"$def\" : \"class_domain\" , \"classes\" : [ \"dog\" , \"cat\" , \"fish\" , \"tiger\" ] }, \"ImageClassificationSample\" : { \"$def\" : \"struct\" , \"$fields\" : { \"image\" : \"Image\" , \"label\" : \"Label[dom=MyClassDom]\" } } }, \"data\" : { \"sample-type\" : \"ImageClassificationSample\" , \"samples\" : [ { \"image\" : \"xyz/0001.jpg\" , \"label\" : \"cat\" }, { \"image\" : \"xyz/0002.jpg\" , \"label\" : \"dog\" } ] } } YAML\u683c\u5f0f\uff1a $dsdl-version : \"0.5.0\" meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } JSON\u548cYAML\u683c\u5f0f\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u90fd\u53ef\u4ee5 \u51c6\u786e\u5730\u63cf\u8ff0\u76f8\u540c\u7684 \u6570\u636e\u7ed3\u6784\u3002 \u7531\u4e8eYAML\u683c\u5f0f\u7684\u5185\u5bb9\u66f4\u52a0\u7b80\u6d01\uff0c\u5e76\u4e14\u5141\u8bb8\u6ce8\u91ca\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528YAML\u683c\u5f0f\u4f5c\u4e3a\u672c\u6587\u6863\u4e2d\u540e\u7eed\u793a\u4f8b\u7684\u9ed8\u8ba4\u683c\u5f0f\u3002YAML\u683c\u5f0f\u4e5f\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8f6c\u6362\u4e3a\u7b49\u4ef7\u7684JSON\u683c\u5f0f\u3002 \u9996\u5148\uff0c\u4e00\u4e2a\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u88ab\u5927\u81f4\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\uff1a header \uff1a\u6307\u660e\u4e86\u5f53\u524d\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u9700\u8981\u88ab\u5982\u4f55\u89e3\u6790\uff1b meta section \uff1a\u63d0\u4f9b\u4e86\u5f53\u524d\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff1b defs section \uff1a\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5168\u5c40\u7684\u5b9a\u4e49\uff0c\u6bd4\u5982\uff1a\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u522b\uff1b data section \uff1a\u63cf\u8ff0\u4e86\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u6570\u636e \u6ce8\u610f \uff1a \u5e26\u6709\u524d\u7f00 $ \u7684\u5c5e\u6027\u540d\u4e3a\u5728DSDL\u4e2d\u9884\u7559\u7684\u6709\u7279\u6b8a\u542b\u4e49\u7684\u5c5e\u6027\u540d\u3002 DSDL\u7248\u672c\uff08header\u4e2d\u5c5e\u6027\u540d\u4e3a $dsdl-version \uff09\u5fc5\u987b\u88ab\u660e\u786e\u5730\u6307\u660e\u3002\u56e0\u4e3aDSDL\u89e3\u91ca\u5668\u9700\u8981\u901a\u8fc7\u8be5\u5c5e\u6027\u77e5\u9053\u5f53\u524d\u6587\u4ef6\u7684\u7248\u672c\u4fe1\u606f\uff0c\u4ece\u800c\u6b63\u786e\u7684\u89e3\u6790\u5f53\u524d\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e9b\u901a\u7528\u7c7b\u578b\u7684\u5b9a\u4e49\u4e00\u822c\u5728\u6807\u51c6\u5e93\u6216\u6269\u5c55\u5e93\u4e2d\u6709\u63d0\u4f9b\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u4e0d\u9700\u8981\u81ea\u5df1\u5b9a\u4e49\u7c7b\u522b\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49 ImageClassificationSample \u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u4ee5\u53ca\u4f7f\u8be5\u4f8b\u5b50\u5177\u6709\u72ec\u7acb\u6027\u3002","title":"2.1 \u5feb\u901f\u5165\u95e8"},{"location":"zh/lang/libraries/","text":"2.5 \u5e93 \u5c3d\u7ba1\u6211\u4eec\u5df2\u7ecf\u8bd5\u56fe\u53bb\u7b80\u5316\u4e86DSDL\u7684\u8bbe\u8ba1\uff0c\u4f46\u662f\u8981\u5b66\u4e60\u5982\u4f55\u5728DSDL\u4e2d\u5b9a\u4e49\u7c7b\u4ecd\u7136\u9700\u8981\u4e00\u4e9b\u52aa\u529b\u3002\u7136\u800c\u6211\u4eec\u660e\u767d\u5927\u591a\u6570AI\u7814\u7a76\u8005\u6216\u5f00\u53d1\u8005\u90fd\u4e0d\u60f3\u518d\u5b66\u4e60\u53e6\u4e00\u95e8\u8bed\u8a00\u3002\u56e0\u6b64\u6211\u4eec\u5f15\u5165\u4e86\u5e93\u7684\u6982\u5ff5\u6765\u8fdb\u4e00\u6b65\u7b80\u5316\u6570\u636e\u96c6\u63cf\u8ff0\u7684\u8fc7\u7a0b\u3002 2.5.1 \u5b9a\u4e49\u4e0e\u5bfc\u5165\u4e00\u4e2a\u5e93 \u6211\u4eec\u5728 get_started \u90e8\u5206\u5b9a\u4e49\u7684\u7c7b ImageClassification \u662f\u6bd4\u8f83\u901a\u7528\uff0c\u53ef\u4ee5\u5e94\u7528\u5728\u5176\u4ed6\u7684\u6570\u636e\u96c6\u4e2d\u7684\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u63d0\u53d6\u5230\u4e00\u4e2a \u5e93\u6587\u4ef6 \u5f53\u4e2d\uff0c\u4ece\u800c\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u76f4\u63a5\u5bfc\u5165\u5b83\u3002 \u603b\u7684\u6765\u8bb2\uff0c\u4e00\u4e2a \u5e93\u6587\u4ef6 \u662f\u4e00\u4e2aYAML\u6216JSON\u6587\u4ef6\uff0c\u6587\u4ef6\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7c7b\u7684\u5b9a\u4e49\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a imageclass.yaml \u7684\u5e93\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a # file: imageclass.yaml # DSDL version is mandatory here. $dsdl-version : \"0.5.0\" # -- below are definitions -- MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] \u6ce8\u610f \uff1a \u8fd9\u4e2a\u5e93\u6587\u4ef6\u5e94\u8be5\u88ab\u653e\u5728\u9ed8\u8ba4\u7684\u5e93\u7684\u8def\u5f84\u4e2d\uff0c\u4ece\u800c\u7cfb\u7edf\u53ef\u4ee5\u627e\u5230\u5b83\u3002 \u7528\u6237\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf DSDL_LIBRARY_PATH \u6765\u8bbe\u7f6e\u989d\u5916\u7684\u5e93\u8def\u5f84\u3002 \u7136\u540e\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7\u5bfc\u5165\u5e93\u6765\u7b80\u5316\uff0c\u5177\u4f53\u63cf\u8ff0\u5982\u4e0b\uff1a $dsdl-version : \"0.5.0\" $import : - imageclass meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u5728header\u90e8\u5206\u4f7f\u7528\u4e86\u4e00\u4e2a $import \u6307\u4ee4\uff0c $import \u6307\u4ee4\u7684\u5185\u5bb9\u5e94\u8be5\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u56e0\u4e3a\u7528\u6237\u53ef\u4ee5\u5bfc\u5165\u591a\u4e2a\u5e93\u6587\u4ef6\u3002 \u6ce8\u610f \uff1a\u5f53\u5bfc\u5165\u4e86\u591a\u4e2a\u5e93\u6587\u4ef6\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5e93\u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u540d\u79f0\u76f8\u540c\u7684\u82e5\u5e72\u7684\u5b9a\u4e49\uff0c\u5219\u540e\u5bfc\u5165\u7684\u5b9a\u4e49\u4f1a\u8986\u76d6\u5148\u5bfc\u5165\u7684\u5b9a\u4e49\u3002\u5982\u679c\u53d1\u751f\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u89e3\u6790\u5668\u4f1a\u62a5\u51fa\u8b66\u544a\u4fe1\u606f\u3002 2.5.2 \u5982\u4f55\u66f4\u597d\u5730\u4f7f\u7528\u5e93 \u4e0b\u9762\u63d0\u4f9b\u4e86\u5b9a\u4e49DSDL\u5e93\u7684\u4e00\u4e9b\u5efa\u8bae\uff1a Define generic classes \u5982\u540c\u5728\u4ecb\u7ecd parametric_class \u65f6\u6240\u63d0\u5230\u7684\u90a3\u6837\uff0c\u5728\u901a\u7528\u7c7b\u7684\u5b9a\u4e49\u4e2d\u5199\u6b7b\u4e86\u53c2\u6570\u8bbe\u7f6e\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u7528\u6237\u5b9a\u4e49\u4e00\u4e2a\u542b\u53c2\u7c7b\uff0c\u5e76\u4e14\u6839\u636e\u5177\u4f53\u7684\u5e94\u7528\u573a\u666f\u7ed9\u5b9a\u5177\u4f53\u7684\u53c2\u6570\u8bbe\u7f6e\uff08\u6bd4\u5982\u7c7b\u522b\u57df\u7684\u8bbe\u7f6e\uff09\u3002 Grouped definitions \u6211\u4eec\u5efa\u8bae\u5c06\u76f8\u540c\u9886\u57df\u7684\u5b9a\u4e49\u653e\u5728\u4e00\u4e2a\u5e93\u6587\u4ef6\u4e2d\uff0c\u8fd9\u53ef\u4ee5\u4ee4\u5206\u53d1\u548c\u5bfc\u5165\u66f4\u52a0\u5bb9\u6613\u3002 Documentation \u7ed9\u5e93\u4e2d\u7684\u5b9a\u4e49\u5199\u6587\u6863\u53ef\u4ee5\u4ee4\u7528\u6237\u66f4\u5bb9\u6613\u7406\u89e3\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e0e\u89c6\u89c9\u8bc6\u522b\u76f8\u5173\u7684\u591a\u4e2a\u7c7b\u653e\u5728\u4e00\u4e2a\u5e93\u6587\u4ef6\u5f53\u4e2d\uff1a # file: visualrecog.yaml ImageClassificationSample : # Each image classification sample contains an image and a label. $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] LocalObjectEntry : # Each local object entry contains a bounding box and a label. $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : # Each object detection sample contains an image and a list of local object entries. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u901a\u8fc7\u4f7f\u7528\u8fd9\u4e2a\u5e93\u6587\u4ef6\uff0c\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a $dsdl-version : \"0.5.0\" $import : - visualrecog meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } \u56e0\u4e3a MyClassDom \u662f\u4e00\u4e2a\u5177\u4f53\u7684\u5b9a\u4e49\uff0c\u53ea\u5728\u5f53\u524d\u7684\u6570\u636e\u96c6\u4e2d\u88ab\u7528\u5230\u3002\u56e0\u6b64\u5c06\u5b83\u5b9a\u4e49\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u5f53\u4e2d\uff0c\u5e76\u4ece\u5e93\u6587\u4ef6\u4e2d\u5bfc\u5165\u66f4\u52a0\u901a\u7528\u7684\u7c7b\uff0c\u8fd9\u6837\u7684\u4f5c\u6cd5\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 \u6ce8\u610f \uff1a visualrecog \u5e93\u53ea\u662f\u7528\u6765\u505a\u6f14\u793a\u7684\u4f8b\u5b50\u3002 \u9664\u4e86DSDL\uff0c\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u5b57\u4e3a cv \u7684\u6807\u51c6\u5e93\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e0e\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7684\u5927\u91cf\u5b9a\u4e49\uff0c\u5305\u62ec\u5404\u79cd\u6570\u636e\u7c7b\u578b\u4ee5\u53ca\u7c7b\u522b\u57df\u7b49\u7b49\u3002","title":"\u94fe\u63a5\u5e93"},{"location":"zh/lang/libraries/#25","text":"\u5c3d\u7ba1\u6211\u4eec\u5df2\u7ecf\u8bd5\u56fe\u53bb\u7b80\u5316\u4e86DSDL\u7684\u8bbe\u8ba1\uff0c\u4f46\u662f\u8981\u5b66\u4e60\u5982\u4f55\u5728DSDL\u4e2d\u5b9a\u4e49\u7c7b\u4ecd\u7136\u9700\u8981\u4e00\u4e9b\u52aa\u529b\u3002\u7136\u800c\u6211\u4eec\u660e\u767d\u5927\u591a\u6570AI\u7814\u7a76\u8005\u6216\u5f00\u53d1\u8005\u90fd\u4e0d\u60f3\u518d\u5b66\u4e60\u53e6\u4e00\u95e8\u8bed\u8a00\u3002\u56e0\u6b64\u6211\u4eec\u5f15\u5165\u4e86\u5e93\u7684\u6982\u5ff5\u6765\u8fdb\u4e00\u6b65\u7b80\u5316\u6570\u636e\u96c6\u63cf\u8ff0\u7684\u8fc7\u7a0b\u3002","title":"2.5 \u5e93"},{"location":"zh/lang/libraries/#251","text":"\u6211\u4eec\u5728 get_started \u90e8\u5206\u5b9a\u4e49\u7684\u7c7b ImageClassification \u662f\u6bd4\u8f83\u901a\u7528\uff0c\u53ef\u4ee5\u5e94\u7528\u5728\u5176\u4ed6\u7684\u6570\u636e\u96c6\u4e2d\u7684\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u63d0\u53d6\u5230\u4e00\u4e2a \u5e93\u6587\u4ef6 \u5f53\u4e2d\uff0c\u4ece\u800c\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u76f4\u63a5\u5bfc\u5165\u5b83\u3002 \u603b\u7684\u6765\u8bb2\uff0c\u4e00\u4e2a \u5e93\u6587\u4ef6 \u662f\u4e00\u4e2aYAML\u6216JSON\u6587\u4ef6\uff0c\u6587\u4ef6\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7c7b\u7684\u5b9a\u4e49\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a imageclass.yaml \u7684\u5e93\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a # file: imageclass.yaml # DSDL version is mandatory here. $dsdl-version : \"0.5.0\" # -- below are definitions -- MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] \u6ce8\u610f \uff1a \u8fd9\u4e2a\u5e93\u6587\u4ef6\u5e94\u8be5\u88ab\u653e\u5728\u9ed8\u8ba4\u7684\u5e93\u7684\u8def\u5f84\u4e2d\uff0c\u4ece\u800c\u7cfb\u7edf\u53ef\u4ee5\u627e\u5230\u5b83\u3002 \u7528\u6237\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf DSDL_LIBRARY_PATH \u6765\u8bbe\u7f6e\u989d\u5916\u7684\u5e93\u8def\u5f84\u3002 \u7136\u540e\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7\u5bfc\u5165\u5e93\u6765\u7b80\u5316\uff0c\u5177\u4f53\u63cf\u8ff0\u5982\u4e0b\uff1a $dsdl-version : \"0.5.0\" $import : - imageclass meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u5728header\u90e8\u5206\u4f7f\u7528\u4e86\u4e00\u4e2a $import \u6307\u4ee4\uff0c $import \u6307\u4ee4\u7684\u5185\u5bb9\u5e94\u8be5\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u56e0\u4e3a\u7528\u6237\u53ef\u4ee5\u5bfc\u5165\u591a\u4e2a\u5e93\u6587\u4ef6\u3002 \u6ce8\u610f \uff1a\u5f53\u5bfc\u5165\u4e86\u591a\u4e2a\u5e93\u6587\u4ef6\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5e93\u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u540d\u79f0\u76f8\u540c\u7684\u82e5\u5e72\u7684\u5b9a\u4e49\uff0c\u5219\u540e\u5bfc\u5165\u7684\u5b9a\u4e49\u4f1a\u8986\u76d6\u5148\u5bfc\u5165\u7684\u5b9a\u4e49\u3002\u5982\u679c\u53d1\u751f\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u89e3\u6790\u5668\u4f1a\u62a5\u51fa\u8b66\u544a\u4fe1\u606f\u3002","title":"2.5.1 \u5b9a\u4e49\u4e0e\u5bfc\u5165\u4e00\u4e2a\u5e93"},{"location":"zh/lang/libraries/#252","text":"\u4e0b\u9762\u63d0\u4f9b\u4e86\u5b9a\u4e49DSDL\u5e93\u7684\u4e00\u4e9b\u5efa\u8bae\uff1a Define generic classes \u5982\u540c\u5728\u4ecb\u7ecd parametric_class \u65f6\u6240\u63d0\u5230\u7684\u90a3\u6837\uff0c\u5728\u901a\u7528\u7c7b\u7684\u5b9a\u4e49\u4e2d\u5199\u6b7b\u4e86\u53c2\u6570\u8bbe\u7f6e\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u7528\u6237\u5b9a\u4e49\u4e00\u4e2a\u542b\u53c2\u7c7b\uff0c\u5e76\u4e14\u6839\u636e\u5177\u4f53\u7684\u5e94\u7528\u573a\u666f\u7ed9\u5b9a\u5177\u4f53\u7684\u53c2\u6570\u8bbe\u7f6e\uff08\u6bd4\u5982\u7c7b\u522b\u57df\u7684\u8bbe\u7f6e\uff09\u3002 Grouped definitions \u6211\u4eec\u5efa\u8bae\u5c06\u76f8\u540c\u9886\u57df\u7684\u5b9a\u4e49\u653e\u5728\u4e00\u4e2a\u5e93\u6587\u4ef6\u4e2d\uff0c\u8fd9\u53ef\u4ee5\u4ee4\u5206\u53d1\u548c\u5bfc\u5165\u66f4\u52a0\u5bb9\u6613\u3002 Documentation \u7ed9\u5e93\u4e2d\u7684\u5b9a\u4e49\u5199\u6587\u6863\u53ef\u4ee5\u4ee4\u7528\u6237\u66f4\u5bb9\u6613\u7406\u89e3\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e0e\u89c6\u89c9\u8bc6\u522b\u76f8\u5173\u7684\u591a\u4e2a\u7c7b\u653e\u5728\u4e00\u4e2a\u5e93\u6587\u4ef6\u5f53\u4e2d\uff1a # file: visualrecog.yaml ImageClassificationSample : # Each image classification sample contains an image and a label. $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] LocalObjectEntry : # Each local object entry contains a bounding box and a label. $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : # Each object detection sample contains an image and a list of local object entries. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u901a\u8fc7\u4f7f\u7528\u8fd9\u4e2a\u5e93\u6587\u4ef6\uff0c\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a $dsdl-version : \"0.5.0\" $import : - visualrecog meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } \u56e0\u4e3a MyClassDom \u662f\u4e00\u4e2a\u5177\u4f53\u7684\u5b9a\u4e49\uff0c\u53ea\u5728\u5f53\u524d\u7684\u6570\u636e\u96c6\u4e2d\u88ab\u7528\u5230\u3002\u56e0\u6b64\u5c06\u5b83\u5b9a\u4e49\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u5f53\u4e2d\uff0c\u5e76\u4ece\u5e93\u6587\u4ef6\u4e2d\u5bfc\u5165\u66f4\u52a0\u901a\u7528\u7684\u7c7b\uff0c\u8fd9\u6837\u7684\u4f5c\u6cd5\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 \u6ce8\u610f \uff1a visualrecog \u5e93\u53ea\u662f\u7528\u6765\u505a\u6f14\u793a\u7684\u4f8b\u5b50\u3002 \u9664\u4e86DSDL\uff0c\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u5b57\u4e3a cv \u7684\u6807\u51c6\u5e93\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e0e\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7684\u5927\u91cf\u5b9a\u4e49\uff0c\u5305\u62ec\u5404\u79cd\u6570\u636e\u7c7b\u578b\u4ee5\u53ca\u7c7b\u522b\u57df\u7b49\u7b49\u3002","title":"2.5.2 \u5982\u4f55\u66f4\u597d\u5730\u4f7f\u7528\u5e93"},{"location":"zh/lang/structs/","text":"2.4 \u7ed3\u6784\u4f53\u7c7b \u7ed3\u6784\u4f53\u662f\u7528\u6765\u8868\u793a\u6df7\u5408\u5bf9\u8c61\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6570\u636e\u96c6\u4e2d\uff0c\u4e00\u4e2a\u6807\u51c6\u7684\u6570\u636e\u6837\u672c\u5c31\u662f\u7531\u591a\u4e2a\u7ec4\u4ef6\u6784\u6210\u7684\uff0c\u6bd4\u5982\u4e00\u5f20\u56fe\u50cf\u548c\u4e00\u4e2a\u7c7b\u522b\u6807\u6ce8\u3002\u56e0\u6b64\uff0c\u7ed3\u6784\u975e\u5e38\u9002\u5408\u8868\u793a\u6570\u636e\u6837\u672c\u6216\u5176\u590d\u5408\u7ec4\u4ef6\u3002 DSDL\u5141\u8bb8\u7528\u6237\u53bb\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\uff0c\u8fdb\u800c\u5bf9\u6307\u5b9a\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u8fdb\u884c\u62bd\u8c61\u3002 2.4.1 \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b \u5728DSDL\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684 $def \u90e8\u5206\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u3002\u5728 get_started \u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u5b57\u53eb ImageClassificationSample \u7684\u7ed3\u6784\u4f53\u7c7b\uff1a ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] \u7ed3\u6784\u4f53\u7c7b\u662f\u901a\u8fc7\u4e00\u4e2aJSON\u5bf9\u8c61\u6765\u5b9a\u4e49\u7684\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a $def \uff1a\u5b83\u7684\u503c\u5fc5\u987b\u662f \"struct\" \uff0c\u8868\u793a\u8be5JSON\u5bf9\u8c61\u6b63\u5728\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u3002 $fields \uff1a\u5b83\u7684\u503c\u5fc5\u987b\u662f\u4e00\u4e2aJSON\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u5c5e\u6027\uff0c\u6bcf\u4e2a\u5c5e\u6027\u5bf9\u5e94\u4e86\u4e00\u4e2a\u5b57\u6bb5\u3002\u7279\u522b\u5730\uff0c $fields \u7684\u6bcf\u4e2a\u5c5e\u6027\u4e2d\uff0c\u952e\u5c06\u88ab\u4f5c\u4e3a\u5b57\u6bb5\u540d\u79f0\uff0c\u503c\u5219\u4e3a\u5bf9\u5e94\u5b57\u6bb5\u7684\u7c7b\u578b\u89c4\u8303\u3002\u5b57\u6bb5\u7684\u7c7b\u578b\u89c4\u8303\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4e24\u79cd\u65b9\u5f0f\u6307\u5b9a\uff1a \u53ea\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u540d\u79f0 \uff1a\u53ea\u7ed9\u5b9a\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u540d\u79f0\uff08\u5982\u679c\u8be5\u6570\u636e\u7c7b\u578b\u662f\u542b\u53c2\u6570\u636e\u7c7b\u578b\uff0c\u5219\u53c2\u6570\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c\uff09\u3002 \u6307\u5b9a\u542b\u53c2\u6570\u636e\u7c7b\u578b \uff1a\u7528\u6237\u53ef\u4ee5\u901a\u8fc7JSON\u5bf9\u8c61\u6307\u5b9a\u7279\u5b9a\u7684\u542b\u53c2\u6570\u636e\u7c7b\u578b\uff0c\u5176\u4e2d\u7684 $type \u5c5e\u6027\u6307\u5b9a\u7c7b\u578b\u7684\u540d\u79f0\uff0c\u5e76\u4f7f\u7528\u5176\u4ed6\u5c5e\u6027\u6765\u8bbe\u7f6e\u7c7b\u578b\u53c2\u6570\u3002\u53ef\u4ee5\u67e5\u770b\u4f8b\u5b50\u4e2d\u7684 label \u5b57\u6bb5\u7684\u58f0\u660e\u3002 2.4.2 \u5d4c\u5957\u7ed3\u6784\u4f53 \u5728DSDL\u4e2d\uff0c\u7ed3\u6784\u4f53\u53ef\u4ee5\u662f\u5d4c\u5957\u7684\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u4e00\u4e2a\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u7684\u6837\u672c\u53ef\u80fd\u7531\u4e00\u5f20\u56fe\u50cf\u548c\u591a\u4e2a\u201c\u5c40\u90e8\u76ee\u6807\u201d\u7ec4\u6210\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5c40\u90e8\u76ee\u6807\u90fd\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\u5305\u542b\u4e00\u4e2abounding box\u548c\u4e00\u4e2a\u7c7b\u522b\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5b9a\u4e49\u7ed3\u6784\u4f53\uff1a LocalObjectEntry : # Each entry refers to an individual detected object on an image. $def : struct $fields : bbox : BBox label : Label[dom=MyClassDom] ObjectDetectionSample : # Each sample contains the detection results on an image. $def : struct $fields : image : Image objects : List[etype=LocalObjectEntry] \u5176\u4e2d LocalObjectEntry \u7ed3\u6784\u4f53\u7c7b\u5d4c\u5957\u8fdb\u4e86 ObjectDetectionSample \u7c7b\u5f53\u4e2d\u3002 2.4.3 \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7ed3\u6784\u4f53\u7c7b LocalObjectEntry \u4f7f\u7528\u4e86\u4e00\u4e2a\u6307\u5b9a\u597d\u7684\u7c7b\u522b\u57df MyClassDom \uff0c\u800c\u7ed3\u6784\u4f53\u7c7b ObjectDetectionSample \u4e5f\u4f1a\u50cf\u5b83\u7684\u5185\u5d4c\u7ed3\u6784\u4f53\u7c7b LocalObjectEntry \u4e00\u6837\uff0c\u4f7f\u7528 MyClassDom \u4f5c\u4e3a\u7c7b\u522b\u57df\u3002\u8fd9\u6837\u7684\u5b9a\u4e49\u662f\u4e0d\u901a\u7528\u7684\uff0c\u56e0\u4e3a\u4e3a\u4e86\u80fd\u4f7f\u7528\u5176\u4ed6\u7684\u7c7b\u522b\u57df\uff0c\u7528\u6237\u5219\u4e0d\u5f97\u4e0d\u91cd\u5199\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u3002 DSDL\u63d0\u4f9b\u4e86\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b\u6765\u89e3\u51b3\u4e0a\u9762\u7684\u95ee\u9898\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e00\u4e2a \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b \u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u7c7b\u6a21\u677f\uff0c\u5141\u8bb8\u6211\u4eec\u5728\u4f7f\u7528\u7c7b\u65f6\u8bbe\u7f6e\u6307\u5b9a\u7684\u53c2\u6570\u3002\u901a\u8fc7\u4f7f\u7528\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee5\u4e00\u79cd\u66f4\u901a\u7528\u7684\u65b9\u6cd5\u5b9a\u4e49\u7c7b\u3002 \u62ff\u76ee\u6807\u68c0\u6d4b\u4e3a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u7c7b\u91cd\u65b0\u5b9a\u4e49\uff1a LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5728\u7ed3\u6784\u4f53\u7c7b\u7684\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u5c5e\u6027 $params \uff0c\u5f53 $params \u5c5e\u6027\u88ab\u663e\u793a\u5730\u7ed9\u51fa\uff0c\u5e76\u4e14\u975e\u7a7a\u7684\u8bdd\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7c7b\u5c31\u662f \u542b\u53c2\u7684 \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4e00\u4e2a\u542b\u53c2\u7684\u7c7b\u88ab\u4f7f\u7528\u65f6\uff0c\u5b83\u7684\u53c2\u6570\u5fc5\u987b\u88ab\u7ed9\u5b9a\uff0c\u4ece\u800c\u5b83\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a \u5177\u4f53\u7684\u7c7b \u3002 \u5c24\u5176\u8981\u6307\u51fa\uff0c\u5728\u4e0a\u9762\u7684 LocalObjectEntry \u7c7b\u4e2d\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a \u7c7b\u53c2\u6570 cdom \uff0c\u7528\u6765\u6307\u660e label \u7684 domain \u5c5e\u6027\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4f7f\u7528\u4e00\u4e2a\u7c7b\u53c2\u6570\u65f6\uff0c\u9700\u8981\u4f7f\u7528 [] \u5c06\u5176\u56f4\u4f4f\u3002 \u63a5\u7740\uff0c ObjectDetectionSample \u7c7b\u4e5f\u540c\u6837\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b\uff0c\u53c2\u6570\u4e3a cdom \uff0c\u8be5\u53c2\u6570\u7528\u6765\u6307\u660e\u5bf9\u8c61 objects \u7684\u7c7b\u522b\u57df\u3002 \u4f7f\u7528\u8fd9\u6837\u7684\u7c7b\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u636e\u96c6\u6837\u672c\u6309\u5982\u4e0b\u683c\u5f0f\u8868\u793a\uff1a data : sample-type : $type : ObjectDetectionSample cdom : MyClassDom samples : - image : \"abc/0001.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 1 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - image : \"abc/0002.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 3 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - { bbox : [ 4 , 3 , 5 , 8 ], label : 3 } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53c2\u6570 cdom \u5df2\u7ecf\u88ab\u8bbe\u4e3a\u4e86 MyClassDom \uff0c\u56e0\u6b64\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b ObjectDetectionSample \u5df2\u7ecf\u6210\u4e3a\u4e86\u4e00\u4e2a\u5177\u4f53\u7c7b\uff0c\u5e76\u5728\u6837\u672c\u7c7b\u522b\u5b57\u6bb5\u4e2d\u88ab\u6307\u5b9a\u3002","title":"\u7ed3\u6784\u7c7b"},{"location":"zh/lang/structs/#24","text":"\u7ed3\u6784\u4f53\u662f\u7528\u6765\u8868\u793a\u6df7\u5408\u5bf9\u8c61\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6570\u636e\u96c6\u4e2d\uff0c\u4e00\u4e2a\u6807\u51c6\u7684\u6570\u636e\u6837\u672c\u5c31\u662f\u7531\u591a\u4e2a\u7ec4\u4ef6\u6784\u6210\u7684\uff0c\u6bd4\u5982\u4e00\u5f20\u56fe\u50cf\u548c\u4e00\u4e2a\u7c7b\u522b\u6807\u6ce8\u3002\u56e0\u6b64\uff0c\u7ed3\u6784\u975e\u5e38\u9002\u5408\u8868\u793a\u6570\u636e\u6837\u672c\u6216\u5176\u590d\u5408\u7ec4\u4ef6\u3002 DSDL\u5141\u8bb8\u7528\u6237\u53bb\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\uff0c\u8fdb\u800c\u5bf9\u6307\u5b9a\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u8fdb\u884c\u62bd\u8c61\u3002","title":"2.4 \u7ed3\u6784\u4f53\u7c7b"},{"location":"zh/lang/structs/#241","text":"\u5728DSDL\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684 $def \u90e8\u5206\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u3002\u5728 get_started \u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u5b57\u53eb ImageClassificationSample \u7684\u7ed3\u6784\u4f53\u7c7b\uff1a ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] \u7ed3\u6784\u4f53\u7c7b\u662f\u901a\u8fc7\u4e00\u4e2aJSON\u5bf9\u8c61\u6765\u5b9a\u4e49\u7684\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a $def \uff1a\u5b83\u7684\u503c\u5fc5\u987b\u662f \"struct\" \uff0c\u8868\u793a\u8be5JSON\u5bf9\u8c61\u6b63\u5728\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u3002 $fields \uff1a\u5b83\u7684\u503c\u5fc5\u987b\u662f\u4e00\u4e2aJSON\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u5c5e\u6027\uff0c\u6bcf\u4e2a\u5c5e\u6027\u5bf9\u5e94\u4e86\u4e00\u4e2a\u5b57\u6bb5\u3002\u7279\u522b\u5730\uff0c $fields \u7684\u6bcf\u4e2a\u5c5e\u6027\u4e2d\uff0c\u952e\u5c06\u88ab\u4f5c\u4e3a\u5b57\u6bb5\u540d\u79f0\uff0c\u503c\u5219\u4e3a\u5bf9\u5e94\u5b57\u6bb5\u7684\u7c7b\u578b\u89c4\u8303\u3002\u5b57\u6bb5\u7684\u7c7b\u578b\u89c4\u8303\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4e24\u79cd\u65b9\u5f0f\u6307\u5b9a\uff1a \u53ea\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u540d\u79f0 \uff1a\u53ea\u7ed9\u5b9a\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u540d\u79f0\uff08\u5982\u679c\u8be5\u6570\u636e\u7c7b\u578b\u662f\u542b\u53c2\u6570\u636e\u7c7b\u578b\uff0c\u5219\u53c2\u6570\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c\uff09\u3002 \u6307\u5b9a\u542b\u53c2\u6570\u636e\u7c7b\u578b \uff1a\u7528\u6237\u53ef\u4ee5\u901a\u8fc7JSON\u5bf9\u8c61\u6307\u5b9a\u7279\u5b9a\u7684\u542b\u53c2\u6570\u636e\u7c7b\u578b\uff0c\u5176\u4e2d\u7684 $type \u5c5e\u6027\u6307\u5b9a\u7c7b\u578b\u7684\u540d\u79f0\uff0c\u5e76\u4f7f\u7528\u5176\u4ed6\u5c5e\u6027\u6765\u8bbe\u7f6e\u7c7b\u578b\u53c2\u6570\u3002\u53ef\u4ee5\u67e5\u770b\u4f8b\u5b50\u4e2d\u7684 label \u5b57\u6bb5\u7684\u58f0\u660e\u3002","title":"2.4.1 \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b"},{"location":"zh/lang/structs/#242","text":"\u5728DSDL\u4e2d\uff0c\u7ed3\u6784\u4f53\u53ef\u4ee5\u662f\u5d4c\u5957\u7684\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u4e00\u4e2a\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u7684\u6837\u672c\u53ef\u80fd\u7531\u4e00\u5f20\u56fe\u50cf\u548c\u591a\u4e2a\u201c\u5c40\u90e8\u76ee\u6807\u201d\u7ec4\u6210\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5c40\u90e8\u76ee\u6807\u90fd\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\u5305\u542b\u4e00\u4e2abounding box\u548c\u4e00\u4e2a\u7c7b\u522b\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5b9a\u4e49\u7ed3\u6784\u4f53\uff1a LocalObjectEntry : # Each entry refers to an individual detected object on an image. $def : struct $fields : bbox : BBox label : Label[dom=MyClassDom] ObjectDetectionSample : # Each sample contains the detection results on an image. $def : struct $fields : image : Image objects : List[etype=LocalObjectEntry] \u5176\u4e2d LocalObjectEntry \u7ed3\u6784\u4f53\u7c7b\u5d4c\u5957\u8fdb\u4e86 ObjectDetectionSample \u7c7b\u5f53\u4e2d\u3002","title":"2.4.2 \u5d4c\u5957\u7ed3\u6784\u4f53"},{"location":"zh/lang/structs/#243","text":"\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7ed3\u6784\u4f53\u7c7b LocalObjectEntry \u4f7f\u7528\u4e86\u4e00\u4e2a\u6307\u5b9a\u597d\u7684\u7c7b\u522b\u57df MyClassDom \uff0c\u800c\u7ed3\u6784\u4f53\u7c7b ObjectDetectionSample \u4e5f\u4f1a\u50cf\u5b83\u7684\u5185\u5d4c\u7ed3\u6784\u4f53\u7c7b LocalObjectEntry \u4e00\u6837\uff0c\u4f7f\u7528 MyClassDom \u4f5c\u4e3a\u7c7b\u522b\u57df\u3002\u8fd9\u6837\u7684\u5b9a\u4e49\u662f\u4e0d\u901a\u7528\u7684\uff0c\u56e0\u4e3a\u4e3a\u4e86\u80fd\u4f7f\u7528\u5176\u4ed6\u7684\u7c7b\u522b\u57df\uff0c\u7528\u6237\u5219\u4e0d\u5f97\u4e0d\u91cd\u5199\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u3002 DSDL\u63d0\u4f9b\u4e86\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b\u6765\u89e3\u51b3\u4e0a\u9762\u7684\u95ee\u9898\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e00\u4e2a \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b \u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u7c7b\u6a21\u677f\uff0c\u5141\u8bb8\u6211\u4eec\u5728\u4f7f\u7528\u7c7b\u65f6\u8bbe\u7f6e\u6307\u5b9a\u7684\u53c2\u6570\u3002\u901a\u8fc7\u4f7f\u7528\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee5\u4e00\u79cd\u66f4\u901a\u7528\u7684\u65b9\u6cd5\u5b9a\u4e49\u7c7b\u3002 \u62ff\u76ee\u6807\u68c0\u6d4b\u4e3a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u7c7b\u91cd\u65b0\u5b9a\u4e49\uff1a LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5728\u7ed3\u6784\u4f53\u7c7b\u7684\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u5c5e\u6027 $params \uff0c\u5f53 $params \u5c5e\u6027\u88ab\u663e\u793a\u5730\u7ed9\u51fa\uff0c\u5e76\u4e14\u975e\u7a7a\u7684\u8bdd\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7c7b\u5c31\u662f \u542b\u53c2\u7684 \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4e00\u4e2a\u542b\u53c2\u7684\u7c7b\u88ab\u4f7f\u7528\u65f6\uff0c\u5b83\u7684\u53c2\u6570\u5fc5\u987b\u88ab\u7ed9\u5b9a\uff0c\u4ece\u800c\u5b83\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a \u5177\u4f53\u7684\u7c7b \u3002 \u5c24\u5176\u8981\u6307\u51fa\uff0c\u5728\u4e0a\u9762\u7684 LocalObjectEntry \u7c7b\u4e2d\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a \u7c7b\u53c2\u6570 cdom \uff0c\u7528\u6765\u6307\u660e label \u7684 domain \u5c5e\u6027\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4f7f\u7528\u4e00\u4e2a\u7c7b\u53c2\u6570\u65f6\uff0c\u9700\u8981\u4f7f\u7528 [] \u5c06\u5176\u56f4\u4f4f\u3002 \u63a5\u7740\uff0c ObjectDetectionSample \u7c7b\u4e5f\u540c\u6837\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b\uff0c\u53c2\u6570\u4e3a cdom \uff0c\u8be5\u53c2\u6570\u7528\u6765\u6307\u660e\u5bf9\u8c61 objects \u7684\u7c7b\u522b\u57df\u3002 \u4f7f\u7528\u8fd9\u6837\u7684\u7c7b\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u636e\u96c6\u6837\u672c\u6309\u5982\u4e0b\u683c\u5f0f\u8868\u793a\uff1a data : sample-type : $type : ObjectDetectionSample cdom : MyClassDom samples : - image : \"abc/0001.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 1 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - image : \"abc/0002.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 3 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - { bbox : [ 4 , 3 , 5 , 8 ], label : 3 } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53c2\u6570 cdom \u5df2\u7ecf\u88ab\u8bbe\u4e3a\u4e86 MyClassDom \uff0c\u56e0\u6b64\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b ObjectDetectionSample \u5df2\u7ecf\u6210\u4e3a\u4e86\u4e00\u4e2a\u5177\u4f53\u7c7b\uff0c\u5e76\u5728\u6837\u672c\u7c7b\u522b\u5b57\u6bb5\u4e2d\u88ab\u6307\u5b9a\u3002","title":"2.4.3 \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b"},{"location":"zh/lang/unstructured_objs/","text":"2.3 \u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b \u975e\u7ed3\u6784\u5316\u5bf9\u8c61 \uff0c\u6bd4\u5982\u56fe\u50cf\uff0c\u89c6\u9891\uff0c\u8bed\u97f3\uff0c\u70b9\u4e91\u4ee5\u53ca\u6587\u672c\uff0c\u8fd9\u4e9b\u90fd\u662f\u73b0\u5b9e\u4e16\u754c\u7269\u4f53\u7684\u6570\u5b57\u5316\u8868\u793a\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u6570\u636e\u7684\u5185\u90e8\u7ed3\u6784\u5f88\u4e30\u5bcc\uff0c\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff0c\u4ed6\u4eec\u8fd8\u662f\u88ab\u5f53\u4f5c\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u5176\u5185\u90e8\u7ed3\u6784\u5e76\u4e0d\u4f1a\u88ab\u8868\u73b0\u51fa\u6765\u3002 \u5728DSDL\u4e2d\uff0c\u4e00\u4e2a \u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b \u662f\u5bf9\u6240\u6709\u7279\u5b9a\u7c7b\u578b\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7684\u62bd\u8c61\u3002 2.3.1 \u9884\u5b9a\u4e49\u7684\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b \u5728\u6807\u51c6\u5e93\u5185\uff0cDSDL\u63d0\u4f9b\u4e86\u4e0b\u9762\u51e0\u4e2a\u5f00\u7bb1\u5373\u7528\u7684\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b\uff1a Image \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u4e00\u5f20\u56fe\u50cf\uff0c\u53ef\u4ee5\u901a\u8fc7\u50cf\u7d20\u7684\u77e9\u9635\u6765\u8868\u793a\u3002 Video \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u88ab\u89e3\u7801\u4e3a\u4e00\u4e2a\u5e8f\u5217\u7684\u89c6\u9891\u5e27\uff0c\u6bcf\u4e2a\u89c6\u9891\u5e27\u90fd\u662f\u4e00\u5f20\u56fe\u50cf\u3002 Audio \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u4e00\u6bb5\u97f3\u9891\u4fe1\u53f7\uff0c\u53ef\u4ee5\u901a\u8fc7\u6ce2\u5e8f\u5217\u6765\u8868\u793a\u3002 Text \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u4e00\u4e2a\u5355\u8bcd\u5e8f\u5217\u3002 PointCloud \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f3D\u70b9\u7684\u96c6\u5408\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a3D\u5bf9\u8c61\u7684\u5f62\u72b6\u3002 LabelMap \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u6574\u578b\u6807\u6ce8\u7684\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u6bcf\u4e2a\u6574\u578b\u6807\u6ce8\u5bf9\u5e94\u4e86\u4e00\u4e2a\u7c7b\u522b\u3002 2.3.2 \u63cf\u8ff0\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u5bf9\u8c61 \u5728DSDL\u4e2d\uff0c\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u5bf9\u8c61\u5b9a\u4f4d\u5668\u548c\u4e00\u4e2a\u53ef\u9009\u7684\uff0c\u7528\u6765\u63d0\u4f9b\u5bf9\u8c61\u989d\u5916\u4fe1\u606f\u7684\u63cf\u8ff0\u5668\u6765\u58f0\u660e\u3002 \u62ff\u4e00\u5f20\u8def\u5f84\u4e3a abc/0001.jpg \u4e3a\u4f8b\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4efb\u610f\u4e00\u79cd\u65b9\u5f0f\u6765\u8868\u793a\uff1a \u53ea\u4f7f\u7528\u76ee\u6807\u5b9a\u4f4d\u5668 \uff1a\u53ea\u4f7f\u7528\u76ee\u6807\u5b9a\u4f4d\u5668 abc/0001.jpg \u3002\u5f53\u4e00\u4e2a\u53d8\u91cf\u6216\u8005\u4e00\u4e2a\u5b57\u6bb5\u6709\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u7684\u6570\u636e\u7c7b\u578b\u5e76\u4e14\u5b83\u7684\u503c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8be5\u5b57\u7b26\u4e32\u5c06\u88ab\u89e3\u6790\u4e3a\u4e00\u4e2a\u76ee\u6807\u5b9a\u4f4d\u5668\u3002 \u4f7f\u7528\u63cf\u8ff0\u5668 \uff1a\u5982\u679c\u7528\u6237\u60f3\u63d0\u4f9b\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u5c3a\u5bf8\u6216\u8272\u5f69\u6a21\u5f0f\u7b49\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2ajson\u5bf9\u8c61\u6765\u8868\u793a\u8be5\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\uff0cjson\u5bf9\u8c61\u5305\u542b $loc \u548c $descr \u4e24\u4e2a\u5c5e\u6027\uff0c\u5177\u4f53\u5982\u4e0b\uff1a $loc : \"abc/0001.jpg\" $descr : size : [ 640 , 480 ] color : \"rgb\" \u8fd9\u91cc\u7684\u63cf\u8ff0\u4fe1\u606f\u901a\u8fc7 $descr \u5b57\u6bb5\u6765\u63d0\u4f9b\uff0c\u4f1a\u88ab\u5bf9\u5e94\u7684\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b\u7684\u5bf9\u8c61\u52a0\u8f7d\u5668\u4f7f\u7528\u3002 2.3.3 \u6269\u5c55\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b DSDL\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u6307\u5b9a\u5982\u4f55\u4ece\u5b58\u50a8\u4e2d\u52a0\u8f7d\u5bf9\u8c61\u6765\u6ce8\u518c \u6269\u5c55\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b \u3002 \u5728\u5ba2\u6237\u7aef\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u62bd\u8c61\u57fa\u7c7b UnstructuredObject \u7684\u5b50\u7c7b\u5e76\u5b9e\u73b0\u5176 load \u65b9\u6cd5\u6765\u8fdb\u884c\u5bf9\u8c61\u52a0\u8f7d\uff0c\u4ece\u800c\u5b9e\u73b0\u6269\u5c55\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b\u3002 \u5177\u4f53\u6765\u8bb2\uff0c\u5728Python\u4e2d\uff0c\u62bd\u8c61\u57fa\u7c7b UnstructuredObject \u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u5f0f\u5b9a\u4e49\uff1a from abc import ABC , abstractmethod class UnstructuredObject ( ABC ): \"\"\"Abstract base class for unstructured objects.\"\"\" @abstractmethod def load ( file , descr ): \"\"\"Load an unstructured object from a given file-like object. Arguments: file: file-like, from which the unstructured object is loaded. descr: dict-like, which provides the descriptive information. Returns: The loaded object. \"\"\" pass \u6ce8\u610f \uff1a\u8fd9\u91cc\u7684 load \u65b9\u6cd5\u9700\u8981\u63a5\u6536\u4e00\u4e2a\u5df2\u7ecf\u6253\u5f00\u7684\u6587\u4ef6\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6587\u4ef6\u8def\u5f84\u3002\u8be5\u8bbe\u8ba1\u662f\u57fa\u4e8e\u201c\u5173\u6ce8\u70b9\u5206\u79bb\u201d\u539f\u5219\uff1a\u6570\u636e\u7cfb\u7edf\u6709\u8d23\u4efb\u53bb\u89e3\u6790\u5bf9\u8c61\u5b9a\u4f4d\u5668\u5e76\u4e14\u6784\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7684\u6587\u4ef6\u9605\u8bfb\u5668\u3002\u56e0\u6b64 UnstructuredObject \u7c7b\u7684\u5b50\u7c7b\u53ea\u9700\u8981\u8003\u8651\u5728\u7ed9\u5b9a\u4e00\u4e2a\u6587\u4ef6\u9605\u8bfb\u5668\u540e\uff0c\u5982\u4f55\u52a0\u8f7d\uff0c\u89e3\u6790\u4e0e\u9a8c\u8bc1\u5bf9\u8c61\u3002","title":"\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b"},{"location":"zh/lang/unstructured_objs/#23","text":"\u975e\u7ed3\u6784\u5316\u5bf9\u8c61 \uff0c\u6bd4\u5982\u56fe\u50cf\uff0c\u89c6\u9891\uff0c\u8bed\u97f3\uff0c\u70b9\u4e91\u4ee5\u53ca\u6587\u672c\uff0c\u8fd9\u4e9b\u90fd\u662f\u73b0\u5b9e\u4e16\u754c\u7269\u4f53\u7684\u6570\u5b57\u5316\u8868\u793a\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u6570\u636e\u7684\u5185\u90e8\u7ed3\u6784\u5f88\u4e30\u5bcc\uff0c\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff0c\u4ed6\u4eec\u8fd8\u662f\u88ab\u5f53\u4f5c\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u5176\u5185\u90e8\u7ed3\u6784\u5e76\u4e0d\u4f1a\u88ab\u8868\u73b0\u51fa\u6765\u3002 \u5728DSDL\u4e2d\uff0c\u4e00\u4e2a \u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b \u662f\u5bf9\u6240\u6709\u7279\u5b9a\u7c7b\u578b\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7684\u62bd\u8c61\u3002","title":"2.3 \u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b"},{"location":"zh/lang/unstructured_objs/#231","text":"\u5728\u6807\u51c6\u5e93\u5185\uff0cDSDL\u63d0\u4f9b\u4e86\u4e0b\u9762\u51e0\u4e2a\u5f00\u7bb1\u5373\u7528\u7684\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b\uff1a Image \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u4e00\u5f20\u56fe\u50cf\uff0c\u53ef\u4ee5\u901a\u8fc7\u50cf\u7d20\u7684\u77e9\u9635\u6765\u8868\u793a\u3002 Video \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u88ab\u89e3\u7801\u4e3a\u4e00\u4e2a\u5e8f\u5217\u7684\u89c6\u9891\u5e27\uff0c\u6bcf\u4e2a\u89c6\u9891\u5e27\u90fd\u662f\u4e00\u5f20\u56fe\u50cf\u3002 Audio \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u4e00\u6bb5\u97f3\u9891\u4fe1\u53f7\uff0c\u53ef\u4ee5\u901a\u8fc7\u6ce2\u5e8f\u5217\u6765\u8868\u793a\u3002 Text \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u4e00\u4e2a\u5355\u8bcd\u5e8f\u5217\u3002 PointCloud \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f3D\u70b9\u7684\u96c6\u5408\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a3D\u5bf9\u8c61\u7684\u5f62\u72b6\u3002 LabelMap \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u6574\u578b\u6807\u6ce8\u7684\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u6bcf\u4e2a\u6574\u578b\u6807\u6ce8\u5bf9\u5e94\u4e86\u4e00\u4e2a\u7c7b\u522b\u3002","title":"2.3.1 \u9884\u5b9a\u4e49\u7684\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b"},{"location":"zh/lang/unstructured_objs/#232","text":"\u5728DSDL\u4e2d\uff0c\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u5bf9\u8c61\u5b9a\u4f4d\u5668\u548c\u4e00\u4e2a\u53ef\u9009\u7684\uff0c\u7528\u6765\u63d0\u4f9b\u5bf9\u8c61\u989d\u5916\u4fe1\u606f\u7684\u63cf\u8ff0\u5668\u6765\u58f0\u660e\u3002 \u62ff\u4e00\u5f20\u8def\u5f84\u4e3a abc/0001.jpg \u4e3a\u4f8b\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4efb\u610f\u4e00\u79cd\u65b9\u5f0f\u6765\u8868\u793a\uff1a \u53ea\u4f7f\u7528\u76ee\u6807\u5b9a\u4f4d\u5668 \uff1a\u53ea\u4f7f\u7528\u76ee\u6807\u5b9a\u4f4d\u5668 abc/0001.jpg \u3002\u5f53\u4e00\u4e2a\u53d8\u91cf\u6216\u8005\u4e00\u4e2a\u5b57\u6bb5\u6709\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u7684\u6570\u636e\u7c7b\u578b\u5e76\u4e14\u5b83\u7684\u503c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8be5\u5b57\u7b26\u4e32\u5c06\u88ab\u89e3\u6790\u4e3a\u4e00\u4e2a\u76ee\u6807\u5b9a\u4f4d\u5668\u3002 \u4f7f\u7528\u63cf\u8ff0\u5668 \uff1a\u5982\u679c\u7528\u6237\u60f3\u63d0\u4f9b\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u5c3a\u5bf8\u6216\u8272\u5f69\u6a21\u5f0f\u7b49\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2ajson\u5bf9\u8c61\u6765\u8868\u793a\u8be5\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\uff0cjson\u5bf9\u8c61\u5305\u542b $loc \u548c $descr \u4e24\u4e2a\u5c5e\u6027\uff0c\u5177\u4f53\u5982\u4e0b\uff1a $loc : \"abc/0001.jpg\" $descr : size : [ 640 , 480 ] color : \"rgb\" \u8fd9\u91cc\u7684\u63cf\u8ff0\u4fe1\u606f\u901a\u8fc7 $descr \u5b57\u6bb5\u6765\u63d0\u4f9b\uff0c\u4f1a\u88ab\u5bf9\u5e94\u7684\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b\u7684\u5bf9\u8c61\u52a0\u8f7d\u5668\u4f7f\u7528\u3002","title":"2.3.2 \u63cf\u8ff0\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u5bf9\u8c61"},{"location":"zh/lang/unstructured_objs/#233","text":"DSDL\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u6307\u5b9a\u5982\u4f55\u4ece\u5b58\u50a8\u4e2d\u52a0\u8f7d\u5bf9\u8c61\u6765\u6ce8\u518c \u6269\u5c55\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b \u3002 \u5728\u5ba2\u6237\u7aef\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u62bd\u8c61\u57fa\u7c7b UnstructuredObject \u7684\u5b50\u7c7b\u5e76\u5b9e\u73b0\u5176 load \u65b9\u6cd5\u6765\u8fdb\u884c\u5bf9\u8c61\u52a0\u8f7d\uff0c\u4ece\u800c\u5b9e\u73b0\u6269\u5c55\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b\u3002 \u5177\u4f53\u6765\u8bb2\uff0c\u5728Python\u4e2d\uff0c\u62bd\u8c61\u57fa\u7c7b UnstructuredObject \u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u5f0f\u5b9a\u4e49\uff1a from abc import ABC , abstractmethod class UnstructuredObject ( ABC ): \"\"\"Abstract base class for unstructured objects.\"\"\" @abstractmethod def load ( file , descr ): \"\"\"Load an unstructured object from a given file-like object. Arguments: file: file-like, from which the unstructured object is loaded. descr: dict-like, which provides the descriptive information. Returns: The loaded object. \"\"\" pass \u6ce8\u610f \uff1a\u8fd9\u91cc\u7684 load \u65b9\u6cd5\u9700\u8981\u63a5\u6536\u4e00\u4e2a\u5df2\u7ecf\u6253\u5f00\u7684\u6587\u4ef6\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6587\u4ef6\u8def\u5f84\u3002\u8be5\u8bbe\u8ba1\u662f\u57fa\u4e8e\u201c\u5173\u6ce8\u70b9\u5206\u79bb\u201d\u539f\u5219\uff1a\u6570\u636e\u7cfb\u7edf\u6709\u8d23\u4efb\u53bb\u89e3\u6790\u5bf9\u8c61\u5b9a\u4f4d\u5668\u5e76\u4e14\u6784\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7684\u6587\u4ef6\u9605\u8bfb\u5668\u3002\u56e0\u6b64 UnstructuredObject \u7c7b\u7684\u5b50\u7c7b\u53ea\u9700\u8981\u8003\u8651\u5728\u7ed9\u5b9a\u4e00\u4e2a\u6587\u4ef6\u9605\u8bfb\u5668\u540e\uff0c\u5982\u4f55\u52a0\u8f7d\uff0c\u89e3\u6790\u4e0e\u9a8c\u8bc1\u5bf9\u8c61\u3002","title":"2.3.3 \u6269\u5c55\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b"},{"location":"zh/template/cv/","text":"\u8ba1\u7b97\u673a\u89c6\u89c9 \u5f53\u524d\u5df2\u7ecf\u9488\u5bf9\u8ba1\u7b97\u673a\u89c6\u89c9\u301010\u3011\u4e2a\u4efb\u52a1\u8fdb\u884c\u6a21\u677f\u5b9a\u4e49\uff0c\u4efb\u52a1\u7c7b\u578b\u5305\u62ec: \u56fe\u50cf\u5206\u7c7b 1.1 \u5355\u6807\u7b7e\u5206\u7c7b 1.2 \u591a\u6807\u7b7e\u5206\u7c7b \u76ee\u6807\u68c0\u6d4b \u56fe\u50cf\u5206\u5272 \u5b9e\u4f8b\u5206\u5272 1. \u56fe\u50cf\u5206\u7c7b 1.1 \u4efb\u52a1\u8c03\u7814 \u4efb\u52a1\u5b9a\u4e49\uff1a \u4e3b\u6d41\u6570\u636e\u96c6\u5bf9\u6bd4\uff1a \u4efb\u52a1\u5b57\u6bb5\u603b\u7ed3 1.2 \u6a21\u677f\u5c55\u793a 1.3 \u4f7f\u7528\u8bf4\u660e","title":"\u8ba1\u7b97\u673a\u89c6\u89c9"},{"location":"zh/template/cv/#_1","text":"\u5f53\u524d\u5df2\u7ecf\u9488\u5bf9\u8ba1\u7b97\u673a\u89c6\u89c9\u301010\u3011\u4e2a\u4efb\u52a1\u8fdb\u884c\u6a21\u677f\u5b9a\u4e49\uff0c\u4efb\u52a1\u7c7b\u578b\u5305\u62ec: \u56fe\u50cf\u5206\u7c7b 1.1 \u5355\u6807\u7b7e\u5206\u7c7b 1.2 \u591a\u6807\u7b7e\u5206\u7c7b \u76ee\u6807\u68c0\u6d4b \u56fe\u50cf\u5206\u5272 \u5b9e\u4f8b\u5206\u5272","title":"\u8ba1\u7b97\u673a\u89c6\u89c9"},{"location":"zh/template/cv/#1","text":"","title":"1. \u56fe\u50cf\u5206\u7c7b"},{"location":"zh/template/cv/#11","text":"\u4efb\u52a1\u5b9a\u4e49\uff1a \u4e3b\u6d41\u6570\u636e\u96c6\u5bf9\u6bd4\uff1a \u4efb\u52a1\u5b57\u6bb5\u603b\u7ed3","title":"1.1 \u4efb\u52a1\u8c03\u7814"},{"location":"zh/template/cv/#12","text":"","title":"1.2 \u6a21\u677f\u5c55\u793a"},{"location":"zh/template/cv/#13","text":"","title":"1.3 \u4f7f\u7528\u8bf4\u660e"},{"location":"zh/template/nlp/","text":"\u81ea\u7136\u8bed\u8a00\u5904\u7406","title":"\u81ea\u7136\u8bed\u8a00\u5904\u7406"},{"location":"zh/template/nlp/#_1","text":"","title":"\u81ea\u7136\u8bed\u8a00\u5904\u7406"}]}
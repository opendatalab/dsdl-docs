{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"\u4e3b\u9875"},{"location":"api_reference/fields_overview/","text":"DSDL Field\u7c7b\u578b\u7b80\u4ecb Field\u662fDSDL\u4e2d\u8868\u8fbe\u6570\u636e\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u5728\u6570\u636e\u96c6\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u6837\u672c\u90fd\u9075\u5faa\u4e00\u4e2aStruct\u6a21\u677f\uff0c\u800cStruct\u7684\u7ec4\u6210\u5185\u5bb9\u5373\u4e3aField\uff08\u6216\u8005\u5d4c\u5957Struct\uff09\u3002 \u5982\u4e0b\u6240\u793a\uff0c\u4e00\u4e2a\u5177\u4f53\u7684\u6837\u672c\u4e3a\uff1a sample = { \"img\" : \"media/00001.jpg\" , \"bbox\" : [ 369.3 , 253.15 , 57.7 , 29.96 ], \"label\" : \"dog\" } \u5b83\u9075\u5faa\u7684Struct\u4e3a\uff1a LocalObjectEntry : $def : struct $fields : bbox : BBox label : Label[dom=\"COCODomain\"] img : Image \u5176\u4e2d\u7684BBox\u3001Label\u3001Image\u90fd\u662fField\uff0c\u8fd9\u4e9bField\u89c4\u5b9a\u4e86\u6837\u672c\u4e2d\u5404\u4e2a\u5b57\u6bb5\u503c\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u6837\u672c\u4e2d\u7684 \"img\" \u5b57\u6bb5\u867d\u7136\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f46\u7531\u4e8e\u5728Struct\u5b9a\u4e49\u4e2d\u8be5\u5b57\u6bb5\u88ab\u58f0\u660e\u4e3a Image Field\uff0c\u5219dsdl sdk\u4f1a\u5c06\u5176\u5f53\u4f5c\u4e00\u4e2a\u56fe\u50cf\u7c7b\u578b\u6765\u5904\u7406\u3002 \u672c\u7ae0\u5185\u5bb9\u4f1a\u8be6\u7ec6\u4ecb\u7ecdDSDL\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u9884\u8bbe\u7684Field\u3002 \u5728DSDL\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528jsonschema\u6765\u89c4\u8303Field\u7684\u521d\u59cb\u5316\u4f20\u5165\u7684\u53c2\u6570\u4ee5\u53ca\u89c4\u8303\u8be5Field\u5bf9\u5e94\u7684\u503c\u7684\u5f62\u5f0f\u3002 \u57fa\u7840\u7c7b\u578bField DSDL\u4e2d\u6709\u4e00\u4e9b\u8868\u793a\u57fa\u7840\u7c7b\u578b\u7684Field\uff0c\u5305\u62ec\uff1a 1. Bool Bool\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema \uff1a args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u8be5schema\u8868\u793a\uff0cBool\u7c7b\u578bField\u5728\u58f0\u660e\u7684\u65f6\u5019\u4e0d\u9700\u8981\u4f20\u5165\u53c2\u6570 \u6570\u636eschema \uff1a data_schema = { \"$id\" : \"/generic/boolean\" , \"title\" : \"BoolField\" , \"description\" : \"Bool field in dsdl.\" , \"oneOf\" : [ { \"type\" : \"boolean\" }, { \"type\" : \"number\" , \"enum\" : [ 0 , 1 ]} ] } \u8be5schema\u8868\u793a\uff0cBool\u7c7b\u578bField\u5728\u5b9e\u4f8b\u5316\u65f6\u53ef\u4ee5\u4f20\u5165True\uff0cFalse\uff0c0\uff0c1 \u5b9e\u4f8b \uff1a # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : iscrowd : Bool # \u5177\u4f53\u6837\u672c sample = { \"iscrowd\" : True # True/False/0/1\u90fd\u6ee1\u8db3\u8981\u6c42 } sample = { \"iscrowd\" : 2 # \u4e0d\u6ee1\u8db3\u8981\u6c42 } sample = { \"iscrowd\" : \"True\" # \u4e0d\u6ee1\u8db3\u8981\u6c42 } 2. Int Int\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u6574\u6570\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/generic/int\" , \"title\" : \"IntField\" , \"description\" : \"Int field in dsdl.\" , \"type\" : \"integer\" , } \u8be5schema\u8868\u793a\uff0cInt\u7c7b\u578bField\u5b9e\u4f8b\u5316\u65f6\u53ea\u53ef\u4ee5\u4f20\u5165\u6574\u6570\u7c7b\u578b \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : count : Int # \u5177\u4f53\u6837\u672c sample = { \"count\" : 1 # correct } sample = { \"count\" : \"1\" # wrong } sample = { \"count\" : True # wrong } 3. Num Num\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u6d6e\u70b9\u6570\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/generic/num\" , \"title\" : \"NumField\" , \"description\" : \"Num field in dsdl.\" , \"type\" : \"number\" , } \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : weight : Num # \u5177\u4f53\u6837\u672c sample = { \"weight\" : 1 # correct } sample = { \"weight\" : 10.4 # correct } sample = { \"weight\" : True # wrong } 4. Str Str\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/generic/str\" , \"title\" : \"StrField\" , \"description\" : \"Str field in dsdl.\" , \"type\" : \"string\" , } \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : name : Str # \u5177\u4f53\u6837\u672c sample = { \"name\" : \"dsdl\" # correct } sample = { \"name\" : 10.4 # wrong } sample = { \"name\" : True # wrong } 5. Dict Dict\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u5b57\u5178\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/generic/dict\" , \"title\" : \"DictField\" , \"description\" : \"Dict field in dsdl.\" , \"type\" : \"object\" , } \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : attributes : Dict # \u5177\u4f53\u6837\u672c sample = { \"attributes\" : { \"name\" : \"dsdl\" , \"age\" : 0 , \"gender\" : \"female\" } # correct } sample = { \"attributes\" : 10.4 # wrong } sample = { \"attributes\" : \"dsdl\" # wrong } \u7279\u6b8a\u7c7b\u578bField \u5728DSDL\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7684Field\u6765\u63cf\u8ff0bounding box\u3001polygon\u3001keypoint\u7b49\u6807\u6ce8\u7c7b\u578b\uff0c\u5e76\u4e3a\u5176\u4e2d\u4e00\u4e9bField\u5b9e\u73b0\u4e86\u76f8\u5e94\u7684\u57fa\u7840\u7c7b\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5\u65b9\u4fbf\u7528\u6237\u8c03\u7528\u3002 1. Coord Coord\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u4e8c\u7ef4\u5750\u6807\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/coord\" , \"title\" : \"CoordField\" , \"description\" : \"Coord 2D field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 2 , \"maxItems\" : 2 } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5fc5\u987b\u5305\u542b\u4e24\u4e2a\u5143\u7d20\uff0c\u4e24\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : coordinate : Coord # \u5177\u4f53\u6837\u672c sample = { \"coordinate\" : [ 10 , 12 ] # correct } sample = { \"coordinate\" : [ 10 , 12 , 13 ] # wrong } sample = { \"coordinate\" : \"dsdl\" # wrong } sample = { \"coordinate\" : [ 10 , False ] # wrong } 2. Coord3D Coord3D\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u4e09\u7ef4\u5750\u6807\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/coord3d\" , \"title\" : \"Coord3DField\" , \"description\" : \"Coord 3D field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 3 , \"maxItems\" : 3 } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5fc5\u987b\u5305\u542b3\u4e2a\u5143\u7d20\uff0c3\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : coordinate : Coord3D # \u5177\u4f53\u6837\u672c sample = { \"coordinate\" : [ 10 , 12 , 0 ] # correct } sample = { \"coordinate\" : [ 10 , 12 ] # wrong } sample = { \"coordinate\" : \"dsdl\" # wrong } sample = { \"coordinate\" : [ 10 , False , 12 ] # wrong } 3. Interval Interval\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u65f6\u95f4\u95f4\u9694\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { # \u65e0\u6cd5\u5b9a\u4e49\u987a\u5e8f \"$id\" : \"/special/interval\" , \"title\" : \"IntervalField\" , \"description\" : \"Interval field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 2 , \"maxItems\" : 2 , } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5fc5\u987b\u5305\u542b2\u4e2a\u5143\u7d20\uff0c2\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57 \u8865\u5145\u6821\u9a8c \u7531\u4e8eInterval\u7c7b\u578b\u8fd8\u8981\u6c42\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c0f\u4e8e\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c\u800c\u8be5\u89c4\u5219\u65e0\u6cd5\u7528jsonschema\u8868\u793a\uff0c\u56e0\u6b64dsdl\u8fd8\u4e3a\u8fd9\u79cd\u60c5\u51b5\u589e\u52a0\u4e86\u4e8c\u6b21\u6821\u9a8c\uff0cInterval Field\u7684\u4e8c\u6b21\u6821\u9a8c\u4ee3\u7801\u4e3a\uff1a def additional_validate ( self , value ): assert value [ 0 ] <= value [ 1 ] return value \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : interval : Interval # \u5177\u4f53\u6837\u672c sample = { \"interval\" : [ 10 , 12 ] # correct } sample = { \"interval\" : [ 12 , 10 ] # wrong } sample = { \"interval\" : \"dsdl\" # wrong } sample = { \"interval\" : [ 10 , False , 12 ] # wrong } 4. Date Date\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u65e5\u671f\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/date\" , \"title\" : \"DateField\" , \"description\" : \"Date field in dsdl.\" , \"type\" : \"string\" , \"format\" : \"date\" } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u5fc5\u987b\u6ee1\u8db3 ISO8601 format \u4e2d\u7684Date\u7684\u683c\u5f0f\uff0c\u5373 YYYY-MM-DD \u683c\u5f0f \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : date : Date # \u5177\u4f53\u6837\u672c sample = { \"date\" : \"2022-12-12\" # correct } sample = { \"date\" : \"12-12\" # correct } sample = { \"date\" : \"12\" # wrong } sample = { \"date\" : [ 10 , False ] # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Date Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a datetime.date.fromisoformat \u5bf9\u8c61 5. Time Time\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u65f6\u95f4\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/time\" , \"title\" : \"TimeField\" , \"description\" : \"Time field in dsdl.\" , \"type\" : \"string\" , \"format\" : \"time\" } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u5fc5\u987b\u6ee1\u8db3 ISO8601 format \u4e2d\u7684Time\u7684\u683c\u5f0f \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : time : Time # \u5177\u4f53\u6837\u672c sample = { \"time\" : \"20:20:39+00:00\" # correct } sample = { \"time\" : \"20:20:39\" # correct } sample = { \"time\" : \"12-12\" # wrong } sample = { \"time\" : \"12::12\" # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Time Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a datetime.time.fromisoformat \u5bf9\u8c61 6. BBox BBox\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684bounding box\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywh\" , \"xyxy\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] } \u8be5jsonschema\u8868\u793aBBox\u7c7b\u578b\u4f20\u5165\u7684\u53c2\u6570\u4e3a mode \uff0c\u53ef\u4ee5\u7684\u53d6\u503c\u4e3a xywh \u6216 xyxy \uff1a mode=xywh \u8868\u793a\u4f20\u5165\u7684\u6570\u636e\u4f1a\u4ee5\u5de6\u4e0a\u89d2xy\u5750\u6807\u548cbbox\u5bbd\u9ad8\u7684\u5f62\u5f0f\u7ed9\u51fa\uff1b mode=xyxy \u8868\u793a\u4f20\u5165\u7684\u6570\u636e\u4f1a\u4ee5\u5de6\u4e0a\u89d2+\u53f3\u4e0b\u89d2\u7684xy\u5750\u6807\u7684\u5f62\u5f0f\u7ed9\u51fa \u6570\u636eschema data_schema = { \"$id\" : \"/special/bbox\" , \"title\" : \"BBoxField\" , \"description\" : \"Bounding box field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 4 , \"maxItems\" : 4 , } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5305\u542b4\u4e2a\u5143\u7d20\uff0c\u8fd9\u56db\u4e2a\u5143\u7d20\u5fc5\u987b\u662f\u6570\u5b57\u7c7b\u578b\u3002 \u7531\u4e8e\u6211\u4eec\u5e0c\u671b\u5728mode\u4e3a xywh \u65f6\uff0c\u4f20\u5165\u7684\u5217\u8868\u76844\u4e2a\u5143\u7d20\u4e2d\uff0c\u8868\u793awh\u7684\u540e\u4e24\u4e2a\u5143\u7d20\u5fc5\u987b\u4e3a\u975e\u8d1f\uff0c\u6211\u4eec\u989d\u5916\u4e3aBBox Field\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u53c2\u6570+\u6570\u636e schema\uff0c\u6765\u89c4\u8303\u5b83\u7684\u53c2\u6570\u4e0e\u4f20\u5165\u6570\u636e\uff1a whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywh\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 4 , \"maxItems\" : 4 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 4 , \"maxItems\" : 4 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } \u5b9e\u4f8b1 # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : bbox : BBox # \u5177\u4f53\u6837\u672c sample = { \"bbox\" : [ 10 , 12 , 480 , 720 ] # correct } sample = { \"bbox\" : [ - 1 , 12 , 40 , 80 ] # correct } sample = { \"bbox\" : [ 1 , 2 , - 1 , 100 ] # wrong } sample = { \"bbox\" : [ 1 , 2 , 10 , 10 , 1 ] # wrong } \u5b9e\u4f8b2 # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : bbox : BBox[mode=xyxy] # \u5177\u4f53\u6837\u672c sample = { \"bbox\" : [ 10 , 12 , 480 , 720 ] # correct } sample = { \"bbox\" : [ - 1 , 12 , 40 , 80 ] # correct } sample = { \"bbox\" : [ 1 , 2 , - 1 , 100 ] # correct } sample = { \"bbox\" : [ 1 , 2 , 10 , 10 , 1 ] # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3BBox Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.BBox \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import BBox # import BBox field field = BBox () # decare the BBox field data = [ 10 , 12 , 60 , 70 ] # define the data of a bounding box bbox_obj = field . validate ( data ) # return a dsdl.geometry.BBox object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9bounding box\u8fdb\u884c\u64cd\u4f5c\uff1a bbox_obj . xyxy # \u8f93\u51fa\u8be5bounding box\u7684xyxy\u5f62\u5f0f bbox_obj . area # \u8f93\u51fa\u8be5bounding box\u7684\u9762\u79ef bbox_obj . xmin # \u8f93\u51fa\u8be5bounding box\u7684\u5de6\u4e0a\u89d2\u70b9x\u5750\u6807 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.BBox\u90e8\u5206\u3002 7. RotatedBBox RotatedBBox\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u65cb\u8f6cbounding box\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { # \u53c2\u6570schema \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"enum\" : [ \"xywht\" , \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] } default_args = { # \u9ed8\u8ba4\u53c2\u6570 \"mode\" : \"xywht\" , \"measure\" : \"radian\" } args_schema \u7ea6\u675f\u4e86\u5728\u58f0\u660eRotatedBBox Field\u65f6\u9700\u8981\u6307\u5b9a\u53c2\u6570 mode \u4e0e measure \uff1a mode\uff1a\u8868\u793a\u4f20\u5165\u6570\u636e\u7684\u6a21\u5f0f\uff0c\u53ef\u4ee5\u9009\u62e9 xywht \u6216 xyxy \uff0c\u9ed8\u8ba4\u4e3a xywht xywht \uff1a\u4f20\u5165\u7684\u65cb\u8f6c\u76ee\u6807\u6846\u7684\u503c\u9700\u8981\u662f[x, y, w, h, theta]\u7684\u5f62\u5f0f xyxy \uff1a\u4f20\u5165\u7684\u65cb\u8f6c\u76ee\u6807\u6846\u7684\u503c\u9700\u8981\u662f[x1, y1, x2, y2, x3, y3, x4, y4]\u7684\u5f62\u5f0f measure\uff1a\u8868\u793a\u5728 xywht \u6a21\u5f0f\u4e0b\uff0c\u4f20\u5165\u7684\u89d2\u5ea6 theta \u7684\u5355\u4f4d\u662f\u5f27\u5ea6\u8fd8\u662f\u5ea6\u6570\uff0c\u53ef\u4ee5\u9009\u62e9 radian \u6216 degree \uff0c\u9ed8\u8ba4\u4e3a radian \uff1a radian \uff1a xywht \u6a21\u5f0f\u4e0b\uff0c\u4f20\u5165\u7684\u89d2\u5ea6 theta \u7684\u5355\u4f4d\u662f\u5f27\u5ea6 degree \uff1a xywht \u6a21\u5f0f\u4e0b\uff0c\u4f20\u5165\u7684\u89d2\u5ea6 theta \u7684\u5355\u4f4d\u662f\u5ea6\u6570 \u6570\u636eschema data_schema = { \"$id\" : \"/special/rotatedbbox\" , \"title\" : \"RotatedBBoxField\" , \"description\" : \"Rotated bounding box field in dsdl.\" , \"type\" : \"array\" , \"oneOf\" : [ { \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }]}, { \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} ] } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5305\u542b5\u4e2a\u5143\u7d20\uff08rotated bbox\u7684\u4e2d\u5fc3\u70b9xy\u5750\u6807\u3001\u5bbd\u9ad8\uff0c\u65cb\u8f6c\u89d2\u5ea6\uff09\u62168\u4e2a\u5143\u7d20\uff08rotated bbox\u7684\u56db\u4e2a\u9876\u70b9\u7684xy\u5750\u6807\uff09\uff0c\u5143\u7d20\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57\u7c7b\u578b\u3002 \u7531\u4e8e\u6211\u4eec\u5e0c\u671b\u5728mode\u4e3a xywht \u65f6\uff0c\u4f20\u5165\u7684\u5217\u8868\u4e3a5\u4e2a\u5143\u7d20\uff1bmode\u4e3a xyxy \u65f6\uff0c\u4f20\u5165\u7684\u5217\u8868\u4e3a8\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u6211\u4eec\u989d\u5916\u4e3aRotateBBox Field\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u53c2\u6570+\u6570\u636e schema\uff0c\u6765\u89c4\u8303\u5b83\u7684\u53c2\u6570\u4e0e\u4f20\u5165\u6570\u636e\uff1a whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"enum\" : [ \"xywht\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } \u5b9e\u4f8b1 # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox # \u9ed8\u8ba4\u60c5\u51b5\u4e0b mode=xywht, measure=radian # \u5177\u4f53\u6837\u672c sample = { \"rbbox\" : [ 10 , 12 , 480 , 720 , 3.14 ] # correct } sample = { \"rbbox\" : [ - 1 , 12 , - 40 , 80 \uff0c 3.14 ] # wrong } sample = { \"rbbox\" : [ 12 \uff0c 12 \uff0c 12 \uff0c 13 \uff0c 14 \uff0c 13 \uff0c 14 \uff0c 12 ] # wrong } \u5b9e\u4f8b2 # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox[mode=xyxy] # \u9ed8\u8ba4\u60c5\u51b5\u4e0b measure=radian # \u5177\u4f53\u6837\u672c sample = { \"rbbox\" : [ 10 , 12 , 480 , 720 , 3.14 ] # wrong } sample = { \"rbbox\" : [ - 1 , 12 , - 40 , 80 \uff0c 3.14 ] # wrong } sample = { \"rbbox\" : [ 12 \uff0c 12 \uff0c 12 \uff0c 13 \uff0c 14 \uff0c 13 \uff0c 14 \uff0c 12 ] # correct } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3RotatedBBox Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.RBBox \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import RotatedBBox # import RotatedBBox field field = RotatedBBox ( mode = \"xywht\" , measure = \"radian\" ) # decare the RotatedBBox field data = [ 10 , 12 , 60 , 70 , 3.14 ] # define the data of a rotated bounding box rotated_bbox_obj = field . validate ( data ) # return a dsdl.geometry.RBBox object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9rotated bounding box\u8fdb\u884c\u64cd\u4f5c\uff1a rotated_bbox_obj . polygon_value # \u8f93\u51fa\u8be5rotated bounding box\u7684xyxy\u5f62\u5f0f rotated_bbox_obj . rbbox_value # \u8f93\u51fa\u8be5rotated bounding box\u7684xywht\u5f62\u5f0f ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.RBBox\u90e8\u5206\u3002 8. Polygon Polygon\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684polygon\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/polygon\" , \"title\" : \"PolygonField\" , \"description\" : \"Polygon field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 2 , \"maxItems\" : 2 , } } } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5217\u8868\uff0c\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e5f\u662f\u4e00\u4e2a\u5217\u8868\uff08\u4ee3\u8868\u4e00\u4e2a\u95ed\u5408\u7684polygon\uff09\uff0c\u8be5\u5217\u8868\u4e2d\u518d\u5d4c\u5957\u4e00\u5c42\u5217\u8868\uff08\u4ee3\u8868\u6bcf\u4e2apoint\uff09\uff0c\u6700\u91cc\u5c42\u5217\u8868\u91cc\u5305\u542b\u4e24\u4e2a\u5143\u7d20\uff0c\u90fd\u9700\u8981\u662f\u6570\u5b57\u7c7b\u578b\uff0c\u4ee3\u8868\u8fd9\u4e2apoint\u7684xy\u5750\u6807\u3002\u5373\uff1a polygon = [ polygon_item1 , polygon_item2 , ... ] polygon_item = [ point1 , point2 , ... ] point = [ x , y ] \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : polygon : Polygon # \u5177\u4f53\u6837\u672c sample = { \"polygon\" : [ [[ 10 , 12 ], [ 480 , 720 ], [ 11 , 360 ]], [[ 45 , 34 ], [ 90 , 12 ], [ 11 , 56 ]] ] # correct } sample = { \"polygon\" : [[ 10 , 12 ], [ 480 , 720 ], [ 11 , 360 ]] # wrong } sample = { \"polygon\" : [ [[ 10 , 12 ], [ 480 , 720 ], [ 11 , 360 ]], ] # correct } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Polygon Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.Polygon \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import Polygon # import Polygon field field = Polygon () # decare the Polygon field data = [ [[ 10 , 12 ], [ 480 , 720 ], [ 11 , 360 ]], [[ 45 , 34 ], [ 90 , 12 ], [ 11 , 56 ]] ] # define the data of a polygon polygon_obj = field . validate ( data ) # return a dsdl.geometry.Polygon object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9bounding box\u8fdb\u884c\u64cd\u4f5c\uff1a polygon_obj . openmmlabformat # \u5c06\u6240\u6709\u7684\u70b9\u5e73\u94fa\uff08\u4e0eopenmmlab\u5b58\u50a8polygon\u7684\u683c\u5f0f\u4e00\u81f4\uff09 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.Polygon\u90e8\u5206\u3002 9. Text Text\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u6587\u672c\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/text\" , \"title\" : \"TextField\" , \"description\" : \"Text field in dsdl.\" , \"type\" : \"string\" } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u5b57\u7b26\u4e32\u7c7b\u578b\u3002 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : txt : Text # \u5177\u4f53\u6837\u672c sample = { \"txt\" : \"dsdl\" # correct } sample = { \"txt\" : 1 # wrong } sample = { \"txt\" : [ 1 , 2 , - 1 , 100 ] # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Text Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.Text \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import Text # import Text field field = Text () # decare the Text field data = \"dsdl\" # define the data of a text annotation text_obj = field . validate ( data ) # return a dsdl.geometry.BBox object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9text\u6807\u6ce8\u8fdb\u884c\u64cd\u4f5c\uff1a text_obj . value # \u8f93\u51fa\u8be5\u6587\u672c \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.Text\u90e8\u5206\u3002 10. ImageShape ImageShape\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u56fe\u50cf\u5c3a\u5bf8\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"hw\" , \"wh\" ] } }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] } default_args = { \"mode\" : \"hw\" } \u58f0\u660eImageShape Field\u9700\u8981\u6307\u5b9a mode \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u7684\u503c\u53ef\u4ee5\u662f hw \u6216 wh \uff0c\u9ed8\u8ba4\u4e3a hw \uff1a hw \uff1aImageShape\u4f20\u5165\u7684\u503c\u5c06\u4f5c\u4e3a[\u9ad8\uff0c\u5bbd]\u6765\u89e3\u6790 wh \uff1aImageShape\u4f20\u5165\u7684\u503c\u5c06\u4f5c\u4e3a[\u5bbd\uff0c\u9ad8]\u6765\u89e3\u6790 \u6570\u636eschema data_schema = { \"$id\" : \"/special/imageshape\" , \"title\" : \"ImageShapeField\" , \"description\" : \"ImageShape field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"integer\" , \"minimum\" : 0 }, \"minItems\" : 2 , \"maxItems\" : 2 , } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5217\u8868\uff0c\u5143\u7d20\u6570\u76ee\u5fc5\u987b\u662f2\uff0c\u5143\u7d20\u5fc5\u987b\u662f\u4e0d\u5c0f\u4e8e0\u7684\u6574\u6570\u3002 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : shape : ImageShape[mode=wh] # \u5177\u4f53\u6837\u672c sample = { \"shape\" : [ 12 , 45 ] # correct } sample = { \"shape\" : [ 12 , - 1 ] # wrong } sample = { \"shape\" : [ 1 , 2 , 100 ] # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3ImageShape Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.ImageShape \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import ImageShape # import ImageShape field field = ImageShape () # decare the ImageShape field data = [ 360 , 960 ] # define the data of a imageshape shape_obj = field . validate ( data ) # return a dsdl.geometry.ImageShape object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9imageshape\u6807\u6ce8\u8fdb\u884c\u64cd\u4f5c\uff1a shape_obj . height # \u8f93\u51fa\u9ad8 shape_obj . width # \u8f93\u51fa\u5bbd \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.ImageShape\u90e8\u5206\u3002 11. UniqueID UniqueID\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u552f\u4e00ID\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"properties\" : { \"id_type\" : { \"type\" : [ \"string\" , \"null\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"id_type\" ] } default_args = { \"id_type\" : None } \u58f0\u660eUniqueID Field\u9700\u8981\u6307\u5b9a id_type \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u7684\u503c\u9700\u8981\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\u6216\u8005None\uff0c\u4e3b\u8981\u7528\u4e8e\u8868\u793a\u8be5UniqueID Field\u662f\u63cf\u8ff0\u4ec0\u4e48ID\u7684\uff0c\u9ed8\u8ba4\u503c\u4e3aNone\u3002 \u6570\u636eschema data_schema = { \"$id\" : \"/special/uniqueid\" , \"title\" : \"UniqueIDField\" , \"description\" : \"UniqueID field in dsdl.\" , \"type\" : \"string\" } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5b57\u7b26\u4e32\u3002 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : uid : UniqueID[id_type=image_id] # \u7528\u4e8e\u8868\u793aImageID # \u5177\u4f53\u6837\u672c sample = { \"uid\" : \"image001\" # correct } sample = { \"uid\" : [ 12 , - 1 ] # wrong } sample = { \"uid\" : 1 # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3UniqueID Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.UniqueID \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import UniqueID # import UniqueID field field = UniqueID ( id_type = \"image_id\" ) # decare the UniqueID field data = \"image001\" # define the data of an image id uid_obj = field . validate ( data ) # return a dsdl.geometry.UniqueID object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9UniqueID\u8fdb\u884c\u64cd\u4f5c\uff1a uid_obj . value # \u8f93\u51faid\u503c \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.UniqueID\u90e8\u5206\u3002 12. InstanceID InstanceID\u7c7b\u578bField\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u7279\u6b8a\u7684UniqueID Field\uff0c\u4e13\u95e8\u7528\u6765\u8868\u793a\u5b9e\u4f8b\u7684\u552f\u4e00id\uff1a InstanceId Field\u7b49\u4ef7\u4e8e UniqueID[id_type=InstanceID] \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : ins_id : InstanceID # \u5177\u4f53\u6837\u672c sample = { \"ins_id\" : \"instance_001\" # correct } sample = { \"ins_id\" : [ 12 , - 1 ] # wrong } sample = { \"ins_id\" : 1 # wrong } 13. Label Label\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u7c7b\u522b\u6807\u6ce8\u7c7b\u578b\u3002 \u58f0\u660e\u53c2\u6570 \u7531\u4e8eLabel Field\u7528\u6765\u89c4\u8303\u4f20\u5165\u7684\u7c7b\u522b\u6807\u7b7e\u6570\u636e\uff0c\u56e0\u6b64\u5728\u58f0\u660eLabel Field\u65f6\u6211\u4eec\u9700\u8981\u6307\u660e\u8be5\u7c7b\u522b\u6807\u7b7e\u7684 ClassDomain \u3002\u4e0b\u9762\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u9996\u5148\u58f0\u660e\u4e00\u4e2aClassDomain\uff0c\u7136\u540e\u4f7f\u7528\u8be5ClassDomain\u6765\u58f0\u660eLabel Field\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684ClassDomain COCOClassDemoDom : $def : class_domain classes : - person - bicycle - car - motorcycle - airplane # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : category : Label[dom=COCOClassDemoDom] \u901a\u8fc7\u4e0a\u8ff0\u7684\u58f0\u660e\u8bed\u53e5\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2aClassDomain\u4e3aCOCOClassDemoDom\u7684Label Field\u3002 \u4f20\u5165\u6570\u636e \u5728\u4f20\u5165\u5177\u4f53\u7684label\u6570\u636e\u65f6\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4ee4\u6570\u636e\u9075\u5faa\u4e0b\u9762\u7684jsonschema\uff1a data_schema = { \"$id\" : \"/special/label\" , \"title\" : \"LabelField\" , \"description\" : \"Label field in dsdl.\" , \"type\" : [ \"string\" , \"integer\" ] } \u4f20\u5165\u7684\u503c\u9700\u8981\u662f\u6574\u6570\u7c7b\u578b\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b \u5982\u679c\u4f20\u5165\u7684\u6570\u636e\u662f\u6574\u6570\u7c7b\u578b\uff0c\u5219dsdl\u4f1a\u5c06\u5176\u7406\u89e3\u4e3a\u8be5Label\u5728ClassDomain\u4e2d\u7684\u5e8f\u53f7\uff1a data = { \"category\" : 1 } # \u8868\u793a COCOClassDemoDom\u7684\u7b2c1\u4e2alabel\uff08\u5373person\uff09 data = { \"category\" : 5 } # \u8868\u793a COCOClassDemoDom\u7684\u7b2c5\u4e2alabel\uff08\u5373airplane\uff09 data = { \"category\" : 6 } # error! COCOClassDemoDom\u4e2d\u53ea\u67095\u4e2alabel \u5982\u679c\u4f20\u5165\u7684\u6570\u636e\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5219dsdl\u4f1a\u5c06\u5176\u7406\u89e3\u4e3a\u8be5Label\u7684\u540d\u79f0\u6216\u8005 <classdomain name>::<label name> \uff1a data = { \"category\" : \"COCOClassDemoDom::person\" } # \u8868\u793a COCOClassDemoDom\u4e2d\u7684person data = { \"category\" : \"person\" } # \u8868\u793a COCOClassDemoDom\u4e2d\u7684person data = { \"category\" : \"OtherDom::person\" } # error! OtherDom\u6ca1\u6709\u5728Label Field\u4e2d\u88ab\u58f0\u660e data = { \"category\" : \"arrow\" } # error! COCOClassDemoDom\u4e2d\u4e0d\u5b58\u5728 arrow \u6570\u636e\u7c7b \u5728dsdl\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsd.geometry.Label \u5bf9\u8c61\uff1a from dsdl.geometry import ClassDomain from dsdl.fields import Label # \u5b9a\u4e49ClassDomain ClassDomain ( name = \"COCOClassDemoDom\" , classes = [ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" ], ) # \u58f0\u660eLabelField field = Label ( dom = \"COCOClassDemoDom\" ) # \u5b9e\u4f8b\u5316 data = \"COCOClassDemoDom::car\" label_obj = field . validate ( data ) DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9Label\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff1a label_obj . index_in_domain () # \u8fd4\u56de3\uff0c\u5373\u8be5\u7c7b\u522b\u5728classdomain\u4e2d\u7684\u5e8f\u53f7 label_obj . category_name # \u8fd4\u56de car\uff0c\u5373\u8be5\u7c7b\u522b\u7684\u540d\u79f0 \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.Label\u90e8\u5206\u3002 14. Keypoint Keypoint\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u5173\u952e\u70b9\u7c7b\u578b\u7684\u6570\u636e\u3002 \u58f0\u660e\u53c2\u6570 \u7531\u4e8e\u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u9700\u8981\u6211\u4eec\u4e8b\u5148\u6307\u5b9a\u4e00\u4e2a\u76ee\u6807\u4e2d\u5404\u4e2a\u5173\u952e\u70b9\u7684\u7c7b\u578b\u540d\u79f0\u4ee5\u53ca\u8fde\u7ed3\u5173\u7cfb\uff0c\u56e0\u6b64\u5728dsdl\u4e2d\u6211\u4eec\u9700\u8981\u5728\u58f0\u660eKeypoint Field\u65f6\u6307\u5b9a\u4e00\u4e2aClassDomain\uff0c\u5b9e\u4f8b\u5982\u4e0b\uff1a # \u5b9a\u4e49ClassDomain KeyPoint_person_ClassDom : $def : class_domain classes : - left_ankle - left_ear - left_elbow - left_eye - left_hip - left_knee - left_shoulder - left_wrist - nose - right_ankle - right_ear - right_elbow - right_eye - right_hip - right_knee - right_shoulder - right_wrist skeleton : - [ 16 , 14 ] - [ 14 , 12 ] - [ 17 , 15 ] - [ 15 , 13 ] - [ 12 , 13 ] - [ 6 , 12 ] - [ 7 , 13 ] - [ 6 , 7 ] - [ 6 , 8 ] - [ 7 , 9 ] - [ 8 , 10 ] - [ 9 , 11 ] - [ 2 , 3 ] - [ 1 , 2 ] - [ 1 , 3 ] - [ 2 , 4 ] - [ 3 , 5 ] - [ 4 , 6 ] - [ 5 , 7 ] # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : kp : Keypoint[dom=KeyPoint_person_ClassDom] \u5176\u4e2dskeleton\u5b57\u6bb5\u6307\u660e\u4e86classes\u5b57\u6bb5\u4e2d\u5404\u4e2a\u5173\u952e\u70b9\u7684\u8fde\u7ed3\u5173\u7cfb \u901a\u8fc7\u4e86\u4e0a\u9762\u7684yaml\u8bed\u53e5\uff0c\u6211\u4eec\u58f0\u660e\u4e86\u4e00\u4e2aClassDomain\u4e3aKeyPoint_person_ClassDom\u7684Keypoint Field\u3002 \u4f20\u5165\u6570\u636e \u5728\u4f20\u5165\u5177\u4f53\u7684keypoint\u6570\u636e\u65f6\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4ee4\u6570\u636e\u9075\u5faa\u4e0b\u9762\u7684jsonschema\uff1a data_schema = { \"$id\" : \"/special/keypoint\" , \"title\" : \"KeypointField\" , \"description\" : \"Keypoint Field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 3 , \"maxItems\" : 3 , } } \u8be5schema\u89c4\u5b9a\uff0c\u4f20\u5165\u7684keypoint\u503c\u5fc5\u987b\u662f\u4e00\u4e2a\u5217\u8868 \u8be5\u5217\u8868\u7684\u5143\u7d20\u4e5f\u5fc5\u987b\u662f\u4e00\u4e2a\u5143\u7d20\u6570\u76ee\u4e3a3\uff0c\u7c7b\u578b\u4e3a\u6570\u5b57\u7c7b\u578b\u7684\u5217\u8868\uff0c\u8868\u793a\u4e00\u4e2a\u5173\u952e\u70b9\u7684xy\u5750\u6807\u4ee5\u53ca\u662f\u5426\u53ef\u89c1 \u5b9e\u4f8b # \u5b9a\u4e49ClassDomain KeypointClassDom : $def : class_domain classes : - hand - arm - shoulder - neck - head skeleton : - [ 1 , 2 ] - [ 2 , 3 ] - [ 3 , 4 ] - [ 4 , 5 ] - [ 5 , 6 ] # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : kp : Keypoint[dom=KeypointClassDom] # \u5177\u4f53\u6837\u672c sample = { \"kp\" : [[ 1 , 3 , 1 ], [ 1 , 4 , 1 ], [ 2 , 3 , 1 ], [ 3 , 4 , 0 ], [ 5 , 5 , 1 ]] # correct } sample = { \"kp\" : [ 12 , - 1 ] # wrong } sample = { \"kp\" : 1 # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Keypoint Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.Keypoint \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.geometry import ClassDomain from dsdl.fields import Keypoint # \u5b9a\u4e49ClassDomain ClassDomain ( name = \"KeypointDom\" , classes = [ \"hand\" , \"arm\" , \"shoulder\" , \"neck\" , \"head\" ], skeleton = [[ 1 , 2 ], [ 2 , 3 ], [ 3 , 4 ], [ 4 , 5 ]] ) # \u58f0\u660eLabelField field = Keypoint ( dom = \"KeypointDom\" ) # \u5b9e\u4f8b\u5316 data = [[ 1 , 3 , 1 ], [ 1 , 4 , 1 ], [ 2 , 3 , 1 ], [ 3 , 4 , 0 ], [ 5 , 5 , 1 ]] kp_obj = field . validate ( data ) DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9Keypoint\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff1a kp_obj . points # \u8fd4\u56de\u6240\u6709\u70b9\u7684xy\u5750\u6807 kp_obj . visables # \u6240\u6709\u70b9\u662f\u5426\u53ef\u89c1 \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.Keypoint\u90e8\u5206\u3002 \u5a92\u4f53\u7c7b\u578bField 1. Image Image\u7c7b\u578bField\u7528\u6765\u8868\u793a\u56fe\u50cf\u6570\u636e \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u4f20\u5165\u6570\u636eschema data_schema = { \"$id\" : \"/unstructure/image\" , \"title\" : \"ImageField\" , \"description\" : \"Image field in dsdl.\" , \"type\" : \"string\" , } Image Field\u7684\u4f20\u5165\u6570\u636e\u53ea\u8981\u6c42\u662f\u5b57\u7b26\u4e32\u5373\u53ef\uff0c\u8be5\u5b57\u7b26\u4e32\u4e00\u822c\u662f\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : img : Image # \u5177\u4f53\u6837\u672c sample = { \"img\" : \"dsdl.jpg\" # correct } sample = { \"img\" : 10.4 # wrong } sample = { \"img\" : True # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Image Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.Image \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import Image # import Image field from dsdl.objectio import LocalFileReader field = Image () # declare the Image field file_reader = LocalFileReader ( working_dir = \"the/dir/of/images\" ) field . set_file_reader ( file_reader ) # declare the file reader data = \"1.jpg\" img_obj = field . validate ( data ) # return a dsdl.geometry.Image object \u7531\u4e8e\u5728\u6807\u6ce8\u6587\u4ef6\u4e2d\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u53ea\u4f1a\u63d0\u4f9bImage\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u9700\u8981\u4e3aImage Field\u5bf9\u8c61\u6307\u5b9a\u4e00\u4e2afile reader\u5bf9\u8c61\uff0c\u4ece\u800c\u544a\u8bc9dsdl\u4ece\u54ea\u91cc\u8bfb\u53d6\u8be5\u56fe\u7247 DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9Image\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff1a img_obj . to_image () # \u5c06\u56fe\u50cf\u8f6c\u6362\u4e3aPIL.Image\u5bf9\u8c61 img_obj . to_array () # \u5c06\u56fe\u50cf\u8f6c\u6362\u4e3anumpy.ndarray\u5bf9\u8c61 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684 dsdl.geometry.Image \u90e8\u5206\u3002 2. LabelMap LabelMap\u7c7b\u578bField\u7528\u6765\u8868\u793a\u8bed\u4e49\u5206\u5272\u56fe \u58f0\u660e\u53c2\u6570 \u7531\u4e8e\u8bed\u4e49\u5206\u5272\u4efb\u52a1\u9700\u8981\u4e8b\u5148\u6307\u5b9a\u4e00\u4e2aClassDomain\uff0c\u56e0\u6b64\u5728\u58f0\u660eLabelMap Field\u65f6\u9700\u8981\u6307\u5b9a\u5b83\u7684ClassDomain\u3002\u6307\u5b9a\u65b9\u6cd5\u548cLabel Field\u3001Keypoint Field\u7c7b\u4f3c\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684ClassDomain COCOClassDemoDom : $def : class_domain classes : - person - bicycle - car - motorcycle - airplane # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : labelmap : LabelMap[dom=COCOClassDemoDom] \u901a\u8fc7\u4e0a\u9762\u7684yaml\u8bed\u53e5\uff0c\u58f0\u660e\u4e86\u4e00\u4e2aclass domain\u4e3aCOCOClassDemoDom\u7684LabelMap Field \u4f20\u5165\u6570\u636eschema data_schema = { \"$id\" : \"/unstructure/labelmap\" , \"title\" : \"LabelMapField\" , \"description\" : \"LabelMap field in dsdl.\" , \"type\" : \"string\" , } LabelMap Field\u7684\u4f20\u5165\u6570\u636e\u53ea\u8981\u6c42\u662f\u5b57\u7b26\u4e32\u5373\u53ef\uff0c\u8be5\u5b57\u7b26\u4e32\u4e00\u822c\u662f\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84 \u5b9e\u4f8b # \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684ClassDomain COCOClassDemoDom : $def : class_domain classes : - person - bicycle - car - motorcycle - airplane # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : labelmap : LabelMap[dom=COCOClassDemoDom] # \u5177\u4f53\u6837\u672c sample = { \"labelmap\" : \"dsdl_label.jpg\" # correct } sample = { \"labelmap\" : 10.4 # wrong } sample = { \"labelmap\" : True # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3LabelMap Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.LabelMap \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import LabelMap , ClassDomain # import LabelMap field from dsdl.objectio import LocalFileReader # \u5b9a\u4e49ClassDomain ClassDomain ( name = \"COCOClassDemoDom\" , classes = [ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" ], ) field = LabelMap ( dom = \"COCOClassDemoDom\" ) # declare the LabelMap field file_reader = LocalFileReader ( working_dir = \"the/dir/of/label/images\" ) field . set_file_reader ( file_reader ) # declare the file reader data = \"1.jpg\" labelmap_obj = field . validate ( data ) # return a dsdl.geometry.LabelMap object \u7531\u4e8e\u5728\u6807\u6ce8\u6587\u4ef6\u4e2d\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u53ea\u4f1a\u63d0\u4f9bImage\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u9700\u8981\u4e3aLabelMap Field\u5bf9\u8c61\u6307\u5b9a\u4e00\u4e2afile reader\u5bf9\u8c61\uff0c\u4ece\u800c\u544a\u8bc9dsdl\u4ece\u54ea\u91cc\u8bfb\u53d6\u8be5\u56fe\u7247 DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9labelmap image\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff1a labelmap_obj . to_image () # \u5c06\u5206\u5272\u56fe\u50cf\u8f6c\u6362\u4e3aPIL.Image\u5bf9\u8c61 labelmap_obj . to_array () # \u5c06\u5206\u5272\u56fe\u50cf\u8f6c\u6362\u4e3anumpy.ndarray\u5bf9\u8c61 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684 dsdl.geometry.LabelMap \u90e8\u5206\u3002 3. InstanceMap InstanceMap\u7c7b\u578bField\u7528\u6765\u8868\u793a\u5b9e\u4f8b\u5206\u5272\u56fe \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u4f20\u5165\u6570\u636eschema data_schema = { \"$id\" : \"/unstructure/instancemap\" , \"title\" : \"InstanceMapField\" , \"description\" : \"InstanceMap field in dsdl.\" , \"type\" : \"string\" , } InstanceMap Field\u7684\u4f20\u5165\u6570\u636e\u53ea\u8981\u6c42\u662f\u5b57\u7b26\u4e32\u5373\u53ef\uff0c\u8be5\u5b57\u7b26\u4e32\u4e00\u822c\u662f\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : insmap : InstanceMap # \u5177\u4f53\u6837\u672c sample = { \"insmap\" : \"dsdl_instance.jpg\" # correct } sample = { \"insmap\" : 10.4 # wrong } sample = { \"insmap\" : True # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Image Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.InstanceMap \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import InstanceMap # import InstanceMap field from dsdl.objectio import LocalFileReader field = InstanceMap () # declare the InstanceMap field file_reader = LocalFileReader ( working_dir = \"the/dir/of/instance_images\" ) field . set_file_reader ( file_reader ) # declare the file reader data = \"1.jpg\" ins_obj = field . validate ( data ) # return a dsdl.geometry.Image object \u7531\u4e8e\u5728\u6807\u6ce8\u6587\u4ef6\u4e2d\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u53ea\u4f1a\u63d0\u4f9bInstanceMap\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u9700\u8981\u4e3aInstanceMap Field\u5bf9\u8c61\u6307\u5b9a\u4e00\u4e2afile reader\u5bf9\u8c61\uff0c\u4ece\u800c\u544a\u8bc9dsdl\u4ece\u54ea\u91cc\u8bfb\u53d6\u8be5\u56fe\u7247 DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9Instance \u56fe\u50cf\u8fdb\u884c\u64cd\u4f5c\uff1a ins_obj . to_image () # \u5c06\u5b9e\u4f8b\u56fe\u50cf\u8f6c\u6362\u4e3aPIL.Image\u5bf9\u8c61 ins_obj . to_array () # \u5c06\u5b9e\u4f8b\u56fe\u50cf\u8f6c\u6362\u4e3anumpy.ndarray\u5bf9\u8c61 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684 dsdl.geometry.InstanceMap \u90e8\u5206\u3002","title":"Field\u6982\u8ff0"},{"location":"api_reference/fields_overview/#dsdl-field","text":"Field\u662fDSDL\u4e2d\u8868\u8fbe\u6570\u636e\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u5728\u6570\u636e\u96c6\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u6837\u672c\u90fd\u9075\u5faa\u4e00\u4e2aStruct\u6a21\u677f\uff0c\u800cStruct\u7684\u7ec4\u6210\u5185\u5bb9\u5373\u4e3aField\uff08\u6216\u8005\u5d4c\u5957Struct\uff09\u3002 \u5982\u4e0b\u6240\u793a\uff0c\u4e00\u4e2a\u5177\u4f53\u7684\u6837\u672c\u4e3a\uff1a sample = { \"img\" : \"media/00001.jpg\" , \"bbox\" : [ 369.3 , 253.15 , 57.7 , 29.96 ], \"label\" : \"dog\" } \u5b83\u9075\u5faa\u7684Struct\u4e3a\uff1a LocalObjectEntry : $def : struct $fields : bbox : BBox label : Label[dom=\"COCODomain\"] img : Image \u5176\u4e2d\u7684BBox\u3001Label\u3001Image\u90fd\u662fField\uff0c\u8fd9\u4e9bField\u89c4\u5b9a\u4e86\u6837\u672c\u4e2d\u5404\u4e2a\u5b57\u6bb5\u503c\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u6837\u672c\u4e2d\u7684 \"img\" \u5b57\u6bb5\u867d\u7136\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f46\u7531\u4e8e\u5728Struct\u5b9a\u4e49\u4e2d\u8be5\u5b57\u6bb5\u88ab\u58f0\u660e\u4e3a Image Field\uff0c\u5219dsdl sdk\u4f1a\u5c06\u5176\u5f53\u4f5c\u4e00\u4e2a\u56fe\u50cf\u7c7b\u578b\u6765\u5904\u7406\u3002 \u672c\u7ae0\u5185\u5bb9\u4f1a\u8be6\u7ec6\u4ecb\u7ecdDSDL\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u9884\u8bbe\u7684Field\u3002 \u5728DSDL\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528jsonschema\u6765\u89c4\u8303Field\u7684\u521d\u59cb\u5316\u4f20\u5165\u7684\u53c2\u6570\u4ee5\u53ca\u89c4\u8303\u8be5Field\u5bf9\u5e94\u7684\u503c\u7684\u5f62\u5f0f\u3002","title":"DSDL Field\u7c7b\u578b\u7b80\u4ecb"},{"location":"api_reference/fields_overview/#field","text":"DSDL\u4e2d\u6709\u4e00\u4e9b\u8868\u793a\u57fa\u7840\u7c7b\u578b\u7684Field\uff0c\u5305\u62ec\uff1a","title":"\u57fa\u7840\u7c7b\u578bField"},{"location":"api_reference/fields_overview/#1-bool","text":"Bool\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema \uff1a args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u8be5schema\u8868\u793a\uff0cBool\u7c7b\u578bField\u5728\u58f0\u660e\u7684\u65f6\u5019\u4e0d\u9700\u8981\u4f20\u5165\u53c2\u6570 \u6570\u636eschema \uff1a data_schema = { \"$id\" : \"/generic/boolean\" , \"title\" : \"BoolField\" , \"description\" : \"Bool field in dsdl.\" , \"oneOf\" : [ { \"type\" : \"boolean\" }, { \"type\" : \"number\" , \"enum\" : [ 0 , 1 ]} ] } \u8be5schema\u8868\u793a\uff0cBool\u7c7b\u578bField\u5728\u5b9e\u4f8b\u5316\u65f6\u53ef\u4ee5\u4f20\u5165True\uff0cFalse\uff0c0\uff0c1 \u5b9e\u4f8b \uff1a # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : iscrowd : Bool # \u5177\u4f53\u6837\u672c sample = { \"iscrowd\" : True # True/False/0/1\u90fd\u6ee1\u8db3\u8981\u6c42 } sample = { \"iscrowd\" : 2 # \u4e0d\u6ee1\u8db3\u8981\u6c42 } sample = { \"iscrowd\" : \"True\" # \u4e0d\u6ee1\u8db3\u8981\u6c42 }","title":"1. Bool"},{"location":"api_reference/fields_overview/#2-int","text":"Int\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u6574\u6570\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/generic/int\" , \"title\" : \"IntField\" , \"description\" : \"Int field in dsdl.\" , \"type\" : \"integer\" , } \u8be5schema\u8868\u793a\uff0cInt\u7c7b\u578bField\u5b9e\u4f8b\u5316\u65f6\u53ea\u53ef\u4ee5\u4f20\u5165\u6574\u6570\u7c7b\u578b \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : count : Int # \u5177\u4f53\u6837\u672c sample = { \"count\" : 1 # correct } sample = { \"count\" : \"1\" # wrong } sample = { \"count\" : True # wrong }","title":"2. Int"},{"location":"api_reference/fields_overview/#3-num","text":"Num\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u6d6e\u70b9\u6570\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/generic/num\" , \"title\" : \"NumField\" , \"description\" : \"Num field in dsdl.\" , \"type\" : \"number\" , } \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : weight : Num # \u5177\u4f53\u6837\u672c sample = { \"weight\" : 1 # correct } sample = { \"weight\" : 10.4 # correct } sample = { \"weight\" : True # wrong }","title":"3. Num"},{"location":"api_reference/fields_overview/#4-str","text":"Str\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/generic/str\" , \"title\" : \"StrField\" , \"description\" : \"Str field in dsdl.\" , \"type\" : \"string\" , } \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : name : Str # \u5177\u4f53\u6837\u672c sample = { \"name\" : \"dsdl\" # correct } sample = { \"name\" : 10.4 # wrong } sample = { \"name\" : True # wrong }","title":"4. Str"},{"location":"api_reference/fields_overview/#5-dict","text":"Dict\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u5b57\u5178\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/generic/dict\" , \"title\" : \"DictField\" , \"description\" : \"Dict field in dsdl.\" , \"type\" : \"object\" , } \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : attributes : Dict # \u5177\u4f53\u6837\u672c sample = { \"attributes\" : { \"name\" : \"dsdl\" , \"age\" : 0 , \"gender\" : \"female\" } # correct } sample = { \"attributes\" : 10.4 # wrong } sample = { \"attributes\" : \"dsdl\" # wrong }","title":"5. Dict"},{"location":"api_reference/fields_overview/#field_1","text":"\u5728DSDL\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7684Field\u6765\u63cf\u8ff0bounding box\u3001polygon\u3001keypoint\u7b49\u6807\u6ce8\u7c7b\u578b\uff0c\u5e76\u4e3a\u5176\u4e2d\u4e00\u4e9bField\u5b9e\u73b0\u4e86\u76f8\u5e94\u7684\u57fa\u7840\u7c7b\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5\u65b9\u4fbf\u7528\u6237\u8c03\u7528\u3002","title":"\u7279\u6b8a\u7c7b\u578bField"},{"location":"api_reference/fields_overview/#1-coord","text":"Coord\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u4e8c\u7ef4\u5750\u6807\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/coord\" , \"title\" : \"CoordField\" , \"description\" : \"Coord 2D field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 2 , \"maxItems\" : 2 } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5fc5\u987b\u5305\u542b\u4e24\u4e2a\u5143\u7d20\uff0c\u4e24\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : coordinate : Coord # \u5177\u4f53\u6837\u672c sample = { \"coordinate\" : [ 10 , 12 ] # correct } sample = { \"coordinate\" : [ 10 , 12 , 13 ] # wrong } sample = { \"coordinate\" : \"dsdl\" # wrong } sample = { \"coordinate\" : [ 10 , False ] # wrong }","title":"1. Coord"},{"location":"api_reference/fields_overview/#2-coord3d","text":"Coord3D\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u4e09\u7ef4\u5750\u6807\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/coord3d\" , \"title\" : \"Coord3DField\" , \"description\" : \"Coord 3D field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 3 , \"maxItems\" : 3 } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5fc5\u987b\u5305\u542b3\u4e2a\u5143\u7d20\uff0c3\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : coordinate : Coord3D # \u5177\u4f53\u6837\u672c sample = { \"coordinate\" : [ 10 , 12 , 0 ] # correct } sample = { \"coordinate\" : [ 10 , 12 ] # wrong } sample = { \"coordinate\" : \"dsdl\" # wrong } sample = { \"coordinate\" : [ 10 , False , 12 ] # wrong }","title":"2. Coord3D"},{"location":"api_reference/fields_overview/#3-interval","text":"Interval\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u65f6\u95f4\u95f4\u9694\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { # \u65e0\u6cd5\u5b9a\u4e49\u987a\u5e8f \"$id\" : \"/special/interval\" , \"title\" : \"IntervalField\" , \"description\" : \"Interval field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 2 , \"maxItems\" : 2 , } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5fc5\u987b\u5305\u542b2\u4e2a\u5143\u7d20\uff0c2\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57 \u8865\u5145\u6821\u9a8c \u7531\u4e8eInterval\u7c7b\u578b\u8fd8\u8981\u6c42\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c0f\u4e8e\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c\u800c\u8be5\u89c4\u5219\u65e0\u6cd5\u7528jsonschema\u8868\u793a\uff0c\u56e0\u6b64dsdl\u8fd8\u4e3a\u8fd9\u79cd\u60c5\u51b5\u589e\u52a0\u4e86\u4e8c\u6b21\u6821\u9a8c\uff0cInterval Field\u7684\u4e8c\u6b21\u6821\u9a8c\u4ee3\u7801\u4e3a\uff1a def additional_validate ( self , value ): assert value [ 0 ] <= value [ 1 ] return value \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : interval : Interval # \u5177\u4f53\u6837\u672c sample = { \"interval\" : [ 10 , 12 ] # correct } sample = { \"interval\" : [ 12 , 10 ] # wrong } sample = { \"interval\" : \"dsdl\" # wrong } sample = { \"interval\" : [ 10 , False , 12 ] # wrong }","title":"3. Interval"},{"location":"api_reference/fields_overview/#4-date","text":"Date\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u65e5\u671f\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/date\" , \"title\" : \"DateField\" , \"description\" : \"Date field in dsdl.\" , \"type\" : \"string\" , \"format\" : \"date\" } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u5fc5\u987b\u6ee1\u8db3 ISO8601 format \u4e2d\u7684Date\u7684\u683c\u5f0f\uff0c\u5373 YYYY-MM-DD \u683c\u5f0f \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : date : Date # \u5177\u4f53\u6837\u672c sample = { \"date\" : \"2022-12-12\" # correct } sample = { \"date\" : \"12-12\" # correct } sample = { \"date\" : \"12\" # wrong } sample = { \"date\" : [ 10 , False ] # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Date Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a datetime.date.fromisoformat \u5bf9\u8c61","title":"4. Date"},{"location":"api_reference/fields_overview/#5-time","text":"Time\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u65f6\u95f4\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/time\" , \"title\" : \"TimeField\" , \"description\" : \"Time field in dsdl.\" , \"type\" : \"string\" , \"format\" : \"time\" } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u5fc5\u987b\u6ee1\u8db3 ISO8601 format \u4e2d\u7684Time\u7684\u683c\u5f0f \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : time : Time # \u5177\u4f53\u6837\u672c sample = { \"time\" : \"20:20:39+00:00\" # correct } sample = { \"time\" : \"20:20:39\" # correct } sample = { \"time\" : \"12-12\" # wrong } sample = { \"time\" : \"12::12\" # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Time Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a datetime.time.fromisoformat \u5bf9\u8c61","title":"5. Time"},{"location":"api_reference/fields_overview/#6-bbox","text":"BBox\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684bounding box\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywh\" , \"xyxy\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] } \u8be5jsonschema\u8868\u793aBBox\u7c7b\u578b\u4f20\u5165\u7684\u53c2\u6570\u4e3a mode \uff0c\u53ef\u4ee5\u7684\u53d6\u503c\u4e3a xywh \u6216 xyxy \uff1a mode=xywh \u8868\u793a\u4f20\u5165\u7684\u6570\u636e\u4f1a\u4ee5\u5de6\u4e0a\u89d2xy\u5750\u6807\u548cbbox\u5bbd\u9ad8\u7684\u5f62\u5f0f\u7ed9\u51fa\uff1b mode=xyxy \u8868\u793a\u4f20\u5165\u7684\u6570\u636e\u4f1a\u4ee5\u5de6\u4e0a\u89d2+\u53f3\u4e0b\u89d2\u7684xy\u5750\u6807\u7684\u5f62\u5f0f\u7ed9\u51fa \u6570\u636eschema data_schema = { \"$id\" : \"/special/bbox\" , \"title\" : \"BBoxField\" , \"description\" : \"Bounding box field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 4 , \"maxItems\" : 4 , } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5305\u542b4\u4e2a\u5143\u7d20\uff0c\u8fd9\u56db\u4e2a\u5143\u7d20\u5fc5\u987b\u662f\u6570\u5b57\u7c7b\u578b\u3002 \u7531\u4e8e\u6211\u4eec\u5e0c\u671b\u5728mode\u4e3a xywh \u65f6\uff0c\u4f20\u5165\u7684\u5217\u8868\u76844\u4e2a\u5143\u7d20\u4e2d\uff0c\u8868\u793awh\u7684\u540e\u4e24\u4e2a\u5143\u7d20\u5fc5\u987b\u4e3a\u975e\u8d1f\uff0c\u6211\u4eec\u989d\u5916\u4e3aBBox Field\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u53c2\u6570+\u6570\u636e schema\uff0c\u6765\u89c4\u8303\u5b83\u7684\u53c2\u6570\u4e0e\u4f20\u5165\u6570\u636e\uff1a whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywh\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 4 , \"maxItems\" : 4 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 4 , \"maxItems\" : 4 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } \u5b9e\u4f8b1 # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : bbox : BBox # \u5177\u4f53\u6837\u672c sample = { \"bbox\" : [ 10 , 12 , 480 , 720 ] # correct } sample = { \"bbox\" : [ - 1 , 12 , 40 , 80 ] # correct } sample = { \"bbox\" : [ 1 , 2 , - 1 , 100 ] # wrong } sample = { \"bbox\" : [ 1 , 2 , 10 , 10 , 1 ] # wrong } \u5b9e\u4f8b2 # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : bbox : BBox[mode=xyxy] # \u5177\u4f53\u6837\u672c sample = { \"bbox\" : [ 10 , 12 , 480 , 720 ] # correct } sample = { \"bbox\" : [ - 1 , 12 , 40 , 80 ] # correct } sample = { \"bbox\" : [ 1 , 2 , - 1 , 100 ] # correct } sample = { \"bbox\" : [ 1 , 2 , 10 , 10 , 1 ] # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3BBox Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.BBox \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import BBox # import BBox field field = BBox () # decare the BBox field data = [ 10 , 12 , 60 , 70 ] # define the data of a bounding box bbox_obj = field . validate ( data ) # return a dsdl.geometry.BBox object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9bounding box\u8fdb\u884c\u64cd\u4f5c\uff1a bbox_obj . xyxy # \u8f93\u51fa\u8be5bounding box\u7684xyxy\u5f62\u5f0f bbox_obj . area # \u8f93\u51fa\u8be5bounding box\u7684\u9762\u79ef bbox_obj . xmin # \u8f93\u51fa\u8be5bounding box\u7684\u5de6\u4e0a\u89d2\u70b9x\u5750\u6807 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.BBox\u90e8\u5206\u3002","title":"6. BBox"},{"location":"api_reference/fields_overview/#7-rotatedbbox","text":"RotatedBBox\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u65cb\u8f6cbounding box\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { # \u53c2\u6570schema \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"enum\" : [ \"xywht\" , \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] } default_args = { # \u9ed8\u8ba4\u53c2\u6570 \"mode\" : \"xywht\" , \"measure\" : \"radian\" } args_schema \u7ea6\u675f\u4e86\u5728\u58f0\u660eRotatedBBox Field\u65f6\u9700\u8981\u6307\u5b9a\u53c2\u6570 mode \u4e0e measure \uff1a mode\uff1a\u8868\u793a\u4f20\u5165\u6570\u636e\u7684\u6a21\u5f0f\uff0c\u53ef\u4ee5\u9009\u62e9 xywht \u6216 xyxy \uff0c\u9ed8\u8ba4\u4e3a xywht xywht \uff1a\u4f20\u5165\u7684\u65cb\u8f6c\u76ee\u6807\u6846\u7684\u503c\u9700\u8981\u662f[x, y, w, h, theta]\u7684\u5f62\u5f0f xyxy \uff1a\u4f20\u5165\u7684\u65cb\u8f6c\u76ee\u6807\u6846\u7684\u503c\u9700\u8981\u662f[x1, y1, x2, y2, x3, y3, x4, y4]\u7684\u5f62\u5f0f measure\uff1a\u8868\u793a\u5728 xywht \u6a21\u5f0f\u4e0b\uff0c\u4f20\u5165\u7684\u89d2\u5ea6 theta \u7684\u5355\u4f4d\u662f\u5f27\u5ea6\u8fd8\u662f\u5ea6\u6570\uff0c\u53ef\u4ee5\u9009\u62e9 radian \u6216 degree \uff0c\u9ed8\u8ba4\u4e3a radian \uff1a radian \uff1a xywht \u6a21\u5f0f\u4e0b\uff0c\u4f20\u5165\u7684\u89d2\u5ea6 theta \u7684\u5355\u4f4d\u662f\u5f27\u5ea6 degree \uff1a xywht \u6a21\u5f0f\u4e0b\uff0c\u4f20\u5165\u7684\u89d2\u5ea6 theta \u7684\u5355\u4f4d\u662f\u5ea6\u6570 \u6570\u636eschema data_schema = { \"$id\" : \"/special/rotatedbbox\" , \"title\" : \"RotatedBBoxField\" , \"description\" : \"Rotated bounding box field in dsdl.\" , \"type\" : \"array\" , \"oneOf\" : [ { \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }]}, { \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} ] } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5305\u542b5\u4e2a\u5143\u7d20\uff08rotated bbox\u7684\u4e2d\u5fc3\u70b9xy\u5750\u6807\u3001\u5bbd\u9ad8\uff0c\u65cb\u8f6c\u89d2\u5ea6\uff09\u62168\u4e2a\u5143\u7d20\uff08rotated bbox\u7684\u56db\u4e2a\u9876\u70b9\u7684xy\u5750\u6807\uff09\uff0c\u5143\u7d20\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57\u7c7b\u578b\u3002 \u7531\u4e8e\u6211\u4eec\u5e0c\u671b\u5728mode\u4e3a xywht \u65f6\uff0c\u4f20\u5165\u7684\u5217\u8868\u4e3a5\u4e2a\u5143\u7d20\uff1bmode\u4e3a xyxy \u65f6\uff0c\u4f20\u5165\u7684\u5217\u8868\u4e3a8\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u6211\u4eec\u989d\u5916\u4e3aRotateBBox Field\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u53c2\u6570+\u6570\u636e schema\uff0c\u6765\u89c4\u8303\u5b83\u7684\u53c2\u6570\u4e0e\u4f20\u5165\u6570\u636e\uff1a whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"enum\" : [ \"xywht\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } \u5b9e\u4f8b1 # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox # \u9ed8\u8ba4\u60c5\u51b5\u4e0b mode=xywht, measure=radian # \u5177\u4f53\u6837\u672c sample = { \"rbbox\" : [ 10 , 12 , 480 , 720 , 3.14 ] # correct } sample = { \"rbbox\" : [ - 1 , 12 , - 40 , 80 \uff0c 3.14 ] # wrong } sample = { \"rbbox\" : [ 12 \uff0c 12 \uff0c 12 \uff0c 13 \uff0c 14 \uff0c 13 \uff0c 14 \uff0c 12 ] # wrong } \u5b9e\u4f8b2 # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox[mode=xyxy] # \u9ed8\u8ba4\u60c5\u51b5\u4e0b measure=radian # \u5177\u4f53\u6837\u672c sample = { \"rbbox\" : [ 10 , 12 , 480 , 720 , 3.14 ] # wrong } sample = { \"rbbox\" : [ - 1 , 12 , - 40 , 80 \uff0c 3.14 ] # wrong } sample = { \"rbbox\" : [ 12 \uff0c 12 \uff0c 12 \uff0c 13 \uff0c 14 \uff0c 13 \uff0c 14 \uff0c 12 ] # correct } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3RotatedBBox Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.RBBox \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import RotatedBBox # import RotatedBBox field field = RotatedBBox ( mode = \"xywht\" , measure = \"radian\" ) # decare the RotatedBBox field data = [ 10 , 12 , 60 , 70 , 3.14 ] # define the data of a rotated bounding box rotated_bbox_obj = field . validate ( data ) # return a dsdl.geometry.RBBox object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9rotated bounding box\u8fdb\u884c\u64cd\u4f5c\uff1a rotated_bbox_obj . polygon_value # \u8f93\u51fa\u8be5rotated bounding box\u7684xyxy\u5f62\u5f0f rotated_bbox_obj . rbbox_value # \u8f93\u51fa\u8be5rotated bounding box\u7684xywht\u5f62\u5f0f ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.RBBox\u90e8\u5206\u3002","title":"7. RotatedBBox"},{"location":"api_reference/fields_overview/#8-polygon","text":"Polygon\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684polygon\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/polygon\" , \"title\" : \"PolygonField\" , \"description\" : \"Polygon field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 2 , \"maxItems\" : 2 , } } } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5217\u8868\uff0c\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e5f\u662f\u4e00\u4e2a\u5217\u8868\uff08\u4ee3\u8868\u4e00\u4e2a\u95ed\u5408\u7684polygon\uff09\uff0c\u8be5\u5217\u8868\u4e2d\u518d\u5d4c\u5957\u4e00\u5c42\u5217\u8868\uff08\u4ee3\u8868\u6bcf\u4e2apoint\uff09\uff0c\u6700\u91cc\u5c42\u5217\u8868\u91cc\u5305\u542b\u4e24\u4e2a\u5143\u7d20\uff0c\u90fd\u9700\u8981\u662f\u6570\u5b57\u7c7b\u578b\uff0c\u4ee3\u8868\u8fd9\u4e2apoint\u7684xy\u5750\u6807\u3002\u5373\uff1a polygon = [ polygon_item1 , polygon_item2 , ... ] polygon_item = [ point1 , point2 , ... ] point = [ x , y ] \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : polygon : Polygon # \u5177\u4f53\u6837\u672c sample = { \"polygon\" : [ [[ 10 , 12 ], [ 480 , 720 ], [ 11 , 360 ]], [[ 45 , 34 ], [ 90 , 12 ], [ 11 , 56 ]] ] # correct } sample = { \"polygon\" : [[ 10 , 12 ], [ 480 , 720 ], [ 11 , 360 ]] # wrong } sample = { \"polygon\" : [ [[ 10 , 12 ], [ 480 , 720 ], [ 11 , 360 ]], ] # correct } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Polygon Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.Polygon \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import Polygon # import Polygon field field = Polygon () # decare the Polygon field data = [ [[ 10 , 12 ], [ 480 , 720 ], [ 11 , 360 ]], [[ 45 , 34 ], [ 90 , 12 ], [ 11 , 56 ]] ] # define the data of a polygon polygon_obj = field . validate ( data ) # return a dsdl.geometry.Polygon object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9bounding box\u8fdb\u884c\u64cd\u4f5c\uff1a polygon_obj . openmmlabformat # \u5c06\u6240\u6709\u7684\u70b9\u5e73\u94fa\uff08\u4e0eopenmmlab\u5b58\u50a8polygon\u7684\u683c\u5f0f\u4e00\u81f4\uff09 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.Polygon\u90e8\u5206\u3002","title":"8. Polygon"},{"location":"api_reference/fields_overview/#9-text","text":"Text\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u6587\u672c\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/text\" , \"title\" : \"TextField\" , \"description\" : \"Text field in dsdl.\" , \"type\" : \"string\" } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u5b57\u7b26\u4e32\u7c7b\u578b\u3002 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : txt : Text # \u5177\u4f53\u6837\u672c sample = { \"txt\" : \"dsdl\" # correct } sample = { \"txt\" : 1 # wrong } sample = { \"txt\" : [ 1 , 2 , - 1 , 100 ] # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Text Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.Text \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import Text # import Text field field = Text () # decare the Text field data = \"dsdl\" # define the data of a text annotation text_obj = field . validate ( data ) # return a dsdl.geometry.BBox object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9text\u6807\u6ce8\u8fdb\u884c\u64cd\u4f5c\uff1a text_obj . value # \u8f93\u51fa\u8be5\u6587\u672c \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.Text\u90e8\u5206\u3002","title":"9. Text"},{"location":"api_reference/fields_overview/#10-imageshape","text":"ImageShape\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u56fe\u50cf\u5c3a\u5bf8\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"hw\" , \"wh\" ] } }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] } default_args = { \"mode\" : \"hw\" } \u58f0\u660eImageShape Field\u9700\u8981\u6307\u5b9a mode \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u7684\u503c\u53ef\u4ee5\u662f hw \u6216 wh \uff0c\u9ed8\u8ba4\u4e3a hw \uff1a hw \uff1aImageShape\u4f20\u5165\u7684\u503c\u5c06\u4f5c\u4e3a[\u9ad8\uff0c\u5bbd]\u6765\u89e3\u6790 wh \uff1aImageShape\u4f20\u5165\u7684\u503c\u5c06\u4f5c\u4e3a[\u5bbd\uff0c\u9ad8]\u6765\u89e3\u6790 \u6570\u636eschema data_schema = { \"$id\" : \"/special/imageshape\" , \"title\" : \"ImageShapeField\" , \"description\" : \"ImageShape field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"integer\" , \"minimum\" : 0 }, \"minItems\" : 2 , \"maxItems\" : 2 , } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5217\u8868\uff0c\u5143\u7d20\u6570\u76ee\u5fc5\u987b\u662f2\uff0c\u5143\u7d20\u5fc5\u987b\u662f\u4e0d\u5c0f\u4e8e0\u7684\u6574\u6570\u3002 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : shape : ImageShape[mode=wh] # \u5177\u4f53\u6837\u672c sample = { \"shape\" : [ 12 , 45 ] # correct } sample = { \"shape\" : [ 12 , - 1 ] # wrong } sample = { \"shape\" : [ 1 , 2 , 100 ] # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3ImageShape Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.ImageShape \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import ImageShape # import ImageShape field field = ImageShape () # decare the ImageShape field data = [ 360 , 960 ] # define the data of a imageshape shape_obj = field . validate ( data ) # return a dsdl.geometry.ImageShape object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9imageshape\u6807\u6ce8\u8fdb\u884c\u64cd\u4f5c\uff1a shape_obj . height # \u8f93\u51fa\u9ad8 shape_obj . width # \u8f93\u51fa\u5bbd \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.ImageShape\u90e8\u5206\u3002","title":"10. ImageShape"},{"location":"api_reference/fields_overview/#11-uniqueid","text":"UniqueID\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u552f\u4e00ID\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"properties\" : { \"id_type\" : { \"type\" : [ \"string\" , \"null\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"id_type\" ] } default_args = { \"id_type\" : None } \u58f0\u660eUniqueID Field\u9700\u8981\u6307\u5b9a id_type \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u7684\u503c\u9700\u8981\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\u6216\u8005None\uff0c\u4e3b\u8981\u7528\u4e8e\u8868\u793a\u8be5UniqueID Field\u662f\u63cf\u8ff0\u4ec0\u4e48ID\u7684\uff0c\u9ed8\u8ba4\u503c\u4e3aNone\u3002 \u6570\u636eschema data_schema = { \"$id\" : \"/special/uniqueid\" , \"title\" : \"UniqueIDField\" , \"description\" : \"UniqueID field in dsdl.\" , \"type\" : \"string\" } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5b57\u7b26\u4e32\u3002 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : uid : UniqueID[id_type=image_id] # \u7528\u4e8e\u8868\u793aImageID # \u5177\u4f53\u6837\u672c sample = { \"uid\" : \"image001\" # correct } sample = { \"uid\" : [ 12 , - 1 ] # wrong } sample = { \"uid\" : 1 # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3UniqueID Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.UniqueID \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import UniqueID # import UniqueID field field = UniqueID ( id_type = \"image_id\" ) # decare the UniqueID field data = \"image001\" # define the data of an image id uid_obj = field . validate ( data ) # return a dsdl.geometry.UniqueID object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9UniqueID\u8fdb\u884c\u64cd\u4f5c\uff1a uid_obj . value # \u8f93\u51faid\u503c \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.UniqueID\u90e8\u5206\u3002","title":"11. UniqueID"},{"location":"api_reference/fields_overview/#12-instanceid","text":"InstanceID\u7c7b\u578bField\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u7279\u6b8a\u7684UniqueID Field\uff0c\u4e13\u95e8\u7528\u6765\u8868\u793a\u5b9e\u4f8b\u7684\u552f\u4e00id\uff1a InstanceId Field\u7b49\u4ef7\u4e8e UniqueID[id_type=InstanceID] \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : ins_id : InstanceID # \u5177\u4f53\u6837\u672c sample = { \"ins_id\" : \"instance_001\" # correct } sample = { \"ins_id\" : [ 12 , - 1 ] # wrong } sample = { \"ins_id\" : 1 # wrong }","title":"12. InstanceID"},{"location":"api_reference/fields_overview/#13-label","text":"Label\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u7c7b\u522b\u6807\u6ce8\u7c7b\u578b\u3002 \u58f0\u660e\u53c2\u6570 \u7531\u4e8eLabel Field\u7528\u6765\u89c4\u8303\u4f20\u5165\u7684\u7c7b\u522b\u6807\u7b7e\u6570\u636e\uff0c\u56e0\u6b64\u5728\u58f0\u660eLabel Field\u65f6\u6211\u4eec\u9700\u8981\u6307\u660e\u8be5\u7c7b\u522b\u6807\u7b7e\u7684 ClassDomain \u3002\u4e0b\u9762\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u9996\u5148\u58f0\u660e\u4e00\u4e2aClassDomain\uff0c\u7136\u540e\u4f7f\u7528\u8be5ClassDomain\u6765\u58f0\u660eLabel Field\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684ClassDomain COCOClassDemoDom : $def : class_domain classes : - person - bicycle - car - motorcycle - airplane # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : category : Label[dom=COCOClassDemoDom] \u901a\u8fc7\u4e0a\u8ff0\u7684\u58f0\u660e\u8bed\u53e5\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2aClassDomain\u4e3aCOCOClassDemoDom\u7684Label Field\u3002 \u4f20\u5165\u6570\u636e \u5728\u4f20\u5165\u5177\u4f53\u7684label\u6570\u636e\u65f6\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4ee4\u6570\u636e\u9075\u5faa\u4e0b\u9762\u7684jsonschema\uff1a data_schema = { \"$id\" : \"/special/label\" , \"title\" : \"LabelField\" , \"description\" : \"Label field in dsdl.\" , \"type\" : [ \"string\" , \"integer\" ] } \u4f20\u5165\u7684\u503c\u9700\u8981\u662f\u6574\u6570\u7c7b\u578b\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b \u5982\u679c\u4f20\u5165\u7684\u6570\u636e\u662f\u6574\u6570\u7c7b\u578b\uff0c\u5219dsdl\u4f1a\u5c06\u5176\u7406\u89e3\u4e3a\u8be5Label\u5728ClassDomain\u4e2d\u7684\u5e8f\u53f7\uff1a data = { \"category\" : 1 } # \u8868\u793a COCOClassDemoDom\u7684\u7b2c1\u4e2alabel\uff08\u5373person\uff09 data = { \"category\" : 5 } # \u8868\u793a COCOClassDemoDom\u7684\u7b2c5\u4e2alabel\uff08\u5373airplane\uff09 data = { \"category\" : 6 } # error! COCOClassDemoDom\u4e2d\u53ea\u67095\u4e2alabel \u5982\u679c\u4f20\u5165\u7684\u6570\u636e\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5219dsdl\u4f1a\u5c06\u5176\u7406\u89e3\u4e3a\u8be5Label\u7684\u540d\u79f0\u6216\u8005 <classdomain name>::<label name> \uff1a data = { \"category\" : \"COCOClassDemoDom::person\" } # \u8868\u793a COCOClassDemoDom\u4e2d\u7684person data = { \"category\" : \"person\" } # \u8868\u793a COCOClassDemoDom\u4e2d\u7684person data = { \"category\" : \"OtherDom::person\" } # error! OtherDom\u6ca1\u6709\u5728Label Field\u4e2d\u88ab\u58f0\u660e data = { \"category\" : \"arrow\" } # error! COCOClassDemoDom\u4e2d\u4e0d\u5b58\u5728 arrow \u6570\u636e\u7c7b \u5728dsdl\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsd.geometry.Label \u5bf9\u8c61\uff1a from dsdl.geometry import ClassDomain from dsdl.fields import Label # \u5b9a\u4e49ClassDomain ClassDomain ( name = \"COCOClassDemoDom\" , classes = [ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" ], ) # \u58f0\u660eLabelField field = Label ( dom = \"COCOClassDemoDom\" ) # \u5b9e\u4f8b\u5316 data = \"COCOClassDemoDom::car\" label_obj = field . validate ( data ) DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9Label\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff1a label_obj . index_in_domain () # \u8fd4\u56de3\uff0c\u5373\u8be5\u7c7b\u522b\u5728classdomain\u4e2d\u7684\u5e8f\u53f7 label_obj . category_name # \u8fd4\u56de car\uff0c\u5373\u8be5\u7c7b\u522b\u7684\u540d\u79f0 \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.Label\u90e8\u5206\u3002","title":"13. Label"},{"location":"api_reference/fields_overview/#14-keypoint","text":"Keypoint\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u5173\u952e\u70b9\u7c7b\u578b\u7684\u6570\u636e\u3002 \u58f0\u660e\u53c2\u6570 \u7531\u4e8e\u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u9700\u8981\u6211\u4eec\u4e8b\u5148\u6307\u5b9a\u4e00\u4e2a\u76ee\u6807\u4e2d\u5404\u4e2a\u5173\u952e\u70b9\u7684\u7c7b\u578b\u540d\u79f0\u4ee5\u53ca\u8fde\u7ed3\u5173\u7cfb\uff0c\u56e0\u6b64\u5728dsdl\u4e2d\u6211\u4eec\u9700\u8981\u5728\u58f0\u660eKeypoint Field\u65f6\u6307\u5b9a\u4e00\u4e2aClassDomain\uff0c\u5b9e\u4f8b\u5982\u4e0b\uff1a # \u5b9a\u4e49ClassDomain KeyPoint_person_ClassDom : $def : class_domain classes : - left_ankle - left_ear - left_elbow - left_eye - left_hip - left_knee - left_shoulder - left_wrist - nose - right_ankle - right_ear - right_elbow - right_eye - right_hip - right_knee - right_shoulder - right_wrist skeleton : - [ 16 , 14 ] - [ 14 , 12 ] - [ 17 , 15 ] - [ 15 , 13 ] - [ 12 , 13 ] - [ 6 , 12 ] - [ 7 , 13 ] - [ 6 , 7 ] - [ 6 , 8 ] - [ 7 , 9 ] - [ 8 , 10 ] - [ 9 , 11 ] - [ 2 , 3 ] - [ 1 , 2 ] - [ 1 , 3 ] - [ 2 , 4 ] - [ 3 , 5 ] - [ 4 , 6 ] - [ 5 , 7 ] # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : kp : Keypoint[dom=KeyPoint_person_ClassDom] \u5176\u4e2dskeleton\u5b57\u6bb5\u6307\u660e\u4e86classes\u5b57\u6bb5\u4e2d\u5404\u4e2a\u5173\u952e\u70b9\u7684\u8fde\u7ed3\u5173\u7cfb \u901a\u8fc7\u4e86\u4e0a\u9762\u7684yaml\u8bed\u53e5\uff0c\u6211\u4eec\u58f0\u660e\u4e86\u4e00\u4e2aClassDomain\u4e3aKeyPoint_person_ClassDom\u7684Keypoint Field\u3002 \u4f20\u5165\u6570\u636e \u5728\u4f20\u5165\u5177\u4f53\u7684keypoint\u6570\u636e\u65f6\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4ee4\u6570\u636e\u9075\u5faa\u4e0b\u9762\u7684jsonschema\uff1a data_schema = { \"$id\" : \"/special/keypoint\" , \"title\" : \"KeypointField\" , \"description\" : \"Keypoint Field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 3 , \"maxItems\" : 3 , } } \u8be5schema\u89c4\u5b9a\uff0c\u4f20\u5165\u7684keypoint\u503c\u5fc5\u987b\u662f\u4e00\u4e2a\u5217\u8868 \u8be5\u5217\u8868\u7684\u5143\u7d20\u4e5f\u5fc5\u987b\u662f\u4e00\u4e2a\u5143\u7d20\u6570\u76ee\u4e3a3\uff0c\u7c7b\u578b\u4e3a\u6570\u5b57\u7c7b\u578b\u7684\u5217\u8868\uff0c\u8868\u793a\u4e00\u4e2a\u5173\u952e\u70b9\u7684xy\u5750\u6807\u4ee5\u53ca\u662f\u5426\u53ef\u89c1 \u5b9e\u4f8b # \u5b9a\u4e49ClassDomain KeypointClassDom : $def : class_domain classes : - hand - arm - shoulder - neck - head skeleton : - [ 1 , 2 ] - [ 2 , 3 ] - [ 3 , 4 ] - [ 4 , 5 ] - [ 5 , 6 ] # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : kp : Keypoint[dom=KeypointClassDom] # \u5177\u4f53\u6837\u672c sample = { \"kp\" : [[ 1 , 3 , 1 ], [ 1 , 4 , 1 ], [ 2 , 3 , 1 ], [ 3 , 4 , 0 ], [ 5 , 5 , 1 ]] # correct } sample = { \"kp\" : [ 12 , - 1 ] # wrong } sample = { \"kp\" : 1 # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Keypoint Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.Keypoint \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.geometry import ClassDomain from dsdl.fields import Keypoint # \u5b9a\u4e49ClassDomain ClassDomain ( name = \"KeypointDom\" , classes = [ \"hand\" , \"arm\" , \"shoulder\" , \"neck\" , \"head\" ], skeleton = [[ 1 , 2 ], [ 2 , 3 ], [ 3 , 4 ], [ 4 , 5 ]] ) # \u58f0\u660eLabelField field = Keypoint ( dom = \"KeypointDom\" ) # \u5b9e\u4f8b\u5316 data = [[ 1 , 3 , 1 ], [ 1 , 4 , 1 ], [ 2 , 3 , 1 ], [ 3 , 4 , 0 ], [ 5 , 5 , 1 ]] kp_obj = field . validate ( data ) DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9Keypoint\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff1a kp_obj . points # \u8fd4\u56de\u6240\u6709\u70b9\u7684xy\u5750\u6807 kp_obj . visables # \u6240\u6709\u70b9\u662f\u5426\u53ef\u89c1 \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.Keypoint\u90e8\u5206\u3002","title":"14. Keypoint"},{"location":"api_reference/fields_overview/#field_2","text":"","title":"\u5a92\u4f53\u7c7b\u578bField"},{"location":"api_reference/fields_overview/#1-image","text":"Image\u7c7b\u578bField\u7528\u6765\u8868\u793a\u56fe\u50cf\u6570\u636e \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u4f20\u5165\u6570\u636eschema data_schema = { \"$id\" : \"/unstructure/image\" , \"title\" : \"ImageField\" , \"description\" : \"Image field in dsdl.\" , \"type\" : \"string\" , } Image Field\u7684\u4f20\u5165\u6570\u636e\u53ea\u8981\u6c42\u662f\u5b57\u7b26\u4e32\u5373\u53ef\uff0c\u8be5\u5b57\u7b26\u4e32\u4e00\u822c\u662f\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : img : Image # \u5177\u4f53\u6837\u672c sample = { \"img\" : \"dsdl.jpg\" # correct } sample = { \"img\" : 10.4 # wrong } sample = { \"img\" : True # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Image Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.Image \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import Image # import Image field from dsdl.objectio import LocalFileReader field = Image () # declare the Image field file_reader = LocalFileReader ( working_dir = \"the/dir/of/images\" ) field . set_file_reader ( file_reader ) # declare the file reader data = \"1.jpg\" img_obj = field . validate ( data ) # return a dsdl.geometry.Image object \u7531\u4e8e\u5728\u6807\u6ce8\u6587\u4ef6\u4e2d\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u53ea\u4f1a\u63d0\u4f9bImage\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u9700\u8981\u4e3aImage Field\u5bf9\u8c61\u6307\u5b9a\u4e00\u4e2afile reader\u5bf9\u8c61\uff0c\u4ece\u800c\u544a\u8bc9dsdl\u4ece\u54ea\u91cc\u8bfb\u53d6\u8be5\u56fe\u7247 DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9Image\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff1a img_obj . to_image () # \u5c06\u56fe\u50cf\u8f6c\u6362\u4e3aPIL.Image\u5bf9\u8c61 img_obj . to_array () # \u5c06\u56fe\u50cf\u8f6c\u6362\u4e3anumpy.ndarray\u5bf9\u8c61 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684 dsdl.geometry.Image \u90e8\u5206\u3002","title":"1. Image"},{"location":"api_reference/fields_overview/#2-labelmap","text":"LabelMap\u7c7b\u578bField\u7528\u6765\u8868\u793a\u8bed\u4e49\u5206\u5272\u56fe \u58f0\u660e\u53c2\u6570 \u7531\u4e8e\u8bed\u4e49\u5206\u5272\u4efb\u52a1\u9700\u8981\u4e8b\u5148\u6307\u5b9a\u4e00\u4e2aClassDomain\uff0c\u56e0\u6b64\u5728\u58f0\u660eLabelMap Field\u65f6\u9700\u8981\u6307\u5b9a\u5b83\u7684ClassDomain\u3002\u6307\u5b9a\u65b9\u6cd5\u548cLabel Field\u3001Keypoint Field\u7c7b\u4f3c\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684ClassDomain COCOClassDemoDom : $def : class_domain classes : - person - bicycle - car - motorcycle - airplane # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : labelmap : LabelMap[dom=COCOClassDemoDom] \u901a\u8fc7\u4e0a\u9762\u7684yaml\u8bed\u53e5\uff0c\u58f0\u660e\u4e86\u4e00\u4e2aclass domain\u4e3aCOCOClassDemoDom\u7684LabelMap Field \u4f20\u5165\u6570\u636eschema data_schema = { \"$id\" : \"/unstructure/labelmap\" , \"title\" : \"LabelMapField\" , \"description\" : \"LabelMap field in dsdl.\" , \"type\" : \"string\" , } LabelMap Field\u7684\u4f20\u5165\u6570\u636e\u53ea\u8981\u6c42\u662f\u5b57\u7b26\u4e32\u5373\u53ef\uff0c\u8be5\u5b57\u7b26\u4e32\u4e00\u822c\u662f\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84 \u5b9e\u4f8b # \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684ClassDomain COCOClassDemoDom : $def : class_domain classes : - person - bicycle - car - motorcycle - airplane # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : labelmap : LabelMap[dom=COCOClassDemoDom] # \u5177\u4f53\u6837\u672c sample = { \"labelmap\" : \"dsdl_label.jpg\" # correct } sample = { \"labelmap\" : 10.4 # wrong } sample = { \"labelmap\" : True # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3LabelMap Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.LabelMap \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import LabelMap , ClassDomain # import LabelMap field from dsdl.objectio import LocalFileReader # \u5b9a\u4e49ClassDomain ClassDomain ( name = \"COCOClassDemoDom\" , classes = [ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" ], ) field = LabelMap ( dom = \"COCOClassDemoDom\" ) # declare the LabelMap field file_reader = LocalFileReader ( working_dir = \"the/dir/of/label/images\" ) field . set_file_reader ( file_reader ) # declare the file reader data = \"1.jpg\" labelmap_obj = field . validate ( data ) # return a dsdl.geometry.LabelMap object \u7531\u4e8e\u5728\u6807\u6ce8\u6587\u4ef6\u4e2d\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u53ea\u4f1a\u63d0\u4f9bImage\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u9700\u8981\u4e3aLabelMap Field\u5bf9\u8c61\u6307\u5b9a\u4e00\u4e2afile reader\u5bf9\u8c61\uff0c\u4ece\u800c\u544a\u8bc9dsdl\u4ece\u54ea\u91cc\u8bfb\u53d6\u8be5\u56fe\u7247 DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9labelmap image\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff1a labelmap_obj . to_image () # \u5c06\u5206\u5272\u56fe\u50cf\u8f6c\u6362\u4e3aPIL.Image\u5bf9\u8c61 labelmap_obj . to_array () # \u5c06\u5206\u5272\u56fe\u50cf\u8f6c\u6362\u4e3anumpy.ndarray\u5bf9\u8c61 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684 dsdl.geometry.LabelMap \u90e8\u5206\u3002","title":"2. LabelMap"},{"location":"api_reference/fields_overview/#3-instancemap","text":"InstanceMap\u7c7b\u578bField\u7528\u6765\u8868\u793a\u5b9e\u4f8b\u5206\u5272\u56fe \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u4f20\u5165\u6570\u636eschema data_schema = { \"$id\" : \"/unstructure/instancemap\" , \"title\" : \"InstanceMapField\" , \"description\" : \"InstanceMap field in dsdl.\" , \"type\" : \"string\" , } InstanceMap Field\u7684\u4f20\u5165\u6570\u636e\u53ea\u8981\u6c42\u662f\u5b57\u7b26\u4e32\u5373\u53ef\uff0c\u8be5\u5b57\u7b26\u4e32\u4e00\u822c\u662f\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : insmap : InstanceMap # \u5177\u4f53\u6837\u672c sample = { \"insmap\" : \"dsdl_instance.jpg\" # correct } sample = { \"insmap\" : 10.4 # wrong } sample = { \"insmap\" : True # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Image Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.InstanceMap \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import InstanceMap # import InstanceMap field from dsdl.objectio import LocalFileReader field = InstanceMap () # declare the InstanceMap field file_reader = LocalFileReader ( working_dir = \"the/dir/of/instance_images\" ) field . set_file_reader ( file_reader ) # declare the file reader data = \"1.jpg\" ins_obj = field . validate ( data ) # return a dsdl.geometry.Image object \u7531\u4e8e\u5728\u6807\u6ce8\u6587\u4ef6\u4e2d\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u53ea\u4f1a\u63d0\u4f9bInstanceMap\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u9700\u8981\u4e3aInstanceMap Field\u5bf9\u8c61\u6307\u5b9a\u4e00\u4e2afile reader\u5bf9\u8c61\uff0c\u4ece\u800c\u544a\u8bc9dsdl\u4ece\u54ea\u91cc\u8bfb\u53d6\u8be5\u56fe\u7247 DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9Instance \u56fe\u50cf\u8fdb\u884c\u64cd\u4f5c\uff1a ins_obj . to_image () # \u5c06\u5b9e\u4f8b\u56fe\u50cf\u8f6c\u6362\u4e3aPIL.Image\u5bf9\u8c61 ins_obj . to_array () # \u5c06\u5b9e\u4f8b\u56fe\u50cf\u8f6c\u6362\u4e3anumpy.ndarray\u5bf9\u8c61 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684 dsdl.geometry.InstanceMap \u90e8\u5206\u3002","title":"3. InstanceMap"},{"location":"api_reference/","text":"\u5185\u5bb9\u5f85\u66f4\u65b0\u3002","title":"Index"},{"location":"api_reference/dsdl_fields/generic/","text":"Bool Bases: BaseField A DSDL Field to validate and return a boolean value. Examples: >>> bool_field = Bool () >>> value = True >>> bool_field . validate ( value ) True Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\generic.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Bool ( BaseField ): \"\"\"A DSDL Field to validate and return a boolean value. Examples: >>> bool_field = Bool() >>> value = True >>> bool_field.validate(value) True \"\"\" data_schema = { \"$id\" : \"/generic/boolean\" , \"title\" : \"BoolField\" , \"description\" : \"Bool field in dsdl.\" , \"oneOf\" : [ { \"type\" : \"boolean\" }, { \"type\" : \"number\" , \"enum\" : [ 0 , 1 ]} ] } geometry_class = bool Dict Bases: BaseField A DSDL Field to validate and return a dict value. Examples: >>> dic_field = Dict () >>> value = { \"1\" : \"a\" } >>> dic_field . validate ( value ) {\"1\": \"a\"} Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\generic.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 class Dict ( BaseField ): \"\"\"A DSDL Field to validate and return a dict value. Examples: >>> dic_field = Dict() >>> value = {\"1\": \"a\"} >>> dic_field.validate(value) {\"1\": \"a\"} \"\"\" data_schema = { \"$id\" : \"/generic/dict\" , \"title\" : \"DictField\" , \"description\" : \"Dict field in dsdl.\" , \"type\" : \"object\" , } Int Bases: BaseField A DSDL Field to validate and return an int value. Examples: >>> int_field = Int () >>> value = 1.0 >>> int_field . validate ( value ) 1 Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\generic.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Int ( BaseField ): \"\"\"A DSDL Field to validate and return an int value. Examples: >>> int_field = Int() >>> value = 1.0 >>> int_field.validate(value) 1 \"\"\" data_schema = { \"$id\" : \"/generic/int\" , \"title\" : \"IntField\" , \"description\" : \"Int field in dsdl.\" , \"type\" : \"integer\" , } Num Bases: BaseField A DSDL Field to validate and return a float value. Examples: >>> float_field = Num () >>> value = 1 >>> float_field . validate ( value ) 1.0 Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\generic.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class Num ( BaseField ): \"\"\"A DSDL Field to validate and return a float value. Examples: >>> float_field = Num() >>> value = 1 >>> float_field.validate(value) 1.0 \"\"\" data_schema = { \"$id\" : \"/generic/num\" , \"title\" : \"NumField\" , \"description\" : \"Num field in dsdl.\" , \"type\" : \"number\" , } Str Bases: BaseField A DSDL Field to validate and return a str value. Examples: >>> str_field = Str () >>> value = \"test\" >>> str_field . validate ( value ) \"test\" Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\generic.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class Str ( BaseField ): \"\"\"A DSDL Field to validate and return a str value. Examples: >>> str_field = Str() >>> value = \"test\" >>> str_field.validate(value) \"test\" \"\"\" data_schema = { \"$id\" : \"/generic/str\" , \"title\" : \"StrField\" , \"description\" : \"Str field in dsdl.\" , \"type\" : \"string\" , }","title":"dsdl.types.generic"},{"location":"api_reference/dsdl_fields/generic/#dsdl.fields.generic.Bool","text":"Bases: BaseField A DSDL Field to validate and return a boolean value. Examples: >>> bool_field = Bool () >>> value = True >>> bool_field . validate ( value ) True Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\generic.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Bool ( BaseField ): \"\"\"A DSDL Field to validate and return a boolean value. Examples: >>> bool_field = Bool() >>> value = True >>> bool_field.validate(value) True \"\"\" data_schema = { \"$id\" : \"/generic/boolean\" , \"title\" : \"BoolField\" , \"description\" : \"Bool field in dsdl.\" , \"oneOf\" : [ { \"type\" : \"boolean\" }, { \"type\" : \"number\" , \"enum\" : [ 0 , 1 ]} ] } geometry_class = bool","title":"Bool"},{"location":"api_reference/dsdl_fields/generic/#dsdl.fields.generic.Dict","text":"Bases: BaseField A DSDL Field to validate and return a dict value. Examples: >>> dic_field = Dict () >>> value = { \"1\" : \"a\" } >>> dic_field . validate ( value ) {\"1\": \"a\"} Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\generic.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 class Dict ( BaseField ): \"\"\"A DSDL Field to validate and return a dict value. Examples: >>> dic_field = Dict() >>> value = {\"1\": \"a\"} >>> dic_field.validate(value) {\"1\": \"a\"} \"\"\" data_schema = { \"$id\" : \"/generic/dict\" , \"title\" : \"DictField\" , \"description\" : \"Dict field in dsdl.\" , \"type\" : \"object\" , }","title":"Dict"},{"location":"api_reference/dsdl_fields/generic/#dsdl.fields.generic.Int","text":"Bases: BaseField A DSDL Field to validate and return an int value. Examples: >>> int_field = Int () >>> value = 1.0 >>> int_field . validate ( value ) 1 Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\generic.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Int ( BaseField ): \"\"\"A DSDL Field to validate and return an int value. Examples: >>> int_field = Int() >>> value = 1.0 >>> int_field.validate(value) 1 \"\"\" data_schema = { \"$id\" : \"/generic/int\" , \"title\" : \"IntField\" , \"description\" : \"Int field in dsdl.\" , \"type\" : \"integer\" , }","title":"Int"},{"location":"api_reference/dsdl_fields/generic/#dsdl.fields.generic.Num","text":"Bases: BaseField A DSDL Field to validate and return a float value. Examples: >>> float_field = Num () >>> value = 1 >>> float_field . validate ( value ) 1.0 Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\generic.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class Num ( BaseField ): \"\"\"A DSDL Field to validate and return a float value. Examples: >>> float_field = Num() >>> value = 1 >>> float_field.validate(value) 1.0 \"\"\" data_schema = { \"$id\" : \"/generic/num\" , \"title\" : \"NumField\" , \"description\" : \"Num field in dsdl.\" , \"type\" : \"number\" , }","title":"Num"},{"location":"api_reference/dsdl_fields/generic/#dsdl.fields.generic.Str","text":"Bases: BaseField A DSDL Field to validate and return a str value. Examples: >>> str_field = Str () >>> value = \"test\" >>> str_field . validate ( value ) \"test\" Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\generic.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class Str ( BaseField ): \"\"\"A DSDL Field to validate and return a str value. Examples: >>> str_field = Str() >>> value = \"test\" >>> str_field.validate(value) \"test\" \"\"\" data_schema = { \"$id\" : \"/generic/str\" , \"title\" : \"StrField\" , \"description\" : \"Str field in dsdl.\" , \"type\" : \"string\" , }","title":"Str"},{"location":"api_reference/dsdl_fields/special/","text":"BBox Bases: BaseField A DSDL Field to validate the given value and return a BBox object. Examples: >>> bbox_field = BBox () >>> value = [ 0 , 10 , 100 , 100 ] # [x, y, w, h] >>> bbox_obj = bbox_field . validate ( value ) >>> bbox_obj . __class__ . __name__ \"BBox\" Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 class BBox ( BaseField ): \"\"\" A DSDL Field to validate the given value and return a BBox object. Examples: >>> bbox_field = BBox() >>> value = [0, 10, 100, 100] # [x, y, w, h] >>> bbox_obj = bbox_field.validate(value) >>> bbox_obj.__class__.__name__ \"BBox\" \"\"\" default_args = { \"mode\" : \"xywh\" } args_schema = { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywh\" , \"xyxy\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] } data_schema = { \"$id\" : \"/special/bbox\" , \"title\" : \"BBoxField\" , \"description\" : \"Bounding box field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 4 , \"maxItems\" : 4 , } whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywh\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 4 , \"maxItems\" : 4 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 4 , \"maxItems\" : 4 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } geometry_class = \"BBox\" Coord Bases: BaseField A DSDL Field to validate and return a 2D coordinate object. Examples: >>> coord_field = Coord () >>> value = [ 10 , 10 ] >>> coord_field . validate ( value ) [10.0, 10.0] Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Coord ( BaseField ): \"\"\"A DSDL Field to validate and return a 2D coordinate object. Examples: >>> coord_field = Coord() >>> value = [10, 10] >>> coord_field.validate(value) [10.0, 10.0] \"\"\" data_schema = { \"$id\" : \"/special/coord\" , \"title\" : \"CoordField\" , \"description\" : \"Coord 2D field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 2 , \"maxItems\" : 2 } Coord3D Bases: BaseField A DSDL Field to validate and return a 3D coordinate object. Examples: >>> coord3d_field = Coord3D () >>> value = [ 10 , 10 , 10 ] >>> coord3d_field . validate ( value ) [10.0, 10.0, 10.0] Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Coord3D ( BaseField ): \"\"\" A DSDL Field to validate and return a 3D coordinate object. Examples: >>> coord3d_field = Coord3D() >>> value = [10, 10, 10] >>> coord3d_field.validate(value) [10.0, 10.0, 10.0] \"\"\" data_schema = { \"$id\" : \"/special/coord3d\" , \"title\" : \"Coord3DField\" , \"description\" : \"Coord 3D field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 3 , \"maxItems\" : 3 } Date Bases: BaseField A DSDL Field to validate the given value and return a datetime object. Examples: >>> date_field = Date ( fmt = \"%Y-%m- %d \" ) >>> value = \"2020-06-06\" >>> date_obj = date_field . validate ( value ) >>> date_obj . __class__ . __name__ \"datetime\" Parameters: Name Type Description Default fmt The datetime format of the given value. required Attributes: Name Type Description fmt(str) The datetime format of the given value. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 class Date ( BaseField ): \"\"\"A DSDL Field to validate the given value and return a datetime object. Examples: >>> date_field = Date(fmt=\"%Y-%m-%d\") >>> value = \"2020-06-06\" >>> date_obj = date_field.validate(value) >>> date_obj.__class__.__name__ \"datetime\" Args: fmt: The datetime format of the given value. Attributes: fmt(str): The datetime format of the given value. \"\"\" data_schema = { \"$id\" : \"/special/date\" , \"title\" : \"DateField\" , \"description\" : \"Date field in dsdl.\" , \"type\" : \"string\" , \"format\" : \"date\" } default_args = { \"fmt\" : \"\" } args_schema = { \"type\" : \"object\" , \"properties\" : { \"fmt\" : { \"type\" : \"string\" } }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"fmt\" ] } def load_value ( self , value ): if self . kwargs [ \"fmt\" ]: return datetime . strptime ( value , self . kwargs [ \"fmt\" ]) . date () else : return date . fromisoformat ( value ) ImageShape Bases: BaseField A DSDL Field to validate the given value and return an ImageShape object. Examples: >>> shape_field = ImageShape () >>> value = [ 360 , 540 ] >>> shape_obj = shape_field . validate ( value ) >>> shape_obj . __class__ . __name__ \"ImageShape\" Parameters: Name Type Description Default mode The format in which the value to be validated is given. Only \"wh\" and \"hw\" are permitted, which respectly means the value is given by [width, height] and [height, width]. required Attributes: Name Type Description mode(str) The format in which the value to be validated is given. Only \"wh\" and \"hw\" are permitted, which respectly means the value is given by [width, height] and [height, width]. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 class ImageShape ( BaseField ): \"\"\"A DSDL Field to validate the given value and return an ImageShape object. Examples: >>> shape_field = ImageShape() >>> value = [360, 540] >>> shape_obj = shape_field.validate(value) >>> shape_obj.__class__.__name__ \"ImageShape\" Args: mode: The format in which the value to be validated is given. Only `\"wh\"` and `\"hw\"` are permitted, which respectly means the value is given by [width, height] and [height, width]. Attributes: mode(str): The format in which the value to be validated is given. Only `\"wh\"` and `\"hw\"` are permitted, which respectly means the value is given by [width, height] and [height, width]. \"\"\" default_args = { \"mode\" : \"hw\" } data_schema = { \"$id\" : \"/special/imageshape\" , \"title\" : \"ImageShapeField\" , \"description\" : \"ImageShape field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"integer\" , \"minimum\" : 0 }, \"minItems\" : 2 , \"maxItems\" : 2 , } args_schema = { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"hw\" , \"wh\" ] } }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] } geometry_class = \"ImageShape\" InstanceID Bases: UniqueID A DSDL Field to validate the given value and return a UniqueID object to represent an instance id. Examples: >>> ins_field = InstanceID () >>> value = \"instance_100\" >>> ins_obj = ins_field . validate ( value ) >>> ins_obj . __class__ . __name__ \"UniqueID\" Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 class InstanceID ( UniqueID ): \"\"\"A DSDL Field to validate the given value and return a UniqueID object to represent an instance id. Examples: >>> ins_field = InstanceID() >>> value = \"instance_100\" >>> ins_obj = ins_field.validate(value) >>> ins_obj.__class__.__name__ \"UniqueID\" \"\"\" default_args = { \"id_type\" : \"InstanceID\" } data_schema = { \"$id\" : \"/special/instanceid\" , \"title\" : \"InstanceIDField\" , \"description\" : \"InstanceID field in dsdl.\" , \"type\" : \"string\" } Interval Bases: BaseField A DSDL Field to validate and return an interval object. Examples: >>> interval_field = Interval () >>> value = [ 0 , 10 ] >>> interval_field . validate ( value ) [0.0, 10.0] Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 class Interval ( BaseField ): \"\"\" A DSDL Field to validate and return an interval object. Examples: >>> interval_field = Interval() >>> value = [0, 10] >>> interval_field.validate(value) [0.0, 10.0] \"\"\" data_schema = { # \u65e0\u6cd5\u5b9a\u4e49\u987a\u5e8f \"$id\" : \"/special/interval\" , \"title\" : \"IntervalField\" , \"description\" : \"Interval field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 2 , \"maxItems\" : 2 , } def additional_validate ( self , value ): assert value [ 0 ] <= value [ 1 ] return value Keypoint Bases: BaseFieldWithDomain A DSDL Field to validate the given value and return a Keypoints object. Parameters: Name Type Description Default dom The class domain which the current keypoints object belongs to. required Attributes: Name Type Description dom(ClassDomain) The class domain which the current keypoints object belongs to. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 class Keypoint ( BaseFieldWithDomain ): \"\"\"A DSDL Field to validate the given value and return a Keypoints object. Args: dom: The class domain which the current keypoints object belongs to. Attributes: dom(ClassDomain): The class domain which the current keypoints object belongs to. \"\"\" data_schema = { \"$id\" : \"/special/keypoint\" , \"title\" : \"KeypointField\" , \"description\" : \"Keypoint Field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 3 , \"maxItems\" : 3 , } } geometry_class = \"KeyPoints\" def additional_validate ( self , value ): dom = self . actural_dom if isinstance ( self . actural_dom , list ): assert len ( self . actural_dom ) == 1 , \"You can only assign one class dom in KeypointField.\" dom = self . actural_dom [ 0 ] assert len ( dom ) == len ( value ), \\ \"The number of points should be equal to the labels in class domain.\" assert dom . get_attribute ( \"skeleton\" ) is not None , \\ f \"You should assign skeletons for class domain { dom . __name__ } .\" return value Label Bases: BaseFieldWithDomain A DSDL Field to validate the given value and return a Label object. Parameters: Name Type Description Default dom The class domain which the current keypoints object belongs to. required Attributes: Name Type Description dom(ClassDomain) The class domain which the current keypoints object belongs to. dom_dic(Dict[str, ClassDomain] The class domain which the current keypoints object belongs to. The format is {<domain name>: class_domain} dom_lst(List[ClassDomain]) ClassDomain] The class domain which the current keypoints object belongs to. The format is [class_domain1, class_domain2, ...] Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 class Label ( BaseFieldWithDomain ): \"\"\"A DSDL Field to validate the given value and return a Label object. Args: dom: The class domain which the current keypoints object belongs to. Attributes: dom(ClassDomain): The class domain which the current keypoints object belongs to. dom_dic(Dict[str, ClassDomain]): The class domain which the current keypoints object belongs to. The format is `{<domain name>: class_domain}` dom_lst(List[ClassDomain]): The class domain which the current keypoints object belongs to. The format is `[class_domain1, class_domain2, ...]` \"\"\" data_schema = { \"$id\" : \"/special/label\" , \"title\" : \"LabelField\" , \"description\" : \"Label field in dsdl.\" , \"type\" : [ \"string\" , \"integer\" ] } def load_value ( self , value ): assert self . actural_dom is not None , \"You should set namespace before validating.\" if ( isinstance ( value , int ) or ( isinstance ( value , str ) and \"::\" not in value )): assert not isinstance ( self . actural_dom , list ) or \\ ( isinstance ( self . actural_dom , list ) and len ( self . actural_dom ) == 1 ), \\ \"LabelField Error: there are more than 1 domains in the struct, \" \\ \"you need to specify the label's class domain explicitly.\" domain = self . actural_dom [ 0 ] if isinstance ( self . actural_dom , list ) else self . actural_dom label_name = value return domain . get_label ( label_name ) if isinstance ( value , str ) and \"::\" in value : label_registry_name = value . replace ( \"::\" , \"__\" ) assert label_registry_name in LABEL , f \"Label ' { label_registry_name } ' is not valid.\" return LABEL . get ( label_registry_name ) Polygon Bases: BaseField A DSDL Field to validate the given value and return a polygon object. Examples: >>> polygon_field = Polygon () >>> value = [[[ 0 , 0 ], [ 0 , 100 ], [ 100 , 100 ], [ 100 , 0 ]], [[ 0 , 0 ], [ 0 , 50 ], [ 50 , 50 ], [ 50 , 0 ]]] >>> polygon_obj = polygon_field . validate ( value ) >>> polygon_obj . __class__ . __name__ \"Polygon\" Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 class Polygon ( BaseField ): \"\"\" A DSDL Field to validate the given value and return a polygon object. Examples: >>> polygon_field = Polygon() >>> value = [[[0, 0], [0, 100], [100, 100], [100, 0]], [[0, 0], [0, 50], [50, 50], [50, 0]]] >>> polygon_obj = polygon_field.validate(value) >>> polygon_obj.__class__.__name__ \"Polygon\" \"\"\" data_schema = { \"$id\" : \"/special/polygon\" , \"title\" : \"PolygonField\" , \"description\" : \"Polygon field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 2 , \"maxItems\" : 2 , } } } geometry_class = \"Polygon\" RotatedBBox Bases: BaseField A DSDL Field to validate the given value and return a RBBox object. Examples: >>> rotatedbbox_field = RotatedBBox ( measure = \"degree\" ) >>> value = [ 1 , 10 , 100 , 100 , 180 ] >>> rotatedbbox_obj = rotatedbbox_field . validate ( value ) >>> rotatedbbox_obj . __class__ . __name__ \"RBBox\" Parameters: Name Type Description Default mode The format in which the value to be validated is given. Only \"xywht\" and \"xyxy\" are permitted, which respectly means the value is given by [x, y, w, h, theta] and [x1, y1, x2, y2, x3, y3, x4, y4]. required measure The uint in which the angle value is given. Only \"radian\" and \"degree\" are permitted. This parameter takes effect only when mode==\"xywht\" . required Attributes: Name Type Description mode The format in which the value to be validated is given. Only \"xywht\" and \"xyxy\" are permitted, which respectly means the value is given by [x, y, w, h, theta] and [x1, y1, x2, y2, x3, y3, x4, y4]. measure The uint in which the angle value is given. Only \"radian\" and \"degree\" are permitted. This parameter takes effect only when mode==\"xywht\" . Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 class RotatedBBox ( BaseField ): \"\"\"A DSDL Field to validate the given value and return a RBBox object. Examples: >>> rotatedbbox_field = RotatedBBox(measure=\"degree\") >>> value = [1, 10, 100, 100, 180] >>> rotatedbbox_obj = rotatedbbox_field.validate(value) >>> rotatedbbox_obj.__class__.__name__ \"RBBox\" Args: mode: The format in which the value to be validated is given. Only `\"xywht\"` and `\"xyxy\"` are permitted, which respectly means the value is given by [x, y, w, h, theta] and [x1, y1, x2, y2, x3, y3, x4, y4]. measure: The uint in which the angle value is given. Only `\"radian\"` and `\"degree\"` are permitted. This parameter takes effect only when `mode==\"xywht\"`. Attributes: mode: The format in which the value to be validated is given. Only `\"xywht\"` and `\"xyxy\"` are permitted, which respectly means the value is given by [x, y, w, h, theta] and [x1, y1, x2, y2, x3, y3, x4, y4]. measure: The uint in which the angle value is given. Only `\"radian\"` and `\"degree\"` are permitted. This parameter takes effect only when `mode==\"xywht\"`. \"\"\" default_args = { \"mode\" : \"xywht\" , \"measure\" : \"radian\" } data_schema = { \"$id\" : \"/special/rotatedbbox\" , \"title\" : \"RotatedBBoxField\" , \"description\" : \"Rotated bounding box field in dsdl.\" , \"type\" : \"array\" , \"oneOf\" : [ { \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }]}, { \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} ] } args_schema = { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" , \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] } whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } geometry_class = \"RBBox\" Text Bases: BaseField A DSDL Field to validate the given value and return a Text object. Examples: >>> txt_field = Text () >>> value = \"some text annotation\" >>> txt_obj = txt_field . validate ( value ) >>> txt_obj . __class__ . __name__ \"Text\" Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 class Text ( BaseField ): \"\"\"A DSDL Field to validate the given value and return a Text object. Examples: >>> txt_field = Text() >>> value = \"some text annotation\" >>> txt_obj = txt_field.validate(value) >>> txt_obj.__class__.__name__ \"Text\" \"\"\" data_schema = { \"$id\" : \"/special/text\" , \"title\" : \"TextField\" , \"description\" : \"Text field in dsdl.\" , \"type\" : \"string\" } geometry_class = \"Text\" Time Bases: BaseField A DSDL Field to validate the given value and return a time object. Examples: >>> time_field = Time ( fmt = \"%Y-%m- %d %H:%M:%S\" ) >>> value = \"2020-06-06 23:03:15\" >>> time_obj = time_field . validate ( value ) >>> time_obj . __class__ . __name__ \"time\" Parameters: Name Type Description Default fmt The time format of the given value. required Attributes: Name Type Description fmt(str) The time format of the given value. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 class Time ( BaseField ): \"\"\"A DSDL Field to validate the given value and return a time object. Examples: >>> time_field = Time(fmt=\"%Y-%m-%d %H:%M:%S\") >>> value = \"2020-06-06 23:03:15\" >>> time_obj = time_field.validate(value) >>> time_obj.__class__.__name__ \"time\" Args: fmt: The time format of the given value. Attributes: fmt(str): The time format of the given value. \"\"\" data_schema = { \"$id\" : \"/special/time\" , \"title\" : \"TimeField\" , \"description\" : \"Time field in dsdl.\" , \"type\" : \"string\" , \"format\" : \"time\" } default_args = { \"fmt\" : \"\" } args_schema = { \"type\" : \"object\" , \"properties\" : { \"fmt\" : { \"type\" : \"string\" } }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"fmt\" ] } def load_value ( self , value ): if self . kwargs [ \"fmt\" ]: return datetime . strptime ( value , self . kwargs [ \"fmt\" ]) . time () else : return time . fromisoformat ( value ) UniqueID Bases: BaseField A DSDL Field to validate the given value and return an UniqueID object. Examples: >>> id_field = UniqueID ( id_type = \"image_id\" ) >>> value = \"00000001\" >>> id_obj = id_field . validate ( value ) >>> id_obj . __class__ . __name__ \"UniqueID\" Parameters: Name Type Description Default id_type What the current unique id describes. required Attributes: Name Type Description id_type(str) What the current unique id describes. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 class UniqueID ( BaseField ): \"\"\"A DSDL Field to validate the given value and return an UniqueID object. Examples: >>> id_field = UniqueID(id_type=\"image_id\") >>> value = \"00000001\" >>> id_obj = id_field.validate(value) >>> id_obj.__class__.__name__ \"UniqueID\" Args: id_type: What the current unique id describes. Attributes: id_type(str): What the current unique id describes. \"\"\" default_args = { \"id_type\" : None } data_schema = { \"$id\" : \"/special/uniqueid\" , \"title\" : \"UniqueIDField\" , \"description\" : \"UniqueID field in dsdl.\" , \"type\" : \"string\" } args_schema = { \"type\" : \"object\" , \"properties\" : { \"id_type\" : { \"type\" : [ \"string\" , \"null\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"id_type\" ] } geometry_class = \"UniqueID\"","title":"dsdl.types.special"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.BBox","text":"Bases: BaseField A DSDL Field to validate the given value and return a BBox object. Examples: >>> bbox_field = BBox () >>> value = [ 0 , 10 , 100 , 100 ] # [x, y, w, h] >>> bbox_obj = bbox_field . validate ( value ) >>> bbox_obj . __class__ . __name__ \"BBox\" Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 class BBox ( BaseField ): \"\"\" A DSDL Field to validate the given value and return a BBox object. Examples: >>> bbox_field = BBox() >>> value = [0, 10, 100, 100] # [x, y, w, h] >>> bbox_obj = bbox_field.validate(value) >>> bbox_obj.__class__.__name__ \"BBox\" \"\"\" default_args = { \"mode\" : \"xywh\" } args_schema = { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywh\" , \"xyxy\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] } data_schema = { \"$id\" : \"/special/bbox\" , \"title\" : \"BBoxField\" , \"description\" : \"Bounding box field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 4 , \"maxItems\" : 4 , } whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywh\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 4 , \"maxItems\" : 4 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 4 , \"maxItems\" : 4 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } geometry_class = \"BBox\"","title":"BBox"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.Coord","text":"Bases: BaseField A DSDL Field to validate and return a 2D coordinate object. Examples: >>> coord_field = Coord () >>> value = [ 10 , 10 ] >>> coord_field . validate ( value ) [10.0, 10.0] Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Coord ( BaseField ): \"\"\"A DSDL Field to validate and return a 2D coordinate object. Examples: >>> coord_field = Coord() >>> value = [10, 10] >>> coord_field.validate(value) [10.0, 10.0] \"\"\" data_schema = { \"$id\" : \"/special/coord\" , \"title\" : \"CoordField\" , \"description\" : \"Coord 2D field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 2 , \"maxItems\" : 2 }","title":"Coord"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.Coord3D","text":"Bases: BaseField A DSDL Field to validate and return a 3D coordinate object. Examples: >>> coord3d_field = Coord3D () >>> value = [ 10 , 10 , 10 ] >>> coord3d_field . validate ( value ) [10.0, 10.0, 10.0] Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Coord3D ( BaseField ): \"\"\" A DSDL Field to validate and return a 3D coordinate object. Examples: >>> coord3d_field = Coord3D() >>> value = [10, 10, 10] >>> coord3d_field.validate(value) [10.0, 10.0, 10.0] \"\"\" data_schema = { \"$id\" : \"/special/coord3d\" , \"title\" : \"Coord3DField\" , \"description\" : \"Coord 3D field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 3 , \"maxItems\" : 3 }","title":"Coord3D"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.Date","text":"Bases: BaseField A DSDL Field to validate the given value and return a datetime object. Examples: >>> date_field = Date ( fmt = \"%Y-%m- %d \" ) >>> value = \"2020-06-06\" >>> date_obj = date_field . validate ( value ) >>> date_obj . __class__ . __name__ \"datetime\" Parameters: Name Type Description Default fmt The datetime format of the given value. required Attributes: Name Type Description fmt(str) The datetime format of the given value. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 class Date ( BaseField ): \"\"\"A DSDL Field to validate the given value and return a datetime object. Examples: >>> date_field = Date(fmt=\"%Y-%m-%d\") >>> value = \"2020-06-06\" >>> date_obj = date_field.validate(value) >>> date_obj.__class__.__name__ \"datetime\" Args: fmt: The datetime format of the given value. Attributes: fmt(str): The datetime format of the given value. \"\"\" data_schema = { \"$id\" : \"/special/date\" , \"title\" : \"DateField\" , \"description\" : \"Date field in dsdl.\" , \"type\" : \"string\" , \"format\" : \"date\" } default_args = { \"fmt\" : \"\" } args_schema = { \"type\" : \"object\" , \"properties\" : { \"fmt\" : { \"type\" : \"string\" } }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"fmt\" ] } def load_value ( self , value ): if self . kwargs [ \"fmt\" ]: return datetime . strptime ( value , self . kwargs [ \"fmt\" ]) . date () else : return date . fromisoformat ( value )","title":"Date"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.ImageShape","text":"Bases: BaseField A DSDL Field to validate the given value and return an ImageShape object. Examples: >>> shape_field = ImageShape () >>> value = [ 360 , 540 ] >>> shape_obj = shape_field . validate ( value ) >>> shape_obj . __class__ . __name__ \"ImageShape\" Parameters: Name Type Description Default mode The format in which the value to be validated is given. Only \"wh\" and \"hw\" are permitted, which respectly means the value is given by [width, height] and [height, width]. required Attributes: Name Type Description mode(str) The format in which the value to be validated is given. Only \"wh\" and \"hw\" are permitted, which respectly means the value is given by [width, height] and [height, width]. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 class ImageShape ( BaseField ): \"\"\"A DSDL Field to validate the given value and return an ImageShape object. Examples: >>> shape_field = ImageShape() >>> value = [360, 540] >>> shape_obj = shape_field.validate(value) >>> shape_obj.__class__.__name__ \"ImageShape\" Args: mode: The format in which the value to be validated is given. Only `\"wh\"` and `\"hw\"` are permitted, which respectly means the value is given by [width, height] and [height, width]. Attributes: mode(str): The format in which the value to be validated is given. Only `\"wh\"` and `\"hw\"` are permitted, which respectly means the value is given by [width, height] and [height, width]. \"\"\" default_args = { \"mode\" : \"hw\" } data_schema = { \"$id\" : \"/special/imageshape\" , \"title\" : \"ImageShapeField\" , \"description\" : \"ImageShape field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"integer\" , \"minimum\" : 0 }, \"minItems\" : 2 , \"maxItems\" : 2 , } args_schema = { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"hw\" , \"wh\" ] } }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] } geometry_class = \"ImageShape\"","title":"ImageShape"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.InstanceID","text":"Bases: UniqueID A DSDL Field to validate the given value and return a UniqueID object to represent an instance id. Examples: >>> ins_field = InstanceID () >>> value = \"instance_100\" >>> ins_obj = ins_field . validate ( value ) >>> ins_obj . __class__ . __name__ \"UniqueID\" Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 class InstanceID ( UniqueID ): \"\"\"A DSDL Field to validate the given value and return a UniqueID object to represent an instance id. Examples: >>> ins_field = InstanceID() >>> value = \"instance_100\" >>> ins_obj = ins_field.validate(value) >>> ins_obj.__class__.__name__ \"UniqueID\" \"\"\" default_args = { \"id_type\" : \"InstanceID\" } data_schema = { \"$id\" : \"/special/instanceid\" , \"title\" : \"InstanceIDField\" , \"description\" : \"InstanceID field in dsdl.\" , \"type\" : \"string\" }","title":"InstanceID"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.Interval","text":"Bases: BaseField A DSDL Field to validate and return an interval object. Examples: >>> interval_field = Interval () >>> value = [ 0 , 10 ] >>> interval_field . validate ( value ) [0.0, 10.0] Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 class Interval ( BaseField ): \"\"\" A DSDL Field to validate and return an interval object. Examples: >>> interval_field = Interval() >>> value = [0, 10] >>> interval_field.validate(value) [0.0, 10.0] \"\"\" data_schema = { # \u65e0\u6cd5\u5b9a\u4e49\u987a\u5e8f \"$id\" : \"/special/interval\" , \"title\" : \"IntervalField\" , \"description\" : \"Interval field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 2 , \"maxItems\" : 2 , } def additional_validate ( self , value ): assert value [ 0 ] <= value [ 1 ] return value","title":"Interval"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.Keypoint","text":"Bases: BaseFieldWithDomain A DSDL Field to validate the given value and return a Keypoints object. Parameters: Name Type Description Default dom The class domain which the current keypoints object belongs to. required Attributes: Name Type Description dom(ClassDomain) The class domain which the current keypoints object belongs to. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 class Keypoint ( BaseFieldWithDomain ): \"\"\"A DSDL Field to validate the given value and return a Keypoints object. Args: dom: The class domain which the current keypoints object belongs to. Attributes: dom(ClassDomain): The class domain which the current keypoints object belongs to. \"\"\" data_schema = { \"$id\" : \"/special/keypoint\" , \"title\" : \"KeypointField\" , \"description\" : \"Keypoint Field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 3 , \"maxItems\" : 3 , } } geometry_class = \"KeyPoints\" def additional_validate ( self , value ): dom = self . actural_dom if isinstance ( self . actural_dom , list ): assert len ( self . actural_dom ) == 1 , \"You can only assign one class dom in KeypointField.\" dom = self . actural_dom [ 0 ] assert len ( dom ) == len ( value ), \\ \"The number of points should be equal to the labels in class domain.\" assert dom . get_attribute ( \"skeleton\" ) is not None , \\ f \"You should assign skeletons for class domain { dom . __name__ } .\" return value","title":"Keypoint"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.Label","text":"Bases: BaseFieldWithDomain A DSDL Field to validate the given value and return a Label object. Parameters: Name Type Description Default dom The class domain which the current keypoints object belongs to. required Attributes: Name Type Description dom(ClassDomain) The class domain which the current keypoints object belongs to. dom_dic(Dict[str, ClassDomain] The class domain which the current keypoints object belongs to. The format is {<domain name>: class_domain} dom_lst(List[ClassDomain]) ClassDomain] The class domain which the current keypoints object belongs to. The format is [class_domain1, class_domain2, ...] Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 class Label ( BaseFieldWithDomain ): \"\"\"A DSDL Field to validate the given value and return a Label object. Args: dom: The class domain which the current keypoints object belongs to. Attributes: dom(ClassDomain): The class domain which the current keypoints object belongs to. dom_dic(Dict[str, ClassDomain]): The class domain which the current keypoints object belongs to. The format is `{<domain name>: class_domain}` dom_lst(List[ClassDomain]): The class domain which the current keypoints object belongs to. The format is `[class_domain1, class_domain2, ...]` \"\"\" data_schema = { \"$id\" : \"/special/label\" , \"title\" : \"LabelField\" , \"description\" : \"Label field in dsdl.\" , \"type\" : [ \"string\" , \"integer\" ] } def load_value ( self , value ): assert self . actural_dom is not None , \"You should set namespace before validating.\" if ( isinstance ( value , int ) or ( isinstance ( value , str ) and \"::\" not in value )): assert not isinstance ( self . actural_dom , list ) or \\ ( isinstance ( self . actural_dom , list ) and len ( self . actural_dom ) == 1 ), \\ \"LabelField Error: there are more than 1 domains in the struct, \" \\ \"you need to specify the label's class domain explicitly.\" domain = self . actural_dom [ 0 ] if isinstance ( self . actural_dom , list ) else self . actural_dom label_name = value return domain . get_label ( label_name ) if isinstance ( value , str ) and \"::\" in value : label_registry_name = value . replace ( \"::\" , \"__\" ) assert label_registry_name in LABEL , f \"Label ' { label_registry_name } ' is not valid.\" return LABEL . get ( label_registry_name )","title":"Label"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.Polygon","text":"Bases: BaseField A DSDL Field to validate the given value and return a polygon object. Examples: >>> polygon_field = Polygon () >>> value = [[[ 0 , 0 ], [ 0 , 100 ], [ 100 , 100 ], [ 100 , 0 ]], [[ 0 , 0 ], [ 0 , 50 ], [ 50 , 50 ], [ 50 , 0 ]]] >>> polygon_obj = polygon_field . validate ( value ) >>> polygon_obj . __class__ . __name__ \"Polygon\" Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 class Polygon ( BaseField ): \"\"\" A DSDL Field to validate the given value and return a polygon object. Examples: >>> polygon_field = Polygon() >>> value = [[[0, 0], [0, 100], [100, 100], [100, 0]], [[0, 0], [0, 50], [50, 50], [50, 0]]] >>> polygon_obj = polygon_field.validate(value) >>> polygon_obj.__class__.__name__ \"Polygon\" \"\"\" data_schema = { \"$id\" : \"/special/polygon\" , \"title\" : \"PolygonField\" , \"description\" : \"Polygon field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 2 , \"maxItems\" : 2 , } } } geometry_class = \"Polygon\"","title":"Polygon"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.RotatedBBox","text":"Bases: BaseField A DSDL Field to validate the given value and return a RBBox object. Examples: >>> rotatedbbox_field = RotatedBBox ( measure = \"degree\" ) >>> value = [ 1 , 10 , 100 , 100 , 180 ] >>> rotatedbbox_obj = rotatedbbox_field . validate ( value ) >>> rotatedbbox_obj . __class__ . __name__ \"RBBox\" Parameters: Name Type Description Default mode The format in which the value to be validated is given. Only \"xywht\" and \"xyxy\" are permitted, which respectly means the value is given by [x, y, w, h, theta] and [x1, y1, x2, y2, x3, y3, x4, y4]. required measure The uint in which the angle value is given. Only \"radian\" and \"degree\" are permitted. This parameter takes effect only when mode==\"xywht\" . required Attributes: Name Type Description mode The format in which the value to be validated is given. Only \"xywht\" and \"xyxy\" are permitted, which respectly means the value is given by [x, y, w, h, theta] and [x1, y1, x2, y2, x3, y3, x4, y4]. measure The uint in which the angle value is given. Only \"radian\" and \"degree\" are permitted. This parameter takes effect only when mode==\"xywht\" . Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 class RotatedBBox ( BaseField ): \"\"\"A DSDL Field to validate the given value and return a RBBox object. Examples: >>> rotatedbbox_field = RotatedBBox(measure=\"degree\") >>> value = [1, 10, 100, 100, 180] >>> rotatedbbox_obj = rotatedbbox_field.validate(value) >>> rotatedbbox_obj.__class__.__name__ \"RBBox\" Args: mode: The format in which the value to be validated is given. Only `\"xywht\"` and `\"xyxy\"` are permitted, which respectly means the value is given by [x, y, w, h, theta] and [x1, y1, x2, y2, x3, y3, x4, y4]. measure: The uint in which the angle value is given. Only `\"radian\"` and `\"degree\"` are permitted. This parameter takes effect only when `mode==\"xywht\"`. Attributes: mode: The format in which the value to be validated is given. Only `\"xywht\"` and `\"xyxy\"` are permitted, which respectly means the value is given by [x, y, w, h, theta] and [x1, y1, x2, y2, x3, y3, x4, y4]. measure: The uint in which the angle value is given. Only `\"radian\"` and `\"degree\"` are permitted. This parameter takes effect only when `mode==\"xywht\"`. \"\"\" default_args = { \"mode\" : \"xywht\" , \"measure\" : \"radian\" } data_schema = { \"$id\" : \"/special/rotatedbbox\" , \"title\" : \"RotatedBBoxField\" , \"description\" : \"Rotated bounding box field in dsdl.\" , \"type\" : \"array\" , \"oneOf\" : [ { \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }]}, { \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} ] } args_schema = { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" , \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] } whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } geometry_class = \"RBBox\"","title":"RotatedBBox"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.Text","text":"Bases: BaseField A DSDL Field to validate the given value and return a Text object. Examples: >>> txt_field = Text () >>> value = \"some text annotation\" >>> txt_obj = txt_field . validate ( value ) >>> txt_obj . __class__ . __name__ \"Text\" Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 class Text ( BaseField ): \"\"\"A DSDL Field to validate the given value and return a Text object. Examples: >>> txt_field = Text() >>> value = \"some text annotation\" >>> txt_obj = txt_field.validate(value) >>> txt_obj.__class__.__name__ \"Text\" \"\"\" data_schema = { \"$id\" : \"/special/text\" , \"title\" : \"TextField\" , \"description\" : \"Text field in dsdl.\" , \"type\" : \"string\" } geometry_class = \"Text\"","title":"Text"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.Time","text":"Bases: BaseField A DSDL Field to validate the given value and return a time object. Examples: >>> time_field = Time ( fmt = \"%Y-%m- %d %H:%M:%S\" ) >>> value = \"2020-06-06 23:03:15\" >>> time_obj = time_field . validate ( value ) >>> time_obj . __class__ . __name__ \"time\" Parameters: Name Type Description Default fmt The time format of the given value. required Attributes: Name Type Description fmt(str) The time format of the given value. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 class Time ( BaseField ): \"\"\"A DSDL Field to validate the given value and return a time object. Examples: >>> time_field = Time(fmt=\"%Y-%m-%d %H:%M:%S\") >>> value = \"2020-06-06 23:03:15\" >>> time_obj = time_field.validate(value) >>> time_obj.__class__.__name__ \"time\" Args: fmt: The time format of the given value. Attributes: fmt(str): The time format of the given value. \"\"\" data_schema = { \"$id\" : \"/special/time\" , \"title\" : \"TimeField\" , \"description\" : \"Time field in dsdl.\" , \"type\" : \"string\" , \"format\" : \"time\" } default_args = { \"fmt\" : \"\" } args_schema = { \"type\" : \"object\" , \"properties\" : { \"fmt\" : { \"type\" : \"string\" } }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"fmt\" ] } def load_value ( self , value ): if self . kwargs [ \"fmt\" ]: return datetime . strptime ( value , self . kwargs [ \"fmt\" ]) . time () else : return time . fromisoformat ( value )","title":"Time"},{"location":"api_reference/dsdl_fields/special/#dsdl.fields.special.UniqueID","text":"Bases: BaseField A DSDL Field to validate the given value and return an UniqueID object. Examples: >>> id_field = UniqueID ( id_type = \"image_id\" ) >>> value = \"00000001\" >>> id_obj = id_field . validate ( value ) >>> id_obj . __class__ . __name__ \"UniqueID\" Parameters: Name Type Description Default id_type What the current unique id describes. required Attributes: Name Type Description id_type(str) What the current unique id describes. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\fields\\special.py 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 class UniqueID ( BaseField ): \"\"\"A DSDL Field to validate the given value and return an UniqueID object. Examples: >>> id_field = UniqueID(id_type=\"image_id\") >>> value = \"00000001\" >>> id_obj = id_field.validate(value) >>> id_obj.__class__.__name__ \"UniqueID\" Args: id_type: What the current unique id describes. Attributes: id_type(str): What the current unique id describes. \"\"\" default_args = { \"id_type\" : None } data_schema = { \"$id\" : \"/special/uniqueid\" , \"title\" : \"UniqueIDField\" , \"description\" : \"UniqueID field in dsdl.\" , \"type\" : \"string\" } args_schema = { \"type\" : \"object\" , \"properties\" : { \"id_type\" : { \"type\" : [ \"string\" , \"null\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"id_type\" ] } geometry_class = \"UniqueID\"","title":"UniqueID"},{"location":"api_reference/dsdl_geometry/box/","text":"BBox Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\box.pyclass BBox ( BaseGeometry ): def __init__ ( self , data : List [ _ELE_TYPE ], mode ): \"\"\"A Geometry class which abstracts a 2D bounding box object. Args: x: The bounding box's top left point horizontal axis. y: The bounding box's top left point vertical axis. width: The bounding box's width. height: The bounding box's height. Attributes: _data(list[float]): A list which contains the bounding box's top left point horizontal axis, top left point vertical axis, width and height. \"\"\" assert mode in ( \"xyxy\" , \"xywh\" ) if mode == \"xyxy\" : data = [ data [ 0 ], data [ 1 ], data [ 2 ] - data [ 0 ], data [ 3 ] - data [ 1 ]] self . _data = data @property def x ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's top left point horizontal axis. \"\"\" return self . _data [ 0 ] @property def y ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's top left point vertical axis. \"\"\" return self . _data [ 1 ] @property def width ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's width. \"\"\" return self . _data [ 2 ] @property def height ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's height. \"\"\" return self . _data [ 3 ] @property def xmin ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's top left point horizontal axis. \"\"\" return self . _data [ 0 ] @property def ymin ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's top left point vertical axis. \"\"\" return self . _data [ 1 ] @property def xmax ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's bottom right point horizontal axis. \"\"\" return self . _data [ 0 ] + self . _data [ 2 ] @property def ymax ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's bottom right point vertical axis. \"\"\" return self . _data [ 1 ] + self . _data [ 3 ] @property def area ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's area. \"\"\" return self . width * self . height @property def xyxy ( self ) -> List [ _ELE_TYPE ]: \"\"\" Returns: The bounding box's [xmin ymin xmax ymax] format. \"\"\" return [ self . xmin , self . ymin , self . xmax , self . ymax ] @property def xywh ( self ) -> List [ _ELE_TYPE ]: \"\"\" Returns: The bounding box's [x y w h] format. \"\"\" return [ self . xmin , self . ymin , self . width , self . height ] @property def openmmlabformat ( self ) -> List [ _ELE_TYPE ]: \"\"\" Returns: The bounding box's [xmin ymin xmax ymax] format, which is used in openmmlab project. \"\"\" return [ self . xmin , self . ymin , self . xmax , self . ymax ] def to_int ( self ): \"\"\"Convert the value in `self._data` to `int` type. \"\"\" self . _data = [ int ( _ ) for _ in self . _data ] def to_float ( self ): \"\"\"Convert the value in `self._data` to `float` type. \"\"\" self . _data = [ float ( _ ) for _ in self . _data ] def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current bounding box on an given image. Args: image: The image where the bounding box to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current bounding box, such as `Label` annotation. Returns: The image where the current bounding box has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) color = ( 0 , 255 , 0 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] draw_obj . rectangle ( self . xyxy , outline = ( * color , 255 ), width = 2 ) del draw_obj return image def __repr__ ( self ): return str ( self . xyxy ) area : _ELE_TYPE property Returns: Type Description _ELE_TYPE The bounding box's area. height : _ELE_TYPE property Returns: Type Description _ELE_TYPE The bounding box's height. openmmlabformat : List [ _ELE_TYPE ] property Returns: Type Description List [ _ELE_TYPE ] The bounding box's [xmin ymin xmax ymax] format, which is used in openmmlab project. width : _ELE_TYPE property Returns: Type Description _ELE_TYPE The bounding box's width. x : _ELE_TYPE property Returns: Type Description _ELE_TYPE The bounding box's top left point horizontal axis. xmax : _ELE_TYPE property Returns: Type Description _ELE_TYPE The bounding box's bottom right point horizontal axis. xmin : _ELE_TYPE property Returns: Type Description _ELE_TYPE The bounding box's top left point horizontal axis. xywh : List [ _ELE_TYPE ] property Returns: Type Description List [ _ELE_TYPE ] The bounding box's [x y w h] format. xyxy : List [ _ELE_TYPE ] property Returns: Type Description List [ _ELE_TYPE ] The bounding box's [xmin ymin xmax ymax] format. y : _ELE_TYPE property Returns: Type Description _ELE_TYPE The bounding box's top left point vertical axis. ymax : _ELE_TYPE property Returns: Type Description _ELE_TYPE The bounding box's bottom right point vertical axis. ymin : _ELE_TYPE property Returns: Type Description _ELE_TYPE The bounding box's top left point vertical axis. __init__ ( data , mode ) A Geometry class which abstracts a 2D bounding box object. Parameters: Name Type Description Default x The bounding box's top left point horizontal axis. required y The bounding box's top left point vertical axis. required width The bounding box's width. required height The bounding box's height. required Attributes: Name Type Description _data(list[float]) A list which contains the bounding box's top left point horizontal axis, top left point vertical axis, width and height. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\box.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def __init__ ( self , data : List [ _ELE_TYPE ], mode ): \"\"\"A Geometry class which abstracts a 2D bounding box object. Args: x: The bounding box's top left point horizontal axis. y: The bounding box's top left point vertical axis. width: The bounding box's width. height: The bounding box's height. Attributes: _data(list[float]): A list which contains the bounding box's top left point horizontal axis, top left point vertical axis, width and height. \"\"\" assert mode in ( \"xyxy\" , \"xywh\" ) if mode == \"xyxy\" : data = [ data [ 0 ], data [ 1 ], data [ 2 ] - data [ 0 ], data [ 3 ] - data [ 1 ]] self . _data = data to_float () Convert the value in self._data to float type. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\box.py 129 130 131 132 def to_float ( self ): \"\"\"Convert the value in `self._data` to `float` type. \"\"\" self . _data = [ float ( _ ) for _ in self . _data ] to_int () Convert the value in self._data to int type. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\box.py 124 125 126 127 def to_int ( self ): \"\"\"Convert the value in `self._data` to `int` type. \"\"\" self . _data = [ int ( _ ) for _ in self . _data ] visualize ( image , palette , ** kwargs ) Draw the current bounding box on an given image. Parameters: Name Type Description Default image The image where the bounding box to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current bounding box, such as Label annotation. {} Returns: Type Description The image where the current bounding box has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\box.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current bounding box on an given image. Args: image: The image where the bounding box to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current bounding box, such as `Label` annotation. Returns: The image where the current bounding box has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) color = ( 0 , 255 , 0 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] draw_obj . rectangle ( self . xyxy , outline = ( * color , 255 ), width = 2 ) del draw_obj return image","title":"dsdl.geometry.box"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox","text":"Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\box.pyclass BBox ( BaseGeometry ): def __init__ ( self , data : List [ _ELE_TYPE ], mode ): \"\"\"A Geometry class which abstracts a 2D bounding box object. Args: x: The bounding box's top left point horizontal axis. y: The bounding box's top left point vertical axis. width: The bounding box's width. height: The bounding box's height. Attributes: _data(list[float]): A list which contains the bounding box's top left point horizontal axis, top left point vertical axis, width and height. \"\"\" assert mode in ( \"xyxy\" , \"xywh\" ) if mode == \"xyxy\" : data = [ data [ 0 ], data [ 1 ], data [ 2 ] - data [ 0 ], data [ 3 ] - data [ 1 ]] self . _data = data @property def x ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's top left point horizontal axis. \"\"\" return self . _data [ 0 ] @property def y ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's top left point vertical axis. \"\"\" return self . _data [ 1 ] @property def width ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's width. \"\"\" return self . _data [ 2 ] @property def height ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's height. \"\"\" return self . _data [ 3 ] @property def xmin ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's top left point horizontal axis. \"\"\" return self . _data [ 0 ] @property def ymin ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's top left point vertical axis. \"\"\" return self . _data [ 1 ] @property def xmax ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's bottom right point horizontal axis. \"\"\" return self . _data [ 0 ] + self . _data [ 2 ] @property def ymax ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's bottom right point vertical axis. \"\"\" return self . _data [ 1 ] + self . _data [ 3 ] @property def area ( self ) -> _ELE_TYPE : \"\"\" Returns: The bounding box's area. \"\"\" return self . width * self . height @property def xyxy ( self ) -> List [ _ELE_TYPE ]: \"\"\" Returns: The bounding box's [xmin ymin xmax ymax] format. \"\"\" return [ self . xmin , self . ymin , self . xmax , self . ymax ] @property def xywh ( self ) -> List [ _ELE_TYPE ]: \"\"\" Returns: The bounding box's [x y w h] format. \"\"\" return [ self . xmin , self . ymin , self . width , self . height ] @property def openmmlabformat ( self ) -> List [ _ELE_TYPE ]: \"\"\" Returns: The bounding box's [xmin ymin xmax ymax] format, which is used in openmmlab project. \"\"\" return [ self . xmin , self . ymin , self . xmax , self . ymax ] def to_int ( self ): \"\"\"Convert the value in `self._data` to `int` type. \"\"\" self . _data = [ int ( _ ) for _ in self . _data ] def to_float ( self ): \"\"\"Convert the value in `self._data` to `float` type. \"\"\" self . _data = [ float ( _ ) for _ in self . _data ] def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current bounding box on an given image. Args: image: The image where the bounding box to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current bounding box, such as `Label` annotation. Returns: The image where the current bounding box has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) color = ( 0 , 255 , 0 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] draw_obj . rectangle ( self . xyxy , outline = ( * color , 255 ), width = 2 ) del draw_obj return image def __repr__ ( self ): return str ( self . xyxy )","title":"BBox"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.area","text":"Returns: Type Description _ELE_TYPE The bounding box's area.","title":"area"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.height","text":"Returns: Type Description _ELE_TYPE The bounding box's height.","title":"height"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.openmmlabformat","text":"Returns: Type Description List [ _ELE_TYPE ] The bounding box's [xmin ymin xmax ymax] format, which is used in openmmlab project.","title":"openmmlabformat"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.width","text":"Returns: Type Description _ELE_TYPE The bounding box's width.","title":"width"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.x","text":"Returns: Type Description _ELE_TYPE The bounding box's top left point horizontal axis.","title":"x"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.xmax","text":"Returns: Type Description _ELE_TYPE The bounding box's bottom right point horizontal axis.","title":"xmax"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.xmin","text":"Returns: Type Description _ELE_TYPE The bounding box's top left point horizontal axis.","title":"xmin"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.xywh","text":"Returns: Type Description List [ _ELE_TYPE ] The bounding box's [x y w h] format.","title":"xywh"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.xyxy","text":"Returns: Type Description List [ _ELE_TYPE ] The bounding box's [xmin ymin xmax ymax] format.","title":"xyxy"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.y","text":"Returns: Type Description _ELE_TYPE The bounding box's top left point vertical axis.","title":"y"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.ymax","text":"Returns: Type Description _ELE_TYPE The bounding box's bottom right point vertical axis.","title":"ymax"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.ymin","text":"Returns: Type Description _ELE_TYPE The bounding box's top left point vertical axis.","title":"ymin"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.__init__","text":"A Geometry class which abstracts a 2D bounding box object. Parameters: Name Type Description Default x The bounding box's top left point horizontal axis. required y The bounding box's top left point vertical axis. required width The bounding box's width. required height The bounding box's height. required Attributes: Name Type Description _data(list[float]) A list which contains the bounding box's top left point horizontal axis, top left point vertical axis, width and height. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\box.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def __init__ ( self , data : List [ _ELE_TYPE ], mode ): \"\"\"A Geometry class which abstracts a 2D bounding box object. Args: x: The bounding box's top left point horizontal axis. y: The bounding box's top left point vertical axis. width: The bounding box's width. height: The bounding box's height. Attributes: _data(list[float]): A list which contains the bounding box's top left point horizontal axis, top left point vertical axis, width and height. \"\"\" assert mode in ( \"xyxy\" , \"xywh\" ) if mode == \"xyxy\" : data = [ data [ 0 ], data [ 1 ], data [ 2 ] - data [ 0 ], data [ 3 ] - data [ 1 ]] self . _data = data","title":"__init__()"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.to_float","text":"Convert the value in self._data to float type. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\box.py 129 130 131 132 def to_float ( self ): \"\"\"Convert the value in `self._data` to `float` type. \"\"\" self . _data = [ float ( _ ) for _ in self . _data ]","title":"to_float()"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.to_int","text":"Convert the value in self._data to int type. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\box.py 124 125 126 127 def to_int ( self ): \"\"\"Convert the value in `self._data` to `int` type. \"\"\" self . _data = [ int ( _ ) for _ in self . _data ]","title":"to_int()"},{"location":"api_reference/dsdl_geometry/box/#dsdl.geometry.box.BBox.visualize","text":"Draw the current bounding box on an given image. Parameters: Name Type Description Default image The image where the bounding box to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current bounding box, such as Label annotation. {} Returns: Type Description The image where the current bounding box has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\box.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current bounding box on an given image. Args: image: The image where the bounding box to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current bounding box, such as `Label` annotation. Returns: The image where the current bounding box has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) color = ( 0 , 255 , 0 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] draw_obj . rectangle ( self . xyxy , outline = ( * color , 255 ), width = 2 ) del draw_obj return image","title":"visualize()"},{"location":"api_reference/dsdl_geometry/insmap/","text":"InstanceMap Bases: Image A Geometry class for instance segmentation map Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\insmap.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class InstanceMap ( Image ): \"\"\" A Geometry class for instance segmentation map \"\"\" def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current instance map on an given image. Args: image: The image where the instance map to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current instance map. Returns: The image where the current instance map has been drawn on. \"\"\" ins_map = self . to_array () color_map = np . zeros (( ins_map . shape [ 0 ], ins_map . shape [ 1 ], 3 ), dtype = np . uint8 ) ins_ids = np . unique ( ins_map ) for ins_id in ins_ids : if ins_id == 0 : continue contour_color = tuple ( int ( _ ) for _ in np . random . randint ( 0 , 255 , size = [ 3 ])) this_map = ( ins_map == ins_id ) . astype ( np . uint8 ) * 255 contours , _ = cv2 . findContours ( this_map , cv2 . RETR_TREE , cv2 . CHAIN_APPROX_SIMPLE ) cv2 . drawContours ( color_map , contours , - 1 , contour_color , 2 ) overlay = Image_ . fromarray ( color_map ) . convert ( \"RGBA\" ) overlayed = Image_ . blend ( image , overlay , 0.5 ) return overlayed visualize ( image , palette , ** kwargs ) Draw the current instance map on an given image. Parameters: Name Type Description Default image The image where the instance map to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current instance map. {} Returns: Type Description The image where the current instance map has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\insmap.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current instance map on an given image. Args: image: The image where the instance map to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current instance map. Returns: The image where the current instance map has been drawn on. \"\"\" ins_map = self . to_array () color_map = np . zeros (( ins_map . shape [ 0 ], ins_map . shape [ 1 ], 3 ), dtype = np . uint8 ) ins_ids = np . unique ( ins_map ) for ins_id in ins_ids : if ins_id == 0 : continue contour_color = tuple ( int ( _ ) for _ in np . random . randint ( 0 , 255 , size = [ 3 ])) this_map = ( ins_map == ins_id ) . astype ( np . uint8 ) * 255 contours , _ = cv2 . findContours ( this_map , cv2 . RETR_TREE , cv2 . CHAIN_APPROX_SIMPLE ) cv2 . drawContours ( color_map , contours , - 1 , contour_color , 2 ) overlay = Image_ . fromarray ( color_map ) . convert ( \"RGBA\" ) overlayed = Image_ . blend ( image , overlay , 0.5 ) return overlayed","title":"dsdl.geometry.insmap"},{"location":"api_reference/dsdl_geometry/insmap/#dsdl.geometry.insmap.InstanceMap","text":"Bases: Image A Geometry class for instance segmentation map Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\insmap.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class InstanceMap ( Image ): \"\"\" A Geometry class for instance segmentation map \"\"\" def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current instance map on an given image. Args: image: The image where the instance map to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current instance map. Returns: The image where the current instance map has been drawn on. \"\"\" ins_map = self . to_array () color_map = np . zeros (( ins_map . shape [ 0 ], ins_map . shape [ 1 ], 3 ), dtype = np . uint8 ) ins_ids = np . unique ( ins_map ) for ins_id in ins_ids : if ins_id == 0 : continue contour_color = tuple ( int ( _ ) for _ in np . random . randint ( 0 , 255 , size = [ 3 ])) this_map = ( ins_map == ins_id ) . astype ( np . uint8 ) * 255 contours , _ = cv2 . findContours ( this_map , cv2 . RETR_TREE , cv2 . CHAIN_APPROX_SIMPLE ) cv2 . drawContours ( color_map , contours , - 1 , contour_color , 2 ) overlay = Image_ . fromarray ( color_map ) . convert ( \"RGBA\" ) overlayed = Image_ . blend ( image , overlay , 0.5 ) return overlayed","title":"InstanceMap"},{"location":"api_reference/dsdl_geometry/insmap/#dsdl.geometry.insmap.InstanceMap.visualize","text":"Draw the current instance map on an given image. Parameters: Name Type Description Default image The image where the instance map to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current instance map. {} Returns: Type Description The image where the current instance map has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\insmap.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current instance map on an given image. Args: image: The image where the instance map to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current instance map. Returns: The image where the current instance map has been drawn on. \"\"\" ins_map = self . to_array () color_map = np . zeros (( ins_map . shape [ 0 ], ins_map . shape [ 1 ], 3 ), dtype = np . uint8 ) ins_ids = np . unique ( ins_map ) for ins_id in ins_ids : if ins_id == 0 : continue contour_color = tuple ( int ( _ ) for _ in np . random . randint ( 0 , 255 , size = [ 3 ])) this_map = ( ins_map == ins_id ) . astype ( np . uint8 ) * 255 contours , _ = cv2 . findContours ( this_map , cv2 . RETR_TREE , cv2 . CHAIN_APPROX_SIMPLE ) cv2 . drawContours ( color_map , contours , - 1 , contour_color , 2 ) overlay = Image_ . fromarray ( color_map ) . convert ( \"RGBA\" ) overlayed = Image_ . blend ( image , overlay , 0.5 ) return overlayed","title":"visualize()"},{"location":"api_reference/dsdl_geometry/keypoint/","text":"Coord2D Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\keypoint.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 class Coord2D ( BaseGeometry ): def __init__ ( self , x : float , y : float , visiable : int , label : Label ): \"\"\"A Geometry class which abstracts a 2D coordinate object. Args: x: The horizontal axis of the current `Coord2D` object. y: The vertical axis of the current `Coord2D` object. visiable: Whether the current `Coord2D` object is visiable in the image. if visiable <= 0, The current `Coord2D` object is not visiable. label: The current `Coord2D` object's Label object. \"\"\" self . _x = x self . _y = y self . _visiable = visiable self . _label = label @property def x ( self ): \"\"\" Returns: The horizontal axis of the current `Coord2D` object. \"\"\" return self . _x @property def y ( self ): \"\"\" Returns: The vertical axis of the current `Coord2D` object. \"\"\" return self . _y @property def point ( self ): \"\"\" Returns: The horizontal and vertical axises of the current `Coord2D` object. \"\"\" return [ self . _x , self . _y ] @property def value ( self ): \"\"\" Returns: The value of the current `Coord2D` object. \"\"\" return [ self . _x , self . _y , self . _visiable ] @property def visiable ( self ): \"\"\" Returns: The visiable value of the current `Coord2D` object. \"\"\" return self . _visiable @property def label ( self ): \"\"\" Returns: The `Label` object of the current `Coord2D` object. \"\"\" return self . _label @property def class_domain ( self ): \"\"\" Returns: The `ClassDomain` object of the current `Coord2D` object. \"\"\" return self . _label . class_domain @property def name ( self ): \"\"\" Returns: The name of the current `Coord2D` object's `Label` object. \"\"\" return self . _label . name class_domain property Returns: Type Description The ClassDomain object of the current Coord2D object. label property Returns: Type Description The Label object of the current Coord2D object. name property Returns: Type Description The name of the current Coord2D object's Label object. point property Returns: Type Description The horizontal and vertical axises of the current Coord2D object. value property Returns: Type Description The value of the current Coord2D object. visiable property Returns: Type Description The visiable value of the current Coord2D object. x property Returns: Type Description The horizontal axis of the current Coord2D object. y property Returns: Type Description The vertical axis of the current Coord2D object. __init__ ( x , y , visiable , label ) A Geometry class which abstracts a 2D coordinate object. Parameters: Name Type Description Default x float The horizontal axis of the current Coord2D object. required y float The vertical axis of the current Coord2D object. required visiable int Whether the current Coord2D object is visiable in the image. if visiable <= 0, The current Coord2D object is not visiable. required label Label The current Coord2D object's Label object. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\keypoint.py 12 13 14 15 16 17 18 19 20 21 22 23 24 def __init__ ( self , x : float , y : float , visiable : int , label : Label ): \"\"\"A Geometry class which abstracts a 2D coordinate object. Args: x: The horizontal axis of the current `Coord2D` object. y: The vertical axis of the current `Coord2D` object. visiable: Whether the current `Coord2D` object is visiable in the image. if visiable <= 0, The current `Coord2D` object is not visiable. label: The current `Coord2D` object's Label object. \"\"\" self . _x = x self . _y = y self . _visiable = visiable self . _label = label KeyPoints Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\keypoint.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 class KeyPoints ( BaseGeometry ): def __init__ ( self , value , dom : Union [ List [ ClassDomainMeta ], ClassDomainMeta ]): \"\"\"A Geometry class which abstracts a 2D keypoints annotation object. Args: value: The list of `Coord2D` objects comprise the current `KeyPoints` object. dom: The class domain object which the current `KeyPoints` object belongs to. \"\"\" if isinstance ( dom , list ): assert len ( dom ) == 1 , \"You can only assign one class dom in KeypointField.\" dom = dom [ 0 ] keypoints = [] for class_ind , p in enumerate ( value , start = 1 ): label = dom . get_label ( class_ind ) coord2d = Coord2D ( x = p [ 0 ], y = p [ 1 ], visiable = int ( p [ 2 ]), label = label ) keypoints . append ( coord2d ) self . _keypoints = keypoints self . _dom = dom @property def value ( self ): \"\"\" Returns: The list of all the `Coord2D` objects' values. \"\"\" return [ _ . value for _ in self . _keypoints ] @property def points ( self ): \"\"\" Returns: The list of all the `Coord2D` objects' points. \"\"\" return [ _ . point for _ in self . _keypoints ] @property def visables ( self ): \"\"\" Returns: The list of all the `Coord2D` objects' visiable values. \"\"\" return [ _ . visiable for _ in self . _keypoints ] @property def keypoints ( self ): \"\"\" Returns: The list of `Coord2D` objects comprise the current `KeyPoints` object. \"\"\" return self . _keypoints @property def class_domain ( self ): \"\"\" Returns: The class domain object which the current `KeyPoints` object belongs to. \"\"\" return self . _dom @property def names ( self ): \"\"\" Returns: The names of all the `Coord2D` objects comprising the current `KeyPoints` object. \"\"\" return [ _ . name for _ in self . _keypoints ] def __getitem__ ( self , item ): \"\"\"Given the index or the category name, return the coresponding `Coord2D` object. Args: item: The index or the category name of one of all the `Coord2D` object. Returns: The coresponding `Coord2D` object. \"\"\" assert isinstance ( item , ( str , int )), \"The index must be str or int type value.\" if isinstance ( item , int ): return self . _keypoints [ item ] elif isinstance ( item , str ): for ind , label_name in enumerate ( self . _dom . get_label_names ()): if label_name == item : return self . _keypoints [ ind ] raise ClassNotFoundError ( f \"Category ' { item } ' not defined in domain { self . _dom . __name__ } .\" ) def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current `Keypoints` object on an given image. Args: image: The image where the current `Keypoints` object to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current `Keypoints` object. Returns: The image where the current `Keypoints` object has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) line_color = ( 0 , 255 , 0 ) # green point_radius = 3 skeleton = self . _dom . get_attribute ( \"Skeleton\" ) if skeleton is not None : point_pairs = skeleton . get_point_pairs ( self ) for point_pair in point_pairs : p1 , p2 = point_pair [: 2 ] if p1 . visiable > 0 and p2 . visiable : draw_obj . line ([ * p1 . point , * p2 . point ], width = 2 , fill = ( * line_color , 255 )) for point in self . _keypoints : if point . visiable > 0 : label_ = point . label . category_name if label_ not in palette : palette [ label_ ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) point_color = palette [ label_ ] x , y = point . point draw_obj . ellipse (( x - point_radius , y - point_radius , x + point_radius , y + point_radius ), fill = ( * point_color , 255 )) del draw_obj return image def __repr__ ( self ): return str ( self . value ) class_domain property Returns: Type Description The class domain object which the current KeyPoints object belongs to. keypoints property Returns: Type Description The list of Coord2D objects comprise the current KeyPoints object. names property Returns: Type Description The names of all the Coord2D objects comprising the current KeyPoints object. points property Returns: Type Description The list of all the Coord2D objects' points. value property Returns: Type Description The list of all the Coord2D objects' values. visables property Returns: Type Description The list of all the Coord2D objects' visiable values. __getitem__ ( item ) Given the index or the category name, return the coresponding Coord2D object. Parameters: Name Type Description Default item The index or the category name of one of all the Coord2D object. required Returns: Type Description The coresponding Coord2D object. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\keypoint.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 def __getitem__ ( self , item ): \"\"\"Given the index or the category name, return the coresponding `Coord2D` object. Args: item: The index or the category name of one of all the `Coord2D` object. Returns: The coresponding `Coord2D` object. \"\"\" assert isinstance ( item , ( str , int )), \"The index must be str or int type value.\" if isinstance ( item , int ): return self . _keypoints [ item ] elif isinstance ( item , str ): for ind , label_name in enumerate ( self . _dom . get_label_names ()): if label_name == item : return self . _keypoints [ ind ] raise ClassNotFoundError ( f \"Category ' { item } ' not defined in domain { self . _dom . __name__ } .\" ) __init__ ( value , dom ) A Geometry class which abstracts a 2D keypoints annotation object. Parameters: Name Type Description Default value The list of Coord2D objects comprise the current KeyPoints object. required dom Union [ List [ ClassDomainMeta ], ClassDomainMeta ] The class domain object which the current KeyPoints object belongs to. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\keypoint.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def __init__ ( self , value , dom : Union [ List [ ClassDomainMeta ], ClassDomainMeta ]): \"\"\"A Geometry class which abstracts a 2D keypoints annotation object. Args: value: The list of `Coord2D` objects comprise the current `KeyPoints` object. dom: The class domain object which the current `KeyPoints` object belongs to. \"\"\" if isinstance ( dom , list ): assert len ( dom ) == 1 , \"You can only assign one class dom in KeypointField.\" dom = dom [ 0 ] keypoints = [] for class_ind , p in enumerate ( value , start = 1 ): label = dom . get_label ( class_ind ) coord2d = Coord2D ( x = p [ 0 ], y = p [ 1 ], visiable = int ( p [ 2 ]), label = label ) keypoints . append ( coord2d ) self . _keypoints = keypoints self . _dom = dom visualize ( image , palette , ** kwargs ) Draw the current Keypoints object on an given image. Parameters: Name Type Description Default image The image where the current Keypoints object to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current Keypoints object. {} Returns: Type Description The image where the current Keypoints object has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\keypoint.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current `Keypoints` object on an given image. Args: image: The image where the current `Keypoints` object to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current `Keypoints` object. Returns: The image where the current `Keypoints` object has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) line_color = ( 0 , 255 , 0 ) # green point_radius = 3 skeleton = self . _dom . get_attribute ( \"Skeleton\" ) if skeleton is not None : point_pairs = skeleton . get_point_pairs ( self ) for point_pair in point_pairs : p1 , p2 = point_pair [: 2 ] if p1 . visiable > 0 and p2 . visiable : draw_obj . line ([ * p1 . point , * p2 . point ], width = 2 , fill = ( * line_color , 255 )) for point in self . _keypoints : if point . visiable > 0 : label_ = point . label . category_name if label_ not in palette : palette [ label_ ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) point_color = palette [ label_ ] x , y = point . point draw_obj . ellipse (( x - point_radius , y - point_radius , x + point_radius , y + point_radius ), fill = ( * point_color , 255 )) del draw_obj return image","title":"dsdl.geometry.keypoint"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.Coord2D","text":"Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\keypoint.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 class Coord2D ( BaseGeometry ): def __init__ ( self , x : float , y : float , visiable : int , label : Label ): \"\"\"A Geometry class which abstracts a 2D coordinate object. Args: x: The horizontal axis of the current `Coord2D` object. y: The vertical axis of the current `Coord2D` object. visiable: Whether the current `Coord2D` object is visiable in the image. if visiable <= 0, The current `Coord2D` object is not visiable. label: The current `Coord2D` object's Label object. \"\"\" self . _x = x self . _y = y self . _visiable = visiable self . _label = label @property def x ( self ): \"\"\" Returns: The horizontal axis of the current `Coord2D` object. \"\"\" return self . _x @property def y ( self ): \"\"\" Returns: The vertical axis of the current `Coord2D` object. \"\"\" return self . _y @property def point ( self ): \"\"\" Returns: The horizontal and vertical axises of the current `Coord2D` object. \"\"\" return [ self . _x , self . _y ] @property def value ( self ): \"\"\" Returns: The value of the current `Coord2D` object. \"\"\" return [ self . _x , self . _y , self . _visiable ] @property def visiable ( self ): \"\"\" Returns: The visiable value of the current `Coord2D` object. \"\"\" return self . _visiable @property def label ( self ): \"\"\" Returns: The `Label` object of the current `Coord2D` object. \"\"\" return self . _label @property def class_domain ( self ): \"\"\" Returns: The `ClassDomain` object of the current `Coord2D` object. \"\"\" return self . _label . class_domain @property def name ( self ): \"\"\" Returns: The name of the current `Coord2D` object's `Label` object. \"\"\" return self . _label . name","title":"Coord2D"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.Coord2D.class_domain","text":"Returns: Type Description The ClassDomain object of the current Coord2D object.","title":"class_domain"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.Coord2D.label","text":"Returns: Type Description The Label object of the current Coord2D object.","title":"label"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.Coord2D.name","text":"Returns: Type Description The name of the current Coord2D object's Label object.","title":"name"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.Coord2D.point","text":"Returns: Type Description The horizontal and vertical axises of the current Coord2D object.","title":"point"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.Coord2D.value","text":"Returns: Type Description The value of the current Coord2D object.","title":"value"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.Coord2D.visiable","text":"Returns: Type Description The visiable value of the current Coord2D object.","title":"visiable"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.Coord2D.x","text":"Returns: Type Description The horizontal axis of the current Coord2D object.","title":"x"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.Coord2D.y","text":"Returns: Type Description The vertical axis of the current Coord2D object.","title":"y"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.Coord2D.__init__","text":"A Geometry class which abstracts a 2D coordinate object. Parameters: Name Type Description Default x float The horizontal axis of the current Coord2D object. required y float The vertical axis of the current Coord2D object. required visiable int Whether the current Coord2D object is visiable in the image. if visiable <= 0, The current Coord2D object is not visiable. required label Label The current Coord2D object's Label object. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\keypoint.py 12 13 14 15 16 17 18 19 20 21 22 23 24 def __init__ ( self , x : float , y : float , visiable : int , label : Label ): \"\"\"A Geometry class which abstracts a 2D coordinate object. Args: x: The horizontal axis of the current `Coord2D` object. y: The vertical axis of the current `Coord2D` object. visiable: Whether the current `Coord2D` object is visiable in the image. if visiable <= 0, The current `Coord2D` object is not visiable. label: The current `Coord2D` object's Label object. \"\"\" self . _x = x self . _y = y self . _visiable = visiable self . _label = label","title":"__init__()"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.KeyPoints","text":"Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\keypoint.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 class KeyPoints ( BaseGeometry ): def __init__ ( self , value , dom : Union [ List [ ClassDomainMeta ], ClassDomainMeta ]): \"\"\"A Geometry class which abstracts a 2D keypoints annotation object. Args: value: The list of `Coord2D` objects comprise the current `KeyPoints` object. dom: The class domain object which the current `KeyPoints` object belongs to. \"\"\" if isinstance ( dom , list ): assert len ( dom ) == 1 , \"You can only assign one class dom in KeypointField.\" dom = dom [ 0 ] keypoints = [] for class_ind , p in enumerate ( value , start = 1 ): label = dom . get_label ( class_ind ) coord2d = Coord2D ( x = p [ 0 ], y = p [ 1 ], visiable = int ( p [ 2 ]), label = label ) keypoints . append ( coord2d ) self . _keypoints = keypoints self . _dom = dom @property def value ( self ): \"\"\" Returns: The list of all the `Coord2D` objects' values. \"\"\" return [ _ . value for _ in self . _keypoints ] @property def points ( self ): \"\"\" Returns: The list of all the `Coord2D` objects' points. \"\"\" return [ _ . point for _ in self . _keypoints ] @property def visables ( self ): \"\"\" Returns: The list of all the `Coord2D` objects' visiable values. \"\"\" return [ _ . visiable for _ in self . _keypoints ] @property def keypoints ( self ): \"\"\" Returns: The list of `Coord2D` objects comprise the current `KeyPoints` object. \"\"\" return self . _keypoints @property def class_domain ( self ): \"\"\" Returns: The class domain object which the current `KeyPoints` object belongs to. \"\"\" return self . _dom @property def names ( self ): \"\"\" Returns: The names of all the `Coord2D` objects comprising the current `KeyPoints` object. \"\"\" return [ _ . name for _ in self . _keypoints ] def __getitem__ ( self , item ): \"\"\"Given the index or the category name, return the coresponding `Coord2D` object. Args: item: The index or the category name of one of all the `Coord2D` object. Returns: The coresponding `Coord2D` object. \"\"\" assert isinstance ( item , ( str , int )), \"The index must be str or int type value.\" if isinstance ( item , int ): return self . _keypoints [ item ] elif isinstance ( item , str ): for ind , label_name in enumerate ( self . _dom . get_label_names ()): if label_name == item : return self . _keypoints [ ind ] raise ClassNotFoundError ( f \"Category ' { item } ' not defined in domain { self . _dom . __name__ } .\" ) def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current `Keypoints` object on an given image. Args: image: The image where the current `Keypoints` object to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current `Keypoints` object. Returns: The image where the current `Keypoints` object has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) line_color = ( 0 , 255 , 0 ) # green point_radius = 3 skeleton = self . _dom . get_attribute ( \"Skeleton\" ) if skeleton is not None : point_pairs = skeleton . get_point_pairs ( self ) for point_pair in point_pairs : p1 , p2 = point_pair [: 2 ] if p1 . visiable > 0 and p2 . visiable : draw_obj . line ([ * p1 . point , * p2 . point ], width = 2 , fill = ( * line_color , 255 )) for point in self . _keypoints : if point . visiable > 0 : label_ = point . label . category_name if label_ not in palette : palette [ label_ ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) point_color = palette [ label_ ] x , y = point . point draw_obj . ellipse (( x - point_radius , y - point_radius , x + point_radius , y + point_radius ), fill = ( * point_color , 255 )) del draw_obj return image def __repr__ ( self ): return str ( self . value )","title":"KeyPoints"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.KeyPoints.class_domain","text":"Returns: Type Description The class domain object which the current KeyPoints object belongs to.","title":"class_domain"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.KeyPoints.keypoints","text":"Returns: Type Description The list of Coord2D objects comprise the current KeyPoints object.","title":"keypoints"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.KeyPoints.names","text":"Returns: Type Description The names of all the Coord2D objects comprising the current KeyPoints object.","title":"names"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.KeyPoints.points","text":"Returns: Type Description The list of all the Coord2D objects' points.","title":"points"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.KeyPoints.value","text":"Returns: Type Description The list of all the Coord2D objects' values.","title":"value"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.KeyPoints.visables","text":"Returns: Type Description The list of all the Coord2D objects' visiable values.","title":"visables"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.KeyPoints.__getitem__","text":"Given the index or the category name, return the coresponding Coord2D object. Parameters: Name Type Description Default item The index or the category name of one of all the Coord2D object. required Returns: Type Description The coresponding Coord2D object. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\keypoint.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 def __getitem__ ( self , item ): \"\"\"Given the index or the category name, return the coresponding `Coord2D` object. Args: item: The index or the category name of one of all the `Coord2D` object. Returns: The coresponding `Coord2D` object. \"\"\" assert isinstance ( item , ( str , int )), \"The index must be str or int type value.\" if isinstance ( item , int ): return self . _keypoints [ item ] elif isinstance ( item , str ): for ind , label_name in enumerate ( self . _dom . get_label_names ()): if label_name == item : return self . _keypoints [ ind ] raise ClassNotFoundError ( f \"Category ' { item } ' not defined in domain { self . _dom . __name__ } .\" )","title":"__getitem__()"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.KeyPoints.__init__","text":"A Geometry class which abstracts a 2D keypoints annotation object. Parameters: Name Type Description Default value The list of Coord2D objects comprise the current KeyPoints object. required dom Union [ List [ ClassDomainMeta ], ClassDomainMeta ] The class domain object which the current KeyPoints object belongs to. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\keypoint.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def __init__ ( self , value , dom : Union [ List [ ClassDomainMeta ], ClassDomainMeta ]): \"\"\"A Geometry class which abstracts a 2D keypoints annotation object. Args: value: The list of `Coord2D` objects comprise the current `KeyPoints` object. dom: The class domain object which the current `KeyPoints` object belongs to. \"\"\" if isinstance ( dom , list ): assert len ( dom ) == 1 , \"You can only assign one class dom in KeypointField.\" dom = dom [ 0 ] keypoints = [] for class_ind , p in enumerate ( value , start = 1 ): label = dom . get_label ( class_ind ) coord2d = Coord2D ( x = p [ 0 ], y = p [ 1 ], visiable = int ( p [ 2 ]), label = label ) keypoints . append ( coord2d ) self . _keypoints = keypoints self . _dom = dom","title":"__init__()"},{"location":"api_reference/dsdl_geometry/keypoint/#dsdl.geometry.keypoint.KeyPoints.visualize","text":"Draw the current Keypoints object on an given image. Parameters: Name Type Description Default image The image where the current Keypoints object to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current Keypoints object. {} Returns: Type Description The image where the current Keypoints object has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\keypoint.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current `Keypoints` object on an given image. Args: image: The image where the current `Keypoints` object to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current `Keypoints` object. Returns: The image where the current `Keypoints` object has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) line_color = ( 0 , 255 , 0 ) # green point_radius = 3 skeleton = self . _dom . get_attribute ( \"Skeleton\" ) if skeleton is not None : point_pairs = skeleton . get_point_pairs ( self ) for point_pair in point_pairs : p1 , p2 = point_pair [: 2 ] if p1 . visiable > 0 and p2 . visiable : draw_obj . line ([ * p1 . point , * p2 . point ], width = 2 , fill = ( * line_color , 255 )) for point in self . _keypoints : if point . visiable > 0 : label_ = point . label . category_name if label_ not in palette : palette [ label_ ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) point_color = palette [ label_ ] x , y = point . point draw_obj . ellipse (( x - point_radius , y - point_radius , x + point_radius , y + point_radius ), fill = ( * point_color , 255 )) del draw_obj return image","title":"visualize()"},{"location":"api_reference/dsdl_geometry/label/","text":"Label Bases: BaseGeometry , FontMixin Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.pyclass Label ( BaseGeometry , FontMixin ): def __init__ ( self , name , supercategories = (), domain_name = None ): \"\"\"A Geometry class which abstracts a label object. Args: name: The name of the current label object. supercategories: The collection of the current label's super category objects. domain_name: The name of the class domain which the current label object belongs to. \"\"\" self . _name = name self . _supercategories = [ _ for _ in supercategories if isinstance ( _ , Label )] self . _domain_name = domain_name @property def supercategories ( self ): \"\"\" Returns: The collection of the current label's super category objects. \"\"\" return self . _supercategories @property def supercategories_names ( self ): \"\"\" Returns: The names of the current label's supercategories. \"\"\" return [ _ . name for _ in self . _supercategories ] @property def parent_names ( self ): \"\"\" Returns: The names of the current label's supercategories. \"\"\" return [ _ . name for _ in self . _supercategories ] @property def domain_name ( self ): \"\"\" Returns: The name of the class domain which the current label object belongs to. \"\"\" return self . _domain_name @property def parents ( self ): \"\"\" Returns: The collection of the current label's super category objects. \"\"\" return self . _supercategories @property def name ( self ): \"\"\" Returns: The name of the current label object. \"\"\" return self . _name @property def registry_name ( self ): \"\"\" Returns: The registry name of the current label object which is unique in the `LABEL` registry. \"\"\" return f \" { self . _domain_name } __ { self . _name } \" def set_domain ( self , domain_name ): \"\"\" Set the `_domain_name` of the current label object. \"\"\" if self . _domain_name is None : self . _domain_name = domain_name @property def category_name ( self ): \"\"\" Returns: The name of the current label object. \"\"\" return self . _name @property def leaf_node_name ( self ): return self . _name . split ( \".\" )[ - 1 ] @property def openmmlabformat ( self ): \"\"\" Returns: The name of the current label object. \"\"\" return self . _name @property def class_domain ( self ): \"\"\" Returns: (dsdl.geometry.ClassDomain): The class domain object which the current label object belongs to. \"\"\" return CLASSDOMAIN . get ( self . domain_name ) def index_in_domain ( self ): \"\"\" Returns: The index of the current label object in the class domain which it belongs to. \"\"\" return self . class_domain . get_cat2ind_mapping ()[ self . category_name ] def __eq__ ( self , other ): \"\"\"Compare whether the current label object is equal to the other. Args: other: Another Label object to be compared with the current one. Returns: Whether the current label object is equal to the other. \"\"\" if self . domain_name != other . domain_name : return False if self . name != other . name : return False if len ( self . parents ) != len ( self . parents ): return False for p1 in self . parents : for p2 in other . parents : if p1 != p2 : return False return True def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current label object on an given image. Args: image: The image where the label to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current label object, such as `BBox` annotation. Returns: The image where the current label object has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) if self . category_name not in palette : palette [ self . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ self . category_name ] if self . font is None : self . set_font ( ImageFont . truetype ( os . path . join ( os . path . dirname ( __file__ ), \"source\" , \"Arial_Font.ttf\" ))) label_size = draw_obj . textsize ( self . category_name , self . font ) if \"bbox\" in kwargs : coords = np . array ([[ item . xyxy [ 0 ], item . xyxy [ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"bbox\" ] . values ()]) elif \"polygon\" in kwargs : coords = np . array ([[ item . point_for_draw ()[ 0 ], item . point_for_draw ()[ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"polygon\" ] . values ()]) else : coords = np . array ([[ 0 , 0.2 * label_size [ 1 ]]]) for coord in coords : draw_obj . rectangle ([ tuple ( coord ), tuple ( coord + label_size )], fill = ( * color , 255 )) draw_obj . text ( tuple ( coord ), self . category_name , fill = ( 255 , 255 , 255 , 255 ), font = self . font ) del draw_obj return image def __repr__ ( self ): return self . category_name category_name property Returns: Type Description The name of the current label object. class_domain property Returns: Type Description dsdl . geometry . ClassDomain The class domain object which the current label object belongs to. domain_name property Returns: Type Description The name of the class domain which the current label object belongs to. name property Returns: Type Description The name of the current label object. openmmlabformat property Returns: Type Description The name of the current label object. parent_names property Returns: Type Description The names of the current label's supercategories. parents property Returns: Type Description The collection of the current label's super category objects. registry_name property Returns: Type Description The registry name of the current label object which is unique in the LABEL registry. supercategories property Returns: Type Description The collection of the current label's super category objects. supercategories_names property Returns: Type Description The names of the current label's supercategories. __eq__ ( other ) Compare whether the current label object is equal to the other. Parameters: Name Type Description Default other Another Label object to be compared with the current one. required Returns: Type Description Whether the current label object is equal to the other. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def __eq__ ( self , other ): \"\"\"Compare whether the current label object is equal to the other. Args: other: Another Label object to be compared with the current one. Returns: Whether the current label object is equal to the other. \"\"\" if self . domain_name != other . domain_name : return False if self . name != other . name : return False if len ( self . parents ) != len ( self . parents ): return False for p1 in self . parents : for p2 in other . parents : if p1 != p2 : return False return True __init__ ( name , supercategories = (), domain_name = None ) A Geometry class which abstracts a label object. Parameters: Name Type Description Default name The name of the current label object. required supercategories The collection of the current label's super category objects. () domain_name The name of the class domain which the current label object belongs to. None Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 10 11 12 13 14 15 16 17 18 19 20 def __init__ ( self , name , supercategories = (), domain_name = None ): \"\"\"A Geometry class which abstracts a label object. Args: name: The name of the current label object. supercategories: The collection of the current label's super category objects. domain_name: The name of the class domain which the current label object belongs to. \"\"\" self . _name = name self . _supercategories = [ _ for _ in supercategories if isinstance ( _ , Label )] self . _domain_name = domain_name index_in_domain () Returns: Type Description The index of the current label object in the class domain which it belongs to. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 113 114 115 116 117 118 def index_in_domain ( self ): \"\"\" Returns: The index of the current label object in the class domain which it belongs to. \"\"\" return self . class_domain . get_cat2ind_mapping ()[ self . category_name ] set_domain ( domain_name ) Set the _domain_name of the current label object. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 78 79 80 81 82 83 def set_domain ( self , domain_name ): \"\"\" Set the `_domain_name` of the current label object. \"\"\" if self . _domain_name is None : self . _domain_name = domain_name visualize ( image , palette , ** kwargs ) Draw the current label object on an given image. Parameters: Name Type Description Default image The image where the label to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current label object, such as BBox annotation. {} Returns: Type Description The image where the current label object has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current label object on an given image. Args: image: The image where the label to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current label object, such as `BBox` annotation. Returns: The image where the current label object has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) if self . category_name not in palette : palette [ self . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ self . category_name ] if self . font is None : self . set_font ( ImageFont . truetype ( os . path . join ( os . path . dirname ( __file__ ), \"source\" , \"Arial_Font.ttf\" ))) label_size = draw_obj . textsize ( self . category_name , self . font ) if \"bbox\" in kwargs : coords = np . array ([[ item . xyxy [ 0 ], item . xyxy [ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"bbox\" ] . values ()]) elif \"polygon\" in kwargs : coords = np . array ([[ item . point_for_draw ()[ 0 ], item . point_for_draw ()[ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"polygon\" ] . values ()]) else : coords = np . array ([[ 0 , 0.2 * label_size [ 1 ]]]) for coord in coords : draw_obj . rectangle ([ tuple ( coord ), tuple ( coord + label_size )], fill = ( * color , 255 )) draw_obj . text ( tuple ( coord ), self . category_name , fill = ( 255 , 255 , 255 , 255 ), font = self . font ) del draw_obj return image LabelList Bases: BaseGeometry , FontMixin Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 class LabelList ( BaseGeometry , FontMixin ): def __init__ ( self , label_list ): \"\"\"A Geometry class which abstracts a list of label objects. Args: label_list: A collection of `Label` objects. \"\"\" self . _label_list = list ( label_list ) @property def names ( self ): \"\"\" Returns: All the names of the label object in the current `LabelList` object. \"\"\" return [ label . category_name for label in self . _label_list ] @property def category_names ( self ): \"\"\" Returns: All the names of the label object in the current `LabelList` object. \"\"\" return [ label . category_name for label in self . _label_list ] @property def label_list ( self ): \"\"\" Returns: All the `Label` objects in the current `LabelList` object. \"\"\" return self . _label_list @property def class_domains ( self ): \"\"\" Returns: (List[dsdl.geometry.ClassDomain]): The class domain objects of all the `Label` objects in the current `LabelList` object. \"\"\" return [ label . class_domain for label in self . _label_list ] def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current `LabelList` object on an given image. Args: image: The image where the labels to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current `LabelList` object, such as `BBox` annotation. Returns: The image where the current `LabelList` object has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) if self . font is None : self . set_font ( ImageFont . truetype ( os . path . join ( os . path . dirname ( __file__ ), \"source\" , \"Arial_Font.ttf\" ))) y_offset = np . zeros (( 1 , 2 )) for label_obj in self . label_list : category_name = label_obj . category_name if category_name not in palette : palette [ category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ category_name ] label_size = draw_obj . textsize ( category_name , self . font ) if \"bbox\" in kwargs : # coords.shape = [num_box, 2] coords = y_offset + np . array ( [[ item . xyxy [ 0 ], item . xyxy [ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"bbox\" ] . values ()]) elif \"polygon\" in kwargs : coords = y_offset + np . array ( [[ item . point_for_draw ()[ 0 ], item . point_for_draw ()[ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"polygon\" ] . values ()]) elif \"rotatedbbox\" in kwargs : coords = y_offset + np . array ( [[ item . point_for_draw ()[ 0 ], item . point_for_draw ()[ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"rotatedbbox\" ] . values ()]) elif \"image_label_list\" not in kwargs : coords = y_offset + np . array ([[ 0 , 0.2 * label_size [ 1 ]]]) else : coords = [] kwargs [ \"image_label_list\" ] . append ( label_obj ) y_offset += np . array ([[ 0. , 1.2 * label_size [ 1 ]]]) for coord in coords : draw_obj . rectangle ([ tuple ( coord ), tuple ( coord + label_size )], fill = ( * color , 255 )) draw_obj . text ( tuple ( coord ), category_name , fill = ( 255 , 255 , 255 , 255 ), font = self . font ) del draw_obj return image category_names property Returns: Type Description All the names of the label object in the current LabelList object. class_domains property Returns: Type Description List [ dsdl . geometry . ClassDomain ] The class domain objects of all the Label objects in the current LabelList object. label_list property Returns: Type Description All the Label objects in the current LabelList object. names property Returns: Type Description All the names of the label object in the current LabelList object. __init__ ( label_list ) A Geometry class which abstracts a list of label objects. Parameters: Name Type Description Default label_list A collection of Label objects. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 178 179 180 181 182 183 184 def __init__ ( self , label_list ): \"\"\"A Geometry class which abstracts a list of label objects. Args: label_list: A collection of `Label` objects. \"\"\" self . _label_list = list ( label_list ) visualize ( image , palette , ** kwargs ) Draw the current LabelList object on an given image. Parameters: Name Type Description Default image The image where the labels to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current LabelList object, such as BBox annotation. {} Returns: Type Description The image where the current LabelList object has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current `LabelList` object on an given image. Args: image: The image where the labels to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current `LabelList` object, such as `BBox` annotation. Returns: The image where the current `LabelList` object has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) if self . font is None : self . set_font ( ImageFont . truetype ( os . path . join ( os . path . dirname ( __file__ ), \"source\" , \"Arial_Font.ttf\" ))) y_offset = np . zeros (( 1 , 2 )) for label_obj in self . label_list : category_name = label_obj . category_name if category_name not in palette : palette [ category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ category_name ] label_size = draw_obj . textsize ( category_name , self . font ) if \"bbox\" in kwargs : # coords.shape = [num_box, 2] coords = y_offset + np . array ( [[ item . xyxy [ 0 ], item . xyxy [ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"bbox\" ] . values ()]) elif \"polygon\" in kwargs : coords = y_offset + np . array ( [[ item . point_for_draw ()[ 0 ], item . point_for_draw ()[ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"polygon\" ] . values ()]) elif \"rotatedbbox\" in kwargs : coords = y_offset + np . array ( [[ item . point_for_draw ()[ 0 ], item . point_for_draw ()[ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"rotatedbbox\" ] . values ()]) elif \"image_label_list\" not in kwargs : coords = y_offset + np . array ([[ 0 , 0.2 * label_size [ 1 ]]]) else : coords = [] kwargs [ \"image_label_list\" ] . append ( label_obj ) y_offset += np . array ([[ 0. , 1.2 * label_size [ 1 ]]]) for coord in coords : draw_obj . rectangle ([ tuple ( coord ), tuple ( coord + label_size )], fill = ( * color , 255 )) draw_obj . text ( tuple ( coord ), category_name , fill = ( 255 , 255 , 255 , 255 ), font = self . font ) del draw_obj return image","title":"dsdl.geometry.label"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label","text":"Bases: BaseGeometry , FontMixin Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.pyclass Label ( BaseGeometry , FontMixin ): def __init__ ( self , name , supercategories = (), domain_name = None ): \"\"\"A Geometry class which abstracts a label object. Args: name: The name of the current label object. supercategories: The collection of the current label's super category objects. domain_name: The name of the class domain which the current label object belongs to. \"\"\" self . _name = name self . _supercategories = [ _ for _ in supercategories if isinstance ( _ , Label )] self . _domain_name = domain_name @property def supercategories ( self ): \"\"\" Returns: The collection of the current label's super category objects. \"\"\" return self . _supercategories @property def supercategories_names ( self ): \"\"\" Returns: The names of the current label's supercategories. \"\"\" return [ _ . name for _ in self . _supercategories ] @property def parent_names ( self ): \"\"\" Returns: The names of the current label's supercategories. \"\"\" return [ _ . name for _ in self . _supercategories ] @property def domain_name ( self ): \"\"\" Returns: The name of the class domain which the current label object belongs to. \"\"\" return self . _domain_name @property def parents ( self ): \"\"\" Returns: The collection of the current label's super category objects. \"\"\" return self . _supercategories @property def name ( self ): \"\"\" Returns: The name of the current label object. \"\"\" return self . _name @property def registry_name ( self ): \"\"\" Returns: The registry name of the current label object which is unique in the `LABEL` registry. \"\"\" return f \" { self . _domain_name } __ { self . _name } \" def set_domain ( self , domain_name ): \"\"\" Set the `_domain_name` of the current label object. \"\"\" if self . _domain_name is None : self . _domain_name = domain_name @property def category_name ( self ): \"\"\" Returns: The name of the current label object. \"\"\" return self . _name @property def leaf_node_name ( self ): return self . _name . split ( \".\" )[ - 1 ] @property def openmmlabformat ( self ): \"\"\" Returns: The name of the current label object. \"\"\" return self . _name @property def class_domain ( self ): \"\"\" Returns: (dsdl.geometry.ClassDomain): The class domain object which the current label object belongs to. \"\"\" return CLASSDOMAIN . get ( self . domain_name ) def index_in_domain ( self ): \"\"\" Returns: The index of the current label object in the class domain which it belongs to. \"\"\" return self . class_domain . get_cat2ind_mapping ()[ self . category_name ] def __eq__ ( self , other ): \"\"\"Compare whether the current label object is equal to the other. Args: other: Another Label object to be compared with the current one. Returns: Whether the current label object is equal to the other. \"\"\" if self . domain_name != other . domain_name : return False if self . name != other . name : return False if len ( self . parents ) != len ( self . parents ): return False for p1 in self . parents : for p2 in other . parents : if p1 != p2 : return False return True def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current label object on an given image. Args: image: The image where the label to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current label object, such as `BBox` annotation. Returns: The image where the current label object has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) if self . category_name not in palette : palette [ self . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ self . category_name ] if self . font is None : self . set_font ( ImageFont . truetype ( os . path . join ( os . path . dirname ( __file__ ), \"source\" , \"Arial_Font.ttf\" ))) label_size = draw_obj . textsize ( self . category_name , self . font ) if \"bbox\" in kwargs : coords = np . array ([[ item . xyxy [ 0 ], item . xyxy [ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"bbox\" ] . values ()]) elif \"polygon\" in kwargs : coords = np . array ([[ item . point_for_draw ()[ 0 ], item . point_for_draw ()[ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"polygon\" ] . values ()]) else : coords = np . array ([[ 0 , 0.2 * label_size [ 1 ]]]) for coord in coords : draw_obj . rectangle ([ tuple ( coord ), tuple ( coord + label_size )], fill = ( * color , 255 )) draw_obj . text ( tuple ( coord ), self . category_name , fill = ( 255 , 255 , 255 , 255 ), font = self . font ) del draw_obj return image def __repr__ ( self ): return self . category_name","title":"Label"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.category_name","text":"Returns: Type Description The name of the current label object.","title":"category_name"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.class_domain","text":"Returns: Type Description dsdl . geometry . ClassDomain The class domain object which the current label object belongs to.","title":"class_domain"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.domain_name","text":"Returns: Type Description The name of the class domain which the current label object belongs to.","title":"domain_name"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.name","text":"Returns: Type Description The name of the current label object.","title":"name"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.openmmlabformat","text":"Returns: Type Description The name of the current label object.","title":"openmmlabformat"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.parent_names","text":"Returns: Type Description The names of the current label's supercategories.","title":"parent_names"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.parents","text":"Returns: Type Description The collection of the current label's super category objects.","title":"parents"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.registry_name","text":"Returns: Type Description The registry name of the current label object which is unique in the LABEL registry.","title":"registry_name"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.supercategories","text":"Returns: Type Description The collection of the current label's super category objects.","title":"supercategories"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.supercategories_names","text":"Returns: Type Description The names of the current label's supercategories.","title":"supercategories_names"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.__eq__","text":"Compare whether the current label object is equal to the other. Parameters: Name Type Description Default other Another Label object to be compared with the current one. required Returns: Type Description Whether the current label object is equal to the other. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def __eq__ ( self , other ): \"\"\"Compare whether the current label object is equal to the other. Args: other: Another Label object to be compared with the current one. Returns: Whether the current label object is equal to the other. \"\"\" if self . domain_name != other . domain_name : return False if self . name != other . name : return False if len ( self . parents ) != len ( self . parents ): return False for p1 in self . parents : for p2 in other . parents : if p1 != p2 : return False return True","title":"__eq__()"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.__init__","text":"A Geometry class which abstracts a label object. Parameters: Name Type Description Default name The name of the current label object. required supercategories The collection of the current label's super category objects. () domain_name The name of the class domain which the current label object belongs to. None Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 10 11 12 13 14 15 16 17 18 19 20 def __init__ ( self , name , supercategories = (), domain_name = None ): \"\"\"A Geometry class which abstracts a label object. Args: name: The name of the current label object. supercategories: The collection of the current label's super category objects. domain_name: The name of the class domain which the current label object belongs to. \"\"\" self . _name = name self . _supercategories = [ _ for _ in supercategories if isinstance ( _ , Label )] self . _domain_name = domain_name","title":"__init__()"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.index_in_domain","text":"Returns: Type Description The index of the current label object in the class domain which it belongs to. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 113 114 115 116 117 118 def index_in_domain ( self ): \"\"\" Returns: The index of the current label object in the class domain which it belongs to. \"\"\" return self . class_domain . get_cat2ind_mapping ()[ self . category_name ]","title":"index_in_domain()"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.set_domain","text":"Set the _domain_name of the current label object. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 78 79 80 81 82 83 def set_domain ( self , domain_name ): \"\"\" Set the `_domain_name` of the current label object. \"\"\" if self . _domain_name is None : self . _domain_name = domain_name","title":"set_domain()"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.Label.visualize","text":"Draw the current label object on an given image. Parameters: Name Type Description Default image The image where the label to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current label object, such as BBox annotation. {} Returns: Type Description The image where the current label object has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current label object on an given image. Args: image: The image where the label to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current label object, such as `BBox` annotation. Returns: The image where the current label object has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) if self . category_name not in palette : palette [ self . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ self . category_name ] if self . font is None : self . set_font ( ImageFont . truetype ( os . path . join ( os . path . dirname ( __file__ ), \"source\" , \"Arial_Font.ttf\" ))) label_size = draw_obj . textsize ( self . category_name , self . font ) if \"bbox\" in kwargs : coords = np . array ([[ item . xyxy [ 0 ], item . xyxy [ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"bbox\" ] . values ()]) elif \"polygon\" in kwargs : coords = np . array ([[ item . point_for_draw ()[ 0 ], item . point_for_draw ()[ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"polygon\" ] . values ()]) else : coords = np . array ([[ 0 , 0.2 * label_size [ 1 ]]]) for coord in coords : draw_obj . rectangle ([ tuple ( coord ), tuple ( coord + label_size )], fill = ( * color , 255 )) draw_obj . text ( tuple ( coord ), self . category_name , fill = ( 255 , 255 , 255 , 255 ), font = self . font ) del draw_obj return image","title":"visualize()"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.LabelList","text":"Bases: BaseGeometry , FontMixin Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 class LabelList ( BaseGeometry , FontMixin ): def __init__ ( self , label_list ): \"\"\"A Geometry class which abstracts a list of label objects. Args: label_list: A collection of `Label` objects. \"\"\" self . _label_list = list ( label_list ) @property def names ( self ): \"\"\" Returns: All the names of the label object in the current `LabelList` object. \"\"\" return [ label . category_name for label in self . _label_list ] @property def category_names ( self ): \"\"\" Returns: All the names of the label object in the current `LabelList` object. \"\"\" return [ label . category_name for label in self . _label_list ] @property def label_list ( self ): \"\"\" Returns: All the `Label` objects in the current `LabelList` object. \"\"\" return self . _label_list @property def class_domains ( self ): \"\"\" Returns: (List[dsdl.geometry.ClassDomain]): The class domain objects of all the `Label` objects in the current `LabelList` object. \"\"\" return [ label . class_domain for label in self . _label_list ] def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current `LabelList` object on an given image. Args: image: The image where the labels to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current `LabelList` object, such as `BBox` annotation. Returns: The image where the current `LabelList` object has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) if self . font is None : self . set_font ( ImageFont . truetype ( os . path . join ( os . path . dirname ( __file__ ), \"source\" , \"Arial_Font.ttf\" ))) y_offset = np . zeros (( 1 , 2 )) for label_obj in self . label_list : category_name = label_obj . category_name if category_name not in palette : palette [ category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ category_name ] label_size = draw_obj . textsize ( category_name , self . font ) if \"bbox\" in kwargs : # coords.shape = [num_box, 2] coords = y_offset + np . array ( [[ item . xyxy [ 0 ], item . xyxy [ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"bbox\" ] . values ()]) elif \"polygon\" in kwargs : coords = y_offset + np . array ( [[ item . point_for_draw ()[ 0 ], item . point_for_draw ()[ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"polygon\" ] . values ()]) elif \"rotatedbbox\" in kwargs : coords = y_offset + np . array ( [[ item . point_for_draw ()[ 0 ], item . point_for_draw ()[ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"rotatedbbox\" ] . values ()]) elif \"image_label_list\" not in kwargs : coords = y_offset + np . array ([[ 0 , 0.2 * label_size [ 1 ]]]) else : coords = [] kwargs [ \"image_label_list\" ] . append ( label_obj ) y_offset += np . array ([[ 0. , 1.2 * label_size [ 1 ]]]) for coord in coords : draw_obj . rectangle ([ tuple ( coord ), tuple ( coord + label_size )], fill = ( * color , 255 )) draw_obj . text ( tuple ( coord ), category_name , fill = ( 255 , 255 , 255 , 255 ), font = self . font ) del draw_obj return image","title":"LabelList"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.LabelList.category_names","text":"Returns: Type Description All the names of the label object in the current LabelList object.","title":"category_names"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.LabelList.class_domains","text":"Returns: Type Description List [ dsdl . geometry . ClassDomain ] The class domain objects of all the Label objects in the current LabelList object.","title":"class_domains"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.LabelList.label_list","text":"Returns: Type Description All the Label objects in the current LabelList object.","title":"label_list"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.LabelList.names","text":"Returns: Type Description All the names of the label object in the current LabelList object.","title":"names"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.LabelList.__init__","text":"A Geometry class which abstracts a list of label objects. Parameters: Name Type Description Default label_list A collection of Label objects. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 178 179 180 181 182 183 184 def __init__ ( self , label_list ): \"\"\"A Geometry class which abstracts a list of label objects. Args: label_list: A collection of `Label` objects. \"\"\" self . _label_list = list ( label_list )","title":"__init__()"},{"location":"api_reference/dsdl_geometry/label/#dsdl.geometry.label.LabelList.visualize","text":"Draw the current LabelList object on an given image. Parameters: Name Type Description Default image The image where the labels to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current LabelList object, such as BBox annotation. {} Returns: Type Description The image where the current LabelList object has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\label.py 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current `LabelList` object on an given image. Args: image: The image where the labels to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current `LabelList` object, such as `BBox` annotation. Returns: The image where the current `LabelList` object has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) if self . font is None : self . set_font ( ImageFont . truetype ( os . path . join ( os . path . dirname ( __file__ ), \"source\" , \"Arial_Font.ttf\" ))) y_offset = np . zeros (( 1 , 2 )) for label_obj in self . label_list : category_name = label_obj . category_name if category_name not in palette : palette [ category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ category_name ] label_size = draw_obj . textsize ( category_name , self . font ) if \"bbox\" in kwargs : # coords.shape = [num_box, 2] coords = y_offset + np . array ( [[ item . xyxy [ 0 ], item . xyxy [ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"bbox\" ] . values ()]) elif \"polygon\" in kwargs : coords = y_offset + np . array ( [[ item . point_for_draw ()[ 0 ], item . point_for_draw ()[ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"polygon\" ] . values ()]) elif \"rotatedbbox\" in kwargs : coords = y_offset + np . array ( [[ item . point_for_draw ()[ 0 ], item . point_for_draw ()[ 1 ] + 0.2 * label_size [ 1 ]] for item in kwargs [ \"rotatedbbox\" ] . values ()]) elif \"image_label_list\" not in kwargs : coords = y_offset + np . array ([[ 0 , 0.2 * label_size [ 1 ]]]) else : coords = [] kwargs [ \"image_label_list\" ] . append ( label_obj ) y_offset += np . array ([[ 0. , 1.2 * label_size [ 1 ]]]) for coord in coords : draw_obj . rectangle ([ tuple ( coord ), tuple ( coord + label_size )], fill = ( * color , 255 )) draw_obj . text ( tuple ( coord ), category_name , fill = ( 255 , 255 , 255 , 255 ), font = self . font ) del draw_obj return image","title":"visualize()"},{"location":"api_reference/dsdl_geometry/media/","text":"Image Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\media.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class Image ( BaseGeometry ): def __init__ ( self , value , file_reader ): \"\"\"A Geometry class which abstracts an image object. Args: value: The relative path of the current image object. file_reader: The file reader object of the current image object. \"\"\" self . _loc = value self . _reader = file_reader self . namespace = None _splits = value . split ( \".\" ) if len ( _splits ) > 1 : self . _ext = value . split ( \".\" )[ - 1 ] . lower () else : self . _ext = \"\" def set_namespace ( self , struct_obj ): self . namespace = struct_obj self . _reader = struct_obj . file_reader @property def location ( self ): \"\"\" Returns: The relative path of the current image. \"\"\" return self . _loc def to_bytes ( self ): \"\"\"Turn ImageMedia object to bytes. Returns: The bytes of the current image. \"\"\" return io . BytesIO ( self . _reader . read ( self . _loc )) def to_image ( self ): \"\"\"Turn ImageMedia object to a `PIL.Image` object. Returns: The `PIL.Image` object of the current image. \"\"\" if self . _ext in ( \"tif\" , \"tiff\" ): return Image_ . fromarray ( self . to_array ()) try : img = Image_ . open ( self . to_bytes ()) except Exception as e : raise FileReadError ( f \"Failed to convert bytes to an array. { e } \" ) from None return img def to_array ( self ): \"\"\"Turn ImageMedia object to numpy.ndarray. Returns: The `np.ndarray` object of the current image. \"\"\" if self . _ext in ( \"tif\" , \"tiff\" ): return imread ( self . to_bytes ()) return bytes_to_numpy ( self . to_bytes ()) def __repr__ ( self ): return f \"path: { self . location } \" location property Returns: Type Description The relative path of the current image. __init__ ( value , file_reader ) A Geometry class which abstracts an image object. Parameters: Name Type Description Default value The relative path of the current image object. required file_reader The file reader object of the current image object. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\media.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def __init__ ( self , value , file_reader ): \"\"\"A Geometry class which abstracts an image object. Args: value: The relative path of the current image object. file_reader: The file reader object of the current image object. \"\"\" self . _loc = value self . _reader = file_reader self . namespace = None _splits = value . split ( \".\" ) if len ( _splits ) > 1 : self . _ext = value . split ( \".\" )[ - 1 ] . lower () else : self . _ext = \"\" to_array () Turn ImageMedia object to numpy.ndarray. Returns: Type Description The np.ndarray object of the current image. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\media.py 61 62 63 64 65 66 67 68 69 def to_array ( self ): \"\"\"Turn ImageMedia object to numpy.ndarray. Returns: The `np.ndarray` object of the current image. \"\"\" if self . _ext in ( \"tif\" , \"tiff\" ): return imread ( self . to_bytes ()) return bytes_to_numpy ( self . to_bytes ()) to_bytes () Turn ImageMedia object to bytes. Returns: Type Description The bytes of the current image. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\media.py 39 40 41 42 43 44 45 def to_bytes ( self ): \"\"\"Turn ImageMedia object to bytes. Returns: The bytes of the current image. \"\"\" return io . BytesIO ( self . _reader . read ( self . _loc )) to_image () Turn ImageMedia object to a PIL.Image object. Returns: Type Description The PIL.Image object of the current image. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\media.py 47 48 49 50 51 52 53 54 55 56 57 58 59 def to_image ( self ): \"\"\"Turn ImageMedia object to a `PIL.Image` object. Returns: The `PIL.Image` object of the current image. \"\"\" if self . _ext in ( \"tif\" , \"tiff\" ): return Image_ . fromarray ( self . to_array ()) try : img = Image_ . open ( self . to_bytes ()) except Exception as e : raise FileReadError ( f \"Failed to convert bytes to an array. { e } \" ) from None return img","title":"dsdl.geometry.media"},{"location":"api_reference/dsdl_geometry/media/#dsdl.geometry.media.Image","text":"Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\media.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class Image ( BaseGeometry ): def __init__ ( self , value , file_reader ): \"\"\"A Geometry class which abstracts an image object. Args: value: The relative path of the current image object. file_reader: The file reader object of the current image object. \"\"\" self . _loc = value self . _reader = file_reader self . namespace = None _splits = value . split ( \".\" ) if len ( _splits ) > 1 : self . _ext = value . split ( \".\" )[ - 1 ] . lower () else : self . _ext = \"\" def set_namespace ( self , struct_obj ): self . namespace = struct_obj self . _reader = struct_obj . file_reader @property def location ( self ): \"\"\" Returns: The relative path of the current image. \"\"\" return self . _loc def to_bytes ( self ): \"\"\"Turn ImageMedia object to bytes. Returns: The bytes of the current image. \"\"\" return io . BytesIO ( self . _reader . read ( self . _loc )) def to_image ( self ): \"\"\"Turn ImageMedia object to a `PIL.Image` object. Returns: The `PIL.Image` object of the current image. \"\"\" if self . _ext in ( \"tif\" , \"tiff\" ): return Image_ . fromarray ( self . to_array ()) try : img = Image_ . open ( self . to_bytes ()) except Exception as e : raise FileReadError ( f \"Failed to convert bytes to an array. { e } \" ) from None return img def to_array ( self ): \"\"\"Turn ImageMedia object to numpy.ndarray. Returns: The `np.ndarray` object of the current image. \"\"\" if self . _ext in ( \"tif\" , \"tiff\" ): return imread ( self . to_bytes ()) return bytes_to_numpy ( self . to_bytes ()) def __repr__ ( self ): return f \"path: { self . location } \"","title":"Image"},{"location":"api_reference/dsdl_geometry/media/#dsdl.geometry.media.Image.location","text":"Returns: Type Description The relative path of the current image.","title":"location"},{"location":"api_reference/dsdl_geometry/media/#dsdl.geometry.media.Image.__init__","text":"A Geometry class which abstracts an image object. Parameters: Name Type Description Default value The relative path of the current image object. required file_reader The file reader object of the current image object. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\media.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def __init__ ( self , value , file_reader ): \"\"\"A Geometry class which abstracts an image object. Args: value: The relative path of the current image object. file_reader: The file reader object of the current image object. \"\"\" self . _loc = value self . _reader = file_reader self . namespace = None _splits = value . split ( \".\" ) if len ( _splits ) > 1 : self . _ext = value . split ( \".\" )[ - 1 ] . lower () else : self . _ext = \"\"","title":"__init__()"},{"location":"api_reference/dsdl_geometry/media/#dsdl.geometry.media.Image.to_array","text":"Turn ImageMedia object to numpy.ndarray. Returns: Type Description The np.ndarray object of the current image. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\media.py 61 62 63 64 65 66 67 68 69 def to_array ( self ): \"\"\"Turn ImageMedia object to numpy.ndarray. Returns: The `np.ndarray` object of the current image. \"\"\" if self . _ext in ( \"tif\" , \"tiff\" ): return imread ( self . to_bytes ()) return bytes_to_numpy ( self . to_bytes ())","title":"to_array()"},{"location":"api_reference/dsdl_geometry/media/#dsdl.geometry.media.Image.to_bytes","text":"Turn ImageMedia object to bytes. Returns: Type Description The bytes of the current image. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\media.py 39 40 41 42 43 44 45 def to_bytes ( self ): \"\"\"Turn ImageMedia object to bytes. Returns: The bytes of the current image. \"\"\" return io . BytesIO ( self . _reader . read ( self . _loc ))","title":"to_bytes()"},{"location":"api_reference/dsdl_geometry/media/#dsdl.geometry.media.Image.to_image","text":"Turn ImageMedia object to a PIL.Image object. Returns: Type Description The PIL.Image object of the current image. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\media.py 47 48 49 50 51 52 53 54 55 56 57 58 59 def to_image ( self ): \"\"\"Turn ImageMedia object to a `PIL.Image` object. Returns: The `PIL.Image` object of the current image. \"\"\" if self . _ext in ( \"tif\" , \"tiff\" ): return Image_ . fromarray ( self . to_array ()) try : img = Image_ . open ( self . to_bytes ()) except Exception as e : raise FileReadError ( f \"Failed to convert bytes to an array. { e } \" ) from None return img","title":"to_image()"},{"location":"api_reference/dsdl_geometry/polygon/","text":"Polygon Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 class Polygon ( BaseGeometry ): def __init__ ( self , value ): \"\"\"A Geometry class which abstracts a polygon object (which meas there may be multi closed shapes). Args: value: A list of a number of PolygonItem objects. \"\"\" polygon_lst = [] for idx , points in enumerate ( value ): polygon_lst . append ( PolygonItem ( points )) self . _data = polygon_lst @property def polygons ( self ): \"\"\" Returns: A list of all the PolygonItem objects in the current polygon object. \"\"\" return self . _data def to_mask ( self , imsize : List [ int ] = [ 1000 , 1000 ]) -> np . array : \"\"\" generate mask from polygon. \"\"\" mask = np . zeros ( imsize ) . astype ( np . uint8 ) points = [] for p in self . polygons : pts = np . array ( p . points , np . int32 ) pts = pts . reshape (( - 1 , 1 , 2 )) points . append ( pts ) mask = cv2 . fillPoly ( mask , points , 1 ) return mask @property def openmmlabformat ( self ) -> List [ List [ float ]]: \"\"\" Returns: All the points of all the polygon item. The format is `[[x1, y1, x2, y2, ...], [x1, y1, x2, y2, ...], ...]`. \"\"\" return [ _ . openmmlabformat for _ in self . _data ] def point_for_draw ( self , mode : str = \"lt\" ) -> [ int , int ]: \"\"\" Get the point's coordinate where a legend is fit to draw. Args: mode: The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. Returns: The coordinate correspond to the `mode`. The format is [x, y]. \"\"\" assert mode in ( \"lb\" , \"lt\" , \"rb\" , \"rt\" ) if mode == \"lt\" : p = min ( self . _data , key = lambda x : x . point_for_draw ( mode )[ 0 ] + x . point_for_draw ( mode )[ 1 ]) elif mode == \"lb\" : p = min ( self . _data , key = lambda x : x . point_for_draw ( mode )[ 0 ] - x . point_for_draw ( mode )[ 1 ]) elif mode == \"rt\" : p = min ( self . _data , key = lambda x : - x . point_for_draw ( mode )[ 0 ] + x . point_for_draw ( mode )[ 1 ]) else : # rb p = min ( self . _data , key = lambda x : - x . point_for_draw ( mode )[ 0 ] - x . point_for_draw ( mode )[ 1 ]) p = [ int ( _ ) for _ in p . point_for_draw ( mode )] return p def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current polygon object on an given image. Args: image: The image where the polygon to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current polygon object, such as `Label` annotation. Returns: The image where the current polygon object has been drawn on. \"\"\" color = ( 0 , 255 , 0 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] poly = Image . new ( 'RGBA' , image . size [: 2 ]) pdraw = ImageDraw . Draw ( poly ) for polygon_item in self . polygons : pdraw . polygon ( polygon_item . to_tuple (), fill = ( * color , 127 ), outline = ( * color , 255 )) image . paste ( poly , mask = poly ) del pdraw return image def __repr__ ( self ): return str ( self . _data ) openmmlabformat : List [ List [ float ]] property Returns: Type Description List [ List [ float ]] All the points of all the polygon item. The format is [[x1, y1, x2, y2, ...], [x1, y1, x2, y2, ...], ...] . polygons property Returns: Type Description A list of all the PolygonItem objects in the current polygon object. __init__ ( value ) A Geometry class which abstracts a polygon object (which meas there may be multi closed shapes). Parameters: Name Type Description Default value A list of a number of PolygonItem objects. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 97 98 99 100 101 102 103 104 105 106 def __init__ ( self , value ): \"\"\"A Geometry class which abstracts a polygon object (which meas there may be multi closed shapes). Args: value: A list of a number of PolygonItem objects. \"\"\" polygon_lst = [] for idx , points in enumerate ( value ): polygon_lst . append ( PolygonItem ( points )) self . _data = polygon_lst point_for_draw ( mode = 'lt' ) Get the point's coordinate where a legend is fit to draw. Parameters: Name Type Description Default mode str The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. 'lt' Returns: Type Description [ int , int ] The coordinate correspond to the mode . The format is [x, y]. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def point_for_draw ( self , mode : str = \"lt\" ) -> [ int , int ]: \"\"\" Get the point's coordinate where a legend is fit to draw. Args: mode: The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. Returns: The coordinate correspond to the `mode`. The format is [x, y]. \"\"\" assert mode in ( \"lb\" , \"lt\" , \"rb\" , \"rt\" ) if mode == \"lt\" : p = min ( self . _data , key = lambda x : x . point_for_draw ( mode )[ 0 ] + x . point_for_draw ( mode )[ 1 ]) elif mode == \"lb\" : p = min ( self . _data , key = lambda x : x . point_for_draw ( mode )[ 0 ] - x . point_for_draw ( mode )[ 1 ]) elif mode == \"rt\" : p = min ( self . _data , key = lambda x : - x . point_for_draw ( mode )[ 0 ] + x . point_for_draw ( mode )[ 1 ]) else : # rb p = min ( self . _data , key = lambda x : - x . point_for_draw ( mode )[ 0 ] - x . point_for_draw ( mode )[ 1 ]) p = [ int ( _ ) for _ in p . point_for_draw ( mode )] return p to_mask ( imsize = [ 1000 , 1000 ]) generate mask from polygon. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 116 117 118 119 120 121 122 123 124 125 126 127 128 def to_mask ( self , imsize : List [ int ] = [ 1000 , 1000 ]) -> np . array : \"\"\" generate mask from polygon. \"\"\" mask = np . zeros ( imsize ) . astype ( np . uint8 ) points = [] for p in self . polygons : pts = np . array ( p . points , np . int32 ) pts = pts . reshape (( - 1 , 1 , 2 )) points . append ( pts ) mask = cv2 . fillPoly ( mask , points , 1 ) return mask visualize ( image , palette , ** kwargs ) Draw the current polygon object on an given image. Parameters: Name Type Description Default image The image where the polygon to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current polygon object, such as Label annotation. {} Returns: Type Description The image where the current polygon object has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current polygon object on an given image. Args: image: The image where the polygon to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current polygon object, such as `Label` annotation. Returns: The image where the current polygon object has been drawn on. \"\"\" color = ( 0 , 255 , 0 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] poly = Image . new ( 'RGBA' , image . size [: 2 ]) pdraw = ImageDraw . Draw ( poly ) for polygon_item in self . polygons : pdraw . polygon ( polygon_item . to_tuple (), fill = ( * color , 127 ), outline = ( * color , 255 )) image . paste ( poly , mask = poly ) del pdraw return image PolygonItem Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 class PolygonItem ( BaseGeometry ): def __init__ ( self , points : List [ List [ float ]] ): \"\"\"A Geometry class which abstracts a single polygon item object (which means there is only one closed shape). Args: points: The coordinates of a polygon object, whose format is `[[x1, y1], [x2, y2], ...]` Attributes: _data(list[list[float]]): The coordinates of a polygon object, whose format is `[[x1, y1], [x2, y2], ...]` \"\"\" self . _data = points @property def points ( self ) -> List [ List [ float ]]: \"\"\" Returns: The coordinates of the current polygon item. The format is `[[x1, y1], [x2, y2], ...]`. \"\"\" return self . _data @property def points_x ( self ) -> List [ float ]: \"\"\" Returns: The horizontal axis of all the points which the current polygon item consists of. The format is [x1, x2, x3, ...]. \"\"\" return [ _ [ 0 ] for _ in self . _data ] @property def points_y ( self ) -> List [ float ]: \"\"\" Returns: The vertical axis of all the points which the current polygon item consists of. The format is [y1, y2, y3, ...]. \"\"\" return [ _ [ 1 ] for _ in self . _data ] def point_for_draw ( self , mode : str = \"lt\" ): \"\"\" Get the point's coordinate where a legend is fit to draw. Args: mode: The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. Returns: The coordinate corresponding to the `mode`, whose format is [x, y]. \"\"\" assert mode in ( \"lb\" , \"lt\" , \"rb\" , \"rt\" ) if mode == \"lt\" : p = min ( self . _data , key = lambda x : x [ 0 ] + x [ 1 ]) elif mode == \"lb\" : p = min ( self . _data , key = lambda x : x [ 0 ] - x [ 1 ]) elif mode == \"rt\" : p = min ( self . _data , key = lambda x : - x [ 0 ] + x [ 1 ]) else : # rb p = min ( self . _data , key = lambda x : - x [ 0 ] - x [ 1 ]) p = [ int ( _ ) for _ in p ] return p @property def openmmlabformat ( self ) -> List [ float ]: \"\"\" Returns: All the points of the format [x1, y1, x2, y2, ...]. \"\"\" return self . _flatten () def to_tuple ( self ): \"\"\" Returns: The coordinates of the current polygon item. The format is `((x1, y1), (x2, y2), ...)`. \"\"\" return tuple ([( _ [ 0 ], _ [ 1 ]) for _ in self . _data ]) def _flatten ( self ) -> List [ float ]: return [ _ for point in self . _data for _ in point ] def __repr__ ( self ): return str ( self . _data ) openmmlabformat : List [ float ] property Returns: Type Description List [ float ] All the points of the format [x1, y1, x2, y2, ...]. points : List [ List [ float ]] property Returns: Type Description List [ List [ float ]] The coordinates of the current polygon item. The format is [[x1, y1], [x2, y2], ...] . points_x : List [ float ] property Returns: Type Description List [ float ] The horizontal axis of all the points which the current polygon item consists of. The format is [x1, x2, x3, ...]. points_y : List [ float ] property Returns: Type Description List [ float ] The vertical axis of all the points which the current polygon item consists of. The format is [y1, y2, y3, ...]. __init__ ( points ) A Geometry class which abstracts a single polygon item object (which means there is only one closed shape). Parameters: Name Type Description Default points List [ List [ float ]] The coordinates of a polygon object, whose format is [[x1, y1], [x2, y2], ...] required Attributes: Name Type Description _data(list[list[float]]) The coordinates of a polygon object, whose format is [[x1, y1], [x2, y2], ...] Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 13 14 15 16 17 18 19 20 21 22 23 24 25 def __init__ ( self , points : List [ List [ float ]] ): \"\"\"A Geometry class which abstracts a single polygon item object (which means there is only one closed shape). Args: points: The coordinates of a polygon object, whose format is `[[x1, y1], [x2, y2], ...]` Attributes: _data(list[list[float]]): The coordinates of a polygon object, whose format is `[[x1, y1], [x2, y2], ...]` \"\"\" self . _data = points point_for_draw ( mode = 'lt' ) Get the point's coordinate where a legend is fit to draw. Parameters: Name Type Description Default mode str The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. 'lt' Returns: Type Description The coordinate corresponding to the mode , whose format is [x, y]. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 def point_for_draw ( self , mode : str = \"lt\" ): \"\"\" Get the point's coordinate where a legend is fit to draw. Args: mode: The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. Returns: The coordinate corresponding to the `mode`, whose format is [x, y]. \"\"\" assert mode in ( \"lb\" , \"lt\" , \"rb\" , \"rt\" ) if mode == \"lt\" : p = min ( self . _data , key = lambda x : x [ 0 ] + x [ 1 ]) elif mode == \"lb\" : p = min ( self . _data , key = lambda x : x [ 0 ] - x [ 1 ]) elif mode == \"rt\" : p = min ( self . _data , key = lambda x : - x [ 0 ] + x [ 1 ]) else : # rb p = min ( self . _data , key = lambda x : - x [ 0 ] - x [ 1 ]) p = [ int ( _ ) for _ in p ] return p to_tuple () Returns: Type Description The coordinates of the current polygon item. The format is ((x1, y1), (x2, y2), ...) . Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 81 82 83 84 85 86 def to_tuple ( self ): \"\"\" Returns: The coordinates of the current polygon item. The format is `((x1, y1), (x2, y2), ...)`. \"\"\" return tuple ([( _ [ 0 ], _ [ 1 ]) for _ in self . _data ]) RLEPolygon Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 class RLEPolygon ( BaseGeometry ): def __init__ ( self , rle_data , image_shape ): \"\"\" rle_data: rle list or bytes image_shape: [H, W] \"\"\" self . _rle_data = rle_data self . _image_shape = image_shape @property def rle_data ( self ): return self . _rle_data @property def image_shape ( self ): return self . _image_shape def to_mask ( self ) -> np . array : ''' # ref: https://www.kaggle.com/paulorzp/run-length-encode-and-decode mask_rle: run-length as string formated (start length) shape: (height,width) of array to return Returns numpy array, 1 - mask, 0 - background ''' if mask_util is not None : coco_rle = { 'size' : self . _image_shape , 'counts' : self . _rle_data } return mask_util . decode ([ coco_rle ])[:,:, 0 ] else : shape = self . _image_shape lens = list ( self . _rle_data ) starts = [ sum ( lens [ 0 : i ]) for i in range ( len ( lens ))] img = np . zeros ( shape [ 0 ] * shape [ 1 ], dtype = np . uint8 ) flag = 1 for begin , length in zip ( starts , lens ): flag = 1 - flag if not flag : continue img [ begin : begin + length ] = 1 return img . reshape ( shape ) @property def openmmlabformat ( self ): return { \"counts\" : self . rle_data , \"size\" : self . image_shape } def point_for_draw ( self , mode : str = \"lt\" ) -> [ int , int ]: pass def visualize ( self , image , palette , ** kwargs ): color = ( 0 , 255 , 0 ) mask = self . mask color_seg = np . array (( mask . shape [ 0 ], mask . shape [ 1 ], 3 ), dtype = np . uint8 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] color_seg [ mask == 1 , :] = np . array ( color ) overlay = Image . fromarray ( color_seg ) . convert ( \"RGBA\" ) overlayed = Image . blend ( image , overlay , 0.5 ) return overlayed __init__ ( rle_data , image_shape ) rle_data: rle list or bytes image_shape: [H, W] Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 192 193 194 195 196 197 198 def __init__ ( self , rle_data , image_shape ): \"\"\" rle_data: rle list or bytes image_shape: [H, W] \"\"\" self . _rle_data = rle_data self . _image_shape = image_shape to_mask () ref: https://www.kaggle.com/paulorzp/run-length-encode-and-decode mask_rle: run-length as string formated (start length) shape: (height,width) of array to return Returns numpy array, 1 - mask, 0 - background Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 def to_mask ( self ) -> np . array : ''' # ref: https://www.kaggle.com/paulorzp/run-length-encode-and-decode mask_rle: run-length as string formated (start length) shape: (height,width) of array to return Returns numpy array, 1 - mask, 0 - background ''' if mask_util is not None : coco_rle = { 'size' : self . _image_shape , 'counts' : self . _rle_data } return mask_util . decode ([ coco_rle ])[:,:, 0 ] else : shape = self . _image_shape lens = list ( self . _rle_data ) starts = [ sum ( lens [ 0 : i ]) for i in range ( len ( lens ))] img = np . zeros ( shape [ 0 ] * shape [ 1 ], dtype = np . uint8 ) flag = 1 for begin , length in zip ( starts , lens ): flag = 1 - flag if not flag : continue img [ begin : begin + length ] = 1 return img . reshape ( shape )","title":"dsdl.geometry.polygon"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.Polygon","text":"Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 class Polygon ( BaseGeometry ): def __init__ ( self , value ): \"\"\"A Geometry class which abstracts a polygon object (which meas there may be multi closed shapes). Args: value: A list of a number of PolygonItem objects. \"\"\" polygon_lst = [] for idx , points in enumerate ( value ): polygon_lst . append ( PolygonItem ( points )) self . _data = polygon_lst @property def polygons ( self ): \"\"\" Returns: A list of all the PolygonItem objects in the current polygon object. \"\"\" return self . _data def to_mask ( self , imsize : List [ int ] = [ 1000 , 1000 ]) -> np . array : \"\"\" generate mask from polygon. \"\"\" mask = np . zeros ( imsize ) . astype ( np . uint8 ) points = [] for p in self . polygons : pts = np . array ( p . points , np . int32 ) pts = pts . reshape (( - 1 , 1 , 2 )) points . append ( pts ) mask = cv2 . fillPoly ( mask , points , 1 ) return mask @property def openmmlabformat ( self ) -> List [ List [ float ]]: \"\"\" Returns: All the points of all the polygon item. The format is `[[x1, y1, x2, y2, ...], [x1, y1, x2, y2, ...], ...]`. \"\"\" return [ _ . openmmlabformat for _ in self . _data ] def point_for_draw ( self , mode : str = \"lt\" ) -> [ int , int ]: \"\"\" Get the point's coordinate where a legend is fit to draw. Args: mode: The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. Returns: The coordinate correspond to the `mode`. The format is [x, y]. \"\"\" assert mode in ( \"lb\" , \"lt\" , \"rb\" , \"rt\" ) if mode == \"lt\" : p = min ( self . _data , key = lambda x : x . point_for_draw ( mode )[ 0 ] + x . point_for_draw ( mode )[ 1 ]) elif mode == \"lb\" : p = min ( self . _data , key = lambda x : x . point_for_draw ( mode )[ 0 ] - x . point_for_draw ( mode )[ 1 ]) elif mode == \"rt\" : p = min ( self . _data , key = lambda x : - x . point_for_draw ( mode )[ 0 ] + x . point_for_draw ( mode )[ 1 ]) else : # rb p = min ( self . _data , key = lambda x : - x . point_for_draw ( mode )[ 0 ] - x . point_for_draw ( mode )[ 1 ]) p = [ int ( _ ) for _ in p . point_for_draw ( mode )] return p def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current polygon object on an given image. Args: image: The image where the polygon to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current polygon object, such as `Label` annotation. Returns: The image where the current polygon object has been drawn on. \"\"\" color = ( 0 , 255 , 0 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] poly = Image . new ( 'RGBA' , image . size [: 2 ]) pdraw = ImageDraw . Draw ( poly ) for polygon_item in self . polygons : pdraw . polygon ( polygon_item . to_tuple (), fill = ( * color , 127 ), outline = ( * color , 255 )) image . paste ( poly , mask = poly ) del pdraw return image def __repr__ ( self ): return str ( self . _data )","title":"Polygon"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.Polygon.openmmlabformat","text":"Returns: Type Description List [ List [ float ]] All the points of all the polygon item. The format is [[x1, y1, x2, y2, ...], [x1, y1, x2, y2, ...], ...] .","title":"openmmlabformat"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.Polygon.polygons","text":"Returns: Type Description A list of all the PolygonItem objects in the current polygon object.","title":"polygons"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.Polygon.__init__","text":"A Geometry class which abstracts a polygon object (which meas there may be multi closed shapes). Parameters: Name Type Description Default value A list of a number of PolygonItem objects. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 97 98 99 100 101 102 103 104 105 106 def __init__ ( self , value ): \"\"\"A Geometry class which abstracts a polygon object (which meas there may be multi closed shapes). Args: value: A list of a number of PolygonItem objects. \"\"\" polygon_lst = [] for idx , points in enumerate ( value ): polygon_lst . append ( PolygonItem ( points )) self . _data = polygon_lst","title":"__init__()"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.Polygon.point_for_draw","text":"Get the point's coordinate where a legend is fit to draw. Parameters: Name Type Description Default mode str The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. 'lt' Returns: Type Description [ int , int ] The coordinate correspond to the mode . The format is [x, y]. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def point_for_draw ( self , mode : str = \"lt\" ) -> [ int , int ]: \"\"\" Get the point's coordinate where a legend is fit to draw. Args: mode: The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. Returns: The coordinate correspond to the `mode`. The format is [x, y]. \"\"\" assert mode in ( \"lb\" , \"lt\" , \"rb\" , \"rt\" ) if mode == \"lt\" : p = min ( self . _data , key = lambda x : x . point_for_draw ( mode )[ 0 ] + x . point_for_draw ( mode )[ 1 ]) elif mode == \"lb\" : p = min ( self . _data , key = lambda x : x . point_for_draw ( mode )[ 0 ] - x . point_for_draw ( mode )[ 1 ]) elif mode == \"rt\" : p = min ( self . _data , key = lambda x : - x . point_for_draw ( mode )[ 0 ] + x . point_for_draw ( mode )[ 1 ]) else : # rb p = min ( self . _data , key = lambda x : - x . point_for_draw ( mode )[ 0 ] - x . point_for_draw ( mode )[ 1 ]) p = [ int ( _ ) for _ in p . point_for_draw ( mode )] return p","title":"point_for_draw()"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.Polygon.to_mask","text":"generate mask from polygon. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 116 117 118 119 120 121 122 123 124 125 126 127 128 def to_mask ( self , imsize : List [ int ] = [ 1000 , 1000 ]) -> np . array : \"\"\" generate mask from polygon. \"\"\" mask = np . zeros ( imsize ) . astype ( np . uint8 ) points = [] for p in self . polygons : pts = np . array ( p . points , np . int32 ) pts = pts . reshape (( - 1 , 1 , 2 )) points . append ( pts ) mask = cv2 . fillPoly ( mask , points , 1 ) return mask","title":"to_mask()"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.Polygon.visualize","text":"Draw the current polygon object on an given image. Parameters: Name Type Description Default image The image where the polygon to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current polygon object, such as Label annotation. {} Returns: Type Description The image where the current polygon object has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current polygon object on an given image. Args: image: The image where the polygon to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current polygon object, such as `Label` annotation. Returns: The image where the current polygon object has been drawn on. \"\"\" color = ( 0 , 255 , 0 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] poly = Image . new ( 'RGBA' , image . size [: 2 ]) pdraw = ImageDraw . Draw ( poly ) for polygon_item in self . polygons : pdraw . polygon ( polygon_item . to_tuple (), fill = ( * color , 127 ), outline = ( * color , 255 )) image . paste ( poly , mask = poly ) del pdraw return image","title":"visualize()"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.PolygonItem","text":"Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 class PolygonItem ( BaseGeometry ): def __init__ ( self , points : List [ List [ float ]] ): \"\"\"A Geometry class which abstracts a single polygon item object (which means there is only one closed shape). Args: points: The coordinates of a polygon object, whose format is `[[x1, y1], [x2, y2], ...]` Attributes: _data(list[list[float]]): The coordinates of a polygon object, whose format is `[[x1, y1], [x2, y2], ...]` \"\"\" self . _data = points @property def points ( self ) -> List [ List [ float ]]: \"\"\" Returns: The coordinates of the current polygon item. The format is `[[x1, y1], [x2, y2], ...]`. \"\"\" return self . _data @property def points_x ( self ) -> List [ float ]: \"\"\" Returns: The horizontal axis of all the points which the current polygon item consists of. The format is [x1, x2, x3, ...]. \"\"\" return [ _ [ 0 ] for _ in self . _data ] @property def points_y ( self ) -> List [ float ]: \"\"\" Returns: The vertical axis of all the points which the current polygon item consists of. The format is [y1, y2, y3, ...]. \"\"\" return [ _ [ 1 ] for _ in self . _data ] def point_for_draw ( self , mode : str = \"lt\" ): \"\"\" Get the point's coordinate where a legend is fit to draw. Args: mode: The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. Returns: The coordinate corresponding to the `mode`, whose format is [x, y]. \"\"\" assert mode in ( \"lb\" , \"lt\" , \"rb\" , \"rt\" ) if mode == \"lt\" : p = min ( self . _data , key = lambda x : x [ 0 ] + x [ 1 ]) elif mode == \"lb\" : p = min ( self . _data , key = lambda x : x [ 0 ] - x [ 1 ]) elif mode == \"rt\" : p = min ( self . _data , key = lambda x : - x [ 0 ] + x [ 1 ]) else : # rb p = min ( self . _data , key = lambda x : - x [ 0 ] - x [ 1 ]) p = [ int ( _ ) for _ in p ] return p @property def openmmlabformat ( self ) -> List [ float ]: \"\"\" Returns: All the points of the format [x1, y1, x2, y2, ...]. \"\"\" return self . _flatten () def to_tuple ( self ): \"\"\" Returns: The coordinates of the current polygon item. The format is `((x1, y1), (x2, y2), ...)`. \"\"\" return tuple ([( _ [ 0 ], _ [ 1 ]) for _ in self . _data ]) def _flatten ( self ) -> List [ float ]: return [ _ for point in self . _data for _ in point ] def __repr__ ( self ): return str ( self . _data )","title":"PolygonItem"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.PolygonItem.openmmlabformat","text":"Returns: Type Description List [ float ] All the points of the format [x1, y1, x2, y2, ...].","title":"openmmlabformat"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.PolygonItem.points","text":"Returns: Type Description List [ List [ float ]] The coordinates of the current polygon item. The format is [[x1, y1], [x2, y2], ...] .","title":"points"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.PolygonItem.points_x","text":"Returns: Type Description List [ float ] The horizontal axis of all the points which the current polygon item consists of. The format is [x1, x2, x3, ...].","title":"points_x"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.PolygonItem.points_y","text":"Returns: Type Description List [ float ] The vertical axis of all the points which the current polygon item consists of. The format is [y1, y2, y3, ...].","title":"points_y"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.PolygonItem.__init__","text":"A Geometry class which abstracts a single polygon item object (which means there is only one closed shape). Parameters: Name Type Description Default points List [ List [ float ]] The coordinates of a polygon object, whose format is [[x1, y1], [x2, y2], ...] required Attributes: Name Type Description _data(list[list[float]]) The coordinates of a polygon object, whose format is [[x1, y1], [x2, y2], ...] Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 13 14 15 16 17 18 19 20 21 22 23 24 25 def __init__ ( self , points : List [ List [ float ]] ): \"\"\"A Geometry class which abstracts a single polygon item object (which means there is only one closed shape). Args: points: The coordinates of a polygon object, whose format is `[[x1, y1], [x2, y2], ...]` Attributes: _data(list[list[float]]): The coordinates of a polygon object, whose format is `[[x1, y1], [x2, y2], ...]` \"\"\" self . _data = points","title":"__init__()"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.PolygonItem.point_for_draw","text":"Get the point's coordinate where a legend is fit to draw. Parameters: Name Type Description Default mode str The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. 'lt' Returns: Type Description The coordinate corresponding to the mode , whose format is [x, y]. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 def point_for_draw ( self , mode : str = \"lt\" ): \"\"\" Get the point's coordinate where a legend is fit to draw. Args: mode: The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. Returns: The coordinate corresponding to the `mode`, whose format is [x, y]. \"\"\" assert mode in ( \"lb\" , \"lt\" , \"rb\" , \"rt\" ) if mode == \"lt\" : p = min ( self . _data , key = lambda x : x [ 0 ] + x [ 1 ]) elif mode == \"lb\" : p = min ( self . _data , key = lambda x : x [ 0 ] - x [ 1 ]) elif mode == \"rt\" : p = min ( self . _data , key = lambda x : - x [ 0 ] + x [ 1 ]) else : # rb p = min ( self . _data , key = lambda x : - x [ 0 ] - x [ 1 ]) p = [ int ( _ ) for _ in p ] return p","title":"point_for_draw()"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.PolygonItem.to_tuple","text":"Returns: Type Description The coordinates of the current polygon item. The format is ((x1, y1), (x2, y2), ...) . Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 81 82 83 84 85 86 def to_tuple ( self ): \"\"\" Returns: The coordinates of the current polygon item. The format is `((x1, y1), (x2, y2), ...)`. \"\"\" return tuple ([( _ [ 0 ], _ [ 1 ]) for _ in self . _data ])","title":"to_tuple()"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.RLEPolygon","text":"Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 class RLEPolygon ( BaseGeometry ): def __init__ ( self , rle_data , image_shape ): \"\"\" rle_data: rle list or bytes image_shape: [H, W] \"\"\" self . _rle_data = rle_data self . _image_shape = image_shape @property def rle_data ( self ): return self . _rle_data @property def image_shape ( self ): return self . _image_shape def to_mask ( self ) -> np . array : ''' # ref: https://www.kaggle.com/paulorzp/run-length-encode-and-decode mask_rle: run-length as string formated (start length) shape: (height,width) of array to return Returns numpy array, 1 - mask, 0 - background ''' if mask_util is not None : coco_rle = { 'size' : self . _image_shape , 'counts' : self . _rle_data } return mask_util . decode ([ coco_rle ])[:,:, 0 ] else : shape = self . _image_shape lens = list ( self . _rle_data ) starts = [ sum ( lens [ 0 : i ]) for i in range ( len ( lens ))] img = np . zeros ( shape [ 0 ] * shape [ 1 ], dtype = np . uint8 ) flag = 1 for begin , length in zip ( starts , lens ): flag = 1 - flag if not flag : continue img [ begin : begin + length ] = 1 return img . reshape ( shape ) @property def openmmlabformat ( self ): return { \"counts\" : self . rle_data , \"size\" : self . image_shape } def point_for_draw ( self , mode : str = \"lt\" ) -> [ int , int ]: pass def visualize ( self , image , palette , ** kwargs ): color = ( 0 , 255 , 0 ) mask = self . mask color_seg = np . array (( mask . shape [ 0 ], mask . shape [ 1 ], 3 ), dtype = np . uint8 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] color_seg [ mask == 1 , :] = np . array ( color ) overlay = Image . fromarray ( color_seg ) . convert ( \"RGBA\" ) overlayed = Image . blend ( image , overlay , 0.5 ) return overlayed","title":"RLEPolygon"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.RLEPolygon.__init__","text":"rle_data: rle list or bytes image_shape: [H, W] Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 192 193 194 195 196 197 198 def __init__ ( self , rle_data , image_shape ): \"\"\" rle_data: rle list or bytes image_shape: [H, W] \"\"\" self . _rle_data = rle_data self . _image_shape = image_shape","title":"__init__()"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.RLEPolygon.to_mask","text":"","title":"to_mask()"},{"location":"api_reference/dsdl_geometry/polygon/#dsdl.geometry.polygon.RLEPolygon.to_mask--ref-httpswwwkagglecompaulorzprun-length-encode-and-decode","text":"mask_rle: run-length as string formated (start length) shape: (height,width) of array to return Returns numpy array, 1 - mask, 0 - background Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\polygon.py 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 def to_mask ( self ) -> np . array : ''' # ref: https://www.kaggle.com/paulorzp/run-length-encode-and-decode mask_rle: run-length as string formated (start length) shape: (height,width) of array to return Returns numpy array, 1 - mask, 0 - background ''' if mask_util is not None : coco_rle = { 'size' : self . _image_shape , 'counts' : self . _rle_data } return mask_util . decode ([ coco_rle ])[:,:, 0 ] else : shape = self . _image_shape lens = list ( self . _rle_data ) starts = [ sum ( lens [ 0 : i ]) for i in range ( len ( lens ))] img = np . zeros ( shape [ 0 ] * shape [ 1 ], dtype = np . uint8 ) flag = 1 for begin , length in zip ( starts , lens ): flag = 1 - flag if not flag : continue img [ begin : begin + length ] = 1 return img . reshape ( shape )","title":"ref: https://www.kaggle.com/paulorzp/run-length-encode-and-decode"},{"location":"api_reference/dsdl_geometry/registry/","text":"LabelRegistry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 class LabelRegistry : def __init__ ( self ): \"\"\"A collection to register given `dsdl.geometry.Label` objects. \"\"\" self . _labels = {} def registry ( self , label ): \"\"\"Register a given `Label` objects into the current `Registry` object. Args: label(dsdl.geometry.Label): The `Label` object to be registered. \"\"\" registry_name = label . registry_name if registry_name in self . _labels : # raise ClassHasDefinedError(f\"The label {label.registry_name} has been registered.\") ClassHasDefinedWarning ( f \"The label { label . registry_name } has been registered, it will be replaced bt this updated one.\" ) self . _labels [ registry_name ] = label def get ( self , registry_name ): \"\"\"Get the `Label` object when given the registry name. Args: name: The registry name to be queried. Returns: (dsdl.geometry.Label): The `Label` object coresponding the given registry name. \"\"\" if registry_name not in self . _labels : raise ClassNotFoundError return self . _labels [ registry_name ] def __contains__ ( self , item ): \"\"\"Whether the current `Registry` object contains a given object. Args: item(str or dsdl.geometry.Label): The object or the registry name to be quried. Returns: Whether the current `Registry` object contains a given object. \"\"\" if isinstance ( item , str ): return item in self . _labels elif hasattr ( item , \"registry_name\" ): return item . registry_name in self . _labels else : return False def clear ( self ): \"\"\"Clear all the registered objects in the current `Registry` object. \"\"\" self . _labels = {} __contains__ ( item ) Whether the current Registry object contains a given object. Parameters: Name Type Description Default item(str or dsdl.geometry.Label The object or the registry name to be quried. required Returns: Type Description Whether the current Registry object contains a given object. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def __contains__ ( self , item ): \"\"\"Whether the current `Registry` object contains a given object. Args: item(str or dsdl.geometry.Label): The object or the registry name to be quried. Returns: Whether the current `Registry` object contains a given object. \"\"\" if isinstance ( item , str ): return item in self . _labels elif hasattr ( item , \"registry_name\" ): return item . registry_name in self . _labels else : return False __init__ () A collection to register given dsdl.geometry.Label objects. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 74 75 76 77 def __init__ ( self ): \"\"\"A collection to register given `dsdl.geometry.Label` objects. \"\"\" self . _labels = {} clear () Clear all the registered objects in the current Registry object. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 120 121 122 123 def clear ( self ): \"\"\"Clear all the registered objects in the current `Registry` object. \"\"\" self . _labels = {} get ( registry_name ) Get the Label object when given the registry name. Parameters: Name Type Description Default name The registry name to be queried. required Returns: Type Description dsdl . geometry . Label The Label object coresponding the given registry name. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 91 92 93 94 95 96 97 98 99 100 101 102 def get ( self , registry_name ): \"\"\"Get the `Label` object when given the registry name. Args: name: The registry name to be queried. Returns: (dsdl.geometry.Label): The `Label` object coresponding the given registry name. \"\"\" if registry_name not in self . _labels : raise ClassNotFoundError return self . _labels [ registry_name ] registry ( label ) Register a given Label objects into the current Registry object. Parameters: Name Type Description Default label(dsdl.geometry.Label) The Label object to be registered. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 79 80 81 82 83 84 85 86 87 88 89 def registry ( self , label ): \"\"\"Register a given `Label` objects into the current `Registry` object. Args: label(dsdl.geometry.Label): The `Label` object to be registered. \"\"\" registry_name = label . registry_name if registry_name in self . _labels : # raise ClassHasDefinedError(f\"The label {label.registry_name} has been registered.\") ClassHasDefinedWarning ( f \"The label { label . registry_name } has been registered, it will be replaced bt this updated one.\" ) self . _labels [ registry_name ] = label Registry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 class Registry : def __init__ ( self , name ): \"\"\"A collection to register given `dsdl.types.Struct` classes or `dsdl.geometry.ClassDomain` classes. Args: name: The name of the current `Registry` object. \"\"\" self . _name = name self . _map = dict () self . _names_contained = [] @property def name ( self ): \"\"\" Returns: The name of the current `Registry` object. \"\"\" return self . _name def register ( self , name , cls ): \"\"\"Register a given `Struct` or `ClassDomain` class into the current `Registry` object. Args: name(str): The registry name of the given `Struct` class. cls(dsdl.types.Struct or dsdl.geometry.ClassDomain): The `Struct` class to be registered. \"\"\" # NOTICE: Since this method is called when models are imported, # it cannot perform imports because of the risk of import loops. if name in self . _map : # raise ClassHasDefinedError ClassHasDefinedWarning ( f \"Class ' { name } ' has been registered, it will be replaced by this updated one.\" ) else : self . _names_contained . append ( name ) self . _map [ name ] = cls def get ( self , name ): \"\"\"Get the `Struct` class when given the registry name. Args: name: The registry name to be queried. Returns: (dsdl.types.Struct or dsdl.geometry.ClassDomain): The `Struct` class coresponding the given registry name. \"\"\" if name not in self . _map : raise ClassNotFoundError ( f \"Class ' { name } ' is not defined.\" ) return self . _map [ name ] def clear ( self ): \"\"\"Clear all the registered classes in the current `Registry` object. \"\"\" self . _map = {} def names_contained ( self ): \"\"\"Return all the registered classes' names in the current `Registry` object. \"\"\" return self . _names_contained def __contains__ ( self , name ): return name in self . _names_contained name property Returns: Type Description The name of the current Registry object. __init__ ( name ) A collection to register given dsdl.types.Struct classes or dsdl.geometry.ClassDomain classes. Parameters: Name Type Description Default name The name of the current Registry object. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 6 7 8 9 10 11 12 13 14 def __init__ ( self , name ): \"\"\"A collection to register given `dsdl.types.Struct` classes or `dsdl.geometry.ClassDomain` classes. Args: name: The name of the current `Registry` object. \"\"\" self . _name = name self . _map = dict () self . _names_contained = [] clear () Clear all the registered classes in the current Registry object. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 52 53 54 55 def clear ( self ): \"\"\"Clear all the registered classes in the current `Registry` object. \"\"\" self . _map = {} get ( name ) Get the Struct class when given the registry name. Parameters: Name Type Description Default name The registry name to be queried. required Returns: Type Description dsdl.types.Struct or dsdl.geometry.ClassDomain The Struct class coresponding the given registry name. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 39 40 41 42 43 44 45 46 47 48 49 50 def get ( self , name ): \"\"\"Get the `Struct` class when given the registry name. Args: name: The registry name to be queried. Returns: (dsdl.types.Struct or dsdl.geometry.ClassDomain): The `Struct` class coresponding the given registry name. \"\"\" if name not in self . _map : raise ClassNotFoundError ( f \"Class ' { name } ' is not defined.\" ) return self . _map [ name ] names_contained () Return all the registered classes' names in the current Registry object. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 57 58 59 60 def names_contained ( self ): \"\"\"Return all the registered classes' names in the current `Registry` object. \"\"\" return self . _names_contained register ( name , cls ) Register a given Struct or ClassDomain class into the current Registry object. Parameters: Name Type Description Default name(str) The registry name of the given Struct class. required cls(dsdl.types.Struct or dsdl.geometry.ClassDomain The Struct class to be registered. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def register ( self , name , cls ): \"\"\"Register a given `Struct` or `ClassDomain` class into the current `Registry` object. Args: name(str): The registry name of the given `Struct` class. cls(dsdl.types.Struct or dsdl.geometry.ClassDomain): The `Struct` class to be registered. \"\"\" # NOTICE: Since this method is called when models are imported, # it cannot perform imports because of the risk of import loops. if name in self . _map : # raise ClassHasDefinedError ClassHasDefinedWarning ( f \"Class ' { name } ' has been registered, it will be replaced by this updated one.\" ) else : self . _names_contained . append ( name ) self . _map [ name ] = cls","title":"dsdl.geometry.registry"},{"location":"api_reference/dsdl_geometry/registry/#dsdl.geometry.registry.LabelRegistry","text":"Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 class LabelRegistry : def __init__ ( self ): \"\"\"A collection to register given `dsdl.geometry.Label` objects. \"\"\" self . _labels = {} def registry ( self , label ): \"\"\"Register a given `Label` objects into the current `Registry` object. Args: label(dsdl.geometry.Label): The `Label` object to be registered. \"\"\" registry_name = label . registry_name if registry_name in self . _labels : # raise ClassHasDefinedError(f\"The label {label.registry_name} has been registered.\") ClassHasDefinedWarning ( f \"The label { label . registry_name } has been registered, it will be replaced bt this updated one.\" ) self . _labels [ registry_name ] = label def get ( self , registry_name ): \"\"\"Get the `Label` object when given the registry name. Args: name: The registry name to be queried. Returns: (dsdl.geometry.Label): The `Label` object coresponding the given registry name. \"\"\" if registry_name not in self . _labels : raise ClassNotFoundError return self . _labels [ registry_name ] def __contains__ ( self , item ): \"\"\"Whether the current `Registry` object contains a given object. Args: item(str or dsdl.geometry.Label): The object or the registry name to be quried. Returns: Whether the current `Registry` object contains a given object. \"\"\" if isinstance ( item , str ): return item in self . _labels elif hasattr ( item , \"registry_name\" ): return item . registry_name in self . _labels else : return False def clear ( self ): \"\"\"Clear all the registered objects in the current `Registry` object. \"\"\" self . _labels = {}","title":"LabelRegistry"},{"location":"api_reference/dsdl_geometry/registry/#dsdl.geometry.registry.LabelRegistry.__contains__","text":"Whether the current Registry object contains a given object. Parameters: Name Type Description Default item(str or dsdl.geometry.Label The object or the registry name to be quried. required Returns: Type Description Whether the current Registry object contains a given object. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def __contains__ ( self , item ): \"\"\"Whether the current `Registry` object contains a given object. Args: item(str or dsdl.geometry.Label): The object or the registry name to be quried. Returns: Whether the current `Registry` object contains a given object. \"\"\" if isinstance ( item , str ): return item in self . _labels elif hasattr ( item , \"registry_name\" ): return item . registry_name in self . _labels else : return False","title":"__contains__()"},{"location":"api_reference/dsdl_geometry/registry/#dsdl.geometry.registry.LabelRegistry.__init__","text":"A collection to register given dsdl.geometry.Label objects. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 74 75 76 77 def __init__ ( self ): \"\"\"A collection to register given `dsdl.geometry.Label` objects. \"\"\" self . _labels = {}","title":"__init__()"},{"location":"api_reference/dsdl_geometry/registry/#dsdl.geometry.registry.LabelRegistry.clear","text":"Clear all the registered objects in the current Registry object. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 120 121 122 123 def clear ( self ): \"\"\"Clear all the registered objects in the current `Registry` object. \"\"\" self . _labels = {}","title":"clear()"},{"location":"api_reference/dsdl_geometry/registry/#dsdl.geometry.registry.LabelRegistry.get","text":"Get the Label object when given the registry name. Parameters: Name Type Description Default name The registry name to be queried. required Returns: Type Description dsdl . geometry . Label The Label object coresponding the given registry name. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 91 92 93 94 95 96 97 98 99 100 101 102 def get ( self , registry_name ): \"\"\"Get the `Label` object when given the registry name. Args: name: The registry name to be queried. Returns: (dsdl.geometry.Label): The `Label` object coresponding the given registry name. \"\"\" if registry_name not in self . _labels : raise ClassNotFoundError return self . _labels [ registry_name ]","title":"get()"},{"location":"api_reference/dsdl_geometry/registry/#dsdl.geometry.registry.LabelRegistry.registry","text":"Register a given Label objects into the current Registry object. Parameters: Name Type Description Default label(dsdl.geometry.Label) The Label object to be registered. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 79 80 81 82 83 84 85 86 87 88 89 def registry ( self , label ): \"\"\"Register a given `Label` objects into the current `Registry` object. Args: label(dsdl.geometry.Label): The `Label` object to be registered. \"\"\" registry_name = label . registry_name if registry_name in self . _labels : # raise ClassHasDefinedError(f\"The label {label.registry_name} has been registered.\") ClassHasDefinedWarning ( f \"The label { label . registry_name } has been registered, it will be replaced bt this updated one.\" ) self . _labels [ registry_name ] = label","title":"registry()"},{"location":"api_reference/dsdl_geometry/registry/#dsdl.geometry.registry.Registry","text":"Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 class Registry : def __init__ ( self , name ): \"\"\"A collection to register given `dsdl.types.Struct` classes or `dsdl.geometry.ClassDomain` classes. Args: name: The name of the current `Registry` object. \"\"\" self . _name = name self . _map = dict () self . _names_contained = [] @property def name ( self ): \"\"\" Returns: The name of the current `Registry` object. \"\"\" return self . _name def register ( self , name , cls ): \"\"\"Register a given `Struct` or `ClassDomain` class into the current `Registry` object. Args: name(str): The registry name of the given `Struct` class. cls(dsdl.types.Struct or dsdl.geometry.ClassDomain): The `Struct` class to be registered. \"\"\" # NOTICE: Since this method is called when models are imported, # it cannot perform imports because of the risk of import loops. if name in self . _map : # raise ClassHasDefinedError ClassHasDefinedWarning ( f \"Class ' { name } ' has been registered, it will be replaced by this updated one.\" ) else : self . _names_contained . append ( name ) self . _map [ name ] = cls def get ( self , name ): \"\"\"Get the `Struct` class when given the registry name. Args: name: The registry name to be queried. Returns: (dsdl.types.Struct or dsdl.geometry.ClassDomain): The `Struct` class coresponding the given registry name. \"\"\" if name not in self . _map : raise ClassNotFoundError ( f \"Class ' { name } ' is not defined.\" ) return self . _map [ name ] def clear ( self ): \"\"\"Clear all the registered classes in the current `Registry` object. \"\"\" self . _map = {} def names_contained ( self ): \"\"\"Return all the registered classes' names in the current `Registry` object. \"\"\" return self . _names_contained def __contains__ ( self , name ): return name in self . _names_contained","title":"Registry"},{"location":"api_reference/dsdl_geometry/registry/#dsdl.geometry.registry.Registry.name","text":"Returns: Type Description The name of the current Registry object.","title":"name"},{"location":"api_reference/dsdl_geometry/registry/#dsdl.geometry.registry.Registry.__init__","text":"A collection to register given dsdl.types.Struct classes or dsdl.geometry.ClassDomain classes. Parameters: Name Type Description Default name The name of the current Registry object. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 6 7 8 9 10 11 12 13 14 def __init__ ( self , name ): \"\"\"A collection to register given `dsdl.types.Struct` classes or `dsdl.geometry.ClassDomain` classes. Args: name: The name of the current `Registry` object. \"\"\" self . _name = name self . _map = dict () self . _names_contained = []","title":"__init__()"},{"location":"api_reference/dsdl_geometry/registry/#dsdl.geometry.registry.Registry.clear","text":"Clear all the registered classes in the current Registry object. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 52 53 54 55 def clear ( self ): \"\"\"Clear all the registered classes in the current `Registry` object. \"\"\" self . _map = {}","title":"clear()"},{"location":"api_reference/dsdl_geometry/registry/#dsdl.geometry.registry.Registry.get","text":"Get the Struct class when given the registry name. Parameters: Name Type Description Default name The registry name to be queried. required Returns: Type Description dsdl.types.Struct or dsdl.geometry.ClassDomain The Struct class coresponding the given registry name. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 39 40 41 42 43 44 45 46 47 48 49 50 def get ( self , name ): \"\"\"Get the `Struct` class when given the registry name. Args: name: The registry name to be queried. Returns: (dsdl.types.Struct or dsdl.geometry.ClassDomain): The `Struct` class coresponding the given registry name. \"\"\" if name not in self . _map : raise ClassNotFoundError ( f \"Class ' { name } ' is not defined.\" ) return self . _map [ name ]","title":"get()"},{"location":"api_reference/dsdl_geometry/registry/#dsdl.geometry.registry.Registry.names_contained","text":"Return all the registered classes' names in the current Registry object. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 57 58 59 60 def names_contained ( self ): \"\"\"Return all the registered classes' names in the current `Registry` object. \"\"\" return self . _names_contained","title":"names_contained()"},{"location":"api_reference/dsdl_geometry/registry/#dsdl.geometry.registry.Registry.register","text":"Register a given Struct or ClassDomain class into the current Registry object. Parameters: Name Type Description Default name(str) The registry name of the given Struct class. required cls(dsdl.types.Struct or dsdl.geometry.ClassDomain The Struct class to be registered. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\registry.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def register ( self , name , cls ): \"\"\"Register a given `Struct` or `ClassDomain` class into the current `Registry` object. Args: name(str): The registry name of the given `Struct` class. cls(dsdl.types.Struct or dsdl.geometry.ClassDomain): The `Struct` class to be registered. \"\"\" # NOTICE: Since this method is called when models are imported, # it cannot perform imports because of the risk of import loops. if name in self . _map : # raise ClassHasDefinedError ClassHasDefinedWarning ( f \"Class ' { name } ' has been registered, it will be replaced by this updated one.\" ) else : self . _names_contained . append ( name ) self . _map [ name ] = cls","title":"register()"},{"location":"api_reference/dsdl_geometry/rotate_box/","text":"RBBox Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\rotate_box.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 class RBBox ( BaseGeometry ): def __init__ ( self , value , mode = \"xywht\" , measure = \"radian\" ): \"\"\"A Geometry class which abstracts a rotated bounding box object. Args: value: The value of the current rotated bounding box. When the `mode` is `\"xywht\"`, the format is [x, y, w, h, t], which are the bounding box's center point horizontal axis, the bounding box's center point vertical axis, the bounding box's width the bounxing box's height, and the bounding box's rotate angle (in radians). Whe the `mode` is `\"xyxy\"`, the format is `[[x1, y1], [x2, y2], [x3, y3], [x4, y4]]`, which represents the coordinates of the bounding box's four vertices. mode: The mode of the given `value`. Only `\"xywht\"` and `\"xyxy\"` are permitted. \"\"\" assert mode in ( \"xywht\" , \"xyxy\" ) and measure in ( \"radian\" , \"degree\" ) if mode == \"xywht\" : self . _polygon = None if measure == \"degree\" : value = value . copy () value [ - 1 ] = value [ - 1 ] / 180 * math . pi self . _rbbox = value else : self . _polygon = [ value [ i : i + 2 ] for i in ( 0 , 2 , 4 , 6 )] self . _rbbox = None @staticmethod def rbbox2polygon ( value ): \"\"\"Convert the `xywht` mode bounding box into `xyxy` mode. Args: value: The `xywht` mode bounding box's value. Returns: The coresponding `xyxy` mode bounding box's value. \"\"\" x , y , width , height , angle = value cosA , sinA = math . cos ( angle ), math . sin ( angle ) def _rotate ( p_ ): # clockwise x_ , y_ = p_ x_r = ( x_ - x ) * cosA - ( y_ - y ) * sinA + x y_r = ( x_ - x ) * sinA + ( y_ - y ) * cosA + y return [ x_r , y_r ] x_l , x_r , y_t , y_b = x - width / 2 , x + width / 2 , y - height / 2 , y + height / 2 p_lt , p_lb , p_rt , p_rb = [ x_l , y_t ], [ x_l , y_b ], [ x_r , y_t ], [ x_r , y_b ] return [ _rotate ( p_lt ), _rotate ( p_lb ), _rotate ( p_rb ), _rotate ( p_rt )] def point_for_draw ( self , mode : str = \"lt\" ): \"\"\" Get the point's coordinate where a legend is fit to draw. Args: mode: The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. Returns: The coordinate corresponding to the `mode`, whose format is [x, y]. \"\"\" assert mode in ( \"lb\" , \"lt\" , \"rb\" , \"rt\" ) if mode == \"lt\" : p = min ( self . polygon_value , key = lambda x : x [ 0 ] + x [ 1 ]) elif mode == \"lb\" : p = min ( self . polygon_value , key = lambda x : x [ 0 ] - x [ 1 ]) elif mode == \"rt\" : p = min ( self . polygon_value , key = lambda x : - x [ 0 ] + x [ 1 ]) else : # rb p = min ( self . polygon_value , key = lambda x : - x [ 0 ] - x [ 1 ]) p = [ int ( _ ) for _ in p ] return p @staticmethod def polygon2rbbox ( value ): \"\"\"Converted the `xyxy` mode bounding box into `xywht` mode. Args: value: The `xyxy` mode bounding box's value. Returns: The coresponding `xywht` mode bounding box's value. \"\"\" res = cv2 . minAreaRect ( np . array ( value ) . astype ( np . int32 )) x , y = res [ 0 ] width , height = res [ 1 ] # width is \"first edge\" angle = res [ 2 ] if width < height : width , height = height , width angle = angle + 90 angle = 1 - angle / 180 * math . pi return [ x , y , width , height , angle ] @property def polygon_value ( self ): \"\"\"Get the `xyxy` mode bounding box's value. Returns: The `xyxy` mode bounding box's value. \"\"\" if self . _polygon is None : self . _polygon = self . rbbox2polygon ( self . _rbbox ) return self . _polygon @property def rbbox_value ( self ): \"\"\"Get the `xywht` mode bounding box's value. Returns: The `xywht` mode bounding box's value. \"\"\" if self . _rbbox is None : self . _rbbox = self . polygon2rbbox ( self . _polygon ) return self . _rbbox def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current rotated bounding box on an given image. Args: image: The image where the rotated bounding box to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current bounding box, such as `Label` annotation. Returns: The image where the current rotated bounding box has been drawn on. \"\"\" color = ( 0 , 255 , 0 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] poly = Image . new ( 'RGBA' , image . size [: 2 ]) pdraw = ImageDraw . Draw ( poly ) pdraw . polygon ([ tuple ( _ ) for _ in self . polygon_value ], fill = ( * color , 127 ), outline = ( * color , 255 )) image . paste ( poly , mask = poly ) del pdraw return image def __repr__ ( self ): x , y , w , h , angle = self . rbbox_value x , y , w , h , angle = int ( x ), int ( y ), int ( w ), int ( h ), int ( angle / math . pi * 180 ) return f \"[ { x } , { y } , { w } , { h } , { angle } \u00b0]\" polygon_value property Get the xyxy mode bounding box's value. Returns: Type Description The xyxy mode bounding box's value. rbbox_value property Get the xywht mode bounding box's value. Returns: Type Description The xywht mode bounding box's value. __init__ ( value , mode = 'xywht' , measure = 'radian' ) A Geometry class which abstracts a rotated bounding box object. Parameters: Name Type Description Default value The value of the current rotated bounding box. When the mode is \"xywht\" , the format is [x, y, w, h, t], which are the bounding box's center point horizontal axis, the bounding box's center point vertical axis, the bounding box's width the bounxing box's height, and the bounding box's rotate angle (in radians). Whe the mode is \"xyxy\" , the format is [[x1, y1], [x2, y2], [x3, y3], [x4, y4]] , which represents the coordinates of the bounding box's four vertices. required mode The mode of the given value . Only \"xywht\" and \"xyxy\" are permitted. 'xywht' Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\rotate_box.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def __init__ ( self , value , mode = \"xywht\" , measure = \"radian\" ): \"\"\"A Geometry class which abstracts a rotated bounding box object. Args: value: The value of the current rotated bounding box. When the `mode` is `\"xywht\"`, the format is [x, y, w, h, t], which are the bounding box's center point horizontal axis, the bounding box's center point vertical axis, the bounding box's width the bounxing box's height, and the bounding box's rotate angle (in radians). Whe the `mode` is `\"xyxy\"`, the format is `[[x1, y1], [x2, y2], [x3, y3], [x4, y4]]`, which represents the coordinates of the bounding box's four vertices. mode: The mode of the given `value`. Only `\"xywht\"` and `\"xyxy\"` are permitted. \"\"\" assert mode in ( \"xywht\" , \"xyxy\" ) and measure in ( \"radian\" , \"degree\" ) if mode == \"xywht\" : self . _polygon = None if measure == \"degree\" : value = value . copy () value [ - 1 ] = value [ - 1 ] / 180 * math . pi self . _rbbox = value else : self . _polygon = [ value [ i : i + 2 ] for i in ( 0 , 2 , 4 , 6 )] self . _rbbox = None point_for_draw ( mode = 'lt' ) Get the point's coordinate where a legend is fit to draw. Parameters: Name Type Description Default mode str The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. 'lt' Returns: Type Description The coordinate corresponding to the mode , whose format is [x, y]. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\rotate_box.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def point_for_draw ( self , mode : str = \"lt\" ): \"\"\" Get the point's coordinate where a legend is fit to draw. Args: mode: The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. Returns: The coordinate corresponding to the `mode`, whose format is [x, y]. \"\"\" assert mode in ( \"lb\" , \"lt\" , \"rb\" , \"rt\" ) if mode == \"lt\" : p = min ( self . polygon_value , key = lambda x : x [ 0 ] + x [ 1 ]) elif mode == \"lb\" : p = min ( self . polygon_value , key = lambda x : x [ 0 ] - x [ 1 ]) elif mode == \"rt\" : p = min ( self . polygon_value , key = lambda x : - x [ 0 ] + x [ 1 ]) else : # rb p = min ( self . polygon_value , key = lambda x : - x [ 0 ] - x [ 1 ]) p = [ int ( _ ) for _ in p ] return p polygon2rbbox ( value ) staticmethod Converted the xyxy mode bounding box into xywht mode. Parameters: Name Type Description Default value The xyxy mode bounding box's value. required Returns: Type Description The coresponding xywht mode bounding box's value. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\rotate_box.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @staticmethod def polygon2rbbox ( value ): \"\"\"Converted the `xyxy` mode bounding box into `xywht` mode. Args: value: The `xyxy` mode bounding box's value. Returns: The coresponding `xywht` mode bounding box's value. \"\"\" res = cv2 . minAreaRect ( np . array ( value ) . astype ( np . int32 )) x , y = res [ 0 ] width , height = res [ 1 ] # width is \"first edge\" angle = res [ 2 ] if width < height : width , height = height , width angle = angle + 90 angle = 1 - angle / 180 * math . pi return [ x , y , width , height , angle ] rbbox2polygon ( value ) staticmethod Convert the xywht mode bounding box into xyxy mode. Parameters: Name Type Description Default value The xywht mode bounding box's value. required Returns: Type Description The coresponding xyxy mode bounding box's value. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\rotate_box.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 @staticmethod def rbbox2polygon ( value ): \"\"\"Convert the `xywht` mode bounding box into `xyxy` mode. Args: value: The `xywht` mode bounding box's value. Returns: The coresponding `xyxy` mode bounding box's value. \"\"\" x , y , width , height , angle = value cosA , sinA = math . cos ( angle ), math . sin ( angle ) def _rotate ( p_ ): # clockwise x_ , y_ = p_ x_r = ( x_ - x ) * cosA - ( y_ - y ) * sinA + x y_r = ( x_ - x ) * sinA + ( y_ - y ) * cosA + y return [ x_r , y_r ] x_l , x_r , y_t , y_b = x - width / 2 , x + width / 2 , y - height / 2 , y + height / 2 p_lt , p_lb , p_rt , p_rb = [ x_l , y_t ], [ x_l , y_b ], [ x_r , y_t ], [ x_r , y_b ] return [ _rotate ( p_lt ), _rotate ( p_lb ), _rotate ( p_rb ), _rotate ( p_rt )] visualize ( image , palette , ** kwargs ) Draw the current rotated bounding box on an given image. Parameters: Name Type Description Default image The image where the rotated bounding box to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current bounding box, such as Label annotation. {} Returns: Type Description The image where the current rotated bounding box has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\rotate_box.py 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current rotated bounding box on an given image. Args: image: The image where the rotated bounding box to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current bounding box, such as `Label` annotation. Returns: The image where the current rotated bounding box has been drawn on. \"\"\" color = ( 0 , 255 , 0 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] poly = Image . new ( 'RGBA' , image . size [: 2 ]) pdraw = ImageDraw . Draw ( poly ) pdraw . polygon ([ tuple ( _ ) for _ in self . polygon_value ], fill = ( * color , 127 ), outline = ( * color , 255 )) image . paste ( poly , mask = poly ) del pdraw return image","title":"dsdl.geometry.rotate_box"},{"location":"api_reference/dsdl_geometry/rotate_box/#dsdl.geometry.rotate_box.RBBox","text":"Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\rotate_box.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 class RBBox ( BaseGeometry ): def __init__ ( self , value , mode = \"xywht\" , measure = \"radian\" ): \"\"\"A Geometry class which abstracts a rotated bounding box object. Args: value: The value of the current rotated bounding box. When the `mode` is `\"xywht\"`, the format is [x, y, w, h, t], which are the bounding box's center point horizontal axis, the bounding box's center point vertical axis, the bounding box's width the bounxing box's height, and the bounding box's rotate angle (in radians). Whe the `mode` is `\"xyxy\"`, the format is `[[x1, y1], [x2, y2], [x3, y3], [x4, y4]]`, which represents the coordinates of the bounding box's four vertices. mode: The mode of the given `value`. Only `\"xywht\"` and `\"xyxy\"` are permitted. \"\"\" assert mode in ( \"xywht\" , \"xyxy\" ) and measure in ( \"radian\" , \"degree\" ) if mode == \"xywht\" : self . _polygon = None if measure == \"degree\" : value = value . copy () value [ - 1 ] = value [ - 1 ] / 180 * math . pi self . _rbbox = value else : self . _polygon = [ value [ i : i + 2 ] for i in ( 0 , 2 , 4 , 6 )] self . _rbbox = None @staticmethod def rbbox2polygon ( value ): \"\"\"Convert the `xywht` mode bounding box into `xyxy` mode. Args: value: The `xywht` mode bounding box's value. Returns: The coresponding `xyxy` mode bounding box's value. \"\"\" x , y , width , height , angle = value cosA , sinA = math . cos ( angle ), math . sin ( angle ) def _rotate ( p_ ): # clockwise x_ , y_ = p_ x_r = ( x_ - x ) * cosA - ( y_ - y ) * sinA + x y_r = ( x_ - x ) * sinA + ( y_ - y ) * cosA + y return [ x_r , y_r ] x_l , x_r , y_t , y_b = x - width / 2 , x + width / 2 , y - height / 2 , y + height / 2 p_lt , p_lb , p_rt , p_rb = [ x_l , y_t ], [ x_l , y_b ], [ x_r , y_t ], [ x_r , y_b ] return [ _rotate ( p_lt ), _rotate ( p_lb ), _rotate ( p_rb ), _rotate ( p_rt )] def point_for_draw ( self , mode : str = \"lt\" ): \"\"\" Get the point's coordinate where a legend is fit to draw. Args: mode: The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. Returns: The coordinate corresponding to the `mode`, whose format is [x, y]. \"\"\" assert mode in ( \"lb\" , \"lt\" , \"rb\" , \"rt\" ) if mode == \"lt\" : p = min ( self . polygon_value , key = lambda x : x [ 0 ] + x [ 1 ]) elif mode == \"lb\" : p = min ( self . polygon_value , key = lambda x : x [ 0 ] - x [ 1 ]) elif mode == \"rt\" : p = min ( self . polygon_value , key = lambda x : - x [ 0 ] + x [ 1 ]) else : # rb p = min ( self . polygon_value , key = lambda x : - x [ 0 ] - x [ 1 ]) p = [ int ( _ ) for _ in p ] return p @staticmethod def polygon2rbbox ( value ): \"\"\"Converted the `xyxy` mode bounding box into `xywht` mode. Args: value: The `xyxy` mode bounding box's value. Returns: The coresponding `xywht` mode bounding box's value. \"\"\" res = cv2 . minAreaRect ( np . array ( value ) . astype ( np . int32 )) x , y = res [ 0 ] width , height = res [ 1 ] # width is \"first edge\" angle = res [ 2 ] if width < height : width , height = height , width angle = angle + 90 angle = 1 - angle / 180 * math . pi return [ x , y , width , height , angle ] @property def polygon_value ( self ): \"\"\"Get the `xyxy` mode bounding box's value. Returns: The `xyxy` mode bounding box's value. \"\"\" if self . _polygon is None : self . _polygon = self . rbbox2polygon ( self . _rbbox ) return self . _polygon @property def rbbox_value ( self ): \"\"\"Get the `xywht` mode bounding box's value. Returns: The `xywht` mode bounding box's value. \"\"\" if self . _rbbox is None : self . _rbbox = self . polygon2rbbox ( self . _polygon ) return self . _rbbox def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current rotated bounding box on an given image. Args: image: The image where the rotated bounding box to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current bounding box, such as `Label` annotation. Returns: The image where the current rotated bounding box has been drawn on. \"\"\" color = ( 0 , 255 , 0 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] poly = Image . new ( 'RGBA' , image . size [: 2 ]) pdraw = ImageDraw . Draw ( poly ) pdraw . polygon ([ tuple ( _ ) for _ in self . polygon_value ], fill = ( * color , 127 ), outline = ( * color , 255 )) image . paste ( poly , mask = poly ) del pdraw return image def __repr__ ( self ): x , y , w , h , angle = self . rbbox_value x , y , w , h , angle = int ( x ), int ( y ), int ( w ), int ( h ), int ( angle / math . pi * 180 ) return f \"[ { x } , { y } , { w } , { h } , { angle } \u00b0]\"","title":"RBBox"},{"location":"api_reference/dsdl_geometry/rotate_box/#dsdl.geometry.rotate_box.RBBox.polygon_value","text":"Get the xyxy mode bounding box's value. Returns: Type Description The xyxy mode bounding box's value.","title":"polygon_value"},{"location":"api_reference/dsdl_geometry/rotate_box/#dsdl.geometry.rotate_box.RBBox.rbbox_value","text":"Get the xywht mode bounding box's value. Returns: Type Description The xywht mode bounding box's value.","title":"rbbox_value"},{"location":"api_reference/dsdl_geometry/rotate_box/#dsdl.geometry.rotate_box.RBBox.__init__","text":"A Geometry class which abstracts a rotated bounding box object. Parameters: Name Type Description Default value The value of the current rotated bounding box. When the mode is \"xywht\" , the format is [x, y, w, h, t], which are the bounding box's center point horizontal axis, the bounding box's center point vertical axis, the bounding box's width the bounxing box's height, and the bounding box's rotate angle (in radians). Whe the mode is \"xyxy\" , the format is [[x1, y1], [x2, y2], [x3, y3], [x4, y4]] , which represents the coordinates of the bounding box's four vertices. required mode The mode of the given value . Only \"xywht\" and \"xyxy\" are permitted. 'xywht' Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\rotate_box.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def __init__ ( self , value , mode = \"xywht\" , measure = \"radian\" ): \"\"\"A Geometry class which abstracts a rotated bounding box object. Args: value: The value of the current rotated bounding box. When the `mode` is `\"xywht\"`, the format is [x, y, w, h, t], which are the bounding box's center point horizontal axis, the bounding box's center point vertical axis, the bounding box's width the bounxing box's height, and the bounding box's rotate angle (in radians). Whe the `mode` is `\"xyxy\"`, the format is `[[x1, y1], [x2, y2], [x3, y3], [x4, y4]]`, which represents the coordinates of the bounding box's four vertices. mode: The mode of the given `value`. Only `\"xywht\"` and `\"xyxy\"` are permitted. \"\"\" assert mode in ( \"xywht\" , \"xyxy\" ) and measure in ( \"radian\" , \"degree\" ) if mode == \"xywht\" : self . _polygon = None if measure == \"degree\" : value = value . copy () value [ - 1 ] = value [ - 1 ] / 180 * math . pi self . _rbbox = value else : self . _polygon = [ value [ i : i + 2 ] for i in ( 0 , 2 , 4 , 6 )] self . _rbbox = None","title":"__init__()"},{"location":"api_reference/dsdl_geometry/rotate_box/#dsdl.geometry.rotate_box.RBBox.point_for_draw","text":"Get the point's coordinate where a legend is fit to draw. Parameters: Name Type Description Default mode str The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. 'lt' Returns: Type Description The coordinate corresponding to the mode , whose format is [x, y]. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\rotate_box.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def point_for_draw ( self , mode : str = \"lt\" ): \"\"\" Get the point's coordinate where a legend is fit to draw. Args: mode: The position model. Only \"lb\", \"lt\", \"rb\", \"rt\" are permitted, which mean get the coordinate of left bottom, left top, right bottom and right top corresponding. Returns: The coordinate corresponding to the `mode`, whose format is [x, y]. \"\"\" assert mode in ( \"lb\" , \"lt\" , \"rb\" , \"rt\" ) if mode == \"lt\" : p = min ( self . polygon_value , key = lambda x : x [ 0 ] + x [ 1 ]) elif mode == \"lb\" : p = min ( self . polygon_value , key = lambda x : x [ 0 ] - x [ 1 ]) elif mode == \"rt\" : p = min ( self . polygon_value , key = lambda x : - x [ 0 ] + x [ 1 ]) else : # rb p = min ( self . polygon_value , key = lambda x : - x [ 0 ] - x [ 1 ]) p = [ int ( _ ) for _ in p ] return p","title":"point_for_draw()"},{"location":"api_reference/dsdl_geometry/rotate_box/#dsdl.geometry.rotate_box.RBBox.polygon2rbbox","text":"Converted the xyxy mode bounding box into xywht mode. Parameters: Name Type Description Default value The xyxy mode bounding box's value. required Returns: Type Description The coresponding xywht mode bounding box's value. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\rotate_box.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @staticmethod def polygon2rbbox ( value ): \"\"\"Converted the `xyxy` mode bounding box into `xywht` mode. Args: value: The `xyxy` mode bounding box's value. Returns: The coresponding `xywht` mode bounding box's value. \"\"\" res = cv2 . minAreaRect ( np . array ( value ) . astype ( np . int32 )) x , y = res [ 0 ] width , height = res [ 1 ] # width is \"first edge\" angle = res [ 2 ] if width < height : width , height = height , width angle = angle + 90 angle = 1 - angle / 180 * math . pi return [ x , y , width , height , angle ]","title":"polygon2rbbox()"},{"location":"api_reference/dsdl_geometry/rotate_box/#dsdl.geometry.rotate_box.RBBox.rbbox2polygon","text":"Convert the xywht mode bounding box into xyxy mode. Parameters: Name Type Description Default value The xywht mode bounding box's value. required Returns: Type Description The coresponding xyxy mode bounding box's value. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\rotate_box.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 @staticmethod def rbbox2polygon ( value ): \"\"\"Convert the `xywht` mode bounding box into `xyxy` mode. Args: value: The `xywht` mode bounding box's value. Returns: The coresponding `xyxy` mode bounding box's value. \"\"\" x , y , width , height , angle = value cosA , sinA = math . cos ( angle ), math . sin ( angle ) def _rotate ( p_ ): # clockwise x_ , y_ = p_ x_r = ( x_ - x ) * cosA - ( y_ - y ) * sinA + x y_r = ( x_ - x ) * sinA + ( y_ - y ) * cosA + y return [ x_r , y_r ] x_l , x_r , y_t , y_b = x - width / 2 , x + width / 2 , y - height / 2 , y + height / 2 p_lt , p_lb , p_rt , p_rb = [ x_l , y_t ], [ x_l , y_b ], [ x_r , y_t ], [ x_r , y_b ] return [ _rotate ( p_lt ), _rotate ( p_lb ), _rotate ( p_rb ), _rotate ( p_rt )]","title":"rbbox2polygon()"},{"location":"api_reference/dsdl_geometry/rotate_box/#dsdl.geometry.rotate_box.RBBox.visualize","text":"Draw the current rotated bounding box on an given image. Parameters: Name Type Description Default image The image where the rotated bounding box to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current bounding box, such as Label annotation. {} Returns: Type Description The image where the current rotated bounding box has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\rotate_box.py 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current rotated bounding box on an given image. Args: image: The image where the rotated bounding box to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current bounding box, such as `Label` annotation. Returns: The image where the current rotated bounding box has been drawn on. \"\"\" color = ( 0 , 255 , 0 ) if \"label\" in kwargs : for label in kwargs [ \"label\" ] . values (): if label . category_name not in palette : palette [ label . category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) color = palette [ label . category_name ] poly = Image . new ( 'RGBA' , image . size [: 2 ]) pdraw = ImageDraw . Draw ( poly ) pdraw . polygon ([ tuple ( _ ) for _ in self . polygon_value ], fill = ( * color , 127 ), outline = ( * color , 255 )) image . paste ( poly , mask = poly ) del pdraw return image","title":"visualize()"},{"location":"api_reference/dsdl_geometry/segmap/","text":"SegmentationMap Bases: Image A Geometry class for semantic segmentation map. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\segmap.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class SegmentationMap ( Image ): \"\"\" A Geometry class for semantic segmentation map. \"\"\" def __init__ ( self , value , dom , file_reader ): \"\"\"A Geometry class which abstracts a semantic segmentation map object. Args: value: The relative path of the current semantic segmentation map image. file_reader: The file reader object of the current semantic segmentation map image. dom: The current semantic segmentation map's class domain. \"\"\" super () . __init__ ( value , file_reader ) if isinstance ( dom , list ): assert len ( dom ) == 1 , \"You can only assign one class dom in LabelMapField.\" dom = dom [ 0 ] self . _dom = dom @property def class_domain ( self ): \"\"\" Returns: The current semantic segmentation map's class domain. \"\"\" return self . _dom def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current semantic segmentation map on an given image. Args: image: The image where the semantic segmentation map to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current semantic segmentation map. Returns: The image where the current semantic segmentation map has been drawn on. \"\"\" seg = self . to_array () color_seg = np . zeros (( seg . shape [ 0 ], seg . shape [ 1 ], 3 ), dtype = np . uint8 ) category_ids = np . unique ( seg ) if self . class_domain . __name__ == \"_LabelMapDefaultDomain\" : category_ids = category_ids + 1 label_lst = [] for category_id in category_ids : if int ( category_id ) > len ( self . _dom ) or int ( category_id ) < 1 : continue label = self . _dom . get_label ( int ( category_id )) category_name = label . category_name if category_name not in palette : palette [ category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) label_lst . append ( label ) color_seg [ seg == category_id , :] = np . array ( palette [ category_name ]) overlay = Image_ . fromarray ( color_seg ) . convert ( \"RGBA\" ) overlayed = Image_ . blend ( image , overlay , 0.5 ) LabelList ( label_lst ) . visualize ( image = overlayed , palette = palette , bbox = { \"temp\" : BBox ([ 0 , 0 , 0 , 0 ], mode = \"xywh\" )}) return overlayed class_domain property Returns: Type Description The current semantic segmentation map's class domain. __init__ ( value , dom , file_reader ) A Geometry class which abstracts a semantic segmentation map object. Parameters: Name Type Description Default value The relative path of the current semantic segmentation map image. required file_reader The file reader object of the current semantic segmentation map image. required dom The current semantic segmentation map's class domain. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\segmap.py 13 14 15 16 17 18 19 20 21 22 23 24 25 def __init__ ( self , value , dom , file_reader ): \"\"\"A Geometry class which abstracts a semantic segmentation map object. Args: value: The relative path of the current semantic segmentation map image. file_reader: The file reader object of the current semantic segmentation map image. dom: The current semantic segmentation map's class domain. \"\"\" super () . __init__ ( value , file_reader ) if isinstance ( dom , list ): assert len ( dom ) == 1 , \"You can only assign one class dom in LabelMapField.\" dom = dom [ 0 ] self . _dom = dom visualize ( image , palette , ** kwargs ) Draw the current semantic segmentation map on an given image. Parameters: Name Type Description Default image The image where the semantic segmentation map to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current semantic segmentation map. {} Returns: Type Description The image where the current semantic segmentation map has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\segmap.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current semantic segmentation map on an given image. Args: image: The image where the semantic segmentation map to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current semantic segmentation map. Returns: The image where the current semantic segmentation map has been drawn on. \"\"\" seg = self . to_array () color_seg = np . zeros (( seg . shape [ 0 ], seg . shape [ 1 ], 3 ), dtype = np . uint8 ) category_ids = np . unique ( seg ) if self . class_domain . __name__ == \"_LabelMapDefaultDomain\" : category_ids = category_ids + 1 label_lst = [] for category_id in category_ids : if int ( category_id ) > len ( self . _dom ) or int ( category_id ) < 1 : continue label = self . _dom . get_label ( int ( category_id )) category_name = label . category_name if category_name not in palette : palette [ category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) label_lst . append ( label ) color_seg [ seg == category_id , :] = np . array ( palette [ category_name ]) overlay = Image_ . fromarray ( color_seg ) . convert ( \"RGBA\" ) overlayed = Image_ . blend ( image , overlay , 0.5 ) LabelList ( label_lst ) . visualize ( image = overlayed , palette = palette , bbox = { \"temp\" : BBox ([ 0 , 0 , 0 , 0 ], mode = \"xywh\" )}) return overlayed","title":"dsdl.geometry.segmap"},{"location":"api_reference/dsdl_geometry/segmap/#dsdl.geometry.segmap.SegmentationMap","text":"Bases: Image A Geometry class for semantic segmentation map. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\segmap.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class SegmentationMap ( Image ): \"\"\" A Geometry class for semantic segmentation map. \"\"\" def __init__ ( self , value , dom , file_reader ): \"\"\"A Geometry class which abstracts a semantic segmentation map object. Args: value: The relative path of the current semantic segmentation map image. file_reader: The file reader object of the current semantic segmentation map image. dom: The current semantic segmentation map's class domain. \"\"\" super () . __init__ ( value , file_reader ) if isinstance ( dom , list ): assert len ( dom ) == 1 , \"You can only assign one class dom in LabelMapField.\" dom = dom [ 0 ] self . _dom = dom @property def class_domain ( self ): \"\"\" Returns: The current semantic segmentation map's class domain. \"\"\" return self . _dom def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current semantic segmentation map on an given image. Args: image: The image where the semantic segmentation map to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current semantic segmentation map. Returns: The image where the current semantic segmentation map has been drawn on. \"\"\" seg = self . to_array () color_seg = np . zeros (( seg . shape [ 0 ], seg . shape [ 1 ], 3 ), dtype = np . uint8 ) category_ids = np . unique ( seg ) if self . class_domain . __name__ == \"_LabelMapDefaultDomain\" : category_ids = category_ids + 1 label_lst = [] for category_id in category_ids : if int ( category_id ) > len ( self . _dom ) or int ( category_id ) < 1 : continue label = self . _dom . get_label ( int ( category_id )) category_name = label . category_name if category_name not in palette : palette [ category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) label_lst . append ( label ) color_seg [ seg == category_id , :] = np . array ( palette [ category_name ]) overlay = Image_ . fromarray ( color_seg ) . convert ( \"RGBA\" ) overlayed = Image_ . blend ( image , overlay , 0.5 ) LabelList ( label_lst ) . visualize ( image = overlayed , palette = palette , bbox = { \"temp\" : BBox ([ 0 , 0 , 0 , 0 ], mode = \"xywh\" )}) return overlayed","title":"SegmentationMap"},{"location":"api_reference/dsdl_geometry/segmap/#dsdl.geometry.segmap.SegmentationMap.class_domain","text":"Returns: Type Description The current semantic segmentation map's class domain.","title":"class_domain"},{"location":"api_reference/dsdl_geometry/segmap/#dsdl.geometry.segmap.SegmentationMap.__init__","text":"A Geometry class which abstracts a semantic segmentation map object. Parameters: Name Type Description Default value The relative path of the current semantic segmentation map image. required file_reader The file reader object of the current semantic segmentation map image. required dom The current semantic segmentation map's class domain. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\segmap.py 13 14 15 16 17 18 19 20 21 22 23 24 25 def __init__ ( self , value , dom , file_reader ): \"\"\"A Geometry class which abstracts a semantic segmentation map object. Args: value: The relative path of the current semantic segmentation map image. file_reader: The file reader object of the current semantic segmentation map image. dom: The current semantic segmentation map's class domain. \"\"\" super () . __init__ ( value , file_reader ) if isinstance ( dom , list ): assert len ( dom ) == 1 , \"You can only assign one class dom in LabelMapField.\" dom = dom [ 0 ] self . _dom = dom","title":"__init__()"},{"location":"api_reference/dsdl_geometry/segmap/#dsdl.geometry.segmap.SegmentationMap.visualize","text":"Draw the current semantic segmentation map on an given image. Parameters: Name Type Description Default image The image where the semantic segmentation map to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current semantic segmentation map. {} Returns: Type Description The image where the current semantic segmentation map has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\segmap.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current semantic segmentation map on an given image. Args: image: The image where the semantic segmentation map to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current semantic segmentation map. Returns: The image where the current semantic segmentation map has been drawn on. \"\"\" seg = self . to_array () color_seg = np . zeros (( seg . shape [ 0 ], seg . shape [ 1 ], 3 ), dtype = np . uint8 ) category_ids = np . unique ( seg ) if self . class_domain . __name__ == \"_LabelMapDefaultDomain\" : category_ids = category_ids + 1 label_lst = [] for category_id in category_ids : if int ( category_id ) > len ( self . _dom ) or int ( category_id ) < 1 : continue label = self . _dom . get_label ( int ( category_id )) category_name = label . category_name if category_name not in palette : palette [ category_name ] = tuple ( np . random . randint ( 0 , 255 , size = [ 3 ])) label_lst . append ( label ) color_seg [ seg == category_id , :] = np . array ( palette [ category_name ]) overlay = Image_ . fromarray ( color_seg ) . convert ( \"RGBA\" ) overlayed = Image_ . blend ( image , overlay , 0.5 ) LabelList ( label_lst ) . visualize ( image = overlayed , palette = palette , bbox = { \"temp\" : BBox ([ 0 , 0 , 0 , 0 ], mode = \"xywh\" )}) return overlayed","title":"visualize()"},{"location":"api_reference/dsdl_geometry/shape/","text":"ImageShape Bases: Shape Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\shape.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 class ImageShape ( Shape ): def __init__ ( self , value , mode = \"hw\" ): \"\"\"A Geometry class which abstracts an image's shape. Args: value: A list which contains the width and height of the image. mode: The shape mode, value should be `\"hw\"` or `\"wh\"`. When `mode==\"hw\"`, the `value` arg should be image's [height, width] when `mode==\"wh\"', the `value` arg should be images's [width, height] Attributes: _width(int): The width of the image. _height(int): The height of the image. \"\"\" assert mode . lower () in ( \"hw\" , \"wh\" ) super ( ImageShape , self ) . __init__ ( value , mode . lower (), \"image\" ) if mode == \"hw\" : self . _height , self . _width = value [ 0 ], value [ 1 ] else : self . _width , self . _height = value [ 0 ], value [ 1 ] @property def height ( self ): \"\"\" Returns: The height of the image. \"\"\" return self . _height @property def width ( self ): \"\"\" Returns: The width of the image. \"\"\" return self . _width def __repr__ ( self ): return f \"image height: { self . height } ; image width: { self . width } \" height property Returns: Type Description The height of the image. width property Returns: Type Description The width of the image. __init__ ( value , mode = 'hw' ) A Geometry class which abstracts an image's shape. Parameters: Name Type Description Default value A list which contains the width and height of the image. required mode The shape mode, value should be \"hw\" or \"wh\" . When mode==\"hw\" , the value arg should be image's [height, width] when mode==\"wh\"', the value` arg should be images's [width, height] 'hw' Attributes: Name Type Description _width(int) The width of the image. _height(int) The height of the image. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\shape.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def __init__ ( self , value , mode = \"hw\" ): \"\"\"A Geometry class which abstracts an image's shape. Args: value: A list which contains the width and height of the image. mode: The shape mode, value should be `\"hw\"` or `\"wh\"`. When `mode==\"hw\"`, the `value` arg should be image's [height, width] when `mode==\"wh\"', the `value` arg should be images's [width, height] Attributes: _width(int): The width of the image. _height(int): The height of the image. \"\"\" assert mode . lower () in ( \"hw\" , \"wh\" ) super ( ImageShape , self ) . __init__ ( value , mode . lower (), \"image\" ) if mode == \"hw\" : self . _height , self . _width = value [ 0 ], value [ 1 ] else : self . _width , self . _height = value [ 0 ], value [ 1 ] Shape Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\shape.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class Shape ( BaseGeometry ): def __init__ ( self , value , mode , media ): \"\"\"A Geometry class which abstracts a media's shape. Args: value: A list which contains the shape information of the media. mode: The shape mode, which represents the format of media'shape. For Exsample, an image shape's mode can be \"hw\" or \"wh\". media: The media type, such as \"image\", \"video\" and so on. Attributes: _value(list[int]): The shape value of the media. _media_type(str): The type of the media. _mode(str): The mode of the media's shape. \"\"\" media = media . lower () mode = mode . lower () self . _media_type = media self . _value = value self . _mode = mode @property def media_type ( self ): \"\"\" Returns: The media type of the current Shape object. \"\"\" return self . _media_type @property def value ( self ): \"\"\" Returns: The shape value. \"\"\" return self . _value @property def mode ( self ): \"\"\" Returns: The mode of the shape. \"\"\" return self . _mode def __repr__ ( self ): return f \" { self . media_type } shape: { self . value } \" media_type property Returns: Type Description The media type of the current Shape object. mode property Returns: Type Description The mode of the shape. value property Returns: Type Description The shape value. __init__ ( value , mode , media ) A Geometry class which abstracts a media's shape. Parameters: Name Type Description Default value A list which contains the shape information of the media. required mode The shape mode, which represents the format of media'shape. For Exsample, an image shape's mode can be \"hw\" or \"wh\". required media The media type, such as \"image\", \"video\" and so on. required Attributes: Name Type Description _value(list[int]) The shape value of the media. _media_type(str) The type of the media. _mode(str) The mode of the media's shape. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\shape.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def __init__ ( self , value , mode , media ): \"\"\"A Geometry class which abstracts a media's shape. Args: value: A list which contains the shape information of the media. mode: The shape mode, which represents the format of media'shape. For Exsample, an image shape's mode can be \"hw\" or \"wh\". media: The media type, such as \"image\", \"video\" and so on. Attributes: _value(list[int]): The shape value of the media. _media_type(str): The type of the media. _mode(str): The mode of the media's shape. \"\"\" media = media . lower () mode = mode . lower () self . _media_type = media self . _value = value self . _mode = mode","title":"dsdl.geometry.shape"},{"location":"api_reference/dsdl_geometry/shape/#dsdl.geometry.shape.ImageShape","text":"Bases: Shape Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\shape.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 class ImageShape ( Shape ): def __init__ ( self , value , mode = \"hw\" ): \"\"\"A Geometry class which abstracts an image's shape. Args: value: A list which contains the width and height of the image. mode: The shape mode, value should be `\"hw\"` or `\"wh\"`. When `mode==\"hw\"`, the `value` arg should be image's [height, width] when `mode==\"wh\"', the `value` arg should be images's [width, height] Attributes: _width(int): The width of the image. _height(int): The height of the image. \"\"\" assert mode . lower () in ( \"hw\" , \"wh\" ) super ( ImageShape , self ) . __init__ ( value , mode . lower (), \"image\" ) if mode == \"hw\" : self . _height , self . _width = value [ 0 ], value [ 1 ] else : self . _width , self . _height = value [ 0 ], value [ 1 ] @property def height ( self ): \"\"\" Returns: The height of the image. \"\"\" return self . _height @property def width ( self ): \"\"\" Returns: The width of the image. \"\"\" return self . _width def __repr__ ( self ): return f \"image height: { self . height } ; image width: { self . width } \"","title":"ImageShape"},{"location":"api_reference/dsdl_geometry/shape/#dsdl.geometry.shape.ImageShape.height","text":"Returns: Type Description The height of the image.","title":"height"},{"location":"api_reference/dsdl_geometry/shape/#dsdl.geometry.shape.ImageShape.width","text":"Returns: Type Description The width of the image.","title":"width"},{"location":"api_reference/dsdl_geometry/shape/#dsdl.geometry.shape.ImageShape.__init__","text":"A Geometry class which abstracts an image's shape. Parameters: Name Type Description Default value A list which contains the width and height of the image. required mode The shape mode, value should be \"hw\" or \"wh\" . When mode==\"hw\" , the value arg should be image's [height, width] when mode==\"wh\"', the value` arg should be images's [width, height] 'hw' Attributes: Name Type Description _width(int) The width of the image. _height(int) The height of the image. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\shape.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def __init__ ( self , value , mode = \"hw\" ): \"\"\"A Geometry class which abstracts an image's shape. Args: value: A list which contains the width and height of the image. mode: The shape mode, value should be `\"hw\"` or `\"wh\"`. When `mode==\"hw\"`, the `value` arg should be image's [height, width] when `mode==\"wh\"', the `value` arg should be images's [width, height] Attributes: _width(int): The width of the image. _height(int): The height of the image. \"\"\" assert mode . lower () in ( \"hw\" , \"wh\" ) super ( ImageShape , self ) . __init__ ( value , mode . lower (), \"image\" ) if mode == \"hw\" : self . _height , self . _width = value [ 0 ], value [ 1 ] else : self . _width , self . _height = value [ 0 ], value [ 1 ]","title":"__init__()"},{"location":"api_reference/dsdl_geometry/shape/#dsdl.geometry.shape.Shape","text":"Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\shape.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class Shape ( BaseGeometry ): def __init__ ( self , value , mode , media ): \"\"\"A Geometry class which abstracts a media's shape. Args: value: A list which contains the shape information of the media. mode: The shape mode, which represents the format of media'shape. For Exsample, an image shape's mode can be \"hw\" or \"wh\". media: The media type, such as \"image\", \"video\" and so on. Attributes: _value(list[int]): The shape value of the media. _media_type(str): The type of the media. _mode(str): The mode of the media's shape. \"\"\" media = media . lower () mode = mode . lower () self . _media_type = media self . _value = value self . _mode = mode @property def media_type ( self ): \"\"\" Returns: The media type of the current Shape object. \"\"\" return self . _media_type @property def value ( self ): \"\"\" Returns: The shape value. \"\"\" return self . _value @property def mode ( self ): \"\"\" Returns: The mode of the shape. \"\"\" return self . _mode def __repr__ ( self ): return f \" { self . media_type } shape: { self . value } \"","title":"Shape"},{"location":"api_reference/dsdl_geometry/shape/#dsdl.geometry.shape.Shape.media_type","text":"Returns: Type Description The media type of the current Shape object.","title":"media_type"},{"location":"api_reference/dsdl_geometry/shape/#dsdl.geometry.shape.Shape.mode","text":"Returns: Type Description The mode of the shape.","title":"mode"},{"location":"api_reference/dsdl_geometry/shape/#dsdl.geometry.shape.Shape.value","text":"Returns: Type Description The shape value.","title":"value"},{"location":"api_reference/dsdl_geometry/shape/#dsdl.geometry.shape.Shape.__init__","text":"A Geometry class which abstracts a media's shape. Parameters: Name Type Description Default value A list which contains the shape information of the media. required mode The shape mode, which represents the format of media'shape. For Exsample, an image shape's mode can be \"hw\" or \"wh\". required media The media type, such as \"image\", \"video\" and so on. required Attributes: Name Type Description _value(list[int]) The shape value of the media. _media_type(str) The type of the media. _mode(str) The mode of the media's shape. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\shape.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def __init__ ( self , value , mode , media ): \"\"\"A Geometry class which abstracts a media's shape. Args: value: A list which contains the shape information of the media. mode: The shape mode, which represents the format of media'shape. For Exsample, an image shape's mode can be \"hw\" or \"wh\". media: The media type, such as \"image\", \"video\" and so on. Attributes: _value(list[int]): The shape value of the media. _media_type(str): The type of the media. _mode(str): The mode of the media's shape. \"\"\" media = media . lower () mode = mode . lower () self . _media_type = media self . _value = value self . _mode = mode","title":"__init__()"},{"location":"api_reference/dsdl_geometry/text/","text":"Text Bases: BaseGeometry , FontMixin Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\text.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Text ( BaseGeometry , FontMixin ): def __init__ ( self , value ): \"\"\"A Geometry class which abstracts a text annotation object. Args: value: The text annotation. \"\"\" self . _text = value @property def value ( self ): \"\"\" Returns: The text of the current text annotation. \"\"\" return self . _text @property def text ( self ): \"\"\" Returns: The text of the current text annotation. \"\"\" return self . _text def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current text annotation on an given image. Args: image: The image where the text annotation to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current text annotation, such as `BBox` annotation. Returns: The image where the current text annotation has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) text_color = ( 0 , 255 , 0 ) # green if self . font is None : self . set_font ( ImageFont . truetype ( os . path . join ( os . path . dirname ( __file__ ), \"source\" , \"Arial_Font.ttf\" ))) label_size = draw_obj . textsize ( self . value , self . font ) if \"bbox\" in kwargs : coords = np . array ([[ item . xyxy [ 0 ], item . xyxy [ 3 ] - 1.2 * label_size [ 1 ]] for item in kwargs [ \"bbox\" ] . values ()]) elif \"polygon\" in kwargs : coords = np . array ( [[ item . point_for_draw ( \"lb\" )[ 0 ], item . point_for_draw ( \"lb\" )[ 1 ] - 1.2 * label_size [ 1 ]] for item in kwargs [ \"polygon\" ] . values ()]) elif \"rotatedbbox\" in kwargs : coords = np . array ( [[ item . point_for_draw ( \"lb\" )[ 0 ], item . point_for_draw ( \"lb\" )[ 1 ] - 1.2 * label_size [ 1 ]] for item in kwargs [ \"rotatedbbox\" ] . values ()]) else : coords = np . array ([[ 0 , image . size [ 1 ] - 1.2 * label_size [ 1 ]]]) for coord in coords : draw_obj . rectangle ([ tuple ( coord ), tuple ( coord + label_size )], fill = ( * text_color , 255 )) draw_obj . text ( tuple ( coord ), self . value , fill = ( 255 , 255 , 255 , 255 ), font = self . font ) del draw_obj return image def __repr__ ( self ): return self . _text text property Returns: Type Description The text of the current text annotation. value property Returns: Type Description The text of the current text annotation. __init__ ( value ) A Geometry class which abstracts a text annotation object. Parameters: Name Type Description Default value The text annotation. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\text.py 8 9 10 11 12 13 14 def __init__ ( self , value ): \"\"\"A Geometry class which abstracts a text annotation object. Args: value: The text annotation. \"\"\" self . _text = value visualize ( image , palette , ** kwargs ) Draw the current text annotation on an given image. Parameters: Name Type Description Default image The image where the text annotation to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current text annotation, such as BBox annotation. {} Returns: Type Description The image where the current text annotation has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\text.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current text annotation on an given image. Args: image: The image where the text annotation to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current text annotation, such as `BBox` annotation. Returns: The image where the current text annotation has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) text_color = ( 0 , 255 , 0 ) # green if self . font is None : self . set_font ( ImageFont . truetype ( os . path . join ( os . path . dirname ( __file__ ), \"source\" , \"Arial_Font.ttf\" ))) label_size = draw_obj . textsize ( self . value , self . font ) if \"bbox\" in kwargs : coords = np . array ([[ item . xyxy [ 0 ], item . xyxy [ 3 ] - 1.2 * label_size [ 1 ]] for item in kwargs [ \"bbox\" ] . values ()]) elif \"polygon\" in kwargs : coords = np . array ( [[ item . point_for_draw ( \"lb\" )[ 0 ], item . point_for_draw ( \"lb\" )[ 1 ] - 1.2 * label_size [ 1 ]] for item in kwargs [ \"polygon\" ] . values ()]) elif \"rotatedbbox\" in kwargs : coords = np . array ( [[ item . point_for_draw ( \"lb\" )[ 0 ], item . point_for_draw ( \"lb\" )[ 1 ] - 1.2 * label_size [ 1 ]] for item in kwargs [ \"rotatedbbox\" ] . values ()]) else : coords = np . array ([[ 0 , image . size [ 1 ] - 1.2 * label_size [ 1 ]]]) for coord in coords : draw_obj . rectangle ([ tuple ( coord ), tuple ( coord + label_size )], fill = ( * text_color , 255 )) draw_obj . text ( tuple ( coord ), self . value , fill = ( 255 , 255 , 255 , 255 ), font = self . font ) del draw_obj return image","title":"dsdl.geometry.text"},{"location":"api_reference/dsdl_geometry/text/#dsdl.geometry.text.Text","text":"Bases: BaseGeometry , FontMixin Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\text.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Text ( BaseGeometry , FontMixin ): def __init__ ( self , value ): \"\"\"A Geometry class which abstracts a text annotation object. Args: value: The text annotation. \"\"\" self . _text = value @property def value ( self ): \"\"\" Returns: The text of the current text annotation. \"\"\" return self . _text @property def text ( self ): \"\"\" Returns: The text of the current text annotation. \"\"\" return self . _text def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current text annotation on an given image. Args: image: The image where the text annotation to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current text annotation, such as `BBox` annotation. Returns: The image where the current text annotation has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) text_color = ( 0 , 255 , 0 ) # green if self . font is None : self . set_font ( ImageFont . truetype ( os . path . join ( os . path . dirname ( __file__ ), \"source\" , \"Arial_Font.ttf\" ))) label_size = draw_obj . textsize ( self . value , self . font ) if \"bbox\" in kwargs : coords = np . array ([[ item . xyxy [ 0 ], item . xyxy [ 3 ] - 1.2 * label_size [ 1 ]] for item in kwargs [ \"bbox\" ] . values ()]) elif \"polygon\" in kwargs : coords = np . array ( [[ item . point_for_draw ( \"lb\" )[ 0 ], item . point_for_draw ( \"lb\" )[ 1 ] - 1.2 * label_size [ 1 ]] for item in kwargs [ \"polygon\" ] . values ()]) elif \"rotatedbbox\" in kwargs : coords = np . array ( [[ item . point_for_draw ( \"lb\" )[ 0 ], item . point_for_draw ( \"lb\" )[ 1 ] - 1.2 * label_size [ 1 ]] for item in kwargs [ \"rotatedbbox\" ] . values ()]) else : coords = np . array ([[ 0 , image . size [ 1 ] - 1.2 * label_size [ 1 ]]]) for coord in coords : draw_obj . rectangle ([ tuple ( coord ), tuple ( coord + label_size )], fill = ( * text_color , 255 )) draw_obj . text ( tuple ( coord ), self . value , fill = ( 255 , 255 , 255 , 255 ), font = self . font ) del draw_obj return image def __repr__ ( self ): return self . _text","title":"Text"},{"location":"api_reference/dsdl_geometry/text/#dsdl.geometry.text.Text.text","text":"Returns: Type Description The text of the current text annotation.","title":"text"},{"location":"api_reference/dsdl_geometry/text/#dsdl.geometry.text.Text.value","text":"Returns: Type Description The text of the current text annotation.","title":"value"},{"location":"api_reference/dsdl_geometry/text/#dsdl.geometry.text.Text.__init__","text":"A Geometry class which abstracts a text annotation object. Parameters: Name Type Description Default value The text annotation. required Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\text.py 8 9 10 11 12 13 14 def __init__ ( self , value ): \"\"\"A Geometry class which abstracts a text annotation object. Args: value: The text annotation. \"\"\" self . _text = value","title":"__init__()"},{"location":"api_reference/dsdl_geometry/text/#dsdl.geometry.text.Text.visualize","text":"Draw the current text annotation on an given image. Parameters: Name Type Description Default image The image where the text annotation to be drawn. required palette The palette which stores the color of different category name. required **kwargs Other annotations which may be used when drawing the current text annotation, such as BBox annotation. {} Returns: Type Description The image where the current text annotation has been drawn on. Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\text.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def visualize ( self , image , palette , ** kwargs ): \"\"\"Draw the current text annotation on an given image. Args: image: The image where the text annotation to be drawn. palette: The palette which stores the color of different category name. **kwargs: Other annotations which may be used when drawing the current text annotation, such as `BBox` annotation. Returns: The image where the current text annotation has been drawn on. \"\"\" draw_obj = ImageDraw . Draw ( image ) text_color = ( 0 , 255 , 0 ) # green if self . font is None : self . set_font ( ImageFont . truetype ( os . path . join ( os . path . dirname ( __file__ ), \"source\" , \"Arial_Font.ttf\" ))) label_size = draw_obj . textsize ( self . value , self . font ) if \"bbox\" in kwargs : coords = np . array ([[ item . xyxy [ 0 ], item . xyxy [ 3 ] - 1.2 * label_size [ 1 ]] for item in kwargs [ \"bbox\" ] . values ()]) elif \"polygon\" in kwargs : coords = np . array ( [[ item . point_for_draw ( \"lb\" )[ 0 ], item . point_for_draw ( \"lb\" )[ 1 ] - 1.2 * label_size [ 1 ]] for item in kwargs [ \"polygon\" ] . values ()]) elif \"rotatedbbox\" in kwargs : coords = np . array ( [[ item . point_for_draw ( \"lb\" )[ 0 ], item . point_for_draw ( \"lb\" )[ 1 ] - 1.2 * label_size [ 1 ]] for item in kwargs [ \"rotatedbbox\" ] . values ()]) else : coords = np . array ([[ 0 , image . size [ 1 ] - 1.2 * label_size [ 1 ]]]) for coord in coords : draw_obj . rectangle ([ tuple ( coord ), tuple ( coord + label_size )], fill = ( * text_color , 255 )) draw_obj . text ( tuple ( coord ), self . value , fill = ( 255 , 255 , 255 , 255 ), font = self . font ) del draw_obj return image","title":"visualize()"},{"location":"api_reference/dsdl_geometry/uniqueid/","text":"UniqueID Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\uniqueid.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class UniqueID ( BaseGeometry ): def __init__ ( self , value , id_type ): \"\"\"A Geometry class which abstracts an unique id object. Args: value: The unique id value. id_type: The role which the current unique id plays, such as \"frame id\", \"image id\" or \"annotation id\". Attributes: _value: The unique id value. _field_key: The role which the current unique id plays, such as \"frame id\", \"image id\" or \"annotation id\". \"\"\" self . _value = value self . _field_key = id_type @property def value ( self ): \"\"\" Returns: The value of the current unique id. \"\"\" return self . _value def __eq__ ( self , other ): return self . value == other . value def __repr__ ( self ): return f \"ID type: { self . _field_key } ID value: { self . value } \" value property Returns: Type Description The value of the current unique id. __init__ ( value , id_type ) A Geometry class which abstracts an unique id object. Parameters: Name Type Description Default value The unique id value. required id_type The role which the current unique id plays, such as \"frame id\", \"image id\" or \"annotation id\". required Attributes: Name Type Description _value The unique id value. _field_key The role which the current unique id plays, such as \"frame id\", \"image id\" or \"annotation id\". Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\uniqueid.py 6 7 8 9 10 11 12 13 14 15 16 17 18 def __init__ ( self , value , id_type ): \"\"\"A Geometry class which abstracts an unique id object. Args: value: The unique id value. id_type: The role which the current unique id plays, such as \"frame id\", \"image id\" or \"annotation id\". Attributes: _value: The unique id value. _field_key: The role which the current unique id plays, such as \"frame id\", \"image id\" or \"annotation id\". \"\"\" self . _value = value self . _field_key = id_type","title":"dsdl.geometry.uniqueid"},{"location":"api_reference/dsdl_geometry/uniqueid/#dsdl.geometry.uniqueid.UniqueID","text":"Bases: BaseGeometry Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\uniqueid.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class UniqueID ( BaseGeometry ): def __init__ ( self , value , id_type ): \"\"\"A Geometry class which abstracts an unique id object. Args: value: The unique id value. id_type: The role which the current unique id plays, such as \"frame id\", \"image id\" or \"annotation id\". Attributes: _value: The unique id value. _field_key: The role which the current unique id plays, such as \"frame id\", \"image id\" or \"annotation id\". \"\"\" self . _value = value self . _field_key = id_type @property def value ( self ): \"\"\" Returns: The value of the current unique id. \"\"\" return self . _value def __eq__ ( self , other ): return self . value == other . value def __repr__ ( self ): return f \"ID type: { self . _field_key } ID value: { self . value } \"","title":"UniqueID"},{"location":"api_reference/dsdl_geometry/uniqueid/#dsdl.geometry.uniqueid.UniqueID.value","text":"Returns: Type Description The value of the current unique id.","title":"value"},{"location":"api_reference/dsdl_geometry/uniqueid/#dsdl.geometry.uniqueid.UniqueID.__init__","text":"A Geometry class which abstracts an unique id object. Parameters: Name Type Description Default value The unique id value. required id_type The role which the current unique id plays, such as \"frame id\", \"image id\" or \"annotation id\". required Attributes: Name Type Description _value The unique id value. _field_key The role which the current unique id plays, such as \"frame id\", \"image id\" or \"annotation id\". Source code in D:\\Anaconda\\envs\\mkdocs\\lib\\site-packages\\dsdl-0.1.10.1-py3.8.egg\\dsdl\\geometry\\uniqueid.py 6 7 8 9 10 11 12 13 14 15 16 17 18 def __init__ ( self , value , id_type ): \"\"\"A Geometry class which abstracts an unique id object. Args: value: The unique id value. id_type: The role which the current unique id plays, such as \"frame id\", \"image id\" or \"annotation id\". Attributes: _value: The unique id value. _field_key: The role which the current unique id plays, such as \"frame id\", \"image id\" or \"annotation id\". \"\"\" self . _value = value self . _field_key = id_type","title":"__init__()"},{"location":"dsdl_language/install/","text":"\u5b89\u88c5\u90e8\u7f72","title":"\u5b89\u88c5\u90e8\u7f72"},{"location":"dsdl_language/install/#_1","text":"","title":"\u5b89\u88c5\u90e8\u7f72"},{"location":"dsdl_language/overview/","text":"\u6570\u636e \u662f\u4eba\u5de5\u667a\u80fd\u7684\u57fa\u77f3\u3002\u6570\u636e\u83b7\u53d6\u3001\u4f20\u64ad\u548c\u4f7f\u7528\u7684\u6548\u7387\u76f4\u63a5\u5f71\u54cd\u79d1\u6280\u53d1\u5c55\u548c\u5e94\u7528\u8fdb\u6b65\u3002\u5728\u4eba\u5de5\u667a\u80fd\u6f2b\u957f\u5386\u53f2\u4e2d\uff0c\u5927\u91cf\u7684\u6570\u636e\u96c6\u88ab\u5236\u9020\u548c\u53d1\u5e03\u63a8\u52a8\u6574\u4e2a\u9886\u57df\u7684\u53d1\u5c55\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u6570\u636e\u96c6\u57fa\u4e8e\u4e0d\u540c\u7684\u5f62\u5f0f\u5b9a\u4e49\uff0c\u4f7f\u5f97\u5176\u5728\u4f20\u64ad\u3001\u878d\u5408\u548c\u4f7f\u7528\u65f6\u6210\u672c\u8f83\u9ad8\u3002\u8fd9\u901a\u5e38\u8868\u73b0\u4e3a\u6bcf\u4e2a\u4f7f\u7528\u8005/\u56e2\u961f\u9700\u8981\u5236\u5b9a\u4e00\u5957\u65b0\u7684\u683c\u5f0f\uff0c\u5f00\u53d1\u5b9a\u5236\u5316\u5de5\u5177\u6216\u811a\u672c\u5c06\u65b0\u7684\u6570\u636e\u96c6\u6807\u51c6\u5316\u5408\u5e76\u5230\u5df2\u6709\u7684\u5de5\u4f5c\u6d41\u3002 \u4e3a\u4e86\u514b\u670d\u4e0a\u8ff0\u95ee\u9898\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u4e00\u5957\u6570\u636e\u96c6\u63cf\u8ff0\u8bed\u8a00DSDL(Data Set Description Language)\u3002 1. \u8bbe\u8ba1\u76ee\u6807 DSDL\u7684\u8bbe\u8ba1\u76ee\u6807\u603b\u5171\u6709\u4e09\u70b9\uff1a \u901a\u7528\u6027(Generic) \uff0c \u4fbf\u643a\u6027(Portable) \uff0c\u4ee5\u53ca \u53ef\u62d3\u5c55\u6027(Extensible) \u3002\u4e09\u79cd\u7279\u6027\u603b\u79f0\u4e3a GPE \u3002 1.1 \u901a\u7528\u6027 \u8be5\u8bed\u8a00\u4e3b\u8981\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7edf\u4e00\u8868\u793a\u7684\u6807\u51c6\uff0c\u53ef\u4ee5\u8986\u76d6\u5404\u4e2a\u9886\u57df\u7684\u4eba\u5de5\u667a\u80fd\u6570\u636e\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u7279\u5b9a\u7684\u4e00\u79cd\u4efb\u52a1\u6216\u8005\u67d0\u4e2a\u9886\u57df\u8bbe\u8ba1\u3002\u8be5\u8bed\u8a00\u5e94\u8be5\u53ef\u4ee5\u7528\u4e00\u81f4\u7684\u683c\u5f0f\u6765\u8868\u8fbe\u4e0d\u540c\u6a21\u6001\u548c\u7ed3\u6784\u7684\u6570\u636e\u3002 1.2 \u4fbf\u643a\u6027 \u5199\u5b8c\u65e0\u9700\u4fee\u6539\uff0c\u968f\u5904\u5206\u53d1\u3002 \u6570\u636e\u96c6\u63cf\u8ff0\u53ef\u4ee5\u88ab\u5e7f\u6cdb\u7684\u5206\u53d1\u548c\u4ea4\u6362\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u5c31\u53ef\u4ee5\u5728\u5404\u79cd\u73af\u5883\u4e0b\u4f7f\u7528\u3002\u8fd9\u4e00\u76ee\u6807\u7684\u5b9e\u73b0\u5bf9\u4e8e\u5efa\u7acb\u5f00\u53d1\u7e41\u8363\u751f\u6001\u81f3\u5173\u91cd\u8981\u3002\u4e3a\u6b64\u6211\u4eec\u9700\u8981\u4ed4\u7ec6\u68c0\u67e5\u5b9e\u73b0\u7ec6\u8282\uff0c\u4f7f\u5176\u5bf9\u5e95\u5c42\u8bbe\u65bd\u6216\u7ec4\u7ec7\u65e0\u611f\u77e5\uff0c\u4ece\u800c\u53bb\u9664\u57fa\u4e8e\u7279\u5b9a\u5047\u8bbe\u7684\u65e0\u5fc5\u8981\u4f9d\u8d56\u3002 1.3 \u53ef\u62d3\u5c55\u6027 \u5728\u4e0d\u9700\u8981\u4fee\u6539\u6838\u5fc3\u6807\u51c6\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u62d3\u5c55\u8868\u8ff0\u7684\u8fb9\u754c\u3002\u5bf9\u4e8eC++\u6216\u8005Python\u7b49\u7f16\u7a0b\u8bed\u8a00\uff0c\u5e94\u7528\u8fb9\u754c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u94fe\u63a5\u5e93\u6216\u8005\u8f6f\u4ef6\u5305\u5f97\u4ee5\u663e\u8457\u62d3\u5c55\uff0c\u800c\u6838\u5fc3\u8bed\u6cd5\u53ef\u4ee5\u5728\u5f88\u957f\u7684\u65f6\u95f4\u5185\u4fdd\u6301\u7a33\u5b9a\u3002\u57fa\u4e8e\u94fe\u63a5\u5e93\u548c\u5305\uff0c\u53ef\u4ee5\u5f62\u6210\u4e30\u5bcc\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u4f7f\u5bf9\u5e94\u8bed\u8a00\u53ef\u4ee5\u957f\u65f6\u95f4\u4fdd\u6301\u6d3b\u8dc3\u5ea6\u548c\u53d1\u5c55\u3002 2. \u8bbe\u8ba1\u603b\u89c8 \u6570\u636e\u96c6\u672c\u8d28\u4e0a\u662f\u5b58\u50a8\u5728\u6c38\u4e45\u5b58\u50a8\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u3002\u901a\u5e38\u7531\u975e\u7ed3\u6784\u5316\u76ee\u6807\uff08\u5982\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u6587\u672c\u7b49\uff09\u548c\u4e0e\u4e4b\u5173\u8054\u7684\u6807\u6ce8\u7ec4\u6210\u3002\u8fd9\u4e9b\u5143\u7d20\u6309\u7167\u7279\u5b9a\u7684\u65b9\u5f0f\u7ec4\u5408\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8ff0\u63d0\u5230\u7684\u975e\u7ed3\u6784\u5316\u76ee\u6807\u901a\u5e38\u5305\u542b\u5927\u91cf\u7684\u6570\u636e\u3002\u4e3a\u4e86\u65b9\u4fbf\u6570\u636e\u7684\u5feb\u901f\u5206\u53d1\uff0c\u6211\u4eec\u7684\u8bbe\u8ba1\u5c06\u4e00\u4e2a\u6570\u636e\u96c6\u7684\u7ed3\u6784\u5316\u63cf\u8ff0\u4e0e\u975e\u7ed3\u6784\u5316\u5185\u5bb9\u5206\u79bb\u5f00\u3002 \u4e0b\u9762\u662f\u8bed\u8a00\u8bbe\u8ba1\u7684\u5168\u9762\u603b\u7ed3\uff1a 2.1 \u57fa\u7840\u6570\u636e\u6a21\u578b DSDL\u4f7f\u7528\u57fa\u672c\u5143\u7d20\u7684\u96c6\u5408\u6765\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u57fa\u672c\u5143\u7d20\u7531structs, lists, sets\u7b49\u5bb9\u5668\u7ec4\u6210\u3002 \u57fa\u7840\u5143\u7d20(Basic elements) \uff1a\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u72ec\u7acb\u5355\u5143\uff0c\u4e0d\u4ec5\u5305\u542b\u4e86\u8bf8\u5982\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u7840\u7c7b\u578b\uff0c\u4e5f\u5305\u542b\u4e86\u90a3\u4e9b\u53ef\u4ee5\u4fbf\u4e8e\u76ee\u6807\u5b9a\u4f4d\u3001\u6807\u6ce8\u7ed3\u679c\u8868\u8fbe\u7684\u5143\u7d20\u3002 \u975e\u7ed3\u6784\u5316\u76ee\u6807(Unstructured objects) \uff1a\u4f8b\u5982\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u6587\u672c\u7b49\u7279\u6b8a\u7684\u57fa\u672c\u5143\u7d20\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u5177\u4f53\u800c\u8a00\uff0c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7531\u76ee\u6807\u5b9a\u4f4d\u5668\u8868\u793a\uff0c\u7528\u6765\u6307\u5b9a\u5b83\u7684\u5b58\u653e\u4f4d\u7f6e\u800c\u4e0d\u662f\u5c06\u6574\u4e2a\u5a92\u4f53\u6587\u4ef6\u653e\u5165\u63cf\u8ff0\u4e2d\u3002\u53e6\u5916\uff0c\u53ef\u9009\u62e9\u7684\u989d\u5916\u63cf\u8ff0\u7b26\u53ef\u4ee5\u7528\u6765\u63d0\u4f9b\u76ee\u6807\u7684\u989d\u5916\u4fe1\u606f\uff0c\u4f8b\u5982\u4e00\u4e2a\u56fe\u50cf\u7684\u683c\u5f0f\u6216\u8005\u5206\u8fa8\u7387\u3002 \u805a\u5408\u4f53(Aggregates) \uff1a\u5c06\u57fa\u7840\u5143\u7d20\u7ec4\u5408\u6210\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002DSDL\u63d0\u4f9blist\u548cstruct\u7c7b\u578b\u6765\u8868\u793a\u6570\u636e\u7ed3\u6784\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5355\u4e2a\u6837\u672c\u7531\u4e00\u4e2a\u7ed3\u6784\u4f53\u8868\u793a\uff08\u591a\u4e2a\u5b57\u6bb5\u7684\u805a\u5408\uff09\uff0c\u800c\u6570\u636e\u96c6\u53c8\u7531\u4e00\u4e2a\u6837\u672c\u5217\u8868\u7ec4\u6210\u3002 2.2 \u62d3\u5c55\u7c7b\u578b\u7cfb\u7edf \u5728DSDL\u4e2d\uff0c\u6240\u6709\u7684\u5143\u7d20\u548c\u7ed3\u6784\u4f53\u5355\u5143\u90fd\u6709\u7c7b\u578b\u3002 DSDL\u91c7\u7528\u4e86\u4e00\u79cd\u7b80\u5355\u800c \u6613\u62d3\u5c55 \u7684\u7c7b\u578b\u7cfb\u7edf\u3002\u5177\u4f53\u5730\uff0cDSDL\u6709\u4e09\u79cd\u7c7b\u578b\uff1a \u57fa\u7840\u7c7b\u578b(Primitive types) \uff1a\u5305\u542b\u5e03\u5c14\u7c7b\u578b\u3001\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u7840\u5143\u7d20\u503c\u7684\u7c7b\u578b\u3002 DSDL\u63d0\u4f9b\u4e86\u57fa\u7840\u7c7b\u578b\u7684\u7edf\u4e00\u5927\u96c6\u5408\u3002 \u975e\u7ed3\u6784\u76ee\u6807\u7c7b(Unstructured object classes) \uff1a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7684\u62bd\u8c61\u3002\u4f8b\u5982\uff1a\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u70b9\u4e91\u3001\u6587\u672c\u7b49\u7b49\u3002\u8fd9\u4e9b\u76ee\u6807\u5c3d\u7ba1\u5185\u90e8\u7ed3\u6784\u4e30\u5bcc\u591a\u6837\uff0c\u4f46\u5728\u6570\u636e\u96c6\u5b9a\u4e49\u4e2d\u4f1a\u88ab\u5f53\u6210\u4e0d\u53ef\u5206\u5272\u7684\u5355\u5143\u3002DSDL\u63d0\u4f9b\u4e00\u7cfb\u5217\u9884\u5b9a\u4e49\u597d\u7684\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u96c6\u5408\uff0c\u8986\u76d6\u5e38\u7528\u7684\u5e94\u7528\u573a\u666f\uff0c\u540c\u65f6\u5141\u8bb8\u5f00\u6e90\u529b\u91cf\u62d3\u5c55\u8be5\u96c6\u5408\uff0c\u901a\u8fc7\u6700\u5c0f\u63a5\u53e3\u96c6\u5408\u6ce8\u518c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\u3002 \u7ed3\u6784\u4f53\u7c7b(Struct classes) \uff1aDSDL\u4e2d\u805a\u5408\u6570\u636e\u7ed3\u6784\u7684\u62bd\u8c61\u3002\u7ed3\u6784\u4f53\u7c7b\u4e2d\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u88ab\u79f0\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53(struct)\uff0c\u5305\u542b\u591a\u4e2a\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u6709\u81ea\u5df1\u7c7b\u578b\u3002\u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8ff0\u6570\u636e\u6837\u672c\u3002DSDL\u4e3a\u6807\u51c6\u5e93\u4e2d\u7684\u5e38\u89c1\u4efb\u52a1\u63d0\u4f9b\u4e00\u5957\u9884\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u7c7b\uff0c\u540c\u65f6\u5141\u8bb8\u7528\u6237\u9488\u5bf9\u7279\u6b8a\u4efb\u52a1\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u3002 \u6ce8\u610f\uff1a\u7c7b\u578b\u5fc5\u987b\u5728\u4f7f\u7528\u524d\u88ab\u5b9a\u4e49\uff08\u65e0\u8bba\u662f\u5185\u7f6e\u7c7b\u578b\u3001\u7b2c\u4e09\u65b9\u5b9a\u4e49\u7c7b\u578b\uff0c\u53c8\u6216\u8005\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\uff09\u3002\u5faa\u73af\u5f15\u7528(circular references)\u5728\u5f53\u524dDSDL\u4e2d\u662f\u4e0d\u5141\u8bb8\u7684\u3002 2.3 \u76ee\u6807\u5b9a\u4f4d\u5668 (Object locators) \u5982\u524d\u6240\u8ff0\uff0c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u5e76\u6ca1\u6709\u5b8c\u5168\u5d4c\u5165\u5230\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u3002 \u800c\u7531\u76ee\u6807\u5b9a\u4f4d\u5668\u6765\u8868\u793a\u3002\u5177\u4f53\u5730\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u3002\u5f53\u5bf9\u5e94\u7684\u76ee\u6807\u88ab\u52a0\u8f7d\u65f6\u4f1a\u7ecf\u8fc7DSDL\u89e3\u6790\u5668\u8f6c\u6362\u6210\u4e00\u4e2a\u771f\u6b63\u7684\u5730\u5740\u3002 \u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u5f15\u5165\u4f7f\u7528\u5206\u79bb\u6570\u636e\u96c6\u4e2d\u7ed3\u6784\u5316\u63cf\u8ff0\u548c\u975e\u7ed3\u6784\u5316\u5a92\u4f53\u6587\u4ef6\u7684\u5173\u952e\u3002\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u5f97\u65e0\u9700\u79fb\u52a8\u5927\u4f53\u91cf\u7684\u5a92\u4f53\u6570\u636e\uff0c\u4f7f\u6570\u636e\u96c6\u63cf\u8ff0\u5206\u53d1\u66f4\u52a0\u8f7b\u91cf\u5316\u3002\u4e0e\u6b64\u540c\u65f6\u5141\u8bb8\u5feb\u901f\u7684\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\uff1a\u7ec4\u5408\u591a\u4e2a\u96c6\u5408\u3001\u5408\u5e76\u5c5e\u6027\u6216\u8005\u53d6\u67d0\u4e2a\u5b50\u96c6\u3002 2.4 \u57fa\u4e8eYAML\u6216\u8005JSON DSDL\u5c5e\u4e8e\u7279\u5b9a\u9886\u57df\u7684\u8bed\u8a00\uff0c\u57fa\u4e8e\u5f53\u524d\u6d41\u884c\u7684\u6570\u636e\u4ea4\u4e92\u8bed\u8a00YAML\u6216\u8005JSON\u8fdb\u884c\u5b9a\u4e49\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cYAML\u6216JSON\u4e2d\u7684\u5143\u7d20\u5728\u8bed\u8a00\u7ea7\u522b\u4e0a\u5e76\u4e0d\u4e0e\u7279\u5b9a\u7684\u542b\u4e49\u76f8\u5173\u8054\u3002\u800c\u6211\u4eec\u901a\u8fc7\u8d4b\u4e88\u8fd9\u4e9b\u5143\u7d20\u4ee5\u7279\u5b9a\u8bed\u4e49\uff0cDSDL\u53ef\u4ee5\u4ee5\u4e00\u79cd\u6709\u610f\u4e49\u7684\u65b9\u5f0f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u4f7f\u5f97\u4f7f\u7528\u8005\u53ef\u4ee5\u4f7f\u7528YAML\u548cJSON\u8bed\u8a00\u5bf9\u5e94\u7684\u4e30\u5bcc\u5de5\u5177\u7cfb\u7edf\u3002\u57fa\u4e8e\u8fd9\u4e9b\u5de5\u5177\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6784\u5efa\u4e00\u5957\u5b8c\u6574\u7cfb\u7edf\uff1a\u652f\u6301\u89e3\u6790\u3001\u6821\u9a8c\u548c\u67e5\u8be2\u7b49\u529f\u80fd\uff0c\u5e76\u57fa\u4e8e\u4e92\u8054\u7f51\u751f\u6001\u7cfb\u7edf\u8fdb\u884c\u4fbf\u6377\u5730\u4ea4\u4e92\u3002","title":"\u8bed\u8a00\u7279\u6027"},{"location":"dsdl_language/overview/#1","text":"DSDL\u7684\u8bbe\u8ba1\u76ee\u6807\u603b\u5171\u6709\u4e09\u70b9\uff1a \u901a\u7528\u6027(Generic) \uff0c \u4fbf\u643a\u6027(Portable) \uff0c\u4ee5\u53ca \u53ef\u62d3\u5c55\u6027(Extensible) \u3002\u4e09\u79cd\u7279\u6027\u603b\u79f0\u4e3a GPE \u3002","title":"1. \u8bbe\u8ba1\u76ee\u6807"},{"location":"dsdl_language/overview/#11","text":"\u8be5\u8bed\u8a00\u4e3b\u8981\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7edf\u4e00\u8868\u793a\u7684\u6807\u51c6\uff0c\u53ef\u4ee5\u8986\u76d6\u5404\u4e2a\u9886\u57df\u7684\u4eba\u5de5\u667a\u80fd\u6570\u636e\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u7279\u5b9a\u7684\u4e00\u79cd\u4efb\u52a1\u6216\u8005\u67d0\u4e2a\u9886\u57df\u8bbe\u8ba1\u3002\u8be5\u8bed\u8a00\u5e94\u8be5\u53ef\u4ee5\u7528\u4e00\u81f4\u7684\u683c\u5f0f\u6765\u8868\u8fbe\u4e0d\u540c\u6a21\u6001\u548c\u7ed3\u6784\u7684\u6570\u636e\u3002","title":"1.1 \u901a\u7528\u6027"},{"location":"dsdl_language/overview/#12","text":"\u5199\u5b8c\u65e0\u9700\u4fee\u6539\uff0c\u968f\u5904\u5206\u53d1\u3002 \u6570\u636e\u96c6\u63cf\u8ff0\u53ef\u4ee5\u88ab\u5e7f\u6cdb\u7684\u5206\u53d1\u548c\u4ea4\u6362\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u5c31\u53ef\u4ee5\u5728\u5404\u79cd\u73af\u5883\u4e0b\u4f7f\u7528\u3002\u8fd9\u4e00\u76ee\u6807\u7684\u5b9e\u73b0\u5bf9\u4e8e\u5efa\u7acb\u5f00\u53d1\u7e41\u8363\u751f\u6001\u81f3\u5173\u91cd\u8981\u3002\u4e3a\u6b64\u6211\u4eec\u9700\u8981\u4ed4\u7ec6\u68c0\u67e5\u5b9e\u73b0\u7ec6\u8282\uff0c\u4f7f\u5176\u5bf9\u5e95\u5c42\u8bbe\u65bd\u6216\u7ec4\u7ec7\u65e0\u611f\u77e5\uff0c\u4ece\u800c\u53bb\u9664\u57fa\u4e8e\u7279\u5b9a\u5047\u8bbe\u7684\u65e0\u5fc5\u8981\u4f9d\u8d56\u3002","title":"1.2 \u4fbf\u643a\u6027"},{"location":"dsdl_language/overview/#13","text":"\u5728\u4e0d\u9700\u8981\u4fee\u6539\u6838\u5fc3\u6807\u51c6\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u62d3\u5c55\u8868\u8ff0\u7684\u8fb9\u754c\u3002\u5bf9\u4e8eC++\u6216\u8005Python\u7b49\u7f16\u7a0b\u8bed\u8a00\uff0c\u5e94\u7528\u8fb9\u754c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u94fe\u63a5\u5e93\u6216\u8005\u8f6f\u4ef6\u5305\u5f97\u4ee5\u663e\u8457\u62d3\u5c55\uff0c\u800c\u6838\u5fc3\u8bed\u6cd5\u53ef\u4ee5\u5728\u5f88\u957f\u7684\u65f6\u95f4\u5185\u4fdd\u6301\u7a33\u5b9a\u3002\u57fa\u4e8e\u94fe\u63a5\u5e93\u548c\u5305\uff0c\u53ef\u4ee5\u5f62\u6210\u4e30\u5bcc\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u4f7f\u5bf9\u5e94\u8bed\u8a00\u53ef\u4ee5\u957f\u65f6\u95f4\u4fdd\u6301\u6d3b\u8dc3\u5ea6\u548c\u53d1\u5c55\u3002","title":"1.3 \u53ef\u62d3\u5c55\u6027"},{"location":"dsdl_language/overview/#2","text":"\u6570\u636e\u96c6\u672c\u8d28\u4e0a\u662f\u5b58\u50a8\u5728\u6c38\u4e45\u5b58\u50a8\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u3002\u901a\u5e38\u7531\u975e\u7ed3\u6784\u5316\u76ee\u6807\uff08\u5982\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u6587\u672c\u7b49\uff09\u548c\u4e0e\u4e4b\u5173\u8054\u7684\u6807\u6ce8\u7ec4\u6210\u3002\u8fd9\u4e9b\u5143\u7d20\u6309\u7167\u7279\u5b9a\u7684\u65b9\u5f0f\u7ec4\u5408\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8ff0\u63d0\u5230\u7684\u975e\u7ed3\u6784\u5316\u76ee\u6807\u901a\u5e38\u5305\u542b\u5927\u91cf\u7684\u6570\u636e\u3002\u4e3a\u4e86\u65b9\u4fbf\u6570\u636e\u7684\u5feb\u901f\u5206\u53d1\uff0c\u6211\u4eec\u7684\u8bbe\u8ba1\u5c06\u4e00\u4e2a\u6570\u636e\u96c6\u7684\u7ed3\u6784\u5316\u63cf\u8ff0\u4e0e\u975e\u7ed3\u6784\u5316\u5185\u5bb9\u5206\u79bb\u5f00\u3002 \u4e0b\u9762\u662f\u8bed\u8a00\u8bbe\u8ba1\u7684\u5168\u9762\u603b\u7ed3\uff1a","title":"2. \u8bbe\u8ba1\u603b\u89c8"},{"location":"dsdl_language/overview/#21","text":"DSDL\u4f7f\u7528\u57fa\u672c\u5143\u7d20\u7684\u96c6\u5408\u6765\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u57fa\u672c\u5143\u7d20\u7531structs, lists, sets\u7b49\u5bb9\u5668\u7ec4\u6210\u3002 \u57fa\u7840\u5143\u7d20(Basic elements) \uff1a\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u72ec\u7acb\u5355\u5143\uff0c\u4e0d\u4ec5\u5305\u542b\u4e86\u8bf8\u5982\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u7840\u7c7b\u578b\uff0c\u4e5f\u5305\u542b\u4e86\u90a3\u4e9b\u53ef\u4ee5\u4fbf\u4e8e\u76ee\u6807\u5b9a\u4f4d\u3001\u6807\u6ce8\u7ed3\u679c\u8868\u8fbe\u7684\u5143\u7d20\u3002 \u975e\u7ed3\u6784\u5316\u76ee\u6807(Unstructured objects) \uff1a\u4f8b\u5982\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u6587\u672c\u7b49\u7279\u6b8a\u7684\u57fa\u672c\u5143\u7d20\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u5177\u4f53\u800c\u8a00\uff0c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7531\u76ee\u6807\u5b9a\u4f4d\u5668\u8868\u793a\uff0c\u7528\u6765\u6307\u5b9a\u5b83\u7684\u5b58\u653e\u4f4d\u7f6e\u800c\u4e0d\u662f\u5c06\u6574\u4e2a\u5a92\u4f53\u6587\u4ef6\u653e\u5165\u63cf\u8ff0\u4e2d\u3002\u53e6\u5916\uff0c\u53ef\u9009\u62e9\u7684\u989d\u5916\u63cf\u8ff0\u7b26\u53ef\u4ee5\u7528\u6765\u63d0\u4f9b\u76ee\u6807\u7684\u989d\u5916\u4fe1\u606f\uff0c\u4f8b\u5982\u4e00\u4e2a\u56fe\u50cf\u7684\u683c\u5f0f\u6216\u8005\u5206\u8fa8\u7387\u3002 \u805a\u5408\u4f53(Aggregates) \uff1a\u5c06\u57fa\u7840\u5143\u7d20\u7ec4\u5408\u6210\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002DSDL\u63d0\u4f9blist\u548cstruct\u7c7b\u578b\u6765\u8868\u793a\u6570\u636e\u7ed3\u6784\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5355\u4e2a\u6837\u672c\u7531\u4e00\u4e2a\u7ed3\u6784\u4f53\u8868\u793a\uff08\u591a\u4e2a\u5b57\u6bb5\u7684\u805a\u5408\uff09\uff0c\u800c\u6570\u636e\u96c6\u53c8\u7531\u4e00\u4e2a\u6837\u672c\u5217\u8868\u7ec4\u6210\u3002","title":"2.1 \u57fa\u7840\u6570\u636e\u6a21\u578b"},{"location":"dsdl_language/overview/#22","text":"\u5728DSDL\u4e2d\uff0c\u6240\u6709\u7684\u5143\u7d20\u548c\u7ed3\u6784\u4f53\u5355\u5143\u90fd\u6709\u7c7b\u578b\u3002 DSDL\u91c7\u7528\u4e86\u4e00\u79cd\u7b80\u5355\u800c \u6613\u62d3\u5c55 \u7684\u7c7b\u578b\u7cfb\u7edf\u3002\u5177\u4f53\u5730\uff0cDSDL\u6709\u4e09\u79cd\u7c7b\u578b\uff1a \u57fa\u7840\u7c7b\u578b(Primitive types) \uff1a\u5305\u542b\u5e03\u5c14\u7c7b\u578b\u3001\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u7840\u5143\u7d20\u503c\u7684\u7c7b\u578b\u3002 DSDL\u63d0\u4f9b\u4e86\u57fa\u7840\u7c7b\u578b\u7684\u7edf\u4e00\u5927\u96c6\u5408\u3002 \u975e\u7ed3\u6784\u76ee\u6807\u7c7b(Unstructured object classes) \uff1a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7684\u62bd\u8c61\u3002\u4f8b\u5982\uff1a\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u70b9\u4e91\u3001\u6587\u672c\u7b49\u7b49\u3002\u8fd9\u4e9b\u76ee\u6807\u5c3d\u7ba1\u5185\u90e8\u7ed3\u6784\u4e30\u5bcc\u591a\u6837\uff0c\u4f46\u5728\u6570\u636e\u96c6\u5b9a\u4e49\u4e2d\u4f1a\u88ab\u5f53\u6210\u4e0d\u53ef\u5206\u5272\u7684\u5355\u5143\u3002DSDL\u63d0\u4f9b\u4e00\u7cfb\u5217\u9884\u5b9a\u4e49\u597d\u7684\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u96c6\u5408\uff0c\u8986\u76d6\u5e38\u7528\u7684\u5e94\u7528\u573a\u666f\uff0c\u540c\u65f6\u5141\u8bb8\u5f00\u6e90\u529b\u91cf\u62d3\u5c55\u8be5\u96c6\u5408\uff0c\u901a\u8fc7\u6700\u5c0f\u63a5\u53e3\u96c6\u5408\u6ce8\u518c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\u3002 \u7ed3\u6784\u4f53\u7c7b(Struct classes) \uff1aDSDL\u4e2d\u805a\u5408\u6570\u636e\u7ed3\u6784\u7684\u62bd\u8c61\u3002\u7ed3\u6784\u4f53\u7c7b\u4e2d\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u88ab\u79f0\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53(struct)\uff0c\u5305\u542b\u591a\u4e2a\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u6709\u81ea\u5df1\u7c7b\u578b\u3002\u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8ff0\u6570\u636e\u6837\u672c\u3002DSDL\u4e3a\u6807\u51c6\u5e93\u4e2d\u7684\u5e38\u89c1\u4efb\u52a1\u63d0\u4f9b\u4e00\u5957\u9884\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u7c7b\uff0c\u540c\u65f6\u5141\u8bb8\u7528\u6237\u9488\u5bf9\u7279\u6b8a\u4efb\u52a1\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u3002 \u6ce8\u610f\uff1a\u7c7b\u578b\u5fc5\u987b\u5728\u4f7f\u7528\u524d\u88ab\u5b9a\u4e49\uff08\u65e0\u8bba\u662f\u5185\u7f6e\u7c7b\u578b\u3001\u7b2c\u4e09\u65b9\u5b9a\u4e49\u7c7b\u578b\uff0c\u53c8\u6216\u8005\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\uff09\u3002\u5faa\u73af\u5f15\u7528(circular references)\u5728\u5f53\u524dDSDL\u4e2d\u662f\u4e0d\u5141\u8bb8\u7684\u3002","title":"2.2 \u62d3\u5c55\u7c7b\u578b\u7cfb\u7edf"},{"location":"dsdl_language/overview/#23-object-locators","text":"\u5982\u524d\u6240\u8ff0\uff0c\u975e\u7ed3\u6784\u5316\u76ee\u6807\u5e76\u6ca1\u6709\u5b8c\u5168\u5d4c\u5165\u5230\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u3002 \u800c\u7531\u76ee\u6807\u5b9a\u4f4d\u5668\u6765\u8868\u793a\u3002\u5177\u4f53\u5730\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u3002\u5f53\u5bf9\u5e94\u7684\u76ee\u6807\u88ab\u52a0\u8f7d\u65f6\u4f1a\u7ecf\u8fc7DSDL\u89e3\u6790\u5668\u8f6c\u6362\u6210\u4e00\u4e2a\u771f\u6b63\u7684\u5730\u5740\u3002 \u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u5f15\u5165\u4f7f\u7528\u5206\u79bb\u6570\u636e\u96c6\u4e2d\u7ed3\u6784\u5316\u63cf\u8ff0\u548c\u975e\u7ed3\u6784\u5316\u5a92\u4f53\u6587\u4ef6\u7684\u5173\u952e\u3002\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u5f97\u65e0\u9700\u79fb\u52a8\u5927\u4f53\u91cf\u7684\u5a92\u4f53\u6570\u636e\uff0c\u4f7f\u6570\u636e\u96c6\u63cf\u8ff0\u5206\u53d1\u66f4\u52a0\u8f7b\u91cf\u5316\u3002\u4e0e\u6b64\u540c\u65f6\u5141\u8bb8\u5feb\u901f\u7684\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\uff1a\u7ec4\u5408\u591a\u4e2a\u96c6\u5408\u3001\u5408\u5e76\u5c5e\u6027\u6216\u8005\u53d6\u67d0\u4e2a\u5b50\u96c6\u3002","title":"2.3 \u76ee\u6807\u5b9a\u4f4d\u5668 (Object locators)"},{"location":"dsdl_language/overview/#24-yamljson","text":"DSDL\u5c5e\u4e8e\u7279\u5b9a\u9886\u57df\u7684\u8bed\u8a00\uff0c\u57fa\u4e8e\u5f53\u524d\u6d41\u884c\u7684\u6570\u636e\u4ea4\u4e92\u8bed\u8a00YAML\u6216\u8005JSON\u8fdb\u884c\u5b9a\u4e49\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cYAML\u6216JSON\u4e2d\u7684\u5143\u7d20\u5728\u8bed\u8a00\u7ea7\u522b\u4e0a\u5e76\u4e0d\u4e0e\u7279\u5b9a\u7684\u542b\u4e49\u76f8\u5173\u8054\u3002\u800c\u6211\u4eec\u901a\u8fc7\u8d4b\u4e88\u8fd9\u4e9b\u5143\u7d20\u4ee5\u7279\u5b9a\u8bed\u4e49\uff0cDSDL\u53ef\u4ee5\u4ee5\u4e00\u79cd\u6709\u610f\u4e49\u7684\u65b9\u5f0f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u4f7f\u5f97\u4f7f\u7528\u8005\u53ef\u4ee5\u4f7f\u7528YAML\u548cJSON\u8bed\u8a00\u5bf9\u5e94\u7684\u4e30\u5bcc\u5de5\u5177\u7cfb\u7edf\u3002\u57fa\u4e8e\u8fd9\u4e9b\u5de5\u5177\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6784\u5efa\u4e00\u5957\u5b8c\u6574\u7cfb\u7edf\uff1a\u652f\u6301\u89e3\u6790\u3001\u6821\u9a8c\u548c\u67e5\u8be2\u7b49\u529f\u80fd\uff0c\u5e76\u57fa\u4e8e\u4e92\u8054\u7f51\u751f\u6001\u7cfb\u7edf\u8fdb\u884c\u4fbf\u6377\u5730\u4ea4\u4e92\u3002","title":"2.4 \u57fa\u4e8eYAML\u6216\u8005JSON"},{"location":"dsdl_language/tutorial/","text":"\u4f7f\u7528\u6559\u7a0b","title":"\u4f7f\u7528\u6559\u7a0b"},{"location":"dsdl_language/tutorial/#_1","text":"","title":"\u4f7f\u7528\u6559\u7a0b"},{"location":"dsdl_language/examples/cv/","text":"\u8ba1\u7b97\u673a\u89c6\u89c9 \u672c\u7ae0\u8282\u5b9a\u4e49\u7684\u6240\u6709\u7c7b\u90fd\u5c06\u901a\u8fc7\u6807\u51c6\u5e93cv\u63d0\u4f9b\u3002\u666e\u901a\u7528\u6237\u53ea\u9700\u901a\u8fc7import\u65b9\u5f0f\u5bfc\u5165cv\u6807\u51c6\u5e93\uff0c\u65e0\u9700\u81ea\u5df1\u5199\u7c7b\u522b\u5b9a\u4e49\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u540d\u4e3a``MyClassDom``\u7684\u7c7b\u522b\u57df\u3002 \u56fe\u50cf\u5206\u7c7b \u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u662f\u7ed9\u6bcf\u5f20\u56fe\u50cf\u5206\u914d\u4e00\u4e2a\u7c7b\u522b\u6807\u7b7e\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: ImageClassificationSample : # Each sample contains an image together with a class label (optional). $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] $optional : [ 'label' ] \u5176\u4e2d, $optional \u5b57\u6bb5\u5728\u6570\u636e\u6837\u4f8b\u4e2d\u53ef\u4ee5\u88ab\u7701\u7565\u3002\u5f53 $optional \u4e2d label \u88ab\u5ffd\u7565\u65f6\uff0c\u5bf9\u5e94\u7684\u5b57\u6bb5\u503c\u5c06\u88ab\u8bbe\u7f6e\u6210\u4e00\u4e2a\u7a7a\u503c\uff08\u5bf9\u5e94Python\u4e2d\u7684 None \uff09 \u6570\u636e\u793a\u4f8b: data : sample-type : ImageClassificationSample[cdom=MyClassDom] sample-path : $local samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } - { image : \"xyz/0003.jpg\" } \u76ee\u6807\u68c0\u6d4b \u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u662f\u68c0\u6d4b\u7ed9\u5b9a\u56fe\u50cf\u4e2d\u7684\u6709\u610f\u4e49\u76ee\u6807\u3002\u6bcf\u4e2a\u88ab\u68c0\u6d4b\u7684\u76ee\u6807\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a\u5e26\u76ee\u6807\u7c7b\u522b\u4fe1\u606f\u7684\u8fb9\u754c\u6846\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: LocalObjectEntry : # Each sample contains a bounding box together a class label (optional). $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] $optional : [ 'label' ] ObjectDetectionSample : # Each sample contains an image together with a list of local objects. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] \u6570\u636e\u793a\u4f8b: data : sample-type : ObjectDetectionSample[cdom=MyClassDom] sample-path : $local samples : - image : \"xyz/0001.jpg\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 } \u5e26\u573a\u666f\u5206\u7c7b\u7684\u76ee\u6807\u68c0\u6d4b \u5728\u67d0\u4e9b\u5e94\u7528\u4e2d\uff0c\u573a\u666f\u5206\u7c7b\uff08\u56fe\u50cf\u7ea7\u522b\uff09\u53ca\u76ee\u6807\u68c0\u6d4b\u4f1a\u7ec4\u6210\u4e00\u4e2a\u8054\u5408\u4efb\u52a1\u3002\u5bf9\u4e8e\u8fd9\u6837\u4e00\u4e2a\u4efb\u52a1\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u7c7b\u522b\u57df\uff0c\u8fd9\u91cc\u79f0\u4e3a SceneDom \u548c ObjectDom \uff0c\u5206\u522b\u9650\u5b9a\u573a\u666f\u7c7b\u522b\u548c\u76ee\u6807\u7c7b\u522b\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: SceneAndObjectSample : # Each samples contains an image, a scene label (optional) # together with a list of local objects. $def : struct $params : [ 'scenedom' , 'objectdom' ] $fields : image : Image sclabel : Label[dom=$scenedom] objects : List[LocalObjectEntry[cdom=$objectdom]] $optional : [ 'sclabel' ] \u6570\u636e\u793a\u4f8b: data : sample-type : SceneAndObjectSample[scenedom=SceneDom, objectdom=ObjectDom] sample-path : $local samples : - image : \"xyz/0001.jpg\" sclabel : \"street\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" sclabel : \"river\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 } \u56fe\u50cf\u5206\u5272 \u56fe\u50cf\u5206\u5272\u4efb\u52a1\u662f\u5bf9\u7ed9\u5b9a\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u70b9\u6307\u5b9a\u50cf\u7d20\u7ea7\u6807\u7b7e\u3002\u60ef\u4f8b\u662f\u4f7f\u7528\u6807\u7b7e\u56fe\uff0c\u4e5f\u5c31\u662f\u5728\u4e00\u4e2a\u989d\u5916\u7684\u6587\u4ef6\u4e2d\u5b58\u50a8\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: ImageSegmentationSample : # Each sample contains an image together with a label map. $def : struct $params : [ 'cdom' ] $fields : image : Image labelmap : LabelMap[dom=$cdom] \u6570\u636e\u793a\u4f8b: data : sample-type : ImageSegmentationSample[cdom=MyClassDom] sample-path : $local samples : - { image : \"imgs/0001.jpg\" , labelmap : \"maps/0001.ppm\" } - { image : \"imgs/0002.jpg\" , labelmap : \"maps/0002.ppm\" } - { image : \"imgs/0003.jpg\" , labelmap : \"maps/0003.ppm\" }","title":"\u8ba1\u7b97\u673a\u89c6\u89c9"},{"location":"dsdl_language/examples/cv/#_1","text":"\u672c\u7ae0\u8282\u5b9a\u4e49\u7684\u6240\u6709\u7c7b\u90fd\u5c06\u901a\u8fc7\u6807\u51c6\u5e93cv\u63d0\u4f9b\u3002\u666e\u901a\u7528\u6237\u53ea\u9700\u901a\u8fc7import\u65b9\u5f0f\u5bfc\u5165cv\u6807\u51c6\u5e93\uff0c\u65e0\u9700\u81ea\u5df1\u5199\u7c7b\u522b\u5b9a\u4e49\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u540d\u4e3a``MyClassDom``\u7684\u7c7b\u522b\u57df\u3002","title":"\u8ba1\u7b97\u673a\u89c6\u89c9"},{"location":"dsdl_language/examples/cv/#_2","text":"\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u662f\u7ed9\u6bcf\u5f20\u56fe\u50cf\u5206\u914d\u4e00\u4e2a\u7c7b\u522b\u6807\u7b7e\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: ImageClassificationSample : # Each sample contains an image together with a class label (optional). $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] $optional : [ 'label' ] \u5176\u4e2d, $optional \u5b57\u6bb5\u5728\u6570\u636e\u6837\u4f8b\u4e2d\u53ef\u4ee5\u88ab\u7701\u7565\u3002\u5f53 $optional \u4e2d label \u88ab\u5ffd\u7565\u65f6\uff0c\u5bf9\u5e94\u7684\u5b57\u6bb5\u503c\u5c06\u88ab\u8bbe\u7f6e\u6210\u4e00\u4e2a\u7a7a\u503c\uff08\u5bf9\u5e94Python\u4e2d\u7684 None \uff09 \u6570\u636e\u793a\u4f8b: data : sample-type : ImageClassificationSample[cdom=MyClassDom] sample-path : $local samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } - { image : \"xyz/0003.jpg\" }","title":"\u56fe\u50cf\u5206\u7c7b"},{"location":"dsdl_language/examples/cv/#_3","text":"\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u662f\u68c0\u6d4b\u7ed9\u5b9a\u56fe\u50cf\u4e2d\u7684\u6709\u610f\u4e49\u76ee\u6807\u3002\u6bcf\u4e2a\u88ab\u68c0\u6d4b\u7684\u76ee\u6807\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a\u5e26\u76ee\u6807\u7c7b\u522b\u4fe1\u606f\u7684\u8fb9\u754c\u6846\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: LocalObjectEntry : # Each sample contains a bounding box together a class label (optional). $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] $optional : [ 'label' ] ObjectDetectionSample : # Each sample contains an image together with a list of local objects. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] \u6570\u636e\u793a\u4f8b: data : sample-type : ObjectDetectionSample[cdom=MyClassDom] sample-path : $local samples : - image : \"xyz/0001.jpg\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 }","title":"\u76ee\u6807\u68c0\u6d4b"},{"location":"dsdl_language/examples/cv/#_4","text":"\u5728\u67d0\u4e9b\u5e94\u7528\u4e2d\uff0c\u573a\u666f\u5206\u7c7b\uff08\u56fe\u50cf\u7ea7\u522b\uff09\u53ca\u76ee\u6807\u68c0\u6d4b\u4f1a\u7ec4\u6210\u4e00\u4e2a\u8054\u5408\u4efb\u52a1\u3002\u5bf9\u4e8e\u8fd9\u6837\u4e00\u4e2a\u4efb\u52a1\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u7c7b\u522b\u57df\uff0c\u8fd9\u91cc\u79f0\u4e3a SceneDom \u548c ObjectDom \uff0c\u5206\u522b\u9650\u5b9a\u573a\u666f\u7c7b\u522b\u548c\u76ee\u6807\u7c7b\u522b\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: SceneAndObjectSample : # Each samples contains an image, a scene label (optional) # together with a list of local objects. $def : struct $params : [ 'scenedom' , 'objectdom' ] $fields : image : Image sclabel : Label[dom=$scenedom] objects : List[LocalObjectEntry[cdom=$objectdom]] $optional : [ 'sclabel' ] \u6570\u636e\u793a\u4f8b: data : sample-type : SceneAndObjectSample[scenedom=SceneDom, objectdom=ObjectDom] sample-path : $local samples : - image : \"xyz/0001.jpg\" sclabel : \"street\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" sclabel : \"river\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 }","title":"\u5e26\u573a\u666f\u5206\u7c7b\u7684\u76ee\u6807\u68c0\u6d4b"},{"location":"dsdl_language/examples/cv/#_5","text":"\u56fe\u50cf\u5206\u5272\u4efb\u52a1\u662f\u5bf9\u7ed9\u5b9a\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u70b9\u6307\u5b9a\u50cf\u7d20\u7ea7\u6807\u7b7e\u3002\u60ef\u4f8b\u662f\u4f7f\u7528\u6807\u7b7e\u56fe\uff0c\u4e5f\u5c31\u662f\u5728\u4e00\u4e2a\u989d\u5916\u7684\u6587\u4ef6\u4e2d\u5b58\u50a8\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u3002 \u7c7b\u5b9a\u4e49\u793a\u4f8b: ImageSegmentationSample : # Each sample contains an image together with a label map. $def : struct $params : [ 'cdom' ] $fields : image : Image labelmap : LabelMap[dom=$cdom] \u6570\u636e\u793a\u4f8b: data : sample-type : ImageSegmentationSample[cdom=MyClassDom] sample-path : $local samples : - { image : \"imgs/0001.jpg\" , labelmap : \"maps/0001.ppm\" } - { image : \"imgs/0002.jpg\" , labelmap : \"maps/0002.ppm\" } - { image : \"imgs/0003.jpg\" , labelmap : \"maps/0003.ppm\" }","title":"\u56fe\u50cf\u5206\u5272"},{"location":"dsdl_language/lang/basic_types/","text":"2.2 \u57fa\u672c\u6570\u636e\u7c7b\u578b \u57fa\u672c\u6570\u636e\u7c7b\u578b \uff08basic types\uff09\u662fDSDL\u4e2d\u7684\u57fa\u672c\u5143\u7d20\u62bd\u8c61\u51fa\u6765\u7684\u4e00\u4e9b\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u4e9b\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u4f8b\u662f\u6784\u5efa\u4e00\u4e2a\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684\u57fa\u7840\u6784\u5efa\u6a21\u5757\u3002 \u6ce8\u610f\uff1a \u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u6240\u4f7f\u7528\u7684JSON\u548cYAML\u683c\u5f0f\u672c\u8eab\u4e5f\u4f1a\u63d0\u4f9b\u4e86\u4e00\u4e9b\u8bed\u6cd5\u6765\u8868\u793a\u4e00\u4e9b\u7b80\u5355\u7684\u7c7b\u522b\uff0c\u6bd4\u5982\u5e03\u5c14\u7c7b\u578b\uff0c\u6570\u5b57\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\u3002\u5f53\u5728DSDL\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u8bed\u6cd5\u65f6\u6765\u8868\u793a\u4e00\u4e2a\u503c\u65f6\uff0cDSDL\u4f1a\u4fdd\u7559\u8fd9\u4e9b\u503c\u5728JSON/YAML\u683c\u5f0f\u4e2d\u539f\u672c\u7684\u542b\u4e49\u3002\u9700\u8981\u6ce8\u610f\u7684\u5f88\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0cDSDL\u57fa\u672c\u6570\u636e\u7c7b\u578b\u548cJSON\u4e2d\u6570\u636e\u7c7b\u578b \u4e0d\u662f \u4e00\u5bf9\u4e00\u7684\u3002DSDL\u4e2d\u4e0d\u540c\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u53ef\u80fd\u4f1a\u4f7f\u7528\u76f8\u540c\u7684JSON\u7c7b\u578b\u6765\u8868\u793a\u4ed6\u4eec\u5404\u81ea\u7684\u503c\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u7c7b\u578b\uff08 Loc \uff09\u548c\u7c7b\u522b\u6807\u6ce8\u7c7b\u578b\uff08 Label \uff09\u5728DSDL\u4e2d\u662f\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\u4ed6\u4eec\u90fd\u4f7f\u7528\u4e86\u5b57\u7b26\u4e32\u7c7b\u578b\u6765\u8868\u793a\u4ed6\u4eec\u5404\u81ea\u7684\u503c\u3002 2.2.1 \u901a\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b DSDL\u5b9a\u4e49\u4e864\u79cd\u901a\u7528\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002\u8fd94\u79cd\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u88ab\u7b80\u5355\u5730\u89e3\u91ca\uff0c\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 Bool \uff1a\u5e03\u5c14\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u4e3a true \u6216 false \u3002 Int \uff1a\u6574\u6570\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u4e3a\u4efb\u610f\u7684\u6574\u6570\uff0c\u4f8b\u598212\uff0c-3\u62160\u3002\u5f53\u4e00\u4e2a\u6570\u5b57\u88ab\u58f0\u660e\u4e3a Int \u7c7b\u578b\u65f6\uff0cDSDL\u89e3\u91ca\u5668\u4f1a\u9a8c\u8bc1\u5b83\u662f\u5426\u771f\u7684\u662f\u4e00\u4e2a\u6574\u6570\u3002 Num \uff1a\u901a\u7528\u6570\u503c\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u7684\u6570\u5b57\uff0c\u4f8b\u598212.5\uff0c-13\uff0c1.25e-6\u3002 Str \uff1a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\"hello\"\uff0c\"a\"\uff0c\"\"\u3002 Dict \uff1a\u5b57\u5178\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u4f8b\u5982 {\"name\": \"dsdl\", \"age\": 0} 2.2.2 \u7279\u6b8a\u57fa\u672c\u6570\u636e\u7c7b\u578b DSDL\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5177\u6709\u7279\u6b8a\u542b\u4e49\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u4e9b\u6570\u636e\u7c7b\u578b\u7684\u503c\u540c\u6837\u901a\u8fc7\u5b57\u7b26\u4e32\u6216\u5176\u4ed6JSON\u683c\u5f0f\u7684\u57fa\u672c\u7c7b\u578b\u6765\u8868\u793a\uff0c\u4f46\u662f\u4ed6\u4eec\u6709\u7279\u6b8a\u7684\u8bed\u4e49\uff0cDSDL\u89e3\u6790\u5668\u4f1a\u6839\u636e\u4ed6\u4eec\u5404\u81ea\u7684\u8bed\u4e49\u76f8\u5e94\u5730\u89e3\u6790\u4ed6\u4eec\u3002 Coord \uff1a2D\u5750\u6807\uff0c\u683c\u5f0f\u4e3a [x, y] Coord3D \uff1a3D\u5750\u6807\uff0c\u683c\u5f0f\u4e3a [x, y, z] Interval \uff1a\u5e8f\u5217\u95f4\u9694\uff0c\u683c\u5f0f\u4e3a [begin, end] BBox \uff1abounding box\uff0c\u683c\u5f0f\u4e3a [x, y, w, h] RotatedBBox \uff1arotated bounding box\uff0c\u683c\u5f0f\u4e3a [x1, y1, x2, y2, x3, y3, x4, y4] \u6216\u8005 [x, y, w, h, angle] Keypoint \uff1a\u5173\u952e\u70b9\uff0c\u683c\u5f0f\u4e3a [[x1, y1, visable1], [x2, y2, visable2], ...] Polygon \uff1a\u591a\u8fb9\u5f62\u7531\u591a\u4e2a2D\u5750\u6807\u6765\u8868\u793a\uff0c\u683c\u5f0f\u4e3a [[x1, y1], [x2, y2], ...] Date \uff1a\u65e5\u671f\u7531\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\uff0c\u683c\u5f0f\u8be6\u89c1 strftime spec Time \uff1a\u65f6\u95f4\u7531\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\uff0c\u683c\u5f0f\u8be6\u89c1 strftime spec 2.2.3 Label\uff1a\u7c7b\u522b\u6807\u6ce8\u6570\u636e\u7c7b\u578b \u5206\u7c7b\u4efb\u52a1\u65e8\u5728\u8d4b\u4e88\u76ee\u6807\u8bed\u4e49\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u4f7f\u7528 \u7c7b\u522b\u6807\u6ce8 \u6765\u63cf\u8ff0\u76ee\u6807\u5c5e\u4e8e\u7684\u7c7b\u522b\u3002\u5728DSDL\u4e2d\uff0c\u7c7b\u522b\u6807\u6ce8\u662f\u7c7b\u578b\u6307\u5b9a\u4e3a Label \u7684\u5b57\u7b26\u4e32\u3002 \u5728\u5b9e\u9645\u5f53\u4e2d\uff0c\u4e0d\u540c\u7684\u5206\u7c7b\u4efb\u52a1\u4e2d\u7684\u7c7b\u522b\u4e5f\u5e94\u8be5\u662f\u4e0d\u540c\u7684\u3002DSDL\u5f15\u5165\u4e86 \u7c7b\u522b\u57df \uff08class domain\uff09\u7684\u6982\u5ff5\uff0c\u6765\u63cf\u8ff0\u4e0d\u540c\u5206\u7c7b\u4efb\u52a1\u4e2d\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u6bcf\u4e2a\u7c7b\u522b\u57df\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\u522b\u5217\u8868\u6216\u662f\u4e00\u4e2a\u7c7b\u522b\u5c42\u7ea7\u5173\u7cfb\u3002\u7ed9\u5b9a\u8981\u7ed9\u7c7b\u522b\u57df\uff0c\u7c7b\u522b\u6807\u6ce8\u5219\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u56db\u79cd\u5f62\u5f0f\u4e4b\u4e00\u6765\u63cf\u8ff0\uff1a \u57fa\u4e8e\u7c7b\u522b\u540d \uff1a\u683c\u5f0f\u4e3a \"<class-domain>::<class-name>\" \uff0c\u6bd4\u5982 COCO::cat \u8868\u793a\u4e86 COCO \u7c7b\u522b\u57df\u5185\u7684\u7c7b\u522b cat \u3002 \u57fa\u4e8e\u7c7b\u522b\u7d22\u5f15 \uff1a\u683c\u5f0f\u4e3a \"<class-domain>::<class-index>\" \uff0c\u6bd4\u5982 COCO::3 \u8868\u793a COCO \u7c7b\u522b\u57df\u5185\u7b2c\u4e09\u4e2a\u7c7b\u522b \u76f4\u63a5\u8f93\u5165\u7c7b\u522b\u540d \uff1a\u683c\u5f0f\u4e3a <class-name> \uff0c\u6bd4\u5982 cat \u8868\u793a\u4e86\u5728\u8be5Label\u7684class domain\u4e2d\u4e3a cat \u7684\u7c7b\u522b \u76f4\u63a5\u8f93\u5165\u7c7b\u522b\u7d22\u5f15 \uff1a\u683c\u5f0f\u4e3a <class-index> \uff0c\u6bd4\u5982 3 \u8868\u793a\u4e86\u5728\u8be5Label\u7684class domain\u4e2d\u7d22\u5f15\u4e3a3\u7684\u7c7b\u522b \u5bf9\u4e8e\u4e00\u4e2a\u6709\u5c42\u7ea7\u5173\u7cfb\u7684\u7c7b\u522b\u7684\u7c7b\u522b\u57df\uff0c\u6211\u4eec\u9700\u8981\u5728 class_dom \u4e2d\u5b9a\u4e49\uff0c\u5177\u4f53\u53c2\u89c1 2.5.3 \u5b9a\u4e49\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\u7684\u7c7b\u522b\u57df \u6ce8\u610f\uff1a \u6211\u4eec\u6b63\u5728\u8bd5\u56fe\u7edf\u4e00\u5404\u79cd\u4efb\u52a1\u7c7b\u578b\u7684\u7c7b\u522b\u6807\u6ce8\u7cfb\u7edf\u3002\u56e0\u6b64\u6211\u4eec\u5c06\u9884\u7559\u4e00\u4e2a\u57df\u540d std \uff0c\u7528\u4e8e\u5728\u4ee5\u540e\u63cf\u8ff0\u6807\u51c6\u7684\u5206\u7c7b\u4efb\u52a1\u7684\u5206\u7c7b\u57df\u3002 2.2.4 Loc\uff1a\u5bf9\u8c61\u5b9a\u4f4d\u6570\u636e\u7c7b\u578b \u5bf9\u8c61\u5b9a\u4f4d\u5668\u7684\u4f5c\u7528\u662f\u4f5c\u4e3a\u5bf9\u56fe\u50cf\uff0c\u89c6\u9891\uff0c\u6587\u672c\u7b49\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u6570\u636e\u7c7b\u578b\u5373\u4e3a Loc \u6570\u636e\u7c7b\u578b\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u5177\u4f53\u503c\u901a\u8fc7\u4e00\u4e2a\u7279\u6b8a\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u6765\u8868\u793a\u3002\u5177\u4f53\u6765\u8bb2\uff0cDSDL\u652f\u6301\u4e0b\u9762\u65b9\u5f0f\u6765\u63cf\u8ff0\u4e00\u4e2a\u5bf9\u8c61\u5b9a\u4f4d\u5668\uff1a relative path \uff1a\u76f8\u5bf9\u4e8e\u6570\u636e\u96c6\u7684\u6839\u8def\u5f84\u7684\u8def\u5f84\u3002\u5bf9\u8c61\u5b9a\u4f4d\u5668\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u5c31\u662f\u76f8\u5bf9\u8def\u5f84\u3002\u5f53\u5bf9\u8c61\u5b9a\u4f4d\u5668\u5b57\u7b26\u4e32\u6ca1\u6709\u7279\u6b8a\u7684\u524d\u7f00\u65f6\uff0c\u4ed6\u5c31\u4f1a\u88ab\u5f53\u4f5c\u662f\u4e00\u4e2a\u76f8\u5bf9\u8def\u5f84\u3002\u4f8b\u5982\uff0c \"abc/001.jpg\" \u5c06\u4f1a\u88ab\u89e3\u6790\u4e3a \"<data-root>/abc/001.jpg\" \uff0c\u5176\u4e2d data-root \u4e3a\u6839\u76ee\u5f55\uff0c\u6240\u6709\u7684\u6570\u636e\u5bf9\u8c61\u90fd\u5b58\u50a8\u5176\u4e2d\uff0c\u5e76\u4e14\u6839\u76ee\u5f55\u53ef\u4ee5\u5728\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002 2.2.5 \u4f7f\u7528\u7c7b\u578b\u53c2\u6570 \u4eceDSDL\u7f16\u8bd1\u5668\u7684\u89c6\u89d2\u6765\u770b\uff0c\u5143\u7d20\u7684\u7c7b\u578b\u51b3\u5b9a\u4e86\u8be5\u5143\u7d20\u5982\u4f55\u88ab\u89e3\u6790\u4e0e\u9a8c\u8bc1\u3002\u9664\u4e86\u7c7b\u578b\u540d\u79f0\u4ee5\u5916\uff0cDSDL\u8fd8\u5141\u8bb8\u7528\u6237\u63d0\u4f9b \u7c7b\u578b\u53c2\u6570 \u6765\u81ea\u5b9a\u4e49\u5143\u7d20\u5982\u4f55\u88ab\u8868\u793a\uff0c\u89e3\u6790\u4e0e\u9a8c\u8bc1\u3002 \u4f7f\u7528\u7c7b\u578b\u53c2\u6570\u7684Label\u6570\u636e\u7c7b\u578b \u5728 \u5feb\u901f\u5165\u95e8 \u4e2d\u7684\u7684\u4f8b\u5b50\u4e2d\uff0c ImageClassificationSample \u4e2d\u7684 label \u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u6307\u5b9a\u4e3a\u4e86 Label[dom=MyClassDom] \u3002 \u8fd9\u91cc\uff0c Label \u5c31\u662f\u4e00\u4e2a \u542b\u53c2\u7684\u6570\u636e\u7c7b\u578b \uff08parametric type\uff09\uff0c\u6307\u5b9a\u4e86\u4e00\u4e2a \u7c7b\u578b\u53c2\u6570 dom \u3002\u8fd9\u91cc\u7684 dom \u53c2\u6570\u6307\u5b9a\u4e86label\u5c5e\u4e8e\u7684\u7c7b\u522b\u57df\u3002 \u5f53\u7c7b\u522b\u57df\u88ab\u663e\u793a\u5730\u6307\u5b9a\u4e4b\u540e\uff08\u4f8b\u5b50\u4e2d\u6307\u5b9a\u4e3a MyClassDom \uff09\uff0c\u5c31\u4e0d\u9700\u8981\u518d\u5728\u6570\u636e\u5bf9\u8c61\u4e2d\u6307\u660e\u6807\u6ce8\u7c7b\u522b\u7684\u7c7b\u522b\u57df\u4e86\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6570\u636e\u5bf9\u8c61\u4e2d\u7684\u6807\u6ce8\u7c7b\u522b MyClassDom::cat \u6b64\u65f6\u53ef\u4ee5\u76f4\u63a5\u7b80\u5199\u4e3a cat \uff1b\u6570\u636e\u5bf9\u8c61\u4e2d\u7684\u6807\u6ce8\u7c7b\u522b MyClassDom[2] \u6b64\u65f6\u53ef\u4ee5\u76f4\u63a5\u7b80\u5199\u4e3a 2 \u3002 \u4f7f\u7528\u7c7b\u578b\u53c2\u6570\u7684Date\u548cTime\u6570\u636e\u7c7b\u578b \u5bf9\u4e8e Date \u548c Time \u6570\u636e\u7c7b\u578b\uff0c\u5f53\u6ca1\u6709\u663e\u793a\u5730\u6307\u5b9a\u7c7b\u578b\u53c2\u6570\u7684\u8bdd\uff0c\u5b83\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u503c\u5e94\u8be5\u9075\u5faaISO 8601\u683c\u5f0f\u3002\u89e3\u6790\u5668\u4f1a date.fromisoformat \u548c time.fromisoformat \u6765\u89e3\u6790\u5b57\u7b26\u4e32\u3002 \u7528\u6237\u8fd8\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u7c7b\u578b\u53c2\u6570 fmt \u6765\u81ea\u5b9a\u4e49\u683c\u5f0f\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u6570\u636e\u7c7b\u578b Time[fmt=\"%H:%M\"] \u6765\u8981\u6c42\u6570\u636e\u503c\u9075\u5faa %H:%M \u7684\u683c\u5f0f\uff0c\u4f8b\u5982 \"15:32\" \u3002\u5f53 fmt \u88ab\u663e\u793a\u5730\u6307\u5b9a\u4e86\uff0c fmt \u7684\u503c\u4f1a\u88ab\u4f20\u5165 strptime \u51fd\u6570\u6765\u89e3\u6790\u65f6\u95f4\u5b57\u7b26\u4e32\u3002 Data \u6570\u636e\u7c7b\u578b\u540c\u6837\u53ef\u4ee5\u6307\u5b9a\u8be5\u53c2\u6570\u3002 2.2.6 \u5217\u8868\u6570\u636e\u7c7b\u578b DSDL\u63d0\u4f9b\u4e86\u542b\u53c2\u6570\u636e\u7c7b\u578b List \u6765\u8868\u793a\u65e0\u5e8f\u6216\u6709\u5e8f\u7684\u5217\u8868\u3002\u5177\u4f53\u6765\u8bf4\uff0c List \u6570\u636e\u7c7b\u578b\u7684\u5b9e\u4f8b\u662f\u5305\u542b\u4e86\u591a\u4e2a\u6570\u636e\u7c7b\u578b\u76f8\u540c\u7684\u5143\u7d20\u7684\u5217\u8868\u3002 \u542b\u53c2\u6570\u636e\u7c7b\u578b List \u6709\u4e24\u4e2a\u53c2\u6570\uff1a etype \uff1a\u5217\u8868\u4e2d\u5355\u4e2a\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u88ab\u663e\u793a\u5730\u6307\u5b9a\u3002 ordered \uff1a\u5217\u8868\u4e2d\u7684\u5143\u7d20\u4e4b\u95f4\u662f\u5426\u6709\u987a\u5e8f\u5173\u7cfb\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u503c\u4e3a false \u3002\u53ea\u6709\u5f53\u5e8f\u5217\u662f\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u53c2\u6570\u624d\u5e94\u8be5\u88ab\u8bbe\u4e3a true \uff0c\u6bd4\u5982\u89c6\u9891\u5e27\u5e8f\u5217\u4e0e\u65f6\u95f4\u5e8f\u5217\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5143\u7d20\u4e3a\u6574\u578b\u7684\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u5217\u8868\u6570\u636e\u7c7b\u578b\u8868\u793a\u4e3a List[Int] \uff1b\u5bf9\u4e8e\u5143\u7d20\u4e3a\u7c7b\u522b\u57df\u4e3a MyClassDom \u7684\u7c7b\u522b\u6807\u6ce8\u7684\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u5217\u8868\u6570\u636e\u7c7b\u578b\u8868\u793a\u4e3a List[Label[MyClassDom]]","title":"\u57fa\u672c\u6570\u636e\u7c7b\u578b"},{"location":"dsdl_language/lang/basic_types/#22","text":"\u57fa\u672c\u6570\u636e\u7c7b\u578b \uff08basic types\uff09\u662fDSDL\u4e2d\u7684\u57fa\u672c\u5143\u7d20\u62bd\u8c61\u51fa\u6765\u7684\u4e00\u4e9b\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u4e9b\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u4f8b\u662f\u6784\u5efa\u4e00\u4e2a\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684\u57fa\u7840\u6784\u5efa\u6a21\u5757\u3002 \u6ce8\u610f\uff1a \u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u6240\u4f7f\u7528\u7684JSON\u548cYAML\u683c\u5f0f\u672c\u8eab\u4e5f\u4f1a\u63d0\u4f9b\u4e86\u4e00\u4e9b\u8bed\u6cd5\u6765\u8868\u793a\u4e00\u4e9b\u7b80\u5355\u7684\u7c7b\u522b\uff0c\u6bd4\u5982\u5e03\u5c14\u7c7b\u578b\uff0c\u6570\u5b57\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\u3002\u5f53\u5728DSDL\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u8bed\u6cd5\u65f6\u6765\u8868\u793a\u4e00\u4e2a\u503c\u65f6\uff0cDSDL\u4f1a\u4fdd\u7559\u8fd9\u4e9b\u503c\u5728JSON/YAML\u683c\u5f0f\u4e2d\u539f\u672c\u7684\u542b\u4e49\u3002\u9700\u8981\u6ce8\u610f\u7684\u5f88\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0cDSDL\u57fa\u672c\u6570\u636e\u7c7b\u578b\u548cJSON\u4e2d\u6570\u636e\u7c7b\u578b \u4e0d\u662f \u4e00\u5bf9\u4e00\u7684\u3002DSDL\u4e2d\u4e0d\u540c\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u53ef\u80fd\u4f1a\u4f7f\u7528\u76f8\u540c\u7684JSON\u7c7b\u578b\u6765\u8868\u793a\u4ed6\u4eec\u5404\u81ea\u7684\u503c\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u7c7b\u578b\uff08 Loc \uff09\u548c\u7c7b\u522b\u6807\u6ce8\u7c7b\u578b\uff08 Label \uff09\u5728DSDL\u4e2d\u662f\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\u4ed6\u4eec\u90fd\u4f7f\u7528\u4e86\u5b57\u7b26\u4e32\u7c7b\u578b\u6765\u8868\u793a\u4ed6\u4eec\u5404\u81ea\u7684\u503c\u3002","title":"2.2 \u57fa\u672c\u6570\u636e\u7c7b\u578b"},{"location":"dsdl_language/lang/basic_types/#221","text":"DSDL\u5b9a\u4e49\u4e864\u79cd\u901a\u7528\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002\u8fd94\u79cd\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u88ab\u7b80\u5355\u5730\u89e3\u91ca\uff0c\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 Bool \uff1a\u5e03\u5c14\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u4e3a true \u6216 false \u3002 Int \uff1a\u6574\u6570\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u4e3a\u4efb\u610f\u7684\u6574\u6570\uff0c\u4f8b\u598212\uff0c-3\u62160\u3002\u5f53\u4e00\u4e2a\u6570\u5b57\u88ab\u58f0\u660e\u4e3a Int \u7c7b\u578b\u65f6\uff0cDSDL\u89e3\u91ca\u5668\u4f1a\u9a8c\u8bc1\u5b83\u662f\u5426\u771f\u7684\u662f\u4e00\u4e2a\u6574\u6570\u3002 Num \uff1a\u901a\u7528\u6570\u503c\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u7684\u6570\u5b57\uff0c\u4f8b\u598212.5\uff0c-13\uff0c1.25e-6\u3002 Str \uff1a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\"hello\"\uff0c\"a\"\uff0c\"\"\u3002 Dict \uff1a\u5b57\u5178\u7c7b\u578b\uff0c\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u4f8b\u5982 {\"name\": \"dsdl\", \"age\": 0}","title":"2.2.1 \u901a\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b"},{"location":"dsdl_language/lang/basic_types/#222","text":"DSDL\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5177\u6709\u7279\u6b8a\u542b\u4e49\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u4e9b\u6570\u636e\u7c7b\u578b\u7684\u503c\u540c\u6837\u901a\u8fc7\u5b57\u7b26\u4e32\u6216\u5176\u4ed6JSON\u683c\u5f0f\u7684\u57fa\u672c\u7c7b\u578b\u6765\u8868\u793a\uff0c\u4f46\u662f\u4ed6\u4eec\u6709\u7279\u6b8a\u7684\u8bed\u4e49\uff0cDSDL\u89e3\u6790\u5668\u4f1a\u6839\u636e\u4ed6\u4eec\u5404\u81ea\u7684\u8bed\u4e49\u76f8\u5e94\u5730\u89e3\u6790\u4ed6\u4eec\u3002 Coord \uff1a2D\u5750\u6807\uff0c\u683c\u5f0f\u4e3a [x, y] Coord3D \uff1a3D\u5750\u6807\uff0c\u683c\u5f0f\u4e3a [x, y, z] Interval \uff1a\u5e8f\u5217\u95f4\u9694\uff0c\u683c\u5f0f\u4e3a [begin, end] BBox \uff1abounding box\uff0c\u683c\u5f0f\u4e3a [x, y, w, h] RotatedBBox \uff1arotated bounding box\uff0c\u683c\u5f0f\u4e3a [x1, y1, x2, y2, x3, y3, x4, y4] \u6216\u8005 [x, y, w, h, angle] Keypoint \uff1a\u5173\u952e\u70b9\uff0c\u683c\u5f0f\u4e3a [[x1, y1, visable1], [x2, y2, visable2], ...] Polygon \uff1a\u591a\u8fb9\u5f62\u7531\u591a\u4e2a2D\u5750\u6807\u6765\u8868\u793a\uff0c\u683c\u5f0f\u4e3a [[x1, y1], [x2, y2], ...] Date \uff1a\u65e5\u671f\u7531\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\uff0c\u683c\u5f0f\u8be6\u89c1 strftime spec Time \uff1a\u65f6\u95f4\u7531\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\uff0c\u683c\u5f0f\u8be6\u89c1 strftime spec","title":"2.2.2 \u7279\u6b8a\u57fa\u672c\u6570\u636e\u7c7b\u578b"},{"location":"dsdl_language/lang/basic_types/#223-label","text":"\u5206\u7c7b\u4efb\u52a1\u65e8\u5728\u8d4b\u4e88\u76ee\u6807\u8bed\u4e49\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u4f7f\u7528 \u7c7b\u522b\u6807\u6ce8 \u6765\u63cf\u8ff0\u76ee\u6807\u5c5e\u4e8e\u7684\u7c7b\u522b\u3002\u5728DSDL\u4e2d\uff0c\u7c7b\u522b\u6807\u6ce8\u662f\u7c7b\u578b\u6307\u5b9a\u4e3a Label \u7684\u5b57\u7b26\u4e32\u3002 \u5728\u5b9e\u9645\u5f53\u4e2d\uff0c\u4e0d\u540c\u7684\u5206\u7c7b\u4efb\u52a1\u4e2d\u7684\u7c7b\u522b\u4e5f\u5e94\u8be5\u662f\u4e0d\u540c\u7684\u3002DSDL\u5f15\u5165\u4e86 \u7c7b\u522b\u57df \uff08class domain\uff09\u7684\u6982\u5ff5\uff0c\u6765\u63cf\u8ff0\u4e0d\u540c\u5206\u7c7b\u4efb\u52a1\u4e2d\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u6bcf\u4e2a\u7c7b\u522b\u57df\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\u522b\u5217\u8868\u6216\u662f\u4e00\u4e2a\u7c7b\u522b\u5c42\u7ea7\u5173\u7cfb\u3002\u7ed9\u5b9a\u8981\u7ed9\u7c7b\u522b\u57df\uff0c\u7c7b\u522b\u6807\u6ce8\u5219\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u56db\u79cd\u5f62\u5f0f\u4e4b\u4e00\u6765\u63cf\u8ff0\uff1a \u57fa\u4e8e\u7c7b\u522b\u540d \uff1a\u683c\u5f0f\u4e3a \"<class-domain>::<class-name>\" \uff0c\u6bd4\u5982 COCO::cat \u8868\u793a\u4e86 COCO \u7c7b\u522b\u57df\u5185\u7684\u7c7b\u522b cat \u3002 \u57fa\u4e8e\u7c7b\u522b\u7d22\u5f15 \uff1a\u683c\u5f0f\u4e3a \"<class-domain>::<class-index>\" \uff0c\u6bd4\u5982 COCO::3 \u8868\u793a COCO \u7c7b\u522b\u57df\u5185\u7b2c\u4e09\u4e2a\u7c7b\u522b \u76f4\u63a5\u8f93\u5165\u7c7b\u522b\u540d \uff1a\u683c\u5f0f\u4e3a <class-name> \uff0c\u6bd4\u5982 cat \u8868\u793a\u4e86\u5728\u8be5Label\u7684class domain\u4e2d\u4e3a cat \u7684\u7c7b\u522b \u76f4\u63a5\u8f93\u5165\u7c7b\u522b\u7d22\u5f15 \uff1a\u683c\u5f0f\u4e3a <class-index> \uff0c\u6bd4\u5982 3 \u8868\u793a\u4e86\u5728\u8be5Label\u7684class domain\u4e2d\u7d22\u5f15\u4e3a3\u7684\u7c7b\u522b \u5bf9\u4e8e\u4e00\u4e2a\u6709\u5c42\u7ea7\u5173\u7cfb\u7684\u7c7b\u522b\u7684\u7c7b\u522b\u57df\uff0c\u6211\u4eec\u9700\u8981\u5728 class_dom \u4e2d\u5b9a\u4e49\uff0c\u5177\u4f53\u53c2\u89c1 2.5.3 \u5b9a\u4e49\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\u7684\u7c7b\u522b\u57df \u6ce8\u610f\uff1a \u6211\u4eec\u6b63\u5728\u8bd5\u56fe\u7edf\u4e00\u5404\u79cd\u4efb\u52a1\u7c7b\u578b\u7684\u7c7b\u522b\u6807\u6ce8\u7cfb\u7edf\u3002\u56e0\u6b64\u6211\u4eec\u5c06\u9884\u7559\u4e00\u4e2a\u57df\u540d std \uff0c\u7528\u4e8e\u5728\u4ee5\u540e\u63cf\u8ff0\u6807\u51c6\u7684\u5206\u7c7b\u4efb\u52a1\u7684\u5206\u7c7b\u57df\u3002","title":"2.2.3 Label\uff1a\u7c7b\u522b\u6807\u6ce8\u6570\u636e\u7c7b\u578b"},{"location":"dsdl_language/lang/basic_types/#224-loc","text":"\u5bf9\u8c61\u5b9a\u4f4d\u5668\u7684\u4f5c\u7528\u662f\u4f5c\u4e3a\u5bf9\u56fe\u50cf\uff0c\u89c6\u9891\uff0c\u6587\u672c\u7b49\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u6570\u636e\u7c7b\u578b\u5373\u4e3a Loc \u6570\u636e\u7c7b\u578b\uff0c\u76ee\u6807\u5b9a\u4f4d\u5668\u7684\u5177\u4f53\u503c\u901a\u8fc7\u4e00\u4e2a\u7279\u6b8a\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u6765\u8868\u793a\u3002\u5177\u4f53\u6765\u8bb2\uff0cDSDL\u652f\u6301\u4e0b\u9762\u65b9\u5f0f\u6765\u63cf\u8ff0\u4e00\u4e2a\u5bf9\u8c61\u5b9a\u4f4d\u5668\uff1a relative path \uff1a\u76f8\u5bf9\u4e8e\u6570\u636e\u96c6\u7684\u6839\u8def\u5f84\u7684\u8def\u5f84\u3002\u5bf9\u8c61\u5b9a\u4f4d\u5668\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u5c31\u662f\u76f8\u5bf9\u8def\u5f84\u3002\u5f53\u5bf9\u8c61\u5b9a\u4f4d\u5668\u5b57\u7b26\u4e32\u6ca1\u6709\u7279\u6b8a\u7684\u524d\u7f00\u65f6\uff0c\u4ed6\u5c31\u4f1a\u88ab\u5f53\u4f5c\u662f\u4e00\u4e2a\u76f8\u5bf9\u8def\u5f84\u3002\u4f8b\u5982\uff0c \"abc/001.jpg\" \u5c06\u4f1a\u88ab\u89e3\u6790\u4e3a \"<data-root>/abc/001.jpg\" \uff0c\u5176\u4e2d data-root \u4e3a\u6839\u76ee\u5f55\uff0c\u6240\u6709\u7684\u6570\u636e\u5bf9\u8c61\u90fd\u5b58\u50a8\u5176\u4e2d\uff0c\u5e76\u4e14\u6839\u76ee\u5f55\u53ef\u4ee5\u5728\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002","title":"2.2.4 Loc\uff1a\u5bf9\u8c61\u5b9a\u4f4d\u6570\u636e\u7c7b\u578b"},{"location":"dsdl_language/lang/basic_types/#225","text":"\u4eceDSDL\u7f16\u8bd1\u5668\u7684\u89c6\u89d2\u6765\u770b\uff0c\u5143\u7d20\u7684\u7c7b\u578b\u51b3\u5b9a\u4e86\u8be5\u5143\u7d20\u5982\u4f55\u88ab\u89e3\u6790\u4e0e\u9a8c\u8bc1\u3002\u9664\u4e86\u7c7b\u578b\u540d\u79f0\u4ee5\u5916\uff0cDSDL\u8fd8\u5141\u8bb8\u7528\u6237\u63d0\u4f9b \u7c7b\u578b\u53c2\u6570 \u6765\u81ea\u5b9a\u4e49\u5143\u7d20\u5982\u4f55\u88ab\u8868\u793a\uff0c\u89e3\u6790\u4e0e\u9a8c\u8bc1\u3002 \u4f7f\u7528\u7c7b\u578b\u53c2\u6570\u7684Label\u6570\u636e\u7c7b\u578b \u5728 \u5feb\u901f\u5165\u95e8 \u4e2d\u7684\u7684\u4f8b\u5b50\u4e2d\uff0c ImageClassificationSample \u4e2d\u7684 label \u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u6307\u5b9a\u4e3a\u4e86 Label[dom=MyClassDom] \u3002 \u8fd9\u91cc\uff0c Label \u5c31\u662f\u4e00\u4e2a \u542b\u53c2\u7684\u6570\u636e\u7c7b\u578b \uff08parametric type\uff09\uff0c\u6307\u5b9a\u4e86\u4e00\u4e2a \u7c7b\u578b\u53c2\u6570 dom \u3002\u8fd9\u91cc\u7684 dom \u53c2\u6570\u6307\u5b9a\u4e86label\u5c5e\u4e8e\u7684\u7c7b\u522b\u57df\u3002 \u5f53\u7c7b\u522b\u57df\u88ab\u663e\u793a\u5730\u6307\u5b9a\u4e4b\u540e\uff08\u4f8b\u5b50\u4e2d\u6307\u5b9a\u4e3a MyClassDom \uff09\uff0c\u5c31\u4e0d\u9700\u8981\u518d\u5728\u6570\u636e\u5bf9\u8c61\u4e2d\u6307\u660e\u6807\u6ce8\u7c7b\u522b\u7684\u7c7b\u522b\u57df\u4e86\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6570\u636e\u5bf9\u8c61\u4e2d\u7684\u6807\u6ce8\u7c7b\u522b MyClassDom::cat \u6b64\u65f6\u53ef\u4ee5\u76f4\u63a5\u7b80\u5199\u4e3a cat \uff1b\u6570\u636e\u5bf9\u8c61\u4e2d\u7684\u6807\u6ce8\u7c7b\u522b MyClassDom[2] \u6b64\u65f6\u53ef\u4ee5\u76f4\u63a5\u7b80\u5199\u4e3a 2 \u3002 \u4f7f\u7528\u7c7b\u578b\u53c2\u6570\u7684Date\u548cTime\u6570\u636e\u7c7b\u578b \u5bf9\u4e8e Date \u548c Time \u6570\u636e\u7c7b\u578b\uff0c\u5f53\u6ca1\u6709\u663e\u793a\u5730\u6307\u5b9a\u7c7b\u578b\u53c2\u6570\u7684\u8bdd\uff0c\u5b83\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u503c\u5e94\u8be5\u9075\u5faaISO 8601\u683c\u5f0f\u3002\u89e3\u6790\u5668\u4f1a date.fromisoformat \u548c time.fromisoformat \u6765\u89e3\u6790\u5b57\u7b26\u4e32\u3002 \u7528\u6237\u8fd8\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u7c7b\u578b\u53c2\u6570 fmt \u6765\u81ea\u5b9a\u4e49\u683c\u5f0f\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u6570\u636e\u7c7b\u578b Time[fmt=\"%H:%M\"] \u6765\u8981\u6c42\u6570\u636e\u503c\u9075\u5faa %H:%M \u7684\u683c\u5f0f\uff0c\u4f8b\u5982 \"15:32\" \u3002\u5f53 fmt \u88ab\u663e\u793a\u5730\u6307\u5b9a\u4e86\uff0c fmt \u7684\u503c\u4f1a\u88ab\u4f20\u5165 strptime \u51fd\u6570\u6765\u89e3\u6790\u65f6\u95f4\u5b57\u7b26\u4e32\u3002 Data \u6570\u636e\u7c7b\u578b\u540c\u6837\u53ef\u4ee5\u6307\u5b9a\u8be5\u53c2\u6570\u3002","title":"2.2.5 \u4f7f\u7528\u7c7b\u578b\u53c2\u6570"},{"location":"dsdl_language/lang/basic_types/#226","text":"DSDL\u63d0\u4f9b\u4e86\u542b\u53c2\u6570\u636e\u7c7b\u578b List \u6765\u8868\u793a\u65e0\u5e8f\u6216\u6709\u5e8f\u7684\u5217\u8868\u3002\u5177\u4f53\u6765\u8bf4\uff0c List \u6570\u636e\u7c7b\u578b\u7684\u5b9e\u4f8b\u662f\u5305\u542b\u4e86\u591a\u4e2a\u6570\u636e\u7c7b\u578b\u76f8\u540c\u7684\u5143\u7d20\u7684\u5217\u8868\u3002 \u542b\u53c2\u6570\u636e\u7c7b\u578b List \u6709\u4e24\u4e2a\u53c2\u6570\uff1a etype \uff1a\u5217\u8868\u4e2d\u5355\u4e2a\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u88ab\u663e\u793a\u5730\u6307\u5b9a\u3002 ordered \uff1a\u5217\u8868\u4e2d\u7684\u5143\u7d20\u4e4b\u95f4\u662f\u5426\u6709\u987a\u5e8f\u5173\u7cfb\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u503c\u4e3a false \u3002\u53ea\u6709\u5f53\u5e8f\u5217\u662f\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u53c2\u6570\u624d\u5e94\u8be5\u88ab\u8bbe\u4e3a true \uff0c\u6bd4\u5982\u89c6\u9891\u5e27\u5e8f\u5217\u4e0e\u65f6\u95f4\u5e8f\u5217\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5143\u7d20\u4e3a\u6574\u578b\u7684\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u5217\u8868\u6570\u636e\u7c7b\u578b\u8868\u793a\u4e3a List[Int] \uff1b\u5bf9\u4e8e\u5143\u7d20\u4e3a\u7c7b\u522b\u57df\u4e3a MyClassDom \u7684\u7c7b\u522b\u6807\u6ce8\u7684\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u5217\u8868\u6570\u636e\u7c7b\u578b\u8868\u793a\u4e3a List[Label[MyClassDom]]","title":"2.2.6 \u5217\u8868\u6570\u636e\u7c7b\u578b"},{"location":"dsdl_language/lang/class_dom/","text":"2.5 \u7c7b\u522b\u57df \u7c7b\u522b\u57df\uff08class_domain\uff09\u662f\u5bf9Label\uff08\u7c7b\u522b\u6807\u6ce8\u6570\u636e\u7c7b\u578b\uff09\u5b57\u6bb5\u7684\u8be6\u7ec6\u5b9a\u4e49\uff0cLabel\u5b57\u6bb5\u7684\u5b9e\u4f8b\u5316\u9700\u8981\u5bf9\u5176\u4e2d\u7684 dom \u5f62\u53c2\u8d4b\u4e88\u5177\u4f53\u7684\u7c7b\u522b\u57df\uff08class_domain\uff09\u3002 2.5.1 \u5b9a\u4e49\u4e00\u4e2a\u7c7b\u522b\u57df \u5728DSDL\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684 $def \u90e8\u5206\u81ea\u5b9a\u4e49\u7c7b\u522b\u57df\u3002 \u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\uff1a \u7c7b\u522b\u57df\u793a\u4f8b: MyClassDom : $def : class_domain classes : - airplane - apple - backpack - banana - baseball bat - baseball glove - bear \u7ed3\u6784\u4f53\u7c7b\u662f\u901a\u8fc7\u4e00\u4e2aYAML\u5bf9\u8c61\u6765\u5b9a\u4e49\u7684\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a $def \uff1a\u5b83\u7684\u503c\u5fc5\u987b\u662f class_domain \uff0c\u8868\u793a\u8be5YAML\u5bf9\u8c61\u6b63\u5728\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u3002 classes \uff1a\u5b83\u7684\u503c\u5fc5\u987b\u662f\u4e00\u4e2aYAML\u7684list\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u7c7b\u522b\u540d\uff0c\u5b83\u4e5f\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u7c7b\u522b\u540d\u5bf9\u5e94\u4e86\u4e00\u4e2a\u5b57\u6bb5\u3002 2.5.2 \u7c7b\u522b\u57df\u7684\u5f15\u7528 \u7c7b\u522b\u57df\u662f\u4e3b\u8981\u7528\u6765\uff1a\u5b9e\u4f8b\u5316\u7ed3\u6784\u4f53\u7c7bstruct\u4e2d\u7684Label\u5b57\u6bb5\uff0c\u4f8b\u5982\uff1a ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] \u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u5f00\u59cb\u7528\u53c2\u6570 $xxx \u5360\u4f4d\uff08\u5177\u4f53\u53ef\u4ee5\u53c2\u89c1 2.4.3 \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b \uff09\uff0c\u4f8b\u5982\uff1a ImageClassificationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] \u7136\u540e\u5728 data section (\u63cf\u8ff0\u6570\u636e\u96c6)\u7684\u65f6\u5019\u5728 sample-type \u4e2d\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u53c2\u6570\uff0c\u5982\uff1a data : sample-type : ImageClassificationSample[cdom=MyClassDom] sample-path : $local samples : - image : \"xyz/0001.jpg\" label : \"apple\" - image : \"xyz/0002.jpg\" label : \"banana\" 2.5.3 \u5b9a\u4e49\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\u7684\u7c7b\u522b\u57df \u5728\u4e00\u4e9b\u6570\u636e\u96c6\u5f53\u4e2d\uff0c\u7c7b\u522b\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\uff0cdsdl\u4e2d\u5141\u8bb8\u4e3a\u6bcf\u4e2a\u7c7b\u522b\u6307\u5b9a\u81ea\u5df1\u7684\u7236\u7c7b\uff0c\u5177\u4f53\u64cd\u4f5c\u4e3a\uff1a \u76f4\u63a5\u5b9a\u4e49\u5b50\u7c7bclass domain\uff0c\u5e76\u5728\u6bcf\u4e2alabel\u524d\u9762\u901a\u8fc7\u201c.\u201d\u7684\u5f62\u5f0f\u8fde\u63a5\u8be5label\u7684\u7236\u7c7b\u7684\u5177\u4f53\u7c7b\u522b\uff1a ClassDom : # \u58f0\u660e\u7c7b\u522b $def : class_domain classes : - vehicle.airplane # \u6307\u660eairplane\u7684\u7236\u7c7b\u4e3aParentClassDom\u4e2d\u7684vehicle - food.apple - accessory.backpack - food.banana - sports.baseball_bat # \u7c7b\u522b\u540d\u5b58\u5728\u7a7a\u683c\u7b49\u7279\u6b8a\u7b26\u53f7\u9700\u8981\u8f6c\u6362\u4e3a\u4e0b\u5212\u7ebf - sports.baseball_glove - animal.bear - furniture.bed - outdoor.bench - vehicle.bicycle - animal.bird - vehicle.boat \u5728\u7c7b\u522b\u5b9a\u4e49\u4e2d\uff0c\".\"\u662f\u7528\u6765\u5206\u5272\u7c7b\u522b\u4e0a\u4e0b\u4f4d\u5173\u7cfb\u7684\u7279\u6b8a\u5b57\u7b26\uff0c\u6bcf\u4e2a\u6807\u7b7e\u5b58\u5728\u591a\u4e2a\u5355\u8bcd\u5efa\u8bae\u7528\"_\"\u8fde\u63a5\uff0c\u4f8b\u5982\uff1abaseball_bat\u3002\u82e5\u5e0c\u671b\u7c7b\u522b\u6807\u7b7e\u6709\u7a7a\u683c\u7b49\u7279\u6b8a\u5b57\u7b26\uff0c\u5efa\u8bae\u5728global-info\u4e2d\u5b58\u50a8\u5305\u542b\u7279\u6b8a\u5b57\u7b26\u539f\u59cb\u6807\u7b7e\u540d\u4e0e\u8f6c\u6362\u540e\u5b58\u653e\u5728class_dom\u4e2d\u6807\u7b7e\u6620\u5c04\u5173\u7cfb(\u5173\u4e8eglobal-info\u7684\u5b9a\u4e49\u548c\u5b58\u50a8\u4f4d\u7f6e\uff0c\u8bf7\u53c2\u770b \u6570\u636e\u6a21\u5757 \u7ae0\u8282)\uff0c\u5177\u4f53\u5f62\u5f0f\u5982\u4e0b\uff1a {\"global-info\": {\"name_mapping\":[ { \"name\": \"baseball_bat.sports\" \"original_name\": \"baseball bat.sports\", }, ... ]} }","title":"\u7c7b\u522b\u57df"},{"location":"dsdl_language/lang/class_dom/#25","text":"\u7c7b\u522b\u57df\uff08class_domain\uff09\u662f\u5bf9Label\uff08\u7c7b\u522b\u6807\u6ce8\u6570\u636e\u7c7b\u578b\uff09\u5b57\u6bb5\u7684\u8be6\u7ec6\u5b9a\u4e49\uff0cLabel\u5b57\u6bb5\u7684\u5b9e\u4f8b\u5316\u9700\u8981\u5bf9\u5176\u4e2d\u7684 dom \u5f62\u53c2\u8d4b\u4e88\u5177\u4f53\u7684\u7c7b\u522b\u57df\uff08class_domain\uff09\u3002","title":"2.5 \u7c7b\u522b\u57df"},{"location":"dsdl_language/lang/class_dom/#251","text":"\u5728DSDL\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684 $def \u90e8\u5206\u81ea\u5b9a\u4e49\u7c7b\u522b\u57df\u3002 \u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\uff1a \u7c7b\u522b\u57df\u793a\u4f8b: MyClassDom : $def : class_domain classes : - airplane - apple - backpack - banana - baseball bat - baseball glove - bear \u7ed3\u6784\u4f53\u7c7b\u662f\u901a\u8fc7\u4e00\u4e2aYAML\u5bf9\u8c61\u6765\u5b9a\u4e49\u7684\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a $def \uff1a\u5b83\u7684\u503c\u5fc5\u987b\u662f class_domain \uff0c\u8868\u793a\u8be5YAML\u5bf9\u8c61\u6b63\u5728\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u3002 classes \uff1a\u5b83\u7684\u503c\u5fc5\u987b\u662f\u4e00\u4e2aYAML\u7684list\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u7c7b\u522b\u540d\uff0c\u5b83\u4e5f\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u7c7b\u522b\u540d\u5bf9\u5e94\u4e86\u4e00\u4e2a\u5b57\u6bb5\u3002","title":"2.5.1 \u5b9a\u4e49\u4e00\u4e2a\u7c7b\u522b\u57df"},{"location":"dsdl_language/lang/class_dom/#252","text":"\u7c7b\u522b\u57df\u662f\u4e3b\u8981\u7528\u6765\uff1a\u5b9e\u4f8b\u5316\u7ed3\u6784\u4f53\u7c7bstruct\u4e2d\u7684Label\u5b57\u6bb5\uff0c\u4f8b\u5982\uff1a ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] \u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u5f00\u59cb\u7528\u53c2\u6570 $xxx \u5360\u4f4d\uff08\u5177\u4f53\u53ef\u4ee5\u53c2\u89c1 2.4.3 \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b \uff09\uff0c\u4f8b\u5982\uff1a ImageClassificationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] \u7136\u540e\u5728 data section (\u63cf\u8ff0\u6570\u636e\u96c6)\u7684\u65f6\u5019\u5728 sample-type \u4e2d\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u53c2\u6570\uff0c\u5982\uff1a data : sample-type : ImageClassificationSample[cdom=MyClassDom] sample-path : $local samples : - image : \"xyz/0001.jpg\" label : \"apple\" - image : \"xyz/0002.jpg\" label : \"banana\"","title":"2.5.2 \u7c7b\u522b\u57df\u7684\u5f15\u7528"},{"location":"dsdl_language/lang/class_dom/#253","text":"\u5728\u4e00\u4e9b\u6570\u636e\u96c6\u5f53\u4e2d\uff0c\u7c7b\u522b\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\uff0cdsdl\u4e2d\u5141\u8bb8\u4e3a\u6bcf\u4e2a\u7c7b\u522b\u6307\u5b9a\u81ea\u5df1\u7684\u7236\u7c7b\uff0c\u5177\u4f53\u64cd\u4f5c\u4e3a\uff1a \u76f4\u63a5\u5b9a\u4e49\u5b50\u7c7bclass domain\uff0c\u5e76\u5728\u6bcf\u4e2alabel\u524d\u9762\u901a\u8fc7\u201c.\u201d\u7684\u5f62\u5f0f\u8fde\u63a5\u8be5label\u7684\u7236\u7c7b\u7684\u5177\u4f53\u7c7b\u522b\uff1a ClassDom : # \u58f0\u660e\u7c7b\u522b $def : class_domain classes : - vehicle.airplane # \u6307\u660eairplane\u7684\u7236\u7c7b\u4e3aParentClassDom\u4e2d\u7684vehicle - food.apple - accessory.backpack - food.banana - sports.baseball_bat # \u7c7b\u522b\u540d\u5b58\u5728\u7a7a\u683c\u7b49\u7279\u6b8a\u7b26\u53f7\u9700\u8981\u8f6c\u6362\u4e3a\u4e0b\u5212\u7ebf - sports.baseball_glove - animal.bear - furniture.bed - outdoor.bench - vehicle.bicycle - animal.bird - vehicle.boat \u5728\u7c7b\u522b\u5b9a\u4e49\u4e2d\uff0c\".\"\u662f\u7528\u6765\u5206\u5272\u7c7b\u522b\u4e0a\u4e0b\u4f4d\u5173\u7cfb\u7684\u7279\u6b8a\u5b57\u7b26\uff0c\u6bcf\u4e2a\u6807\u7b7e\u5b58\u5728\u591a\u4e2a\u5355\u8bcd\u5efa\u8bae\u7528\"_\"\u8fde\u63a5\uff0c\u4f8b\u5982\uff1abaseball_bat\u3002\u82e5\u5e0c\u671b\u7c7b\u522b\u6807\u7b7e\u6709\u7a7a\u683c\u7b49\u7279\u6b8a\u5b57\u7b26\uff0c\u5efa\u8bae\u5728global-info\u4e2d\u5b58\u50a8\u5305\u542b\u7279\u6b8a\u5b57\u7b26\u539f\u59cb\u6807\u7b7e\u540d\u4e0e\u8f6c\u6362\u540e\u5b58\u653e\u5728class_dom\u4e2d\u6807\u7b7e\u6620\u5c04\u5173\u7cfb(\u5173\u4e8eglobal-info\u7684\u5b9a\u4e49\u548c\u5b58\u50a8\u4f4d\u7f6e\uff0c\u8bf7\u53c2\u770b \u6570\u636e\u6a21\u5757 \u7ae0\u8282)\uff0c\u5177\u4f53\u5f62\u5f0f\u5982\u4e0b\uff1a {\"global-info\": {\"name_mapping\":[ { \"name\": \"baseball_bat.sports\" \"original_name\": \"baseball bat.sports\", }, ... ]} }","title":"2.5.3 \u5b9a\u4e49\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\u7684\u7c7b\u522b\u57df"},{"location":"dsdl_language/lang/data_section/","text":"2.6 \u6570\u636e\u6a21\u5757 \u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u88ab\u5927\u81f4\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\uff1a header \uff1a\u6307\u660e\u4e86\u5f53\u524d\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u9700\u8981\u88ab\u5982\u4f55\u89e3\u6790\uff1b meta section \uff1a\u63d0\u4f9b\u4e86\u5f53\u524d\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff1b defs section \uff1a\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5168\u5c40\u7684\u5b9a\u4e49\uff0c\u6bd4\u5982\uff1a\u7528\u6237\u5b9a\u4e49\u7684 \u7c7b\u522b\u57df \uff08class domain\uff09\u548c \u7ed3\u6784\u4f53 \uff08struct\uff09\uff1b data section \uff1a\u63cf\u8ff0\u4e86\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u6570\u636e \u524d\u9762\u7684\u7ae0\u8282\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u4e86 defs section \uff0c\u6e05\u6670\u7684\u5b9a\u4e49\u4e86 \u7c7b\u522b\u57df \uff08class domain\uff09\u548c \u7ed3\u6784\u4f53 \uff08struct\uff09\u540e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5b9a\u4e49\u6bcf\u4e2a\u5177\u4f53\u7684\u6837\u672c\uff0c\u8fd9\u5c31\u662f data section \u6240\u505a\u7684\u4e8b\u60c5\u3002 2.6.1 \u5b9a\u4e49\u5177\u4f53\u7684data section \u5728 \u5feb\u901f\u5165\u95e8 \u4e2d\u6211\u4eec\u6709\u5982\u4e0b\u4f8b\u5b50\uff1a data : sample-type : ImageClassificationSample sample-path : $local samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } ... \u53ef\u4ee5\u770b\u5230\u4e00\u4e2a data section \u5305\u62ec\u4e09\u4e2a\u6a21\u5757\uff1a sample-type \uff1a\u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u8fd9\u91cc\u4e00\u822c\u662f\u6211\u4eec\u5b9a\u4e49\u7684\u67d0\u4e2a\u7ed3\u6784\u4f53\uff08struct\uff09\uff0c\u5982\u679c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u91cc\u9762\u5305\u542b\u53c2\u6570\u5219\u9700\u8981\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u53c2\u6570\uff0c\u5177\u4f53\u53c2\u89c1 2.4.3 \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b \uff1b\u6b64\u5916 sample-type \u4e5f\u53ef\u4ee5\u662f\u4efb\u610f\u5176\u4ed6\u6570\u636e\u7c7b\u578b\uff08Label\u3001Image\u3001Int\u7b49\u7b49\uff09\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u7ed3\u6784\u4f53\uff08struct\uff09\u4e5f\u662f\u6570\u636e\u7c7b\u578b\u7684\u4e00\u79cd\u3002 sample-path : samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u5982\u679c\u5b9e\u9645\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219samples\u7684\u5185\u5bb9\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6\uff0c\u5982\u679c\u662f $local \uff08\u8fd9\u4e2a\u4f8b\u5b50\uff09\uff0c\u5219\u4ece\u672c\u6587\u4ef6\u7684 data.samples \u5b57\u6bb5\u4e2d\u76f4\u63a5\u8bfb\u53d6 samples : \u4fdd\u5b58\u6570\u636e\u96c6\u7684\u6837\u672c\u4fe1\u606f\uff0c\u6ce8\u610f\u53ea\u6709\u5728 sample-path \u662f $local \u7684\u65f6\u5019\u8be5\u5b57\u6bb5\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219samples\u4f1a\u4f18\u5148\u4ece sample-path \u4e2d\u7684\u8def\u5f84\u53bb\u8bfb\u53d6 \u6211\u4eec\u53ef\u4ee5\u770b\u5230 data.samples \u4e2d\u7684\u5b57\u6bb5\u662f\u548c data.sample-type \u4e2d\u6240\u7ed9\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff1a \u56de\u987e\u4e00\u4e0b\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u91cc\u9762 ImageClassificationSample \u5b9a\u4e49\u5982\u4e0b\uff1a MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] 2.6.2 Optional\u7684\u7528\u6cd5 \u5982\u679c\u6211\u4eec\u7684\u6570\u636e\u4e2d\u6709\u4e9b\u5b57\u6bb5\u662f\u7f3a\u5931\u7684\uff0c\u6bd4\u5982\u4e0a\u9762\u7684 data.samples \u90e8\u5206\u6709\u7684\u6570\u636e\u4e2dlabel\u7f3a\u5931\uff1a data : sample-type : ImageClassificationSample sample-path : $local samples : - { image : \"xyz/0001.jpg\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } - { image : \"xyz/0003.jpg\" } - { image : \"xyz/0004.jpg\" , label : \"tiger\" } \u90a3\u76f8\u5e94\u7684\uff0c\u6211\u4eec\u5728\u5b9a\u4e49\u7ed3\u6784\u4f53\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u6307\u51fa\uff0c\u54ea\u4e9b\u5b57\u6bb5\u662f\u7f3a\u5931\u7684\uff0c\u65b9\u6cd5\u662f\uff1a\u6211\u4eec\u53ef\u4ee5\u628a\u53ef\u4ee5\u6709\u7f3a\u5931\u503c\u7684\u5b57\u6bb5\u540d\u653e\u5728 struct \u7c7b\u578b\u4e2d\u7684 $optional \u90e8\u5206\uff0c $optional \u5b57\u6bb5\u662f\u4e2a\u5217\u8868\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] $optional : [ 'label' ] \u6ce8\u610f\uff1a\u5f53$optional\u4e2dlabel\u88ab\u5ffd\u7565\u65f6\uff0c\u5bf9\u5e94\u7684\u5b57\u6bb5\u503c\u53ef\u4ee5\u5728 data.samples \u7f3a\u5931\uff0c\u5426\u5219\u4f1a\u663e\u793a\u8b66\u544a\u3002 2.6.3 \u589e\u52a0global-info\u5b57\u6bb5 \u5bf9\u4e8e\u6570\u636e\u96c6\u7684\u5168\u5c40\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6570\u636e\u6a21\u5757\u65b0\u589eglobal-info\u5b57\u6bb5\u8fdb\u884c\u5b58\u653e\u3002\u5168\u5c40\u4fe1\u606f\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a \u7c7b\u522b\u4fe1\u606f\u8865\u5145\uff08\u6bd4\u5982\u540c\u4e49\u8bcd\uff0c\u8bcd\u7684\u5b9a\u4e49\u7b49\uff09 \u6570\u636e\u4fe1\u606f\u8865\u5145\uff08\u6bd4\u5982OCR\u4efb\u52a1\u4e2d\u5305\u542b\u7684\u5168\u5c40\u8bcd\u8868\u3001\u5173\u952e\u70b9\u4efb\u52a1\u4e2d\u7684\u5173\u952e\u70b9\u8fde\u63a5\u65b9\u5f0f\u7b49\uff09 \u5b58\u653eglobal-info\u7684\u4fe1\u606f\uff0c\u9700\u8981\u6211\u4eec\u5b9a\u4e49\u5176struct\uff0c\u5e76\u5728\u6570\u636e\u6a21\u5757\u65b0\u589e\u76f8\u5e94\u7684\u5b57\u6bb5\u3002\u672c\u5c0f\u8282\u5c06\u4ee5\u4e00\u4e2a\u5177\u4f53\u6848\u4f8b\u6765\u6f14\u793aglobal-info\u7684\u4f7f\u7528\u3002 \u9996\u5148\u5728\u5b9a\u4e49\u6587\u4ef6\u9700\u8981\u65b0\u589e\u4ee5\u4e0b\u5185\u5bb9\uff1a ExampleClassDomDescr : $def : struct $fields : label : Label[dom=MyClassDom] # \u7c7b\u522b\u540d def : Str # \u7c7b\u522b\u63cf\u8ff0 synonyms : List[Str] # \u8fd1\u4e49\u8bcd GlobalInfo : $def : struct $fields : class-info : List[ExampleClassDomDescr] \u800c\u6570\u636e\u6a21\u5757\u5982\u4e0b\u6240\u793a\uff1a data : global-info-type : GlobalInfo global-info-path : $local global-info : class-info : - label : \"dog\" def : 'a very common four-legged animal that is often kept by people as a pet or to guard or huntan animal.' synonyms : [ 'puppy' , 'hound' ] - label : \"fish\" ... sample-type : ImageClassificationSample sample-path : $local samples : - { image : \"xyz/0002.jpg\" , label : \"dog\" } - ... \u53ef\u4ee5\u770b\u5230\u4e00\u4e2a data section \u65b0\u589e\u4e86global-info\u76f8\u5173\u4fe1\u606f\uff0c\u4e3b\u8981\u5305\u542b\u4e09\u4e2a\u6a21\u5757\uff1a global-info-type \uff1a\u5168\u5c40\u4fe1\u606f\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u8fd9\u91cc\u4e00\u822c\u662f\u6211\u4eec\u5b9a\u4e49\u7684\u67d0\u4e2a\u7ed3\u6784\u4f53\uff08struct\uff09\uff0c\u5982\u679c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u91cc\u9762\u5305\u542b\u53c2\u6570\u5219\u9700\u8981\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u53c2\u6570\uff0c\u5177\u4f53\u53c2\u89c1 2.4.3 \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b \uff1b global-info-path \uff1a\u5168\u5c40\u4fe1\u606f\u7684\u5b58\u653e\u4f4d\u7f6e\uff0c\u5982\u679c\u5b9e\u9645\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219global-info\u7684\u5185\u5bb9\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6\uff0c\u5982\u679c\u662f $local \uff08\u8fd9\u4e2a\u4f8b\u5b50\uff09\uff0c\u5219\u4ece\u672c\u6587\u4ef6\u7684 data.global-info \u5b57\u6bb5\u4e2d\u76f4\u63a5\u8bfb\u53d6 global-info \uff1a\u4fdd\u5b58\u5168\u5c40\u4fe1\u606f\u7684\u5177\u4f53\u5185\u5bb9\uff0c\u6ce8\u610f\u53ea\u6709\u5728 global-info-path \u662f $local \u7684\u65f6\u5019\u8be5\u5b57\u6bb5\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219\u4f1a\u4f18\u5148\u4ece global-info-path \u4e2d\u7684\u8def\u5f84\u53bb\u8bfb\u53d6 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c data.global-info \u4e2d\u7684\u5b57\u6bb5\u662f\u548c data.global-info-type \u4e2d\u6240\u7ed9\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002 2.6.4 \u901a\u8fc7\u5916\u90e8\u6587\u4ef6\u8bfb\u53d6 \u5f53\u6570\u636e\u91cf\u5f88\u5927\u7684\u65f6\u5019\uff0c\u5efa\u8bae\u5c06\u6570\u636e\u4eceYAML\u6587\u4ef6\u7684 data section \u90e8\u5206\u62bd\u51fa\u6765\u5355\u72ec\u653e\u5728JSON\u6587\u4ef6\u4e2d\uff0c\u5e76\u5728 data section \u90e8\u5206\u7684 sample-path \u5b57\u6bb5\u4e2d\u7ed9\u51fa\u6570\u636e\u5b58\u653e\u7684JSON\u6587\u4ef6\u7684\u5177\u4f53\u8def\u5f84\uff0c\u7528\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a data : global-info-type : GlobalInfo global-info-path : global_info.json sample-type : ExampleSample sample-path : samples.json \u5728 samples.json \u4e2d\u5b58\u653e\u6211\u4eec\u5177\u4f53\u7684\u6570\u636e\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a { \"samples\":[ {\"image\": \"xyz/0001.jpg\", \"label\": \"cat\"}, {\"image\": \"xyz/0002.jpg\", \"label\": \"dog\"}, {\"image\": \"xyz/0003.jpg\", \"label\": \"dog\"}, {\"image\": \"xyz/0004.jpg\", \"label\": \"tiger\"}, ... ] } \u5728 global-info.json \u4e2d\u5b58\u653e\u6211\u4eec\u5177\u4f53\u7684\u5168\u5c40\u4fe1\u606f\u6570\u636e\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a { \"global-info\":{ \"class-info\":[ { 'label': 'dog', 'synonyms': ['puppy', 'hound'], 'def': 'a very common four-legged animal that is often kept by people as a pet or to guard or huntan animal.' }, ... ] } }","title":"\u6570\u636e\u6a21\u5757"},{"location":"dsdl_language/lang/data_section/#26","text":"\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u88ab\u5927\u81f4\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\uff1a header \uff1a\u6307\u660e\u4e86\u5f53\u524d\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u9700\u8981\u88ab\u5982\u4f55\u89e3\u6790\uff1b meta section \uff1a\u63d0\u4f9b\u4e86\u5f53\u524d\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff1b defs section \uff1a\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5168\u5c40\u7684\u5b9a\u4e49\uff0c\u6bd4\u5982\uff1a\u7528\u6237\u5b9a\u4e49\u7684 \u7c7b\u522b\u57df \uff08class domain\uff09\u548c \u7ed3\u6784\u4f53 \uff08struct\uff09\uff1b data section \uff1a\u63cf\u8ff0\u4e86\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u6570\u636e \u524d\u9762\u7684\u7ae0\u8282\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u4e86 defs section \uff0c\u6e05\u6670\u7684\u5b9a\u4e49\u4e86 \u7c7b\u522b\u57df \uff08class domain\uff09\u548c \u7ed3\u6784\u4f53 \uff08struct\uff09\u540e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5b9a\u4e49\u6bcf\u4e2a\u5177\u4f53\u7684\u6837\u672c\uff0c\u8fd9\u5c31\u662f data section \u6240\u505a\u7684\u4e8b\u60c5\u3002","title":"2.6 \u6570\u636e\u6a21\u5757"},{"location":"dsdl_language/lang/data_section/#261-data-section","text":"\u5728 \u5feb\u901f\u5165\u95e8 \u4e2d\u6211\u4eec\u6709\u5982\u4e0b\u4f8b\u5b50\uff1a data : sample-type : ImageClassificationSample sample-path : $local samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } ... \u53ef\u4ee5\u770b\u5230\u4e00\u4e2a data section \u5305\u62ec\u4e09\u4e2a\u6a21\u5757\uff1a sample-type \uff1a\u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u8fd9\u91cc\u4e00\u822c\u662f\u6211\u4eec\u5b9a\u4e49\u7684\u67d0\u4e2a\u7ed3\u6784\u4f53\uff08struct\uff09\uff0c\u5982\u679c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u91cc\u9762\u5305\u542b\u53c2\u6570\u5219\u9700\u8981\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u53c2\u6570\uff0c\u5177\u4f53\u53c2\u89c1 2.4.3 \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b \uff1b\u6b64\u5916 sample-type \u4e5f\u53ef\u4ee5\u662f\u4efb\u610f\u5176\u4ed6\u6570\u636e\u7c7b\u578b\uff08Label\u3001Image\u3001Int\u7b49\u7b49\uff09\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u7ed3\u6784\u4f53\uff08struct\uff09\u4e5f\u662f\u6570\u636e\u7c7b\u578b\u7684\u4e00\u79cd\u3002 sample-path : samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u5982\u679c\u5b9e\u9645\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219samples\u7684\u5185\u5bb9\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6\uff0c\u5982\u679c\u662f $local \uff08\u8fd9\u4e2a\u4f8b\u5b50\uff09\uff0c\u5219\u4ece\u672c\u6587\u4ef6\u7684 data.samples \u5b57\u6bb5\u4e2d\u76f4\u63a5\u8bfb\u53d6 samples : \u4fdd\u5b58\u6570\u636e\u96c6\u7684\u6837\u672c\u4fe1\u606f\uff0c\u6ce8\u610f\u53ea\u6709\u5728 sample-path \u662f $local \u7684\u65f6\u5019\u8be5\u5b57\u6bb5\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219samples\u4f1a\u4f18\u5148\u4ece sample-path \u4e2d\u7684\u8def\u5f84\u53bb\u8bfb\u53d6 \u6211\u4eec\u53ef\u4ee5\u770b\u5230 data.samples \u4e2d\u7684\u5b57\u6bb5\u662f\u548c data.sample-type \u4e2d\u6240\u7ed9\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff1a \u56de\u987e\u4e00\u4e0b\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u91cc\u9762 ImageClassificationSample \u5b9a\u4e49\u5982\u4e0b\uff1a MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom]","title":"2.6.1 \u5b9a\u4e49\u5177\u4f53\u7684data section"},{"location":"dsdl_language/lang/data_section/#262-optional","text":"\u5982\u679c\u6211\u4eec\u7684\u6570\u636e\u4e2d\u6709\u4e9b\u5b57\u6bb5\u662f\u7f3a\u5931\u7684\uff0c\u6bd4\u5982\u4e0a\u9762\u7684 data.samples \u90e8\u5206\u6709\u7684\u6570\u636e\u4e2dlabel\u7f3a\u5931\uff1a data : sample-type : ImageClassificationSample sample-path : $local samples : - { image : \"xyz/0001.jpg\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } - { image : \"xyz/0003.jpg\" } - { image : \"xyz/0004.jpg\" , label : \"tiger\" } \u90a3\u76f8\u5e94\u7684\uff0c\u6211\u4eec\u5728\u5b9a\u4e49\u7ed3\u6784\u4f53\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u6307\u51fa\uff0c\u54ea\u4e9b\u5b57\u6bb5\u662f\u7f3a\u5931\u7684\uff0c\u65b9\u6cd5\u662f\uff1a\u6211\u4eec\u53ef\u4ee5\u628a\u53ef\u4ee5\u6709\u7f3a\u5931\u503c\u7684\u5b57\u6bb5\u540d\u653e\u5728 struct \u7c7b\u578b\u4e2d\u7684 $optional \u90e8\u5206\uff0c $optional \u5b57\u6bb5\u662f\u4e2a\u5217\u8868\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] $optional : [ 'label' ] \u6ce8\u610f\uff1a\u5f53$optional\u4e2dlabel\u88ab\u5ffd\u7565\u65f6\uff0c\u5bf9\u5e94\u7684\u5b57\u6bb5\u503c\u53ef\u4ee5\u5728 data.samples \u7f3a\u5931\uff0c\u5426\u5219\u4f1a\u663e\u793a\u8b66\u544a\u3002","title":"2.6.2 Optional\u7684\u7528\u6cd5"},{"location":"dsdl_language/lang/data_section/#263-global-info","text":"\u5bf9\u4e8e\u6570\u636e\u96c6\u7684\u5168\u5c40\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6570\u636e\u6a21\u5757\u65b0\u589eglobal-info\u5b57\u6bb5\u8fdb\u884c\u5b58\u653e\u3002\u5168\u5c40\u4fe1\u606f\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a \u7c7b\u522b\u4fe1\u606f\u8865\u5145\uff08\u6bd4\u5982\u540c\u4e49\u8bcd\uff0c\u8bcd\u7684\u5b9a\u4e49\u7b49\uff09 \u6570\u636e\u4fe1\u606f\u8865\u5145\uff08\u6bd4\u5982OCR\u4efb\u52a1\u4e2d\u5305\u542b\u7684\u5168\u5c40\u8bcd\u8868\u3001\u5173\u952e\u70b9\u4efb\u52a1\u4e2d\u7684\u5173\u952e\u70b9\u8fde\u63a5\u65b9\u5f0f\u7b49\uff09 \u5b58\u653eglobal-info\u7684\u4fe1\u606f\uff0c\u9700\u8981\u6211\u4eec\u5b9a\u4e49\u5176struct\uff0c\u5e76\u5728\u6570\u636e\u6a21\u5757\u65b0\u589e\u76f8\u5e94\u7684\u5b57\u6bb5\u3002\u672c\u5c0f\u8282\u5c06\u4ee5\u4e00\u4e2a\u5177\u4f53\u6848\u4f8b\u6765\u6f14\u793aglobal-info\u7684\u4f7f\u7528\u3002 \u9996\u5148\u5728\u5b9a\u4e49\u6587\u4ef6\u9700\u8981\u65b0\u589e\u4ee5\u4e0b\u5185\u5bb9\uff1a ExampleClassDomDescr : $def : struct $fields : label : Label[dom=MyClassDom] # \u7c7b\u522b\u540d def : Str # \u7c7b\u522b\u63cf\u8ff0 synonyms : List[Str] # \u8fd1\u4e49\u8bcd GlobalInfo : $def : struct $fields : class-info : List[ExampleClassDomDescr] \u800c\u6570\u636e\u6a21\u5757\u5982\u4e0b\u6240\u793a\uff1a data : global-info-type : GlobalInfo global-info-path : $local global-info : class-info : - label : \"dog\" def : 'a very common four-legged animal that is often kept by people as a pet or to guard or huntan animal.' synonyms : [ 'puppy' , 'hound' ] - label : \"fish\" ... sample-type : ImageClassificationSample sample-path : $local samples : - { image : \"xyz/0002.jpg\" , label : \"dog\" } - ... \u53ef\u4ee5\u770b\u5230\u4e00\u4e2a data section \u65b0\u589e\u4e86global-info\u76f8\u5173\u4fe1\u606f\uff0c\u4e3b\u8981\u5305\u542b\u4e09\u4e2a\u6a21\u5757\uff1a global-info-type \uff1a\u5168\u5c40\u4fe1\u606f\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u8fd9\u91cc\u4e00\u822c\u662f\u6211\u4eec\u5b9a\u4e49\u7684\u67d0\u4e2a\u7ed3\u6784\u4f53\uff08struct\uff09\uff0c\u5982\u679c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u91cc\u9762\u5305\u542b\u53c2\u6570\u5219\u9700\u8981\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u53c2\u6570\uff0c\u5177\u4f53\u53c2\u89c1 2.4.3 \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b \uff1b global-info-path \uff1a\u5168\u5c40\u4fe1\u606f\u7684\u5b58\u653e\u4f4d\u7f6e\uff0c\u5982\u679c\u5b9e\u9645\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219global-info\u7684\u5185\u5bb9\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6\uff0c\u5982\u679c\u662f $local \uff08\u8fd9\u4e2a\u4f8b\u5b50\uff09\uff0c\u5219\u4ece\u672c\u6587\u4ef6\u7684 data.global-info \u5b57\u6bb5\u4e2d\u76f4\u63a5\u8bfb\u53d6 global-info \uff1a\u4fdd\u5b58\u5168\u5c40\u4fe1\u606f\u7684\u5177\u4f53\u5185\u5bb9\uff0c\u6ce8\u610f\u53ea\u6709\u5728 global-info-path \u662f $local \u7684\u65f6\u5019\u8be5\u5b57\u6bb5\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219\u4f1a\u4f18\u5148\u4ece global-info-path \u4e2d\u7684\u8def\u5f84\u53bb\u8bfb\u53d6 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c data.global-info \u4e2d\u7684\u5b57\u6bb5\u662f\u548c data.global-info-type \u4e2d\u6240\u7ed9\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002","title":"2.6.3 \u589e\u52a0global-info\u5b57\u6bb5"},{"location":"dsdl_language/lang/data_section/#264","text":"\u5f53\u6570\u636e\u91cf\u5f88\u5927\u7684\u65f6\u5019\uff0c\u5efa\u8bae\u5c06\u6570\u636e\u4eceYAML\u6587\u4ef6\u7684 data section \u90e8\u5206\u62bd\u51fa\u6765\u5355\u72ec\u653e\u5728JSON\u6587\u4ef6\u4e2d\uff0c\u5e76\u5728 data section \u90e8\u5206\u7684 sample-path \u5b57\u6bb5\u4e2d\u7ed9\u51fa\u6570\u636e\u5b58\u653e\u7684JSON\u6587\u4ef6\u7684\u5177\u4f53\u8def\u5f84\uff0c\u7528\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a data : global-info-type : GlobalInfo global-info-path : global_info.json sample-type : ExampleSample sample-path : samples.json \u5728 samples.json \u4e2d\u5b58\u653e\u6211\u4eec\u5177\u4f53\u7684\u6570\u636e\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a { \"samples\":[ {\"image\": \"xyz/0001.jpg\", \"label\": \"cat\"}, {\"image\": \"xyz/0002.jpg\", \"label\": \"dog\"}, {\"image\": \"xyz/0003.jpg\", \"label\": \"dog\"}, {\"image\": \"xyz/0004.jpg\", \"label\": \"tiger\"}, ... ] } \u5728 global-info.json \u4e2d\u5b58\u653e\u6211\u4eec\u5177\u4f53\u7684\u5168\u5c40\u4fe1\u606f\u6570\u636e\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a { \"global-info\":{ \"class-info\":[ { 'label': 'dog', 'synonyms': ['puppy', 'hound'], 'def': 'a very common four-legged animal that is often kept by people as a pet or to guard or huntan animal.' }, ... ] } }","title":"2.6.4 \u901a\u8fc7\u5916\u90e8\u6587\u4ef6\u8bfb\u53d6"},{"location":"dsdl_language/lang/get_started/","text":"2.1 \u5feb\u901f\u5165\u95e8 \u5728DSDL\u4e2d\uff0c\u4e00\u4e2a\u6570\u636e\u96c6\u4f1a\u901a\u8fc7\u4e00\u4e2a \u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6 \u6765\u8868\u793a\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e3a\u4e00\u4e2a\u6807\u51c6\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u3002 \u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u662fJSON\u683c\u5f0f\u6216\u662fYAML\u683c\u5f0f\u3002 JSON\u683c\u5f0f\uff1a { \"$dsdl-version\" : \"0.5.0\" , \"meta\" : { \"name\" : \"my-dataset\" , \"creator\" : \"my-team\" , \"dataset-version\" : \"1.0.0\" }, \"defs\" : { \"MyClassDom\" : { \"$def\" : \"class_domain\" , \"classes\" : [ \"dog\" , \"cat\" , \"fish\" , \"tiger\" ] }, \"ImageClassificationSample\" : { \"$def\" : \"struct\" , \"$fields\" : { \"image\" : \"Image\" , \"label\" : \"Label[dom=MyClassDom]\" } } }, \"data\" : { \"sample-type\" : \"ImageClassificationSample\" , \"sample-path\" : \"$local\" , \"samples\" : [ { \"image\" : \"xyz/0001.jpg\" , \"label\" : \"cat\" }, { \"image\" : \"xyz/0002.jpg\" , \"label\" : \"dog\" } ] } } YAML\u683c\u5f0f\uff1a $dsdl-version : \"0.5.0\" meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] data : sample-type : ImageClassificationSample sample-path : $local samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } JSON\u548cYAML\u683c\u5f0f\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u90fd\u53ef\u4ee5 \u51c6\u786e\u5730\u63cf\u8ff0\u76f8\u540c\u7684 \u6570\u636e\u7ed3\u6784\u3002 \u7531\u4e8eYAML\u683c\u5f0f\u7684\u5185\u5bb9\u66f4\u52a0\u7b80\u6d01\uff0c\u5e76\u4e14\u5141\u8bb8\u6ce8\u91ca\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528YAML\u683c\u5f0f\u4f5c\u4e3a\u672c\u6587\u6863\u4e2d\u540e\u7eed\u793a\u4f8b\u7684\u9ed8\u8ba4\u683c\u5f0f\u3002YAML\u683c\u5f0f\u4e5f\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8f6c\u6362\u4e3a\u7b49\u4ef7\u7684JSON\u683c\u5f0f\u3002 \u9996\u5148\uff0c\u4e00\u4e2a\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u88ab\u5927\u81f4\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\uff1a header \uff1a\u6307\u660e\u4e86\u5f53\u524d\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u9700\u8981\u88ab\u5982\u4f55\u89e3\u6790\uff1b meta section \uff1a\u63d0\u4f9b\u4e86\u5f53\u524d\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff1b defs section \uff1a\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5168\u5c40\u7684\u5b9a\u4e49\uff0c\u6bd4\u5982\uff1a\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u522b\u57df\uff08class domain\uff09\u548c\u7ed3\u6784\u4f53\uff08struct\uff09\uff1b data section \uff1a\u63cf\u8ff0\u4e86\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u6570\u636e \u6ce8\u610f \uff1a \u5e26\u6709\u524d\u7f00 $ \u7684\u5c5e\u6027\u540d\u4e3a\u5728DSDL\u4e2d\u9884\u7559\u7684\u6709\u7279\u6b8a\u542b\u4e49\u7684\u5c5e\u6027\u540d\u3002 DSDL\u7248\u672c\uff08header\u4e2d\u5c5e\u6027\u540d\u4e3a $dsdl-version \uff09\u5fc5\u987b\u88ab\u660e\u786e\u5730\u6307\u660e\u3002\u56e0\u4e3aDSDL\u89e3\u91ca\u5668\u9700\u8981\u901a\u8fc7\u8be5\u5c5e\u6027\u77e5\u9053\u5f53\u524d\u6587\u4ef6\u7684\u7248\u672c\u4fe1\u606f\uff0c\u4ece\u800c\u6b63\u786e\u7684\u89e3\u6790\u5f53\u524d\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e9b\u901a\u7528\u7c7b\u578b\u7684\u5b9a\u4e49\u4e00\u822c\u5728\u6807\u51c6\u5e93\u6216\u6269\u5c55\u5e93\u4e2d\u6709\u63d0\u4f9b\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u4e0d\u9700\u8981\u81ea\u5df1\u5b9a\u4e49\u7c7b\u522b\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49 ImageClassificationSample \u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u4ee5\u53ca\u4f7f\u8be5\u4f8b\u5b50\u5177\u6709\u72ec\u7acb\u6027\u3002","title":"\u5feb\u901f\u5165\u95e8"},{"location":"dsdl_language/lang/get_started/#21","text":"\u5728DSDL\u4e2d\uff0c\u4e00\u4e2a\u6570\u636e\u96c6\u4f1a\u901a\u8fc7\u4e00\u4e2a \u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6 \u6765\u8868\u793a\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e3a\u4e00\u4e2a\u6807\u51c6\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u3002 \u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u662fJSON\u683c\u5f0f\u6216\u662fYAML\u683c\u5f0f\u3002 JSON\u683c\u5f0f\uff1a { \"$dsdl-version\" : \"0.5.0\" , \"meta\" : { \"name\" : \"my-dataset\" , \"creator\" : \"my-team\" , \"dataset-version\" : \"1.0.0\" }, \"defs\" : { \"MyClassDom\" : { \"$def\" : \"class_domain\" , \"classes\" : [ \"dog\" , \"cat\" , \"fish\" , \"tiger\" ] }, \"ImageClassificationSample\" : { \"$def\" : \"struct\" , \"$fields\" : { \"image\" : \"Image\" , \"label\" : \"Label[dom=MyClassDom]\" } } }, \"data\" : { \"sample-type\" : \"ImageClassificationSample\" , \"sample-path\" : \"$local\" , \"samples\" : [ { \"image\" : \"xyz/0001.jpg\" , \"label\" : \"cat\" }, { \"image\" : \"xyz/0002.jpg\" , \"label\" : \"dog\" } ] } } YAML\u683c\u5f0f\uff1a $dsdl-version : \"0.5.0\" meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] data : sample-type : ImageClassificationSample sample-path : $local samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } JSON\u548cYAML\u683c\u5f0f\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u90fd\u53ef\u4ee5 \u51c6\u786e\u5730\u63cf\u8ff0\u76f8\u540c\u7684 \u6570\u636e\u7ed3\u6784\u3002 \u7531\u4e8eYAML\u683c\u5f0f\u7684\u5185\u5bb9\u66f4\u52a0\u7b80\u6d01\uff0c\u5e76\u4e14\u5141\u8bb8\u6ce8\u91ca\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528YAML\u683c\u5f0f\u4f5c\u4e3a\u672c\u6587\u6863\u4e2d\u540e\u7eed\u793a\u4f8b\u7684\u9ed8\u8ba4\u683c\u5f0f\u3002YAML\u683c\u5f0f\u4e5f\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8f6c\u6362\u4e3a\u7b49\u4ef7\u7684JSON\u683c\u5f0f\u3002 \u9996\u5148\uff0c\u4e00\u4e2a\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u88ab\u5927\u81f4\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\uff1a header \uff1a\u6307\u660e\u4e86\u5f53\u524d\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u9700\u8981\u88ab\u5982\u4f55\u89e3\u6790\uff1b meta section \uff1a\u63d0\u4f9b\u4e86\u5f53\u524d\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff1b defs section \uff1a\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5168\u5c40\u7684\u5b9a\u4e49\uff0c\u6bd4\u5982\uff1a\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u522b\u57df\uff08class domain\uff09\u548c\u7ed3\u6784\u4f53\uff08struct\uff09\uff1b data section \uff1a\u63cf\u8ff0\u4e86\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u6570\u636e \u6ce8\u610f \uff1a \u5e26\u6709\u524d\u7f00 $ \u7684\u5c5e\u6027\u540d\u4e3a\u5728DSDL\u4e2d\u9884\u7559\u7684\u6709\u7279\u6b8a\u542b\u4e49\u7684\u5c5e\u6027\u540d\u3002 DSDL\u7248\u672c\uff08header\u4e2d\u5c5e\u6027\u540d\u4e3a $dsdl-version \uff09\u5fc5\u987b\u88ab\u660e\u786e\u5730\u6307\u660e\u3002\u56e0\u4e3aDSDL\u89e3\u91ca\u5668\u9700\u8981\u901a\u8fc7\u8be5\u5c5e\u6027\u77e5\u9053\u5f53\u524d\u6587\u4ef6\u7684\u7248\u672c\u4fe1\u606f\uff0c\u4ece\u800c\u6b63\u786e\u7684\u89e3\u6790\u5f53\u524d\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e9b\u901a\u7528\u7c7b\u578b\u7684\u5b9a\u4e49\u4e00\u822c\u5728\u6807\u51c6\u5e93\u6216\u6269\u5c55\u5e93\u4e2d\u6709\u63d0\u4f9b\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u4e0d\u9700\u8981\u81ea\u5df1\u5b9a\u4e49\u7c7b\u522b\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49 ImageClassificationSample \u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u4ee5\u53ca\u4f7f\u8be5\u4f8b\u5b50\u5177\u6709\u72ec\u7acb\u6027\u3002","title":"2.1 \u5feb\u901f\u5165\u95e8"},{"location":"dsdl_language/lang/libraries/","text":"2.7 \u5e93 \u5c3d\u7ba1\u6211\u4eec\u5df2\u7ecf\u8bd5\u56fe\u53bb\u7b80\u5316\u4e86DSDL\u7684\u8bbe\u8ba1\uff0c\u4f46\u662f\u8981\u5b66\u4e60\u5982\u4f55\u5728DSDL\u4e2d\u5b9a\u4e49\u7c7b\u4ecd\u7136\u9700\u8981\u4e00\u4e9b\u52aa\u529b\u3002\u7136\u800c\u6211\u4eec\u660e\u767d\u5927\u591a\u6570AI\u7814\u7a76\u8005\u6216\u5f00\u53d1\u8005\u90fd\u4e0d\u60f3\u518d\u5b66\u4e60\u53e6\u4e00\u95e8\u8bed\u8a00\u3002\u56e0\u6b64\u6211\u4eec\u5f15\u5165\u4e86\u5e93\u7684\u6982\u5ff5\u6765\u8fdb\u4e00\u6b65\u7b80\u5316\u6570\u636e\u96c6\u63cf\u8ff0\u7684\u8fc7\u7a0b\u3002 2.7.1 \u5b9a\u4e49\u4e0e\u5bfc\u5165\u4e00\u4e2a\u5e93 \u6211\u4eec\u5728 get_started \u90e8\u5206\u5b9a\u4e49\u7684\u7c7b ImageClassification \u662f\u6bd4\u8f83\u901a\u7528\uff0c\u53ef\u4ee5\u5e94\u7528\u5728\u5176\u4ed6\u7684\u6570\u636e\u96c6\u4e2d\u7684\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u63d0\u53d6\u5230\u4e00\u4e2a \u5e93\u6587\u4ef6 \u5f53\u4e2d\uff0c\u4ece\u800c\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u76f4\u63a5\u5bfc\u5165\u5b83\u3002 \u603b\u7684\u6765\u8bb2\uff0c\u4e00\u4e2a \u5e93\u6587\u4ef6 \u662f\u4e00\u4e2aYAML\u6216JSON\u6587\u4ef6\uff0c\u6587\u4ef6\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7c7b\u7684\u5b9a\u4e49\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a imageclass.yaml \u7684\u5e93\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a # file: imageclass.yaml # DSDL version is mandatory here. $dsdl-version : \"0.5.0\" # -- below are definitions -- MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] \u6ce8\u610f \uff1a \u8fd9\u4e2a\u5e93\u6587\u4ef6\u5e94\u8be5\u88ab\u653e\u5728\u5f53\u524dyaml\u6587\u4ef6\u7684\u540c\u7ea7\u76ee\u5f55\u3002 \u7528\u6237\u8fd8\u53ef\u4ee5\u5728\u6267\u884c dsdl view \u3001 dsdl check \u547d\u4ee4\u65f6\u901a\u8fc7\u6307\u5b9a -p \u53c2\u6570\u6765\u624b\u52a8\u58f0\u660e\u5e93\u76ee\u5f55\u3002 \u7136\u540e\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7\u5bfc\u5165\u5e93\u6765\u7b80\u5316\uff0c\u5177\u4f53\u63cf\u8ff0\u5982\u4e0b\uff1a $dsdl-version : \"0.5.0\" $import : - imageclass meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" data : sample-type : ImageClassificationSample sample-path : $local samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u5728header\u90e8\u5206\u4f7f\u7528\u4e86\u4e00\u4e2a $import \u6307\u4ee4\uff0c $import \u6307\u4ee4\u7684\u5185\u5bb9\u5e94\u8be5\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u56e0\u4e3a\u7528\u6237\u53ef\u4ee5\u5bfc\u5165\u591a\u4e2a\u5e93\u6587\u4ef6\u3002 \u6ce8\u610f \uff1a\u5f53\u5bfc\u5165\u4e86\u591a\u4e2a\u5e93\u6587\u4ef6\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5e93\u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u540d\u79f0\u76f8\u540c\u7684\u82e5\u5e72\u7684\u5b9a\u4e49\uff0c\u5219\u540e\u5bfc\u5165\u7684\u5b9a\u4e49\u4f1a\u8986\u76d6\u5148\u5bfc\u5165\u7684\u5b9a\u4e49\u3002\u5982\u679c\u53d1\u751f\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u89e3\u6790\u5668\u4f1a\u62a5\u51fa\u8b66\u544a\u4fe1\u606f\u3002 2.7.2 \u5982\u4f55\u66f4\u597d\u5730\u4f7f\u7528\u5e93 \u4e0b\u9762\u63d0\u4f9b\u4e86\u5b9a\u4e49DSDL\u5e93\u7684\u4e00\u4e9b\u5efa\u8bae\uff1a Define generic classes \u5982\u540c\u5728\u4ecb\u7ecd parametric_class \u65f6\u6240\u63d0\u5230\u7684\u90a3\u6837\uff0c\u5728\u901a\u7528\u7c7b\u7684\u5b9a\u4e49\u4e2d\u5199\u6b7b\u4e86\u53c2\u6570\u8bbe\u7f6e\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u7528\u6237\u5b9a\u4e49\u4e00\u4e2a\u542b\u53c2\u7c7b\uff0c\u5e76\u4e14\u6839\u636e\u5177\u4f53\u7684\u5e94\u7528\u573a\u666f\u7ed9\u5b9a\u5177\u4f53\u7684\u53c2\u6570\u8bbe\u7f6e\uff08\u6bd4\u5982\u7c7b\u522b\u57df\u7684\u8bbe\u7f6e\uff09\u3002 Grouped definitions \u6211\u4eec\u5efa\u8bae\u5c06\u76f8\u540c\u9886\u57df\u7684\u5b9a\u4e49\u653e\u5728\u4e00\u4e2a\u5e93\u6587\u4ef6\u4e2d\uff0c\u8fd9\u53ef\u4ee5\u4ee4\u5206\u53d1\u548c\u5bfc\u5165\u66f4\u52a0\u5bb9\u6613\u3002 Documentation \u7ed9\u5e93\u4e2d\u7684\u5b9a\u4e49\u5199\u6587\u6863\u53ef\u4ee5\u4ee4\u7528\u6237\u66f4\u5bb9\u6613\u7406\u89e3\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e0e\u89c6\u89c9\u8bc6\u522b\u76f8\u5173\u7684\u591a\u4e2a\u7c7b\u653e\u5728\u4e00\u4e2a\u5e93\u6587\u4ef6\u5f53\u4e2d\uff1a # file: visualrecog.yaml ImageClassificationSample : # Each image classification sample contains an image and a label. $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] LocalObjectEntry : # Each local object entry contains a bounding box and a label. $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : # Each object detection sample contains an image and a list of local object entries. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u901a\u8fc7\u4f7f\u7528\u8fd9\u4e2a\u5e93\u6587\u4ef6\uff0c\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a $dsdl-version : \"0.5.0\" $import : - visualrecog meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger data : sample-type : ImageClassificationSample[cdom=MyClassDom] sample-path : $local samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } \u56e0\u4e3a MyClassDom \u662f\u4e00\u4e2a\u5177\u4f53\u7684\u5b9a\u4e49\uff0c\u53ea\u5728\u5f53\u524d\u7684\u6570\u636e\u96c6\u4e2d\u88ab\u7528\u5230\u3002\u56e0\u6b64\u5c06\u5b83\u5b9a\u4e49\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u5f53\u4e2d\uff0c\u5e76\u4ece\u5e93\u6587\u4ef6\u4e2d\u5bfc\u5165\u66f4\u52a0\u901a\u7528\u7684\u7c7b\uff0c\u8fd9\u6837\u7684\u4f5c\u6cd5\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 \u6ce8\u610f \uff1a visualrecog \u5e93\u53ea\u662f\u7528\u6765\u505a\u6f14\u793a\u7684\u4f8b\u5b50\u3002 \u9664\u4e86DSDL\uff0c\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u5b57\u4e3a cv \u7684\u6807\u51c6\u5e93\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e0e\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7684\u5927\u91cf\u5b9a\u4e49\uff0c\u5305\u62ec\u5404\u79cd\u6570\u636e\u7c7b\u578b\u4ee5\u53ca\u7c7b\u522b\u57df\u7b49\u7b49\u3002","title":"\u94fe\u63a5\u5e93"},{"location":"dsdl_language/lang/libraries/#27","text":"\u5c3d\u7ba1\u6211\u4eec\u5df2\u7ecf\u8bd5\u56fe\u53bb\u7b80\u5316\u4e86DSDL\u7684\u8bbe\u8ba1\uff0c\u4f46\u662f\u8981\u5b66\u4e60\u5982\u4f55\u5728DSDL\u4e2d\u5b9a\u4e49\u7c7b\u4ecd\u7136\u9700\u8981\u4e00\u4e9b\u52aa\u529b\u3002\u7136\u800c\u6211\u4eec\u660e\u767d\u5927\u591a\u6570AI\u7814\u7a76\u8005\u6216\u5f00\u53d1\u8005\u90fd\u4e0d\u60f3\u518d\u5b66\u4e60\u53e6\u4e00\u95e8\u8bed\u8a00\u3002\u56e0\u6b64\u6211\u4eec\u5f15\u5165\u4e86\u5e93\u7684\u6982\u5ff5\u6765\u8fdb\u4e00\u6b65\u7b80\u5316\u6570\u636e\u96c6\u63cf\u8ff0\u7684\u8fc7\u7a0b\u3002","title":"2.7 \u5e93"},{"location":"dsdl_language/lang/libraries/#271","text":"\u6211\u4eec\u5728 get_started \u90e8\u5206\u5b9a\u4e49\u7684\u7c7b ImageClassification \u662f\u6bd4\u8f83\u901a\u7528\uff0c\u53ef\u4ee5\u5e94\u7528\u5728\u5176\u4ed6\u7684\u6570\u636e\u96c6\u4e2d\u7684\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u63d0\u53d6\u5230\u4e00\u4e2a \u5e93\u6587\u4ef6 \u5f53\u4e2d\uff0c\u4ece\u800c\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u76f4\u63a5\u5bfc\u5165\u5b83\u3002 \u603b\u7684\u6765\u8bb2\uff0c\u4e00\u4e2a \u5e93\u6587\u4ef6 \u662f\u4e00\u4e2aYAML\u6216JSON\u6587\u4ef6\uff0c\u6587\u4ef6\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7c7b\u7684\u5b9a\u4e49\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a imageclass.yaml \u7684\u5e93\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a # file: imageclass.yaml # DSDL version is mandatory here. $dsdl-version : \"0.5.0\" # -- below are definitions -- MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] \u6ce8\u610f \uff1a \u8fd9\u4e2a\u5e93\u6587\u4ef6\u5e94\u8be5\u88ab\u653e\u5728\u5f53\u524dyaml\u6587\u4ef6\u7684\u540c\u7ea7\u76ee\u5f55\u3002 \u7528\u6237\u8fd8\u53ef\u4ee5\u5728\u6267\u884c dsdl view \u3001 dsdl check \u547d\u4ee4\u65f6\u901a\u8fc7\u6307\u5b9a -p \u53c2\u6570\u6765\u624b\u52a8\u58f0\u660e\u5e93\u76ee\u5f55\u3002 \u7136\u540e\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7\u5bfc\u5165\u5e93\u6765\u7b80\u5316\uff0c\u5177\u4f53\u63cf\u8ff0\u5982\u4e0b\uff1a $dsdl-version : \"0.5.0\" $import : - imageclass meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" data : sample-type : ImageClassificationSample sample-path : $local samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u5728header\u90e8\u5206\u4f7f\u7528\u4e86\u4e00\u4e2a $import \u6307\u4ee4\uff0c $import \u6307\u4ee4\u7684\u5185\u5bb9\u5e94\u8be5\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u56e0\u4e3a\u7528\u6237\u53ef\u4ee5\u5bfc\u5165\u591a\u4e2a\u5e93\u6587\u4ef6\u3002 \u6ce8\u610f \uff1a\u5f53\u5bfc\u5165\u4e86\u591a\u4e2a\u5e93\u6587\u4ef6\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5e93\u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u540d\u79f0\u76f8\u540c\u7684\u82e5\u5e72\u7684\u5b9a\u4e49\uff0c\u5219\u540e\u5bfc\u5165\u7684\u5b9a\u4e49\u4f1a\u8986\u76d6\u5148\u5bfc\u5165\u7684\u5b9a\u4e49\u3002\u5982\u679c\u53d1\u751f\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u89e3\u6790\u5668\u4f1a\u62a5\u51fa\u8b66\u544a\u4fe1\u606f\u3002","title":"2.7.1 \u5b9a\u4e49\u4e0e\u5bfc\u5165\u4e00\u4e2a\u5e93"},{"location":"dsdl_language/lang/libraries/#272","text":"\u4e0b\u9762\u63d0\u4f9b\u4e86\u5b9a\u4e49DSDL\u5e93\u7684\u4e00\u4e9b\u5efa\u8bae\uff1a Define generic classes \u5982\u540c\u5728\u4ecb\u7ecd parametric_class \u65f6\u6240\u63d0\u5230\u7684\u90a3\u6837\uff0c\u5728\u901a\u7528\u7c7b\u7684\u5b9a\u4e49\u4e2d\u5199\u6b7b\u4e86\u53c2\u6570\u8bbe\u7f6e\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u7528\u6237\u5b9a\u4e49\u4e00\u4e2a\u542b\u53c2\u7c7b\uff0c\u5e76\u4e14\u6839\u636e\u5177\u4f53\u7684\u5e94\u7528\u573a\u666f\u7ed9\u5b9a\u5177\u4f53\u7684\u53c2\u6570\u8bbe\u7f6e\uff08\u6bd4\u5982\u7c7b\u522b\u57df\u7684\u8bbe\u7f6e\uff09\u3002 Grouped definitions \u6211\u4eec\u5efa\u8bae\u5c06\u76f8\u540c\u9886\u57df\u7684\u5b9a\u4e49\u653e\u5728\u4e00\u4e2a\u5e93\u6587\u4ef6\u4e2d\uff0c\u8fd9\u53ef\u4ee5\u4ee4\u5206\u53d1\u548c\u5bfc\u5165\u66f4\u52a0\u5bb9\u6613\u3002 Documentation \u7ed9\u5e93\u4e2d\u7684\u5b9a\u4e49\u5199\u6587\u6863\u53ef\u4ee5\u4ee4\u7528\u6237\u66f4\u5bb9\u6613\u7406\u89e3\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e0e\u89c6\u89c9\u8bc6\u522b\u76f8\u5173\u7684\u591a\u4e2a\u7c7b\u653e\u5728\u4e00\u4e2a\u5e93\u6587\u4ef6\u5f53\u4e2d\uff1a # file: visualrecog.yaml ImageClassificationSample : # Each image classification sample contains an image and a label. $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] LocalObjectEntry : # Each local object entry contains a bounding box and a label. $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : # Each object detection sample contains an image and a list of local object entries. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u901a\u8fc7\u4f7f\u7528\u8fd9\u4e2a\u5e93\u6587\u4ef6\uff0c\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a $dsdl-version : \"0.5.0\" $import : - visualrecog meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger data : sample-type : ImageClassificationSample[cdom=MyClassDom] sample-path : $local samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } \u56e0\u4e3a MyClassDom \u662f\u4e00\u4e2a\u5177\u4f53\u7684\u5b9a\u4e49\uff0c\u53ea\u5728\u5f53\u524d\u7684\u6570\u636e\u96c6\u4e2d\u88ab\u7528\u5230\u3002\u56e0\u6b64\u5c06\u5b83\u5b9a\u4e49\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u5f53\u4e2d\uff0c\u5e76\u4ece\u5e93\u6587\u4ef6\u4e2d\u5bfc\u5165\u66f4\u52a0\u901a\u7528\u7684\u7c7b\uff0c\u8fd9\u6837\u7684\u4f5c\u6cd5\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 \u6ce8\u610f \uff1a visualrecog \u5e93\u53ea\u662f\u7528\u6765\u505a\u6f14\u793a\u7684\u4f8b\u5b50\u3002 \u9664\u4e86DSDL\uff0c\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u5b57\u4e3a cv \u7684\u6807\u51c6\u5e93\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e0e\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7684\u5927\u91cf\u5b9a\u4e49\uff0c\u5305\u62ec\u5404\u79cd\u6570\u636e\u7c7b\u578b\u4ee5\u53ca\u7c7b\u522b\u57df\u7b49\u7b49\u3002","title":"2.7.2 \u5982\u4f55\u66f4\u597d\u5730\u4f7f\u7528\u5e93"},{"location":"dsdl_language/lang/structs/","text":"2.4 \u7ed3\u6784\u4f53\u7c7b \u7ed3\u6784\u4f53\u662f\u7528\u6765\u8868\u793a\u6df7\u5408\u5bf9\u8c61\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6570\u636e\u96c6\u4e2d\uff0c\u4e00\u4e2a\u6807\u51c6\u7684\u6570\u636e\u6837\u672c\u5c31\u662f\u7531\u591a\u4e2a\u7ec4\u4ef6\u6784\u6210\u7684\uff0c\u6bd4\u5982\u4e00\u5f20\u56fe\u50cf\u548c\u4e00\u4e2a\u7c7b\u522b\u6807\u6ce8\u3002\u56e0\u6b64\uff0c\u7ed3\u6784\u975e\u5e38\u9002\u5408\u8868\u793a\u6570\u636e\u6837\u672c\u6216\u5176\u590d\u5408\u7ec4\u4ef6\u3002 DSDL\u5141\u8bb8\u7528\u6237\u53bb\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\uff0c\u8fdb\u800c\u5bf9\u6307\u5b9a\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u8fdb\u884c\u62bd\u8c61\u3002 2.4.1 \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b \u5728DSDL\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684 $def \u90e8\u5206\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u3002\u5728 get_started \u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u5b57\u53eb ImageClassificationSample \u7684\u7ed3\u6784\u4f53\u7c7b\uff1a ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] \u7ed3\u6784\u4f53\u7c7b\u662f\u901a\u8fc7\u4e00\u4e2aJSON\u5bf9\u8c61\u6765\u5b9a\u4e49\u7684\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a $def \uff1a\u5b83\u7684\u503c\u5fc5\u987b\u662f \"struct\" \uff0c\u8868\u793a\u8be5JSON\u5bf9\u8c61\u6b63\u5728\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u3002 $fields \uff1a\u5b83\u7684\u503c\u5fc5\u987b\u662f\u4e00\u4e2aJSON\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u5c5e\u6027\uff0c\u6bcf\u4e2a\u5c5e\u6027\u5bf9\u5e94\u4e86\u4e00\u4e2a\u5b57\u6bb5\u3002\u7279\u522b\u5730\uff0c $fields \u7684\u6bcf\u4e2a\u5c5e\u6027\u4e2d\uff0c\u952e\u5c06\u88ab\u4f5c\u4e3a\u5b57\u6bb5\u540d\u79f0\uff0c\u503c\u5219\u4e3a\u5bf9\u5e94\u5b57\u6bb5\u7684\u7c7b\u578b\u89c4\u8303\u3002\u5b57\u6bb5\u7684\u7c7b\u578b\u89c4\u8303\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4e24\u79cd\u65b9\u5f0f\u6307\u5b9a\uff1a \u53ea\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u540d\u79f0 \uff1a\u53ea\u7ed9\u5b9a\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u540d\u79f0\uff08\u5982\u679c\u8be5\u6570\u636e\u7c7b\u578b\u662f\u542b\u53c2\u6570\u636e\u7c7b\u578b\uff0c\u5219\u53c2\u6570\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c\uff09\u3002 \u6307\u5b9a\u542b\u53c2\u6570\u636e\u7c7b\u578b \uff1a\u7528\u6237\u53ef\u4ee5\u901a\u8fc7JSON\u5bf9\u8c61\u6307\u5b9a\u7279\u5b9a\u7684\u542b\u53c2\u6570\u636e\u7c7b\u578b\uff0c\u5176\u4e2d\u7684 $type \u5c5e\u6027\u6307\u5b9a\u7c7b\u578b\u7684\u540d\u79f0\uff0c\u5e76\u4f7f\u7528\u5176\u4ed6\u5c5e\u6027\u6765\u8bbe\u7f6e\u7c7b\u578b\u53c2\u6570\u3002\u53ef\u4ee5\u67e5\u770b\u4f8b\u5b50\u4e2d\u7684 label \u5b57\u6bb5\u7684\u58f0\u660e\u3002 2.4.2 \u5d4c\u5957\u7ed3\u6784\u4f53 \u5728DSDL\u4e2d\uff0c\u7ed3\u6784\u4f53\u53ef\u4ee5\u662f\u5d4c\u5957\u7684\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u4e00\u4e2a\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u7684\u6837\u672c\u53ef\u80fd\u7531\u4e00\u5f20\u56fe\u50cf\u548c\u591a\u4e2a\u201c\u5c40\u90e8\u76ee\u6807\u201d\u7ec4\u6210\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5c40\u90e8\u76ee\u6807\u90fd\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\u5305\u542b\u4e00\u4e2abounding box\u548c\u4e00\u4e2a\u7c7b\u522b\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5b9a\u4e49\u7ed3\u6784\u4f53\uff1a LocalObjectEntry : # Each entry refers to an individual detected object on an image. $def : struct $fields : bbox : BBox label : Label[dom=MyClassDom] ObjectDetectionSample : # Each sample contains the detection results on an image. $def : struct $fields : image : Image objects : List[etype=LocalObjectEntry] \u5176\u4e2d LocalObjectEntry \u7ed3\u6784\u4f53\u7c7b\u5d4c\u5957\u8fdb\u4e86 ObjectDetectionSample \u7c7b\u5f53\u4e2d\u3002 2.4.3 \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7ed3\u6784\u4f53\u7c7b LocalObjectEntry \u4f7f\u7528\u4e86\u4e00\u4e2a\u6307\u5b9a\u597d\u7684\u7c7b\u522b\u57df MyClassDom \uff0c\u800c\u7ed3\u6784\u4f53\u7c7b ObjectDetectionSample \u4e5f\u4f1a\u50cf\u5b83\u7684\u5185\u5d4c\u7ed3\u6784\u4f53\u7c7b LocalObjectEntry \u4e00\u6837\uff0c\u4f7f\u7528 MyClassDom \u4f5c\u4e3a\u7c7b\u522b\u57df\u3002\u8fd9\u6837\u7684\u5b9a\u4e49\u662f\u4e0d\u901a\u7528\u7684\uff0c\u56e0\u4e3a\u4e3a\u4e86\u80fd\u4f7f\u7528\u5176\u4ed6\u7684\u7c7b\u522b\u57df\uff0c\u7528\u6237\u5219\u4e0d\u5f97\u4e0d\u91cd\u5199\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u3002 DSDL\u63d0\u4f9b\u4e86\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b\u6765\u89e3\u51b3\u4e0a\u9762\u7684\u95ee\u9898\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e00\u4e2a \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b \u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u7c7b\u6a21\u677f\uff0c\u5141\u8bb8\u6211\u4eec\u5728\u4f7f\u7528\u7c7b\u65f6\u8bbe\u7f6e\u6307\u5b9a\u7684\u53c2\u6570\u3002\u901a\u8fc7\u4f7f\u7528\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee5\u4e00\u79cd\u66f4\u901a\u7528\u7684\u65b9\u6cd5\u5b9a\u4e49\u7c7b\u3002 \u62ff\u76ee\u6807\u68c0\u6d4b\u4e3a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u7c7b\u91cd\u65b0\u5b9a\u4e49\uff1a LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5728\u7ed3\u6784\u4f53\u7c7b\u7684\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u5c5e\u6027 $params \uff0c\u5f53 $params \u5c5e\u6027\u88ab\u663e\u793a\u5730\u7ed9\u51fa\uff0c\u5e76\u4e14\u975e\u7a7a\u7684\u8bdd\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7c7b\u5c31\u662f \u542b\u53c2\u7684 \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4e00\u4e2a\u542b\u53c2\u7684\u7c7b\u88ab\u4f7f\u7528\u65f6\uff0c\u5b83\u7684\u53c2\u6570\u5fc5\u987b\u88ab\u7ed9\u5b9a\uff0c\u4ece\u800c\u5b83\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a \u5177\u4f53\u7684\u7c7b \u3002 \u5c24\u5176\u8981\u6307\u51fa\uff0c\u5728\u4e0a\u9762\u7684 LocalObjectEntry \u7c7b\u4e2d\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a \u7c7b\u53c2\u6570 cdom \uff0c\u7528\u6765\u6307\u660e label \u7684 domain \u5c5e\u6027\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4f7f\u7528\u4e00\u4e2a\u7c7b\u53c2\u6570\u65f6\uff0c\u9700\u8981\u4f7f\u7528 [] \u5c06\u5176\u56f4\u4f4f\u3002 \u63a5\u7740\uff0c ObjectDetectionSample \u7c7b\u4e5f\u540c\u6837\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b\uff0c\u53c2\u6570\u4e3a cdom \uff0c\u8be5\u53c2\u6570\u7528\u6765\u6307\u660e\u5bf9\u8c61 objects \u7684\u7c7b\u522b\u57df\u3002 \u4f7f\u7528\u8fd9\u6837\u7684\u7c7b\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u636e\u96c6\u6837\u672c\u6309\u5982\u4e0b\u683c\u5f0f\u8868\u793a\uff1a data : sample-type : $type : ObjectDetectionSample cdom : MyClassDom samples : - image : \"abc/0001.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 1 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - image : \"abc/0002.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 3 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - { bbox : [ 4 , 3 , 5 , 8 ], label : 3 } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53c2\u6570 cdom \u5df2\u7ecf\u88ab\u8bbe\u4e3a\u4e86 MyClassDom \uff0c\u56e0\u6b64\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b ObjectDetectionSample \u5df2\u7ecf\u6210\u4e3a\u4e86\u4e00\u4e2a\u5177\u4f53\u7c7b\uff0c\u5e76\u5728\u6837\u672c\u7c7b\u522b\u5b57\u6bb5\u4e2d\u88ab\u6307\u5b9a\u3002","title":"\u7ed3\u6784\u7c7b"},{"location":"dsdl_language/lang/structs/#24","text":"\u7ed3\u6784\u4f53\u662f\u7528\u6765\u8868\u793a\u6df7\u5408\u5bf9\u8c61\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6570\u636e\u96c6\u4e2d\uff0c\u4e00\u4e2a\u6807\u51c6\u7684\u6570\u636e\u6837\u672c\u5c31\u662f\u7531\u591a\u4e2a\u7ec4\u4ef6\u6784\u6210\u7684\uff0c\u6bd4\u5982\u4e00\u5f20\u56fe\u50cf\u548c\u4e00\u4e2a\u7c7b\u522b\u6807\u6ce8\u3002\u56e0\u6b64\uff0c\u7ed3\u6784\u975e\u5e38\u9002\u5408\u8868\u793a\u6570\u636e\u6837\u672c\u6216\u5176\u590d\u5408\u7ec4\u4ef6\u3002 DSDL\u5141\u8bb8\u7528\u6237\u53bb\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\uff0c\u8fdb\u800c\u5bf9\u6307\u5b9a\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u8fdb\u884c\u62bd\u8c61\u3002","title":"2.4 \u7ed3\u6784\u4f53\u7c7b"},{"location":"dsdl_language/lang/structs/#241","text":"\u5728DSDL\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684 $def \u90e8\u5206\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u3002\u5728 get_started \u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u5b57\u53eb ImageClassificationSample \u7684\u7ed3\u6784\u4f53\u7c7b\uff1a ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] \u7ed3\u6784\u4f53\u7c7b\u662f\u901a\u8fc7\u4e00\u4e2aJSON\u5bf9\u8c61\u6765\u5b9a\u4e49\u7684\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a $def \uff1a\u5b83\u7684\u503c\u5fc5\u987b\u662f \"struct\" \uff0c\u8868\u793a\u8be5JSON\u5bf9\u8c61\u6b63\u5728\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u3002 $fields \uff1a\u5b83\u7684\u503c\u5fc5\u987b\u662f\u4e00\u4e2aJSON\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u5c5e\u6027\uff0c\u6bcf\u4e2a\u5c5e\u6027\u5bf9\u5e94\u4e86\u4e00\u4e2a\u5b57\u6bb5\u3002\u7279\u522b\u5730\uff0c $fields \u7684\u6bcf\u4e2a\u5c5e\u6027\u4e2d\uff0c\u952e\u5c06\u88ab\u4f5c\u4e3a\u5b57\u6bb5\u540d\u79f0\uff0c\u503c\u5219\u4e3a\u5bf9\u5e94\u5b57\u6bb5\u7684\u7c7b\u578b\u89c4\u8303\u3002\u5b57\u6bb5\u7684\u7c7b\u578b\u89c4\u8303\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4e24\u79cd\u65b9\u5f0f\u6307\u5b9a\uff1a \u53ea\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u540d\u79f0 \uff1a\u53ea\u7ed9\u5b9a\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u540d\u79f0\uff08\u5982\u679c\u8be5\u6570\u636e\u7c7b\u578b\u662f\u542b\u53c2\u6570\u636e\u7c7b\u578b\uff0c\u5219\u53c2\u6570\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c\uff09\u3002 \u6307\u5b9a\u542b\u53c2\u6570\u636e\u7c7b\u578b \uff1a\u7528\u6237\u53ef\u4ee5\u901a\u8fc7JSON\u5bf9\u8c61\u6307\u5b9a\u7279\u5b9a\u7684\u542b\u53c2\u6570\u636e\u7c7b\u578b\uff0c\u5176\u4e2d\u7684 $type \u5c5e\u6027\u6307\u5b9a\u7c7b\u578b\u7684\u540d\u79f0\uff0c\u5e76\u4f7f\u7528\u5176\u4ed6\u5c5e\u6027\u6765\u8bbe\u7f6e\u7c7b\u578b\u53c2\u6570\u3002\u53ef\u4ee5\u67e5\u770b\u4f8b\u5b50\u4e2d\u7684 label \u5b57\u6bb5\u7684\u58f0\u660e\u3002","title":"2.4.1 \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b"},{"location":"dsdl_language/lang/structs/#242","text":"\u5728DSDL\u4e2d\uff0c\u7ed3\u6784\u4f53\u53ef\u4ee5\u662f\u5d4c\u5957\u7684\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u4e00\u4e2a\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u7684\u6837\u672c\u53ef\u80fd\u7531\u4e00\u5f20\u56fe\u50cf\u548c\u591a\u4e2a\u201c\u5c40\u90e8\u76ee\u6807\u201d\u7ec4\u6210\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5c40\u90e8\u76ee\u6807\u90fd\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\u5305\u542b\u4e00\u4e2abounding box\u548c\u4e00\u4e2a\u7c7b\u522b\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5b9a\u4e49\u7ed3\u6784\u4f53\uff1a LocalObjectEntry : # Each entry refers to an individual detected object on an image. $def : struct $fields : bbox : BBox label : Label[dom=MyClassDom] ObjectDetectionSample : # Each sample contains the detection results on an image. $def : struct $fields : image : Image objects : List[etype=LocalObjectEntry] \u5176\u4e2d LocalObjectEntry \u7ed3\u6784\u4f53\u7c7b\u5d4c\u5957\u8fdb\u4e86 ObjectDetectionSample \u7c7b\u5f53\u4e2d\u3002","title":"2.4.2 \u5d4c\u5957\u7ed3\u6784\u4f53"},{"location":"dsdl_language/lang/structs/#243","text":"\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7ed3\u6784\u4f53\u7c7b LocalObjectEntry \u4f7f\u7528\u4e86\u4e00\u4e2a\u6307\u5b9a\u597d\u7684\u7c7b\u522b\u57df MyClassDom \uff0c\u800c\u7ed3\u6784\u4f53\u7c7b ObjectDetectionSample \u4e5f\u4f1a\u50cf\u5b83\u7684\u5185\u5d4c\u7ed3\u6784\u4f53\u7c7b LocalObjectEntry \u4e00\u6837\uff0c\u4f7f\u7528 MyClassDom \u4f5c\u4e3a\u7c7b\u522b\u57df\u3002\u8fd9\u6837\u7684\u5b9a\u4e49\u662f\u4e0d\u901a\u7528\u7684\uff0c\u56e0\u4e3a\u4e3a\u4e86\u80fd\u4f7f\u7528\u5176\u4ed6\u7684\u7c7b\u522b\u57df\uff0c\u7528\u6237\u5219\u4e0d\u5f97\u4e0d\u91cd\u5199\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u3002 DSDL\u63d0\u4f9b\u4e86\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b\u6765\u89e3\u51b3\u4e0a\u9762\u7684\u95ee\u9898\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e00\u4e2a \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b \u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u7c7b\u6a21\u677f\uff0c\u5141\u8bb8\u6211\u4eec\u5728\u4f7f\u7528\u7c7b\u65f6\u8bbe\u7f6e\u6307\u5b9a\u7684\u53c2\u6570\u3002\u901a\u8fc7\u4f7f\u7528\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee5\u4e00\u79cd\u66f4\u901a\u7528\u7684\u65b9\u6cd5\u5b9a\u4e49\u7c7b\u3002 \u62ff\u76ee\u6807\u68c0\u6d4b\u4e3a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u7c7b\u91cd\u65b0\u5b9a\u4e49\uff1a LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5728\u7ed3\u6784\u4f53\u7c7b\u7684\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u5c5e\u6027 $params \uff0c\u5f53 $params \u5c5e\u6027\u88ab\u663e\u793a\u5730\u7ed9\u51fa\uff0c\u5e76\u4e14\u975e\u7a7a\u7684\u8bdd\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7c7b\u5c31\u662f \u542b\u53c2\u7684 \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4e00\u4e2a\u542b\u53c2\u7684\u7c7b\u88ab\u4f7f\u7528\u65f6\uff0c\u5b83\u7684\u53c2\u6570\u5fc5\u987b\u88ab\u7ed9\u5b9a\uff0c\u4ece\u800c\u5b83\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a \u5177\u4f53\u7684\u7c7b \u3002 \u5c24\u5176\u8981\u6307\u51fa\uff0c\u5728\u4e0a\u9762\u7684 LocalObjectEntry \u7c7b\u4e2d\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a \u7c7b\u53c2\u6570 cdom \uff0c\u7528\u6765\u6307\u660e label \u7684 domain \u5c5e\u6027\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4f7f\u7528\u4e00\u4e2a\u7c7b\u53c2\u6570\u65f6\uff0c\u9700\u8981\u4f7f\u7528 [] \u5c06\u5176\u56f4\u4f4f\u3002 \u63a5\u7740\uff0c ObjectDetectionSample \u7c7b\u4e5f\u540c\u6837\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b\uff0c\u53c2\u6570\u4e3a cdom \uff0c\u8be5\u53c2\u6570\u7528\u6765\u6307\u660e\u5bf9\u8c61 objects \u7684\u7c7b\u522b\u57df\u3002 \u4f7f\u7528\u8fd9\u6837\u7684\u7c7b\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u636e\u96c6\u6837\u672c\u6309\u5982\u4e0b\u683c\u5f0f\u8868\u793a\uff1a data : sample-type : $type : ObjectDetectionSample cdom : MyClassDom samples : - image : \"abc/0001.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 1 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - image : \"abc/0002.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 3 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - { bbox : [ 4 , 3 , 5 , 8 ], label : 3 } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53c2\u6570 cdom \u5df2\u7ecf\u88ab\u8bbe\u4e3a\u4e86 MyClassDom \uff0c\u56e0\u6b64\u542b\u53c2\u7ed3\u6784\u4f53\u7c7b ObjectDetectionSample \u5df2\u7ecf\u6210\u4e3a\u4e86\u4e00\u4e2a\u5177\u4f53\u7c7b\uff0c\u5e76\u5728\u6837\u672c\u7c7b\u522b\u5b57\u6bb5\u4e2d\u88ab\u6307\u5b9a\u3002","title":"2.4.3 \u542b\u53c2\u7ed3\u6784\u4f53\u7c7b"},{"location":"dsdl_language/lang/unstructured_objs/","text":"2.3 \u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b \u975e\u7ed3\u6784\u5316\u5bf9\u8c61 \uff0c\u6bd4\u5982\u56fe\u50cf\uff0c\u89c6\u9891\uff0c\u8bed\u97f3\uff0c\u70b9\u4e91\u4ee5\u53ca\u6587\u672c\uff0c\u8fd9\u4e9b\u90fd\u662f\u73b0\u5b9e\u4e16\u754c\u7269\u4f53\u7684\u6570\u5b57\u5316\u8868\u793a\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u6570\u636e\u7684\u5185\u90e8\u7ed3\u6784\u5f88\u4e30\u5bcc\uff0c\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff0c\u4ed6\u4eec\u8fd8\u662f\u88ab\u5f53\u4f5c\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u5176\u5185\u90e8\u7ed3\u6784\u5e76\u4e0d\u4f1a\u88ab\u8868\u73b0\u51fa\u6765\u3002 \u5728DSDL\u4e2d\uff0c\u4e00\u4e2a \u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b \u662f\u5bf9\u6240\u6709\u7279\u5b9a\u7c7b\u578b\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7684\u62bd\u8c61\u3002 2.3.1 \u9884\u5b9a\u4e49\u7684\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b \u5728\u6807\u51c6\u5e93\u5185\uff0cDSDL\u63d0\u4f9b\u4e86\u4e0b\u9762\u51e0\u4e2a\u5f00\u7bb1\u5373\u7528\u7684\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b\uff1a Image \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u4e00\u5f20\u56fe\u50cf\uff0c\u53ef\u4ee5\u901a\u8fc7\u50cf\u7d20\u7684\u77e9\u9635\u6765\u8868\u793a\u3002 Video \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u88ab\u89e3\u7801\u4e3a\u4e00\u4e2a\u5e8f\u5217\u7684\u89c6\u9891\u5e27\uff0c\u6bcf\u4e2a\u89c6\u9891\u5e27\u90fd\u662f\u4e00\u5f20\u56fe\u50cf\u3002 Text \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u4e00\u4e2a\u5355\u8bcd\u5e8f\u5217\u3002 PointCloud \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f3D\u70b9\u7684\u96c6\u5408\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a3D\u5bf9\u8c61\u7684\u5f62\u72b6\u3002 LabelMap \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u6574\u578b\u6807\u6ce8\u7684\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u6bcf\u4e2a\u6574\u578b\u6807\u6ce8\u5bf9\u5e94\u4e86\u4e00\u4e2a\u7c7b\u522b\u3002 2.3.2 \u63cf\u8ff0\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u5bf9\u8c61 \u5728DSDL\u4e2d\uff0c\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u5bf9\u8c61\u5b9a\u4f4d\u5668\u548c\u5176\u4ed6\u5c5e\u4e8e\u8be5\u5bf9\u8c61\u7684\u53c2\u6570\u6765\u58f0\u660e\u3002 \u62ff\u4e00\u5f20\u8def\u5f84\u4e3a abc/0001.jpg \u4e3a\u4f8b\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u6765\u8868\u793a\uff1a \u76ee\u6807\u5b9a\u4f4d\u5668 \uff1a\u4f7f\u7528\u76ee\u6807\u5b9a\u4f4d\u5668 abc/0001.jpg \u3002\u5f53\u4e00\u4e2a\u53d8\u91cf\u6216\u8005\u4e00\u4e2a\u5b57\u6bb5\u6709\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u7684\u6570\u636e\u7c7b\u578b\u5e76\u4e14\u5b83\u7684\u503c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8be5\u5b57\u7b26\u4e32\u5c06\u88ab\u89e3\u6790\u4e3a\u4e00\u4e2a\u76ee\u6807\u5b9a\u4f4d\u5668\u3002 2.3.3 \u6269\u5c55\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b DSDL\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u6307\u5b9a\u5982\u4f55\u4ece\u5b58\u50a8\u4e2d\u52a0\u8f7d\u5bf9\u8c61\u6765\u6ce8\u518c \u6269\u5c55\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b \u3002 \u5728\u5ba2\u6237\u7aef\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u62bd\u8c61\u57fa\u7c7b UnstructuredObject \u7684\u5b50\u7c7b\u5e76\u5b9e\u73b0\u5176 load \u65b9\u6cd5\u6765\u8fdb\u884c\u5bf9\u8c61\u52a0\u8f7d\uff0c\u4ece\u800c\u5b9e\u73b0\u6269\u5c55\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b\u3002 \u5177\u4f53\u6765\u8bb2\uff0c\u5728Python\u4e2d\uff0c\u62bd\u8c61\u57fa\u7c7b UnstructuredObject \u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u5f0f\u5b9a\u4e49\uff1a from abc import ABC , abstractmethod class UnstructuredObject ( ABC ): \"\"\"Abstract base class for unstructured objects.\"\"\" @abstractmethod def load ( file , descr ): \"\"\"Load an unstructured object from a given file-like object. Arguments: file: file-like, from which the unstructured object is loaded. descr: dict-like, which provides the descriptive information. Returns: The loaded object. \"\"\" pass \u6ce8\u610f \uff1a\u8fd9\u91cc\u7684 load \u65b9\u6cd5\u9700\u8981\u63a5\u6536\u4e00\u4e2a\u5df2\u7ecf\u6253\u5f00\u7684\u6587\u4ef6\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6587\u4ef6\u8def\u5f84\u3002\u8be5\u8bbe\u8ba1\u662f\u57fa\u4e8e\u201c\u5173\u6ce8\u70b9\u5206\u79bb\u201d\u539f\u5219\uff1a\u6570\u636e\u7cfb\u7edf\u6709\u8d23\u4efb\u53bb\u89e3\u6790\u5bf9\u8c61\u5b9a\u4f4d\u5668\u5e76\u4e14\u6784\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7684\u6587\u4ef6\u9605\u8bfb\u5668\u3002\u56e0\u6b64 UnstructuredObject \u7c7b\u7684\u5b50\u7c7b\u53ea\u9700\u8981\u8003\u8651\u5728\u7ed9\u5b9a\u4e00\u4e2a\u6587\u4ef6\u9605\u8bfb\u5668\u540e\uff0c\u5982\u4f55\u52a0\u8f7d\uff0c\u89e3\u6790\u4e0e\u9a8c\u8bc1\u5bf9\u8c61\u3002","title":"\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b"},{"location":"dsdl_language/lang/unstructured_objs/#23","text":"\u975e\u7ed3\u6784\u5316\u5bf9\u8c61 \uff0c\u6bd4\u5982\u56fe\u50cf\uff0c\u89c6\u9891\uff0c\u8bed\u97f3\uff0c\u70b9\u4e91\u4ee5\u53ca\u6587\u672c\uff0c\u8fd9\u4e9b\u90fd\u662f\u73b0\u5b9e\u4e16\u754c\u7269\u4f53\u7684\u6570\u5b57\u5316\u8868\u793a\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u6570\u636e\u7684\u5185\u90e8\u7ed3\u6784\u5f88\u4e30\u5bcc\uff0c\u5728\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff0c\u4ed6\u4eec\u8fd8\u662f\u88ab\u5f53\u4f5c\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u5176\u5185\u90e8\u7ed3\u6784\u5e76\u4e0d\u4f1a\u88ab\u8868\u73b0\u51fa\u6765\u3002 \u5728DSDL\u4e2d\uff0c\u4e00\u4e2a \u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b \u662f\u5bf9\u6240\u6709\u7279\u5b9a\u7c7b\u578b\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7684\u62bd\u8c61\u3002","title":"2.3 \u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b"},{"location":"dsdl_language/lang/unstructured_objs/#231","text":"\u5728\u6807\u51c6\u5e93\u5185\uff0cDSDL\u63d0\u4f9b\u4e86\u4e0b\u9762\u51e0\u4e2a\u5f00\u7bb1\u5373\u7528\u7684\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b\uff1a Image \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u4e00\u5f20\u56fe\u50cf\uff0c\u53ef\u4ee5\u901a\u8fc7\u50cf\u7d20\u7684\u77e9\u9635\u6765\u8868\u793a\u3002 Video \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u88ab\u89e3\u7801\u4e3a\u4e00\u4e2a\u5e8f\u5217\u7684\u89c6\u9891\u5e27\uff0c\u6bcf\u4e2a\u89c6\u9891\u5e27\u90fd\u662f\u4e00\u5f20\u56fe\u50cf\u3002 Text \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u4e00\u4e2a\u5355\u8bcd\u5e8f\u5217\u3002 PointCloud \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f3D\u70b9\u7684\u96c6\u5408\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a3D\u5bf9\u8c61\u7684\u5f62\u72b6\u3002 LabelMap \uff1a\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u6574\u578b\u6807\u6ce8\u7684\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u6bcf\u4e2a\u6574\u578b\u6807\u6ce8\u5bf9\u5e94\u4e86\u4e00\u4e2a\u7c7b\u522b\u3002","title":"2.3.1 \u9884\u5b9a\u4e49\u7684\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b"},{"location":"dsdl_language/lang/unstructured_objs/#232","text":"\u5728DSDL\u4e2d\uff0c\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u5bf9\u8c61\u5b9a\u4f4d\u5668\u548c\u5176\u4ed6\u5c5e\u4e8e\u8be5\u5bf9\u8c61\u7684\u53c2\u6570\u6765\u58f0\u660e\u3002 \u62ff\u4e00\u5f20\u8def\u5f84\u4e3a abc/0001.jpg \u4e3a\u4f8b\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u6765\u8868\u793a\uff1a \u76ee\u6807\u5b9a\u4f4d\u5668 \uff1a\u4f7f\u7528\u76ee\u6807\u5b9a\u4f4d\u5668 abc/0001.jpg \u3002\u5f53\u4e00\u4e2a\u53d8\u91cf\u6216\u8005\u4e00\u4e2a\u5b57\u6bb5\u6709\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u76ee\u6807\u7c7b\u7684\u6570\u636e\u7c7b\u578b\u5e76\u4e14\u5b83\u7684\u503c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8be5\u5b57\u7b26\u4e32\u5c06\u88ab\u89e3\u6790\u4e3a\u4e00\u4e2a\u76ee\u6807\u5b9a\u4f4d\u5668\u3002","title":"2.3.2 \u63cf\u8ff0\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u5bf9\u8c61"},{"location":"dsdl_language/lang/unstructured_objs/#233","text":"DSDL\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u6307\u5b9a\u5982\u4f55\u4ece\u5b58\u50a8\u4e2d\u52a0\u8f7d\u5bf9\u8c61\u6765\u6ce8\u518c \u6269\u5c55\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b \u3002 \u5728\u5ba2\u6237\u7aef\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u62bd\u8c61\u57fa\u7c7b UnstructuredObject \u7684\u5b50\u7c7b\u5e76\u5b9e\u73b0\u5176 load \u65b9\u6cd5\u6765\u8fdb\u884c\u5bf9\u8c61\u52a0\u8f7d\uff0c\u4ece\u800c\u5b9e\u73b0\u6269\u5c55\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b\u3002 \u5177\u4f53\u6765\u8bb2\uff0c\u5728Python\u4e2d\uff0c\u62bd\u8c61\u57fa\u7c7b UnstructuredObject \u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u5f0f\u5b9a\u4e49\uff1a from abc import ABC , abstractmethod class UnstructuredObject ( ABC ): \"\"\"Abstract base class for unstructured objects.\"\"\" @abstractmethod def load ( file , descr ): \"\"\"Load an unstructured object from a given file-like object. Arguments: file: file-like, from which the unstructured object is loaded. descr: dict-like, which provides the descriptive information. Returns: The loaded object. \"\"\" pass \u6ce8\u610f \uff1a\u8fd9\u91cc\u7684 load \u65b9\u6cd5\u9700\u8981\u63a5\u6536\u4e00\u4e2a\u5df2\u7ecf\u6253\u5f00\u7684\u6587\u4ef6\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6587\u4ef6\u8def\u5f84\u3002\u8be5\u8bbe\u8ba1\u662f\u57fa\u4e8e\u201c\u5173\u6ce8\u70b9\u5206\u79bb\u201d\u539f\u5219\uff1a\u6570\u636e\u7cfb\u7edf\u6709\u8d23\u4efb\u53bb\u89e3\u6790\u5bf9\u8c61\u5b9a\u4f4d\u5668\u5e76\u4e14\u6784\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7684\u6587\u4ef6\u9605\u8bfb\u5668\u3002\u56e0\u6b64 UnstructuredObject \u7c7b\u7684\u5b50\u7c7b\u53ea\u9700\u8981\u8003\u8651\u5728\u7ed9\u5b9a\u4e00\u4e2a\u6587\u4ef6\u9605\u8bfb\u5668\u540e\uff0c\u5982\u4f55\u52a0\u8f7d\uff0c\u89e3\u6790\u4e0e\u9a8c\u8bc1\u5bf9\u8c61\u3002","title":"2.3.3 \u6269\u5c55\u975e\u7ed3\u6784\u5316\u5bf9\u8c61\u7c7b"},{"location":"dsdl_template/intro_labeling/","text":"\u81ea\u5b9a\u4e49\u6570\u636e\u96c6 \u8be5\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u4e24\u65b9\u9762\uff1a \u5982\u4f55\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\uff08\u5373\u5236\u5b9a\u67d0\u4e2a\u4efb\u52a1\u7684\u6a21\u677f\u9700\u8981\u5305\u542b\u54ea\u4e9b\u5b57\u6bb5\u7b49\uff09 \u5982\u4f55\u5c06\u6a21\u677f\u5bfc\u5165\u6807\u6ce8\u5de5\u5177\uff0c\u8fdb\u884c\u6807\u6ce8 \u5982\u4f55\u81ea\u5b9a\u4e49\u6570\u636e\u96c6 \u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a yaml\u6587\u4ef6\u7684\u7ed3\u6784\u4ecb\u7ecd\u548c\u521b\u5efa\u65b9\u6cd5 \u5982\u4f55\u4f7f\u7528\u201c\u4efb\u52a1\u6a21\u677f\u201d\u90e8\u5206\u7684\u4efb\u52a1\u6a21\u677f \uff08\u540c\u7ea7\u6587\u4ef6\u5939\u201c\u4efb\u52a1\u6a21\u677f\u201d\u90e8\u5206\u7531\u5404\u4e2a\u8d1f\u8d23\u4eba\u586b\u5199\uff09 \u5bfc\u5165\u6807\u6ce8\u5de5\u5177 \u4ecb\u7ecd\u5bfc\u5165\u6807\u6ce8\u5de5\u5177\u7684\u65b9\u6cd5\u3002 \uff08\u6682\u65e0\uff09","title":"\u81ea\u5b9a\u4e49\u6570\u636e\u96c6"},{"location":"dsdl_template/intro_labeling/#_1","text":"\u8be5\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u4e24\u65b9\u9762\uff1a \u5982\u4f55\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\uff08\u5373\u5236\u5b9a\u67d0\u4e2a\u4efb\u52a1\u7684\u6a21\u677f\u9700\u8981\u5305\u542b\u54ea\u4e9b\u5b57\u6bb5\u7b49\uff09 \u5982\u4f55\u5c06\u6a21\u677f\u5bfc\u5165\u6807\u6ce8\u5de5\u5177\uff0c\u8fdb\u884c\u6807\u6ce8","title":"\u81ea\u5b9a\u4e49\u6570\u636e\u96c6"},{"location":"dsdl_template/intro_labeling/#_2","text":"\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a yaml\u6587\u4ef6\u7684\u7ed3\u6784\u4ecb\u7ecd\u548c\u521b\u5efa\u65b9\u6cd5 \u5982\u4f55\u4f7f\u7528\u201c\u4efb\u52a1\u6a21\u677f\u201d\u90e8\u5206\u7684\u4efb\u52a1\u6a21\u677f \uff08\u540c\u7ea7\u6587\u4ef6\u5939\u201c\u4efb\u52a1\u6a21\u677f\u201d\u90e8\u5206\u7531\u5404\u4e2a\u8d1f\u8d23\u4eba\u586b\u5199\uff09","title":"\u5982\u4f55\u81ea\u5b9a\u4e49\u6570\u636e\u96c6"},{"location":"dsdl_template/intro_labeling/#_3","text":"\u4ecb\u7ecd\u5bfc\u5165\u6807\u6ce8\u5de5\u5177\u7684\u65b9\u6cd5\u3002 \uff08\u6682\u65e0\uff09","title":"\u5bfc\u5165\u6807\u6ce8\u5de5\u5177"},{"location":"dsdl_template/overview/","text":"\u4efb\u52a1\u6a21\u677f\u4ecb\u7ecd \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u5bf9\u4efb\u52a1\u6a21\u677f\u8fdb\u884c\u4f7f\u7528\u548c\u5b9a\u4e49\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217CV\u548cNLP\u4efb\u52a1\u7684\u6a21\u677f\u3002 \u4ee5\u4e0b\u8868\u683c\u5c55\u793a\u4e86\u76ee\u524d\u63d0\u4f9b\u7684\u4efb\u52a1\u6a21\u677f\uff1a \u4efb\u52a1\u4e2d\u6587\u540d\u79f0 \u4efb\u52a1\u82f1\u6587\u5168\u79f0 \uff1a\u5982\u679c\u9700\u8981\u8c03\u7528\u6a21\u677f\u8fdb\u884c\u6570\u636e\u96c6\u7684DSDL\u8f6c\u6362\uff0c\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u4efb\u52a1\u82f1\u6587\u5168\u79f0\u8fdb\u884c\u8c03\u7528\uff0c\u8be6\u60c5\u8bf7\u89c1 \u6570\u636e\u96c6\u8f6c\u6362\u9875\u9762 \u3002 \u4efb\u52a1\u82f1\u6587\u7b80\u79f0 \uff1a\u7528\u6237\u4eceOpenDataLab\u4e0b\u8f7d\u5230\u7684DSDL\u6570\u636e\u96c6\u4e2d\u7684DSDL\u6807\u6ce8\u5c06\u4ee5dsdl_[task_name]_[lite/full]\u7684\u65b9\u5f0f\u547d\u540d\uff0c\u5176\u4e2d\u7684[task_name]\u5373\u4e3a\u4efb\u52a1\u82f1\u6587\u7b80\u79f0\u3002 \u4efb\u52a1\u6a21\u677f\u8be6\u60c5\u9875 \uff1a\u7528\u6237\u53ef\u4ee5\u8fdb\u884c\u4efb\u52a1\u6a21\u677f\u8be6\u60c5\u9875\u4e86\u89e3\u4efb\u52a1\u7684\u5177\u4f53\u4fe1\u606f\uff08\u4efb\u52a1\u8c03\u7814\u548c\u6d4b\u8bc4\u6307\u6807\uff09\uff0c\u4ee5\u53ca\u6a21\u677f\u4e2d\u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u3002 CV\u76f8\u5173\u7684\u4efb\u52a1\u6a21\u677f\u5982\u4e0b\uff1a \u4efb\u52a1\u4e2d\u6587\u540d\u79f0 \u4efb\u52a1\u82f1\u6587\u5168\u79f0 \u4efb\u52a1\u82f1\u6587\u7b80\u79f0 \u4efb\u52a1\u6a21\u677f\u8be6\u60c5\u9875 \u56fe\u50cf\u5206\u7c7b Image Classification Cls \u56fe\u50cf\u5206\u7c7b \u76ee\u6807\u68c0\u6d4b Object Detection Det \u76ee\u6807\u68c0\u6d4b \u8bed\u4e49\u5206\u5272 Semantic Segmentation SemSeg \u56fe\u50cf\u5206\u5272 \u5b9e\u4f8b\u5206\u5272-polygon\u6807\u6ce8 Instance Segmentation-polygon SemSeg \u5b9e\u4f8b\u5206\u5272-\u5206\u5272\u56fe\u6807\u6ce8 Instance Segmentation-segmap SemSeg \u5168\u666f\u5206\u5272 Panoptic Segmentation PanSeg \u5173\u952e\u70b9\u68c0\u6d4b Keypoint Detection KeyDet \u5173\u952e\u70b9\u68c0\u6d4b \u76ee\u6807\u8ddf\u8e2a Object Tracking SOT \u76ee\u6807\u8ddf\u8e2a \u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b Rotated Object Detection RotDet \u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b \u5149\u5b66\u5b57\u7b26\u8bc6\u522b-\u68c0\u6d4b Optical Character Recognition-detection OCR \u5149\u5b66\u5b57\u7b26\u8bc6\u522b(OCR) \u5149\u5b66\u5b57\u7b26\u8bc6\u522b-\u5206\u5272 Optical Character Recognition-segmentation OCR \u5149\u5b66\u5b57\u7b26\u8bc6\u522b-\u8bc6\u522b Optical Character Recognition-recognition OCR \u5149\u5b66\u5b57\u7b26\u8bc6\u522b-\u7aef\u5230\u7aef Optical Character Recognition-end_to_end OCR \u56fe\u50cf\u751f\u6210 Image Generation Gen \u56fe\u50cf\u751f\u6210","title":"\u4efb\u52a1\u6a21\u677f\u4ecb\u7ecd"},{"location":"dsdl_template/overview/#_1","text":"\u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u5bf9\u4efb\u52a1\u6a21\u677f\u8fdb\u884c\u4f7f\u7528\u548c\u5b9a\u4e49\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217CV\u548cNLP\u4efb\u52a1\u7684\u6a21\u677f\u3002 \u4ee5\u4e0b\u8868\u683c\u5c55\u793a\u4e86\u76ee\u524d\u63d0\u4f9b\u7684\u4efb\u52a1\u6a21\u677f\uff1a \u4efb\u52a1\u4e2d\u6587\u540d\u79f0 \u4efb\u52a1\u82f1\u6587\u5168\u79f0 \uff1a\u5982\u679c\u9700\u8981\u8c03\u7528\u6a21\u677f\u8fdb\u884c\u6570\u636e\u96c6\u7684DSDL\u8f6c\u6362\uff0c\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u4efb\u52a1\u82f1\u6587\u5168\u79f0\u8fdb\u884c\u8c03\u7528\uff0c\u8be6\u60c5\u8bf7\u89c1 \u6570\u636e\u96c6\u8f6c\u6362\u9875\u9762 \u3002 \u4efb\u52a1\u82f1\u6587\u7b80\u79f0 \uff1a\u7528\u6237\u4eceOpenDataLab\u4e0b\u8f7d\u5230\u7684DSDL\u6570\u636e\u96c6\u4e2d\u7684DSDL\u6807\u6ce8\u5c06\u4ee5dsdl_[task_name]_[lite/full]\u7684\u65b9\u5f0f\u547d\u540d\uff0c\u5176\u4e2d\u7684[task_name]\u5373\u4e3a\u4efb\u52a1\u82f1\u6587\u7b80\u79f0\u3002 \u4efb\u52a1\u6a21\u677f\u8be6\u60c5\u9875 \uff1a\u7528\u6237\u53ef\u4ee5\u8fdb\u884c\u4efb\u52a1\u6a21\u677f\u8be6\u60c5\u9875\u4e86\u89e3\u4efb\u52a1\u7684\u5177\u4f53\u4fe1\u606f\uff08\u4efb\u52a1\u8c03\u7814\u548c\u6d4b\u8bc4\u6307\u6807\uff09\uff0c\u4ee5\u53ca\u6a21\u677f\u4e2d\u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u3002 CV\u76f8\u5173\u7684\u4efb\u52a1\u6a21\u677f\u5982\u4e0b\uff1a \u4efb\u52a1\u4e2d\u6587\u540d\u79f0 \u4efb\u52a1\u82f1\u6587\u5168\u79f0 \u4efb\u52a1\u82f1\u6587\u7b80\u79f0 \u4efb\u52a1\u6a21\u677f\u8be6\u60c5\u9875 \u56fe\u50cf\u5206\u7c7b Image Classification Cls \u56fe\u50cf\u5206\u7c7b \u76ee\u6807\u68c0\u6d4b Object Detection Det \u76ee\u6807\u68c0\u6d4b \u8bed\u4e49\u5206\u5272 Semantic Segmentation SemSeg \u56fe\u50cf\u5206\u5272 \u5b9e\u4f8b\u5206\u5272-polygon\u6807\u6ce8 Instance Segmentation-polygon SemSeg \u5b9e\u4f8b\u5206\u5272-\u5206\u5272\u56fe\u6807\u6ce8 Instance Segmentation-segmap SemSeg \u5168\u666f\u5206\u5272 Panoptic Segmentation PanSeg \u5173\u952e\u70b9\u68c0\u6d4b Keypoint Detection KeyDet \u5173\u952e\u70b9\u68c0\u6d4b \u76ee\u6807\u8ddf\u8e2a Object Tracking SOT \u76ee\u6807\u8ddf\u8e2a \u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b Rotated Object Detection RotDet \u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b \u5149\u5b66\u5b57\u7b26\u8bc6\u522b-\u68c0\u6d4b Optical Character Recognition-detection OCR \u5149\u5b66\u5b57\u7b26\u8bc6\u522b(OCR) \u5149\u5b66\u5b57\u7b26\u8bc6\u522b-\u5206\u5272 Optical Character Recognition-segmentation OCR \u5149\u5b66\u5b57\u7b26\u8bc6\u522b-\u8bc6\u522b Optical Character Recognition-recognition OCR \u5149\u5b66\u5b57\u7b26\u8bc6\u522b-\u7aef\u5230\u7aef Optical Character Recognition-end_to_end OCR \u56fe\u50cf\u751f\u6210 Image Generation Gen \u56fe\u50cf\u751f\u6210","title":"\u4efb\u52a1\u6a21\u677f\u4ecb\u7ecd"},{"location":"dsdl_template/cv/cv_classification/","text":"\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1 \u4e3a\u4e86\u5236\u5b9a\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684\u6a21\u677f\uff0c\u6211\u4eec\u5bf9\u4e3b\u6d41\u7684\u5206\u7c7b\u4efb\u52a1\u6570\u636e\u96c6\u8fdb\u884c\u4e86\u8c03\u7814\uff0c\u5206\u6790\u5176\u4efb\u52a1\u7684\u76ee\u7684\u548c\u5e38\u89c1\u6807\u6ce8\u4fe1\u606f\u6240\u5305\u542b\u7684\u5b57\u6bb5\uff0c\u4ece\u4e2d\u6574\u7406\u51fa\u901a\u7528\u5171\u4eab\u548c\u72ec\u7acb\u5b57\u6bb5\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u5236\u5b9a\u5206\u7c7b\u4efb\u52a1\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684\u901a\u7528\u6a21\u677f\u3002 1. \u4efb\u52a1\u8c03\u7814 1.1 \u4efb\u52a1\u5b9a\u4e49 \u56fe\u50cf\u5206\u7c7b\u662f\u6307\u7ed9\u5b9a\u4e00\u5f20\u8f93\u5165\u56fe\u50cf\uff0c\u8f93\u51fa\u5176\u8bed\u4e49\u7c7b\u522b\u3002 1.2 \u8bc4\u4ef7\u6307\u6807 \u4efb\u52a1\u7684\u8bc4\u4ef7\u6307\u6807\u4e00\u822c\u6709\u4e24\u4e2a\uff1atop-5\u7684\u51c6\u786e\u7387\u548ctop-1\u7684\u51c6\u786e\u7387\uff0c\u51c6\u786e\u7387=\uff08\u6b63\u786e\u5206\u7c7b\u56fe\u7247\u4e2a\u6570\uff09/\uff08\u6240\u6709\u56fe\u7247\u4e2a\u6570\uff09\u3002top-5\u51c6\u786e\u7387\u6307\u7684\u662f\u524d5\u4e2a\u5f97\u5206\u6700\u9ad8\u7684\u9884\u6d4b\u7c7b\u522b\u91cc\u6709\u4e00\u4e2a\u662f\u6b63\u786e\u7684\uff0c\u5c31\u7b97\u8fd9\u4e2a\u6837\u672c\u88ab\u6b63\u786e\u5206\u7c7b\u4e86\uff0c\u800ctop-1\u51c6\u786e\u7387\u8ba1\u7b97\u65f6\u5fc5\u987b\u8981\u6ee1\u8db3\u9884\u6d4b\u5206\u6570\u6700\u9ad8\u7684\u9884\u6d4b\u7c7b\u522b\u662f\u6b63\u786e\u7684\uff0c\u624d\u7b97\u8fd9\u4e2a\u6837\u672c\u88ab\u6b63\u786e\u5206\u7c7b\u4e86\u3002 1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814 \u6211\u4eec\u8c03\u7814\u4e8610\u4e2a\u4e3b\u6d41\u5206\u7c7b\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u5305\u542b\u4e86ImageNet-1K\u3001MNIST\u3001CIFAR10\u7b49\u5e38\u89c1\u6570\u636e\u96c6\u3002\u4e3a\u4e86\u4f7f\u5f97\u6a21\u677f\u66f4\u52a0\u901a\u7528\uff0c\u540c\u65f6\u4e5f\u5177\u5907\u62d3\u5c55\u80fd\u529b\uff0c\u6211\u4eec\u7740\u91cd\u5173\u6ce8\u5404\u4e2a\u6570\u636e\u96c6\u4e4b\u95f4\u7684\u5171\u6027\u548c\u7279\u6027\uff0c\u6b64\u5916\uff0c\u8c03\u7814\u8fc7\u7a0b\u4f1a\u9047\u5230\u4e00\u4e9b\u540d\u79f0\u4e0d\u540c\uff0c\u4f46\u662f\u5b9e\u9645\u542b\u4e49\u76f8\u540c\u6216\u7c7b\u4f3c\u7684\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u6211\u4eec\u4e5f\u89c6\u4e3a\u540c\u4e00\u5b57\u6bb5\uff0c\u5e76\u7edf\u4e00\u53bb\u547d\u540d\uff0c\u6bd4\u5982image_id\u5b57\u6bb5\u4e00\u822c\u8868\u793a\u56fe\u7247\u7684\u8def\u5f84\u6216\u8005id\uff0c\u662f\u56fe\u7247\u7684\u552f\u4e00\u6807\u8bc6\uff1blabel_id\u5219\u8868\u793a\u56fe\u7247\u7684\u7c7b\u522b\uff0c\u53ef\u4ee5\u7528\u6570\u5b57\u8868\u793a\uff0c\u4e5f\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u8868\u793a\u3002\u5b8c\u6574\u7684\u5b57\u6bb5\u8c03\u7814\u7ed3\u679c\u5982\u4e0b\u8868\u6240\u793a\uff1a \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id label_id superclass ImageNet-21K Y Y Y ImageNet-1K Y Y Y CIFAR10 Y Y CIFAR100 Y Y Y MNIST Y Y Fashion-MNIST Y Y Caltech-256 Y Y Oxford Flowers-102 Y Y \u7ecf\u8fc7\u6574\u7406\uff0c\u5206\u7c7b\u4efb\u52a1\u7684\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a label_id \u56fe\u7247\u6240\u5c5e\u7684\u7c7b\u522b\uff0c\u7c7b\u578b\u4e3aint\u8868\u793a\u4e3a\u5355\u6807\u7b7e\uff0c\u7c7b\u578b\u4e3aList[int]\u8868\u793a\u591a\u6807\u7b7e \u72ec\u7acb\u5b57\u6bb5 superclass \u56fe\u7247\u6240\u5c5e\u7c7b\u522b\u7684\u7236\u7c7b\u522b\uff0c\u6bd4\u5982\"dog\"\u7684\u7236\u7c7b\u53ef\u80fd\u662f\"animal\" \u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u8981\u63cf\u8ff0\u4e00\u4e2a\u5206\u7c7b\u6570\u636e\u96c6\u7684\u6837\u672c\uff0cimage_id\u548clabel_id\u662f\u6700\u57fa\u7840\u7684\u5b57\u6bb5\uff0c\u540c\u65f6\uff0c\u4e5f\u4f1a\u6709\u7c7b\u4f3csuperclass\u7684\u7279\u6709\u5b57\u6bb5\u3002 2. \u6a21\u677f\u5c55\u793a \u6839\u636e\u4e0a\u8ff0\u7684 \u8c03\u7814\u7ed3\u679c \uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u5206\u7c7b\u4efb\u52a1\uff0c\u4e00\u4e2a\u6837\u672c\u6700\u91cd\u8981\u7684\u5c5e\u6027\u662f\u56fe\u7247\u7684id(\u6216\u8def\u5f84)\u4ee5\u53ca\u56fe\u7247\u7684\u7c7b\u522b\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5206\u7c7b\u4efb\u52a1\u7ed3\u6784\u4f53\uff08\u7ed3\u6784\u4f53\u7684\u6982\u5ff5\u8bf7\u53c2\u8003 DSDL\u5165\u95e8\u6587\u6863-\u8bed\u8a00\u5b9a\u4e49-\u7ed3\u6784\u4f53 \u90e8\u5206\uff09\u7684fields \u5c5e\u6027\u4e2d\u5b9a\u4e49\u4e86image\u548clabel\u4e24\u4e2a\u5b57\u6bb5\uff1b\u5176\u6b21\uff0c\u4e0d\u540c\u7684\u6570\u636e\u96c6\u6240\u8574\u542b\u7684\u7c7b\u522b\u662f\u5404\u4e0d\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u5728sample\u4e2d\u9700\u8981\u6709\u4e00\u4e2a\u5f62\u53c2\uff0c\u6765\u5bf9\u7c7b\u522b\u57df\u8fdb\u884c\u9650\u5b9a\uff08\u5728dsdl\u4e2d\uff0c\u6211\u4eec\u5c06\u7c7b\u522b\u57df\u63cf\u8ff0\u4e3aclass domain\uff0c\u6216\u8005cdom\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 DSDL\u5165\u95e8\u6587\u6863-\u8bed\u8a00\u5b9a\u4e49-\u7c7b\u522b\u57df \u4e2d\u66f4\u8be6\u7ec6\u7684\u5b9a\u4e49\uff09\uff1b\u6700\u540e\uff0c\u6211\u4eec\u8003\u8651\u5230\u5bf9\u4e8e\u4e00\u4e9b\u65e0\u76d1\u7763\u6216\u534a\u76d1\u7763\u5206\u7c7b\u4efb\u52a1\uff0c\u53ef\u80fd\u90e8\u5206\u6837\u672c\u4e0d\u5305\u542b\u7c7b\u522b\u4fe1\u606f\uff0c\u6240\u4ee5\u6211\u4eec\u8bbe\u8ba1\u4e86 $optional \u5b57\u6bb5\uff0c\u5e76\u5c06label\u5b57\u6bb5\u6db5\u76d6\u8fdb\u53bb\uff0c\u540c\u65f6\u4e00\u4e9b\u6570\u636e\u96c6\u7279\u6709\u7684\u5b57\u6bb5\u4e5f\u53ef\u4ee5\u5305\u542b\u5230 $optional \u5b57\u6bb5\u5f53\u4e2d\u3002\u57fa\u4e8e\u4e0a\u8ff0\u8003\u8651\uff0c\u6211\u4eec\u5236\u5b9a\u4e86\u5206\u7c7b\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version : \"0.5.0\" ClassificationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] $optional : [ 'label' ] \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c ClassificationSample: \u5b9a\u4e49\u4e86\u5206\u7c7b\u4efb\u52a1\u7684\u6837\u672c\u683c\u5f0f\uff0c\u5176\u5305\u542b\u4e86\u56db\u4e2a\u5c5e\u6027\uff1a $def: \u8868\u793aClassificationSample\u662f\u4e00\u4e2astruct(\u7ed3\u6784\u4f53\u7c7b) $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5bf9\u4e8e\u5206\u7c7b\u4efb\u52a1\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u8def\u5f84 label \u7c7b\u522b\u4fe1\u606f $optional: \u7528\u6765\u6db5\u76d6\u7ed3\u6784\u4f53\u7c7b\u7684\u5c5e\u6027\u4e2d\u7684\u53ef\u9009\u5c5e\u6027\uff0c\u8fd9\u91cc\u53ea\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b57\u6bb5\u5373label\uff0c\u8868\u793a\u5355\u4e2a\u6837\u672c\uff0clabel\u7684\u5b58\u5728\u662f\u53ef\u9009\u7684\uff0c\u53e6\u5916\u4e5f\u53ef\u4ee5\u5c06\u6570\u636e\u96c6\u7684\u7279\u6709\u5b57\u6bb5\u6db5\u76d6\u5728 $optional \u5b57\u6bb5\u91cc \u5bf9\u4e8e\u6a21\u677f\u4e2d\u63d0\u5230\u7684\u7c7b\u522b\u57dfcdom\uff0c\u8fd9\u91cc\u7ed9\u51facifar10\u6570\u636e\u96c6\u7684class domain\u4f5c\u4e3a\u793a\u4f8b\uff1a $dsdl-version : \"0.5.0\" Cifar10ImageClassificationClassDom : $def : class_domain classes : - airplane - automobile - bird - cat - deer - dog - frog - horse - ship - truck \u4e0a\u9762\u7684\u6587\u4ef6\u4e2d\u7ed9\u51fa\u4e86Cifar10ImageClassificationClassDom\u7684\u5b9a\u4e49\uff0c\u5177\u4f53\u5305\u542b\u4e0b\u5217\u5b57\u6bb5\uff1a $def: \u63cf\u8ff0\u4e86Cifar10ImageClassificationClassDom\u7684\u7c7b\u578b\uff0c\u8fd9\u91cc\u5373class_domain classes: \u63cf\u8ff0\u4e86\u8be5\u7c7b\u522b\u57df\u4e2d\u6240\u5305\u542b\u7684\u7c7b\u522b\u53ca\u5176\u987a\u5e8f\uff0c\u5728cifar10\u6570\u636e\u96c6\u4e2d\uff0c\u5219\u4f9d\u6b21\u4e3aairplane\u3001automobile\u7b49\u7b49 \u8fd9\u4e00\u7ae0\u8282\u4ecb\u7ecd\u7684\u5206\u7c7b\u4efb\u52a1\u6a21\u677f\u548ccdom\u6a21\u677f\u90fd\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u6a21\u677f\u5e93\u4e2d\u76f4\u63a5\u8c03\u7528\uff0c\u5177\u4f53\u8c03\u7528\u65b9\u6cd5\u8bf7\u67e5\u770b \u6570\u636e\u96c6\u8f6c\u6362 \u90e8\u5206\uff0c\u5176\u4ed6\u4efb\u52a1\u7c7b\u578b\u548c\u7c7b\u522b\u57df\u7684\u6a21\u677f\u4e5f\u6b22\u8fce\u5927\u5bb6\u5c1d\u8bd5\u4f7f\u7528\u3002 3. \u4f7f\u7528\u8bf4\u660e \u5728\u8fd9\u4e2a\u7ae0\u8282\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u901a\u8fc7import\u7684\u65b9\u5f0f\u6765\u5f15\u7528\u6211\u4eec\u7684\u6a21\u677f\u3002\u4ee5cifar10\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u9996\u5148\u662f\u63cf\u8ff0cifar10\u6570\u636e\u96c6\u4e2d\u6240\u6709\u6837\u672c\u7684\u6a21\u677ftrain.yaml\uff0c\u4e3e\u4f8b\u5982\u4e0b\uff1a $dsdl-version : \"0.5.0\" $import : - ../defs/class-dom - ../defs/classification-cifar10 meta : name : \"cifar10\" subdata-name : \"train\" data : sample-type : Cifar10Sample[cdom=Cifar10ImageClassificationClassDom] sample-path : $local samples : - image : \"images/000000000000.png\" label : frog - image : \"images/000000000001.png\" label : truck ... \u4e0a\u9762\u7684\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff0c\u9996\u5148\u5b9a\u4e49\u4e86dsdl\u7684\u7248\u672c\u4fe1\u606f\uff0c\u7136\u540eimport\u4e86\u4e24\u4e2a\u6a21\u677f\u6587\u4ef6\uff0c\u5305\u62ec\u4efb\u52a1\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6a21\u677f\uff0c\u63a5\u7740\u7528meta\u548cdata\u5b57\u6bb5\u6765\u63cf\u8ff0\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: dsdl\u7248\u672c\u4fe1\u606f $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165\u5206\u7c7b\u4efb\u52a1\u6a21\u677f\u548ccifar10\u7684class domain\uff0c\u4e5f\u5c31\u662f\u7ae0\u8282 2. \u6a21\u677f\u5c55\u793a \u4e2d\u5c55\u793a\u7684\u4e24\u90e8\u5206\u5185\u5bb9 meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u521b\u5efa\u8005\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: \u5176\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece\u5206\u7c7b\u4efb\u52a1\u6a21\u677f\u4e2d\u5bfc\u5165\u7684ClassificationSample\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aCifar10ImageClassificationClassDom sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u5982\u679c\u5b9e\u9645\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219samples\u7684\u5185\u5bb9\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6\uff0c\u5982\u679c\u662f$local\uff08\u8fd9\u4e2a\u4f8b\u5b50\uff09\uff0c\u5219\u4ece\u672c\u6587\u4ef6\u7684data.samples\u5b57\u6bb5\u4e2d\u76f4\u63a5\u8bfb\u53d6 samples: \u4fdd\u5b58\u6570\u636e\u96c6\u7684\u6837\u672c\u4fe1\u606f\uff0c\u6ce8\u610f\u53ea\u6709\u5728sample-path\u662f$local\u7684\u65f6\u5019\u8be5\u5b57\u6bb5\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219samples\u4f1a\u4f18\u5148\u4ecesample-path\u4e2d\u7684\u8def\u5f84\u53bb\u8bfb\u53d6","title":"\u56fe\u50cf\u5206\u7c7b"},{"location":"dsdl_template/cv/cv_classification/#_1","text":"\u4e3a\u4e86\u5236\u5b9a\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684\u6a21\u677f\uff0c\u6211\u4eec\u5bf9\u4e3b\u6d41\u7684\u5206\u7c7b\u4efb\u52a1\u6570\u636e\u96c6\u8fdb\u884c\u4e86\u8c03\u7814\uff0c\u5206\u6790\u5176\u4efb\u52a1\u7684\u76ee\u7684\u548c\u5e38\u89c1\u6807\u6ce8\u4fe1\u606f\u6240\u5305\u542b\u7684\u5b57\u6bb5\uff0c\u4ece\u4e2d\u6574\u7406\u51fa\u901a\u7528\u5171\u4eab\u548c\u72ec\u7acb\u5b57\u6bb5\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u5236\u5b9a\u5206\u7c7b\u4efb\u52a1\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684\u901a\u7528\u6a21\u677f\u3002","title":"\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1"},{"location":"dsdl_template/cv/cv_classification/#1","text":"","title":"1. \u4efb\u52a1\u8c03\u7814"},{"location":"dsdl_template/cv/cv_classification/#11","text":"\u56fe\u50cf\u5206\u7c7b\u662f\u6307\u7ed9\u5b9a\u4e00\u5f20\u8f93\u5165\u56fe\u50cf\uff0c\u8f93\u51fa\u5176\u8bed\u4e49\u7c7b\u522b\u3002","title":"1.1 \u4efb\u52a1\u5b9a\u4e49"},{"location":"dsdl_template/cv/cv_classification/#12","text":"\u4efb\u52a1\u7684\u8bc4\u4ef7\u6307\u6807\u4e00\u822c\u6709\u4e24\u4e2a\uff1atop-5\u7684\u51c6\u786e\u7387\u548ctop-1\u7684\u51c6\u786e\u7387\uff0c\u51c6\u786e\u7387=\uff08\u6b63\u786e\u5206\u7c7b\u56fe\u7247\u4e2a\u6570\uff09/\uff08\u6240\u6709\u56fe\u7247\u4e2a\u6570\uff09\u3002top-5\u51c6\u786e\u7387\u6307\u7684\u662f\u524d5\u4e2a\u5f97\u5206\u6700\u9ad8\u7684\u9884\u6d4b\u7c7b\u522b\u91cc\u6709\u4e00\u4e2a\u662f\u6b63\u786e\u7684\uff0c\u5c31\u7b97\u8fd9\u4e2a\u6837\u672c\u88ab\u6b63\u786e\u5206\u7c7b\u4e86\uff0c\u800ctop-1\u51c6\u786e\u7387\u8ba1\u7b97\u65f6\u5fc5\u987b\u8981\u6ee1\u8db3\u9884\u6d4b\u5206\u6570\u6700\u9ad8\u7684\u9884\u6d4b\u7c7b\u522b\u662f\u6b63\u786e\u7684\uff0c\u624d\u7b97\u8fd9\u4e2a\u6837\u672c\u88ab\u6b63\u786e\u5206\u7c7b\u4e86\u3002","title":"1.2 \u8bc4\u4ef7\u6307\u6807"},{"location":"dsdl_template/cv/cv_classification/#13","text":"\u6211\u4eec\u8c03\u7814\u4e8610\u4e2a\u4e3b\u6d41\u5206\u7c7b\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u5305\u542b\u4e86ImageNet-1K\u3001MNIST\u3001CIFAR10\u7b49\u5e38\u89c1\u6570\u636e\u96c6\u3002\u4e3a\u4e86\u4f7f\u5f97\u6a21\u677f\u66f4\u52a0\u901a\u7528\uff0c\u540c\u65f6\u4e5f\u5177\u5907\u62d3\u5c55\u80fd\u529b\uff0c\u6211\u4eec\u7740\u91cd\u5173\u6ce8\u5404\u4e2a\u6570\u636e\u96c6\u4e4b\u95f4\u7684\u5171\u6027\u548c\u7279\u6027\uff0c\u6b64\u5916\uff0c\u8c03\u7814\u8fc7\u7a0b\u4f1a\u9047\u5230\u4e00\u4e9b\u540d\u79f0\u4e0d\u540c\uff0c\u4f46\u662f\u5b9e\u9645\u542b\u4e49\u76f8\u540c\u6216\u7c7b\u4f3c\u7684\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u6211\u4eec\u4e5f\u89c6\u4e3a\u540c\u4e00\u5b57\u6bb5\uff0c\u5e76\u7edf\u4e00\u53bb\u547d\u540d\uff0c\u6bd4\u5982image_id\u5b57\u6bb5\u4e00\u822c\u8868\u793a\u56fe\u7247\u7684\u8def\u5f84\u6216\u8005id\uff0c\u662f\u56fe\u7247\u7684\u552f\u4e00\u6807\u8bc6\uff1blabel_id\u5219\u8868\u793a\u56fe\u7247\u7684\u7c7b\u522b\uff0c\u53ef\u4ee5\u7528\u6570\u5b57\u8868\u793a\uff0c\u4e5f\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u8868\u793a\u3002\u5b8c\u6574\u7684\u5b57\u6bb5\u8c03\u7814\u7ed3\u679c\u5982\u4e0b\u8868\u6240\u793a\uff1a \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id label_id superclass ImageNet-21K Y Y Y ImageNet-1K Y Y Y CIFAR10 Y Y CIFAR100 Y Y Y MNIST Y Y Fashion-MNIST Y Y Caltech-256 Y Y Oxford Flowers-102 Y Y \u7ecf\u8fc7\u6574\u7406\uff0c\u5206\u7c7b\u4efb\u52a1\u7684\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a label_id \u56fe\u7247\u6240\u5c5e\u7684\u7c7b\u522b\uff0c\u7c7b\u578b\u4e3aint\u8868\u793a\u4e3a\u5355\u6807\u7b7e\uff0c\u7c7b\u578b\u4e3aList[int]\u8868\u793a\u591a\u6807\u7b7e \u72ec\u7acb\u5b57\u6bb5 superclass \u56fe\u7247\u6240\u5c5e\u7c7b\u522b\u7684\u7236\u7c7b\u522b\uff0c\u6bd4\u5982\"dog\"\u7684\u7236\u7c7b\u53ef\u80fd\u662f\"animal\" \u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u8981\u63cf\u8ff0\u4e00\u4e2a\u5206\u7c7b\u6570\u636e\u96c6\u7684\u6837\u672c\uff0cimage_id\u548clabel_id\u662f\u6700\u57fa\u7840\u7684\u5b57\u6bb5\uff0c\u540c\u65f6\uff0c\u4e5f\u4f1a\u6709\u7c7b\u4f3csuperclass\u7684\u7279\u6709\u5b57\u6bb5\u3002","title":"1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814"},{"location":"dsdl_template/cv/cv_classification/#2","text":"\u6839\u636e\u4e0a\u8ff0\u7684 \u8c03\u7814\u7ed3\u679c \uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u5206\u7c7b\u4efb\u52a1\uff0c\u4e00\u4e2a\u6837\u672c\u6700\u91cd\u8981\u7684\u5c5e\u6027\u662f\u56fe\u7247\u7684id(\u6216\u8def\u5f84)\u4ee5\u53ca\u56fe\u7247\u7684\u7c7b\u522b\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5206\u7c7b\u4efb\u52a1\u7ed3\u6784\u4f53\uff08\u7ed3\u6784\u4f53\u7684\u6982\u5ff5\u8bf7\u53c2\u8003 DSDL\u5165\u95e8\u6587\u6863-\u8bed\u8a00\u5b9a\u4e49-\u7ed3\u6784\u4f53 \u90e8\u5206\uff09\u7684fields \u5c5e\u6027\u4e2d\u5b9a\u4e49\u4e86image\u548clabel\u4e24\u4e2a\u5b57\u6bb5\uff1b\u5176\u6b21\uff0c\u4e0d\u540c\u7684\u6570\u636e\u96c6\u6240\u8574\u542b\u7684\u7c7b\u522b\u662f\u5404\u4e0d\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u5728sample\u4e2d\u9700\u8981\u6709\u4e00\u4e2a\u5f62\u53c2\uff0c\u6765\u5bf9\u7c7b\u522b\u57df\u8fdb\u884c\u9650\u5b9a\uff08\u5728dsdl\u4e2d\uff0c\u6211\u4eec\u5c06\u7c7b\u522b\u57df\u63cf\u8ff0\u4e3aclass domain\uff0c\u6216\u8005cdom\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 DSDL\u5165\u95e8\u6587\u6863-\u8bed\u8a00\u5b9a\u4e49-\u7c7b\u522b\u57df \u4e2d\u66f4\u8be6\u7ec6\u7684\u5b9a\u4e49\uff09\uff1b\u6700\u540e\uff0c\u6211\u4eec\u8003\u8651\u5230\u5bf9\u4e8e\u4e00\u4e9b\u65e0\u76d1\u7763\u6216\u534a\u76d1\u7763\u5206\u7c7b\u4efb\u52a1\uff0c\u53ef\u80fd\u90e8\u5206\u6837\u672c\u4e0d\u5305\u542b\u7c7b\u522b\u4fe1\u606f\uff0c\u6240\u4ee5\u6211\u4eec\u8bbe\u8ba1\u4e86 $optional \u5b57\u6bb5\uff0c\u5e76\u5c06label\u5b57\u6bb5\u6db5\u76d6\u8fdb\u53bb\uff0c\u540c\u65f6\u4e00\u4e9b\u6570\u636e\u96c6\u7279\u6709\u7684\u5b57\u6bb5\u4e5f\u53ef\u4ee5\u5305\u542b\u5230 $optional \u5b57\u6bb5\u5f53\u4e2d\u3002\u57fa\u4e8e\u4e0a\u8ff0\u8003\u8651\uff0c\u6211\u4eec\u5236\u5b9a\u4e86\u5206\u7c7b\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version : \"0.5.0\" ClassificationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] $optional : [ 'label' ] \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c ClassificationSample: \u5b9a\u4e49\u4e86\u5206\u7c7b\u4efb\u52a1\u7684\u6837\u672c\u683c\u5f0f\uff0c\u5176\u5305\u542b\u4e86\u56db\u4e2a\u5c5e\u6027\uff1a $def: \u8868\u793aClassificationSample\u662f\u4e00\u4e2astruct(\u7ed3\u6784\u4f53\u7c7b) $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5bf9\u4e8e\u5206\u7c7b\u4efb\u52a1\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u8def\u5f84 label \u7c7b\u522b\u4fe1\u606f $optional: \u7528\u6765\u6db5\u76d6\u7ed3\u6784\u4f53\u7c7b\u7684\u5c5e\u6027\u4e2d\u7684\u53ef\u9009\u5c5e\u6027\uff0c\u8fd9\u91cc\u53ea\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b57\u6bb5\u5373label\uff0c\u8868\u793a\u5355\u4e2a\u6837\u672c\uff0clabel\u7684\u5b58\u5728\u662f\u53ef\u9009\u7684\uff0c\u53e6\u5916\u4e5f\u53ef\u4ee5\u5c06\u6570\u636e\u96c6\u7684\u7279\u6709\u5b57\u6bb5\u6db5\u76d6\u5728 $optional \u5b57\u6bb5\u91cc \u5bf9\u4e8e\u6a21\u677f\u4e2d\u63d0\u5230\u7684\u7c7b\u522b\u57dfcdom\uff0c\u8fd9\u91cc\u7ed9\u51facifar10\u6570\u636e\u96c6\u7684class domain\u4f5c\u4e3a\u793a\u4f8b\uff1a $dsdl-version : \"0.5.0\" Cifar10ImageClassificationClassDom : $def : class_domain classes : - airplane - automobile - bird - cat - deer - dog - frog - horse - ship - truck \u4e0a\u9762\u7684\u6587\u4ef6\u4e2d\u7ed9\u51fa\u4e86Cifar10ImageClassificationClassDom\u7684\u5b9a\u4e49\uff0c\u5177\u4f53\u5305\u542b\u4e0b\u5217\u5b57\u6bb5\uff1a $def: \u63cf\u8ff0\u4e86Cifar10ImageClassificationClassDom\u7684\u7c7b\u578b\uff0c\u8fd9\u91cc\u5373class_domain classes: \u63cf\u8ff0\u4e86\u8be5\u7c7b\u522b\u57df\u4e2d\u6240\u5305\u542b\u7684\u7c7b\u522b\u53ca\u5176\u987a\u5e8f\uff0c\u5728cifar10\u6570\u636e\u96c6\u4e2d\uff0c\u5219\u4f9d\u6b21\u4e3aairplane\u3001automobile\u7b49\u7b49 \u8fd9\u4e00\u7ae0\u8282\u4ecb\u7ecd\u7684\u5206\u7c7b\u4efb\u52a1\u6a21\u677f\u548ccdom\u6a21\u677f\u90fd\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u6a21\u677f\u5e93\u4e2d\u76f4\u63a5\u8c03\u7528\uff0c\u5177\u4f53\u8c03\u7528\u65b9\u6cd5\u8bf7\u67e5\u770b \u6570\u636e\u96c6\u8f6c\u6362 \u90e8\u5206\uff0c\u5176\u4ed6\u4efb\u52a1\u7c7b\u578b\u548c\u7c7b\u522b\u57df\u7684\u6a21\u677f\u4e5f\u6b22\u8fce\u5927\u5bb6\u5c1d\u8bd5\u4f7f\u7528\u3002","title":"2. \u6a21\u677f\u5c55\u793a"},{"location":"dsdl_template/cv/cv_classification/#3","text":"\u5728\u8fd9\u4e2a\u7ae0\u8282\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u901a\u8fc7import\u7684\u65b9\u5f0f\u6765\u5f15\u7528\u6211\u4eec\u7684\u6a21\u677f\u3002\u4ee5cifar10\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u9996\u5148\u662f\u63cf\u8ff0cifar10\u6570\u636e\u96c6\u4e2d\u6240\u6709\u6837\u672c\u7684\u6a21\u677ftrain.yaml\uff0c\u4e3e\u4f8b\u5982\u4e0b\uff1a $dsdl-version : \"0.5.0\" $import : - ../defs/class-dom - ../defs/classification-cifar10 meta : name : \"cifar10\" subdata-name : \"train\" data : sample-type : Cifar10Sample[cdom=Cifar10ImageClassificationClassDom] sample-path : $local samples : - image : \"images/000000000000.png\" label : frog - image : \"images/000000000001.png\" label : truck ... \u4e0a\u9762\u7684\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff0c\u9996\u5148\u5b9a\u4e49\u4e86dsdl\u7684\u7248\u672c\u4fe1\u606f\uff0c\u7136\u540eimport\u4e86\u4e24\u4e2a\u6a21\u677f\u6587\u4ef6\uff0c\u5305\u62ec\u4efb\u52a1\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6a21\u677f\uff0c\u63a5\u7740\u7528meta\u548cdata\u5b57\u6bb5\u6765\u63cf\u8ff0\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: dsdl\u7248\u672c\u4fe1\u606f $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165\u5206\u7c7b\u4efb\u52a1\u6a21\u677f\u548ccifar10\u7684class domain\uff0c\u4e5f\u5c31\u662f\u7ae0\u8282 2. \u6a21\u677f\u5c55\u793a \u4e2d\u5c55\u793a\u7684\u4e24\u90e8\u5206\u5185\u5bb9 meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u521b\u5efa\u8005\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: \u5176\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece\u5206\u7c7b\u4efb\u52a1\u6a21\u677f\u4e2d\u5bfc\u5165\u7684ClassificationSample\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aCifar10ImageClassificationClassDom sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u5982\u679c\u5b9e\u9645\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219samples\u7684\u5185\u5bb9\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6\uff0c\u5982\u679c\u662f$local\uff08\u8fd9\u4e2a\u4f8b\u5b50\uff09\uff0c\u5219\u4ece\u672c\u6587\u4ef6\u7684data.samples\u5b57\u6bb5\u4e2d\u76f4\u63a5\u8bfb\u53d6 samples: \u4fdd\u5b58\u6570\u636e\u96c6\u7684\u6837\u672c\u4fe1\u606f\uff0c\u6ce8\u610f\u53ea\u6709\u5728sample-path\u662f$local\u7684\u65f6\u5019\u8be5\u5b57\u6bb5\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219samples\u4f1a\u4f18\u5148\u4ecesample-path\u4e2d\u7684\u8def\u5f84\u53bb\u8bfb\u53d6","title":"3. \u4f7f\u7528\u8bf4\u660e"},{"location":"dsdl_template/cv/cv_detection/","text":"\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1 \u6211\u4eec\u901a\u8fc7\u5bf9\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u8fdb\u884c\u8c03\u7814\uff0c\u5e76\u603b\u7ed3\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\uff0c\u4ece\u800c\u5236\u5b9a\u51fa\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1DSDL\u6a21\u677f\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u4f7f\u7528\u3002 1. \u4efb\u52a1\u8c03\u7814 1.1 \u4efb\u52a1\u5b9a\u4e49 \u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u662f\u6307\u7ed9\u5b9a\u4e00\u5f20\u8f93\u5165\u56fe\u50cf\uff0c\u5224\u522b\u56fe\u50cf\u4e2d\u76ee\u6807\u4f4d\u7f6e\uff08\u901a\u5e38\u7528\u8fb9\u754c\u6846\u8868\u793a\uff09\u548c\u8bed\u4e49\u7c7b\u522b\uff0c\u793a\u610f\u56fe\u5982\u4e0b\uff1a 1.2 \u8bc4\u4ef7\u6307\u6807\uff1a \u76ee\u6807\u68c0\u6d4b\u6700\u5e38\u7528\u7684\u8bc4\u4ef7\u6307\u6807\u5c31\u662fAP\uff08 A verage P recision\uff09\uff0c\u6b64\u5916\u8fd8\u6709\u4e00\u4e9b\u57fa\u4e8eAP\u884d\u751f\u7684\u6307\u6807\uff0c\u8fd9\u4e9b\u6307\u6807\u7684\u542b\u4e49\u5982\u4e0b\uff1a AP PR\u66f2\u7ebf\u4e2d\u548c\u6a2a\u5750\u6807\u8f74\u56f4\u6210\u533a\u57df\u7684\u9762\u79ef\u3002 11-point interpolation \u4e3a\u4e86\u7b80\u5316AP\u8ba1\u7b97\uff0c\u6709\u65f6\u5019\u91c7\u752811-point\u8ba1\u7b97\u65b9\u6cd5\uff08\u5982PASCAL VOC\u6570\u636e\u96c6\u7684metric\uff09\uff0c\u76f8\u5f53\u4e8e\u8ba1\u7b97recall=[0, 0.1, 0.2, ... , 1]\u8fd911\u4e2a\u70b9\u5904precision\u503c\u7684\u5e73\u5747\u503c\uff08\u67d0\u5904\u4e0d\u5b58\u5728\u7684\u8bdd\u53d6\u53f3\u4fa7\u6700\u5927\u503c\uff09\uff0c\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a AP= {1\\over11} \\sum_{ \\begin{subarray}{l} i\\in\\{0, 0.1, 0.2 ..., 1\\}\\\\ \\end{subarray}} \\rho_{interp}(r) AP= {1\\over11} \\sum_{ \\begin{subarray}{l} i\\in\\{0, 0.1, 0.2 ..., 1\\}\\\\ \\end{subarray}} \\rho_{interp}(r) \\rho_{interp}(r) = \\max_{ \\begin{subarray}{l} \\tilde{r}:\\tilde{r}\\geq r \\end{subarray}} \\rho(\\tilde{r}) \\rho_{interp}(r) = \\max_{ \\begin{subarray}{l} \\tilde{r}:\\tilde{r}\\geq r \\end{subarray}} \\rho(\\tilde{r}) mAP \u6240\u6709\u7684\u7c7b\u522b\u7684AP\u6c42\u5e73\u5747 mAP@0.5 \u548c mAP@0.5~0.95 \u8fd9\u91cc\u76840.5\u548c0.95\u90fd\u662f\u524d\u6587\u4ecb\u7ecd\u6df7\u6dc6\u77e9\u9635\u63d0\u5230\u7684\u9608\u503c\uff0c\u4e5f\u5c31\u662f\u5728\u4e0d\u540c\u9608\u503c\u4e0b\u8fdb\u884c\u7684AP\u8ba1\u7b97\u3002mAP@0.5\u4e5f\u5c31\u662f\u9608\u503c\u7b49\u4e8e0.5\u7684\u65f6\u5019\u6240\u8ba1\u7b97\u7684mAP\uff0cmAP@0.5~0.95\u5219\u8868\u793a\u9608\u503c\u4ece0.5\u52300.95\u5206\u522b\u8ba1\u7b97mAP\uff0c\u7136\u540e\u5728\u6c42\u5e73\u5747\u3002PASCAL VOC\u6570\u636e\u96c6\u4e2d\u91c7\u7528\u7684\u662fmAP@0.5\uff0c\u901a\u5e38\u4e5f\u53ebAP_50, coco\u6570\u636e\u96c6\u4e2d\u91c7\u7528\u7684\u662fmAP@0.5~0.95\uff0c\u901a\u5e38\u7b80\u79f0\u4e3amAP\u3002\uff08\u76f8\u540c\u7684\u68c0\u6d4b\u5668\uff0cmAP\u4e00\u822c\u4f4e\u4e8eAP_50\uff09 mAP_s\uff0cmAP_m\uff0cmAP_l \u8fd9\u91cc\u7684s\u3001m\u3001l\u4ee3\u8868\u7684\u662f\u7269\u4f53\u5c3a\u5bf8\uff0c\u662fCOCO\u7684metric\u4f1a\u628abox\u5206\u4e3a\u4e0d\u540c\u5c3a\u5bf8\uff0c\u6765\u67e5\u770b\u6a21\u578b\u5bf9\u4e0d\u540c\u5c3a\u5bf8box\u7684\u68c0\u6d4b\u6548\u679c\u3002 1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814\uff1a \u6211\u4eec\u5bf910\u4e2a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u8fdb\u884c\u8c03\u7814\uff0c\u5bf9\u76f8\u5173\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\uff08\u4e3b\u8981\u662f\u6807\u6ce8\u5b57\u6bb5\uff09\u8fdb\u884c\u5206\u6790\u6c47\u603b\uff0c\u76f8\u540c\u542b\u4e49\u7684\u6807\u6ce8\u5b57\u6bb5\u4f1a\u4ee5\u7edf\u4e00\u547d\u540d\u8fdb\u884c\u5c55\u793a\uff0c\u6c47\u603b\u4fe1\u606f\u5982\u4e0b\u8868\u6240\u793a\uff1a \u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id label_id bbox iscrowd istruncated isdifficult isoccluded isdepiction isreflected isinside confidence pose PASCAL VOC Y Y Y Y Y Y Y COCO Y Y Y Y KITTI Y Y Y Y Y Y OpenImages Y Y Y Y Y Y Y Y Y Objects365 Y Y Y Y Y Y ILSVRC2015 Y Y Y Y Y LVIS Y Y Y \u5bf9\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u8fdb\u884c\u6c47\u603b\uff0c\u5f97\u5230\u4e0b\u8868\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a label_id \u5355\u4e2a\u76ee\u6807\u6240\u5c5e\u7684\u7c7b\u522b bbox \u5b9a\u4f4d\u5355\u4e2a\u76ee\u6807\u7684\u77e9\u5f62\u6846\uff0c\u6bd4\u5982\u7528[xmin, ymin, xmax, ymax]\u8868\u793a \u72ec\u7acb\u5b57\u6bb5 iscrowd \u662f\u5426\u4e3a\u4e00\u7fa4\u5bc6\u96c6\u76ee\u6807\uff0c\u6bd4\u5982\u4eba\u7fa4\uff0c\u4e00\u5806\u82f9\u679c istruncated \u76ee\u6807\u662f\u5426\u88ab\u622a\u65ad\uff0c\u5373\u76ee\u6807\u90e8\u5206\u5904\u4e8e\u56fe\u7247\u4e4b\u5916 isdifficult \u662f\u5426\u4e3a\u68c0\u6d4b\u56f0\u96be\u7684\u76ee\u6807 isoccluded \u76ee\u6807\u662f\u5426\u88ab\u906e\u6321 isdepiction \u662f\u5426\u4e3a\u5361\u901a\u5f62\u8c61\u3001\u7ed8\u753b\u7b49\u7b49\uff0c\u975e\u5b9e\u9645\u4e2a\u4f53 isreflected \u662f\u5426\u4e3a\u955c\u9762\u76ee\u6807 isinside \u662f\u5426\u5728\u522b\u7684\u7269\u4f53\u5185\u90e8\uff0c\u6bd4\u5982\u4e00\u8f86\u8f66\u5728\u5efa\u7b51\u5185\u90e8\uff0c\u4eba\u5728\u8f66\u5185\u90e8\u7b49\u7b49 confidence \u68c0\u6d4b\u6846\u7684\u7f6e\u4fe1\u5ea6\uff0c\u4e3a\u4eba\u5de5\u6807\u6ce8\u65f6\u901a\u5e38\u4e3a1\uff0c\u4e3a\u81ea\u52a8\u751f\u6210\u65f6\u4e00\u822c\u57280.5~1\u4e4b\u95f4 pose \u62cd\u6444\u89d2\u5ea6\uff0c\u53d6\u503c\u4e3a Unspecified\uff0cFrontal\uff0cRear\uff0cLeft\uff0cRight \u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u8981\u63cf\u8ff0\u4e00\u4e2a\u68c0\u6d4b\u6570\u636e\u96c6\u7684\u6837\u672c\uff0cimage_id\u3001label_id\u548cbbox\u662f\u6700\u57fa\u7840\u7684\u5b57\u6bb5\uff0c\u6b64\u5916\u8fd8\u5305\u542b\u4e86\u5404\u79cd\u63cf\u8ff0\u8fb9\u754c\u6846\u4fe1\u606f\u7684\u7279\u6b8a\u5b57\u6bb5\u3002 2. \u6a21\u677f\u5c55\u793a \u6839\u636e\u4e0a\u8ff0\u8c03\u7814\uff0c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u4e2d\u4e00\u5f20 \u56fe\u50cf \u5bf9\u5e94\u4e0d\u5b9a\u6570\u91cf\u7684 \u76ee\u6807 \uff0c\u6bcf\u4e2a\u76ee\u6807\u7528 \u8fb9\u754c\u6846BBox \u6765\u5b9a\u4f4d\u76ee\u6807\u4f4d\u7f6e\uff0c\u6bcf\u4e2aBBox\u540c\u65f6\u63d0\u4f9b \u8bed\u4e49\u6807\u7b7e \uff0c\u7531\u6b64\u6211\u4eec\u5b9a\u4e49\u76ee\u6807\u68c0\u6d4b\u6a21\u677f\u5982\u4e0b\uff1a object-detection.yaml $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] \u5728\u68c0\u6d4b\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff08\u8be6\u7ec6\u5b66\u4e60\u8bf7\u53c2\u8003 DSDL\u8bed\u8a00\u6559\u7a0b \uff09 $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalObjectEntry: \u5b9a\u4e49\u4e86\u8fb9\u754c\u6846\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: bbox \u8fb9\u754c\u6846\u7684\u4f4d\u7f6e label \u8fb9\u754c\u6846\u7684\u7c7b\u522b ObjectDetectionSample: \u5b9a\u4e49\u4e86\u68c0\u6d4b\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 objects \u6807\u6ce8\u4fe1\u606f\uff0c\u68c0\u6d4b\u4efb\u52a1\u4e2d\uff0c\u4e3a\u524d\u9762\u7684LocalObjectEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 3. \u5b8c\u6574\u793a\u4f8b \u6211\u4eec\u4ee5PASCAL VOC\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u5c55\u793a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6DSDL\u63cf\u8ff0\u6587\u4ef6\u5177\u4f53\u5185\u5bb9\u3002 3.1 DSDL\u8bed\u6cd5\u63cf\u8ff0\u7c7b\u522b\u4fe1\u606f voc-class-dom.yaml $dsdl-version : \"0.5.0\" VOCClassDom : $def : class_domain classes : - horse - person - bottle - tvmonitor - chair - diningtable - pottedplant - aeroplane - car - train - dog - bicycle - boat - cat - sofa - bird - sheep - motorbike - bus - cow \u4e0a\u9762\u7684\u6587\u4ef6\u4e2d\u7ed9\u51fa\u4e86VOCClassDom\u7684\u5b9a\u4e49\uff0c\u5177\u4f53\u5305\u542b\u4e0b\u5217\u5b57\u6bb5\uff1a $def: \u63cf\u8ff0\u4e86VOCClassDom\u7684dsdl\u7c7b\u578b\uff0c\u8fd9\u91cc\u5373class_domain classes: \u63cf\u8ff0\u4e86\u8be5\u7c7b\u522b\u57df\u4e2d\u6240\u5305\u542b\u7684\u7c7b\u522b\u53ca\u5176\u987a\u5e8f\uff0c\u5728PASCAL VOC\u6570\u636e\u96c6\u4e2d\uff0c\u5219\u4f9d\u6b21\u4e3ahorse\u3001person\u7b49\u7b49 3.2 \u6570\u636e\u96c6yaml\u6587\u4ef6\u5b9a\u4e49 train.yaml $dsdl-version : \"0.5.0\" $import : - object-detection - voc-class-domain meta : dataset_name : \"PASCAL VOC2007\" sub_dataset_name : \"train\" data : sample-type : ObjectDetectionSample[cdom=VOCClassDom] sample-path : $local samples : - image : \"media/000000000000.jpg\" objects : - { bbox : [ 4.0 , 36.0 , 496.0 , 298.0 ], label : 12 } - image : \"media/000000000002.jpg\" objects : - { bbox : [ 440.0 , 161.0 , 60.0 , 81.0 ], label : 14 } - { bbox : [ 97.0 , 159.0 , 121.0 , 67.0 ], label : 14 } - { bbox : [ 443.0 , 116.0 , 57.0 , 101.0 ], label : 15 } - { bbox : [ 104.0 , 113.0 , 65.0 , 106.0 ], label : 15 } ... \u4e0a\u9762\u7684\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff0c\u9996\u5148\u5b9a\u4e49\u4e86dsdl\u7684\u7248\u672c\u4fe1\u606f\uff0c\u7136\u540eimport\u4e86\u4e24\u4e2a\u6a21\u677f\u6587\u4ef6\uff0c\u5305\u62ec\u4efb\u52a1\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6a21\u677f\uff0c\u63a5\u7740\u7528meta\u548cdata\u5b57\u6bb5\u6765\u63cf\u8ff0\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: dsdl\u7248\u672c\u4fe1\u606f $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u548cVOC\u7684class domain\uff0c\u4e5f\u5c31\u662f 2. \u6a21\u677f\u5c55\u793a \u4e2d\u5c55\u793a\u7684\u4e24\u90e8\u5206\u5185\u5bb9 meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u521b\u5efa\u8005\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: \u5176\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u4e2d\u5bfc\u5165\u7684ObjectDetectionSample\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aVOCClassDom sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u5982\u679c\u5b9e\u9645\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219samples\u7684\u5185\u5bb9\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6\uff0c\u5982\u679c\u662f$local\uff08\u8fd9\u4e2a\u4f8b\u5b50\uff09\uff0c\u5219\u4ece\u672c\u6587\u4ef6\u7684data.samples\u5b57\u6bb5\u4e2d\u76f4\u63a5\u8bfb\u53d6 samples: \u4fdd\u5b58\u6570\u636e\u96c6\u7684\u6837\u672c\u4fe1\u606f\uff0c\u6ce8\u610f\u53ea\u6709\u5728sample-path\u662f$local\u7684\u65f6\u5019\u8be5\u5b57\u6bb5\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219samples\u4f1a\u4f18\u5148\u4ecesample-path\u4e2d\u7684\u8def\u5f84\u53bb\u8bfb\u53d6 \u63d0\u793a\uff1a\u82e5\u5f53\u524d\u6570\u636e\u96c6\u56fe\u50cf\u6570\u76ee\u8f83\u591a\uff0c\u5c06\u6240\u6709\u6807\u6ce8\u4fe1\u606f\u5b58\u50a8\u5728yaml\u6587\u4ef6\u91cc\u4f1a\u5bfc\u81f4\u540e\u7eed\u6570\u636e\u52a0\u8f7d\u901f\u5ea6\u8fc7\u6162\u3002\u6b64\u65f6\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u5916\u90e8\u6587\u4ef6\uff0c\u4f8b\u5982train.yaml\u4e2d\u7684sample-path: train.json \u5c06\u6570\u636e\u5b58\u653e\u5230\u53ef\u9ad8\u6548\u8bfb\u53d6\u7684\u6587\u4ef6\u4e2d","title":"\u76ee\u6807\u68c0\u6d4b"},{"location":"dsdl_template/cv/cv_detection/#_1","text":"\u6211\u4eec\u901a\u8fc7\u5bf9\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u8fdb\u884c\u8c03\u7814\uff0c\u5e76\u603b\u7ed3\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\uff0c\u4ece\u800c\u5236\u5b9a\u51fa\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1DSDL\u6a21\u677f\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u4f7f\u7528\u3002","title":"\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1"},{"location":"dsdl_template/cv/cv_detection/#1","text":"","title":"1. \u4efb\u52a1\u8c03\u7814"},{"location":"dsdl_template/cv/cv_detection/#11","text":"\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u662f\u6307\u7ed9\u5b9a\u4e00\u5f20\u8f93\u5165\u56fe\u50cf\uff0c\u5224\u522b\u56fe\u50cf\u4e2d\u76ee\u6807\u4f4d\u7f6e\uff08\u901a\u5e38\u7528\u8fb9\u754c\u6846\u8868\u793a\uff09\u548c\u8bed\u4e49\u7c7b\u522b\uff0c\u793a\u610f\u56fe\u5982\u4e0b\uff1a","title":"1.1 \u4efb\u52a1\u5b9a\u4e49"},{"location":"dsdl_template/cv/cv_detection/#12","text":"\u76ee\u6807\u68c0\u6d4b\u6700\u5e38\u7528\u7684\u8bc4\u4ef7\u6307\u6807\u5c31\u662fAP\uff08 A verage P recision\uff09\uff0c\u6b64\u5916\u8fd8\u6709\u4e00\u4e9b\u57fa\u4e8eAP\u884d\u751f\u7684\u6307\u6807\uff0c\u8fd9\u4e9b\u6307\u6807\u7684\u542b\u4e49\u5982\u4e0b\uff1a AP PR\u66f2\u7ebf\u4e2d\u548c\u6a2a\u5750\u6807\u8f74\u56f4\u6210\u533a\u57df\u7684\u9762\u79ef\u3002 11-point interpolation \u4e3a\u4e86\u7b80\u5316AP\u8ba1\u7b97\uff0c\u6709\u65f6\u5019\u91c7\u752811-point\u8ba1\u7b97\u65b9\u6cd5\uff08\u5982PASCAL VOC\u6570\u636e\u96c6\u7684metric\uff09\uff0c\u76f8\u5f53\u4e8e\u8ba1\u7b97recall=[0, 0.1, 0.2, ... , 1]\u8fd911\u4e2a\u70b9\u5904precision\u503c\u7684\u5e73\u5747\u503c\uff08\u67d0\u5904\u4e0d\u5b58\u5728\u7684\u8bdd\u53d6\u53f3\u4fa7\u6700\u5927\u503c\uff09\uff0c\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a AP= {1\\over11} \\sum_{ \\begin{subarray}{l} i\\in\\{0, 0.1, 0.2 ..., 1\\}\\\\ \\end{subarray}} \\rho_{interp}(r) AP= {1\\over11} \\sum_{ \\begin{subarray}{l} i\\in\\{0, 0.1, 0.2 ..., 1\\}\\\\ \\end{subarray}} \\rho_{interp}(r) \\rho_{interp}(r) = \\max_{ \\begin{subarray}{l} \\tilde{r}:\\tilde{r}\\geq r \\end{subarray}} \\rho(\\tilde{r}) \\rho_{interp}(r) = \\max_{ \\begin{subarray}{l} \\tilde{r}:\\tilde{r}\\geq r \\end{subarray}} \\rho(\\tilde{r}) mAP \u6240\u6709\u7684\u7c7b\u522b\u7684AP\u6c42\u5e73\u5747 mAP@0.5 \u548c mAP@0.5~0.95 \u8fd9\u91cc\u76840.5\u548c0.95\u90fd\u662f\u524d\u6587\u4ecb\u7ecd\u6df7\u6dc6\u77e9\u9635\u63d0\u5230\u7684\u9608\u503c\uff0c\u4e5f\u5c31\u662f\u5728\u4e0d\u540c\u9608\u503c\u4e0b\u8fdb\u884c\u7684AP\u8ba1\u7b97\u3002mAP@0.5\u4e5f\u5c31\u662f\u9608\u503c\u7b49\u4e8e0.5\u7684\u65f6\u5019\u6240\u8ba1\u7b97\u7684mAP\uff0cmAP@0.5~0.95\u5219\u8868\u793a\u9608\u503c\u4ece0.5\u52300.95\u5206\u522b\u8ba1\u7b97mAP\uff0c\u7136\u540e\u5728\u6c42\u5e73\u5747\u3002PASCAL VOC\u6570\u636e\u96c6\u4e2d\u91c7\u7528\u7684\u662fmAP@0.5\uff0c\u901a\u5e38\u4e5f\u53ebAP_50, coco\u6570\u636e\u96c6\u4e2d\u91c7\u7528\u7684\u662fmAP@0.5~0.95\uff0c\u901a\u5e38\u7b80\u79f0\u4e3amAP\u3002\uff08\u76f8\u540c\u7684\u68c0\u6d4b\u5668\uff0cmAP\u4e00\u822c\u4f4e\u4e8eAP_50\uff09 mAP_s\uff0cmAP_m\uff0cmAP_l \u8fd9\u91cc\u7684s\u3001m\u3001l\u4ee3\u8868\u7684\u662f\u7269\u4f53\u5c3a\u5bf8\uff0c\u662fCOCO\u7684metric\u4f1a\u628abox\u5206\u4e3a\u4e0d\u540c\u5c3a\u5bf8\uff0c\u6765\u67e5\u770b\u6a21\u578b\u5bf9\u4e0d\u540c\u5c3a\u5bf8box\u7684\u68c0\u6d4b\u6548\u679c\u3002","title":"1.2 \u8bc4\u4ef7\u6307\u6807\uff1a"},{"location":"dsdl_template/cv/cv_detection/#13","text":"\u6211\u4eec\u5bf910\u4e2a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u8fdb\u884c\u8c03\u7814\uff0c\u5bf9\u76f8\u5173\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\uff08\u4e3b\u8981\u662f\u6807\u6ce8\u5b57\u6bb5\uff09\u8fdb\u884c\u5206\u6790\u6c47\u603b\uff0c\u76f8\u540c\u542b\u4e49\u7684\u6807\u6ce8\u5b57\u6bb5\u4f1a\u4ee5\u7edf\u4e00\u547d\u540d\u8fdb\u884c\u5c55\u793a\uff0c\u6c47\u603b\u4fe1\u606f\u5982\u4e0b\u8868\u6240\u793a\uff1a \u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id label_id bbox iscrowd istruncated isdifficult isoccluded isdepiction isreflected isinside confidence pose PASCAL VOC Y Y Y Y Y Y Y COCO Y Y Y Y KITTI Y Y Y Y Y Y OpenImages Y Y Y Y Y Y Y Y Y Objects365 Y Y Y Y Y Y ILSVRC2015 Y Y Y Y Y LVIS Y Y Y \u5bf9\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u8fdb\u884c\u6c47\u603b\uff0c\u5f97\u5230\u4e0b\u8868\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a label_id \u5355\u4e2a\u76ee\u6807\u6240\u5c5e\u7684\u7c7b\u522b bbox \u5b9a\u4f4d\u5355\u4e2a\u76ee\u6807\u7684\u77e9\u5f62\u6846\uff0c\u6bd4\u5982\u7528[xmin, ymin, xmax, ymax]\u8868\u793a \u72ec\u7acb\u5b57\u6bb5 iscrowd \u662f\u5426\u4e3a\u4e00\u7fa4\u5bc6\u96c6\u76ee\u6807\uff0c\u6bd4\u5982\u4eba\u7fa4\uff0c\u4e00\u5806\u82f9\u679c istruncated \u76ee\u6807\u662f\u5426\u88ab\u622a\u65ad\uff0c\u5373\u76ee\u6807\u90e8\u5206\u5904\u4e8e\u56fe\u7247\u4e4b\u5916 isdifficult \u662f\u5426\u4e3a\u68c0\u6d4b\u56f0\u96be\u7684\u76ee\u6807 isoccluded \u76ee\u6807\u662f\u5426\u88ab\u906e\u6321 isdepiction \u662f\u5426\u4e3a\u5361\u901a\u5f62\u8c61\u3001\u7ed8\u753b\u7b49\u7b49\uff0c\u975e\u5b9e\u9645\u4e2a\u4f53 isreflected \u662f\u5426\u4e3a\u955c\u9762\u76ee\u6807 isinside \u662f\u5426\u5728\u522b\u7684\u7269\u4f53\u5185\u90e8\uff0c\u6bd4\u5982\u4e00\u8f86\u8f66\u5728\u5efa\u7b51\u5185\u90e8\uff0c\u4eba\u5728\u8f66\u5185\u90e8\u7b49\u7b49 confidence \u68c0\u6d4b\u6846\u7684\u7f6e\u4fe1\u5ea6\uff0c\u4e3a\u4eba\u5de5\u6807\u6ce8\u65f6\u901a\u5e38\u4e3a1\uff0c\u4e3a\u81ea\u52a8\u751f\u6210\u65f6\u4e00\u822c\u57280.5~1\u4e4b\u95f4 pose \u62cd\u6444\u89d2\u5ea6\uff0c\u53d6\u503c\u4e3a Unspecified\uff0cFrontal\uff0cRear\uff0cLeft\uff0cRight \u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u8981\u63cf\u8ff0\u4e00\u4e2a\u68c0\u6d4b\u6570\u636e\u96c6\u7684\u6837\u672c\uff0cimage_id\u3001label_id\u548cbbox\u662f\u6700\u57fa\u7840\u7684\u5b57\u6bb5\uff0c\u6b64\u5916\u8fd8\u5305\u542b\u4e86\u5404\u79cd\u63cf\u8ff0\u8fb9\u754c\u6846\u4fe1\u606f\u7684\u7279\u6b8a\u5b57\u6bb5\u3002","title":"1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814\uff1a"},{"location":"dsdl_template/cv/cv_detection/#2","text":"\u6839\u636e\u4e0a\u8ff0\u8c03\u7814\uff0c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u4e2d\u4e00\u5f20 \u56fe\u50cf \u5bf9\u5e94\u4e0d\u5b9a\u6570\u91cf\u7684 \u76ee\u6807 \uff0c\u6bcf\u4e2a\u76ee\u6807\u7528 \u8fb9\u754c\u6846BBox \u6765\u5b9a\u4f4d\u76ee\u6807\u4f4d\u7f6e\uff0c\u6bcf\u4e2aBBox\u540c\u65f6\u63d0\u4f9b \u8bed\u4e49\u6807\u7b7e \uff0c\u7531\u6b64\u6211\u4eec\u5b9a\u4e49\u76ee\u6807\u68c0\u6d4b\u6a21\u677f\u5982\u4e0b\uff1a object-detection.yaml $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] \u5728\u68c0\u6d4b\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff08\u8be6\u7ec6\u5b66\u4e60\u8bf7\u53c2\u8003 DSDL\u8bed\u8a00\u6559\u7a0b \uff09 $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalObjectEntry: \u5b9a\u4e49\u4e86\u8fb9\u754c\u6846\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: bbox \u8fb9\u754c\u6846\u7684\u4f4d\u7f6e label \u8fb9\u754c\u6846\u7684\u7c7b\u522b ObjectDetectionSample: \u5b9a\u4e49\u4e86\u68c0\u6d4b\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 objects \u6807\u6ce8\u4fe1\u606f\uff0c\u68c0\u6d4b\u4efb\u52a1\u4e2d\uff0c\u4e3a\u524d\u9762\u7684LocalObjectEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868","title":"2. \u6a21\u677f\u5c55\u793a"},{"location":"dsdl_template/cv/cv_detection/#3","text":"\u6211\u4eec\u4ee5PASCAL VOC\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u5c55\u793a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6DSDL\u63cf\u8ff0\u6587\u4ef6\u5177\u4f53\u5185\u5bb9\u3002","title":"3. \u5b8c\u6574\u793a\u4f8b"},{"location":"dsdl_template/cv/cv_detection/#31-dsdl","text":"voc-class-dom.yaml $dsdl-version : \"0.5.0\" VOCClassDom : $def : class_domain classes : - horse - person - bottle - tvmonitor - chair - diningtable - pottedplant - aeroplane - car - train - dog - bicycle - boat - cat - sofa - bird - sheep - motorbike - bus - cow \u4e0a\u9762\u7684\u6587\u4ef6\u4e2d\u7ed9\u51fa\u4e86VOCClassDom\u7684\u5b9a\u4e49\uff0c\u5177\u4f53\u5305\u542b\u4e0b\u5217\u5b57\u6bb5\uff1a $def: \u63cf\u8ff0\u4e86VOCClassDom\u7684dsdl\u7c7b\u578b\uff0c\u8fd9\u91cc\u5373class_domain classes: \u63cf\u8ff0\u4e86\u8be5\u7c7b\u522b\u57df\u4e2d\u6240\u5305\u542b\u7684\u7c7b\u522b\u53ca\u5176\u987a\u5e8f\uff0c\u5728PASCAL VOC\u6570\u636e\u96c6\u4e2d\uff0c\u5219\u4f9d\u6b21\u4e3ahorse\u3001person\u7b49\u7b49","title":"3.1 DSDL\u8bed\u6cd5\u63cf\u8ff0\u7c7b\u522b\u4fe1\u606f"},{"location":"dsdl_template/cv/cv_detection/#32-yaml","text":"train.yaml $dsdl-version : \"0.5.0\" $import : - object-detection - voc-class-domain meta : dataset_name : \"PASCAL VOC2007\" sub_dataset_name : \"train\" data : sample-type : ObjectDetectionSample[cdom=VOCClassDom] sample-path : $local samples : - image : \"media/000000000000.jpg\" objects : - { bbox : [ 4.0 , 36.0 , 496.0 , 298.0 ], label : 12 } - image : \"media/000000000002.jpg\" objects : - { bbox : [ 440.0 , 161.0 , 60.0 , 81.0 ], label : 14 } - { bbox : [ 97.0 , 159.0 , 121.0 , 67.0 ], label : 14 } - { bbox : [ 443.0 , 116.0 , 57.0 , 101.0 ], label : 15 } - { bbox : [ 104.0 , 113.0 , 65.0 , 106.0 ], label : 15 } ... \u4e0a\u9762\u7684\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff0c\u9996\u5148\u5b9a\u4e49\u4e86dsdl\u7684\u7248\u672c\u4fe1\u606f\uff0c\u7136\u540eimport\u4e86\u4e24\u4e2a\u6a21\u677f\u6587\u4ef6\uff0c\u5305\u62ec\u4efb\u52a1\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6a21\u677f\uff0c\u63a5\u7740\u7528meta\u548cdata\u5b57\u6bb5\u6765\u63cf\u8ff0\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: dsdl\u7248\u672c\u4fe1\u606f $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u548cVOC\u7684class domain\uff0c\u4e5f\u5c31\u662f 2. \u6a21\u677f\u5c55\u793a \u4e2d\u5c55\u793a\u7684\u4e24\u90e8\u5206\u5185\u5bb9 meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u521b\u5efa\u8005\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: \u5176\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u4e2d\u5bfc\u5165\u7684ObjectDetectionSample\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aVOCClassDom sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u5982\u679c\u5b9e\u9645\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219samples\u7684\u5185\u5bb9\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6\uff0c\u5982\u679c\u662f$local\uff08\u8fd9\u4e2a\u4f8b\u5b50\uff09\uff0c\u5219\u4ece\u672c\u6587\u4ef6\u7684data.samples\u5b57\u6bb5\u4e2d\u76f4\u63a5\u8bfb\u53d6 samples: \u4fdd\u5b58\u6570\u636e\u96c6\u7684\u6837\u672c\u4fe1\u606f\uff0c\u6ce8\u610f\u53ea\u6709\u5728sample-path\u662f$local\u7684\u65f6\u5019\u8be5\u5b57\u6bb5\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219samples\u4f1a\u4f18\u5148\u4ecesample-path\u4e2d\u7684\u8def\u5f84\u53bb\u8bfb\u53d6 \u63d0\u793a\uff1a\u82e5\u5f53\u524d\u6570\u636e\u96c6\u56fe\u50cf\u6570\u76ee\u8f83\u591a\uff0c\u5c06\u6240\u6709\u6807\u6ce8\u4fe1\u606f\u5b58\u50a8\u5728yaml\u6587\u4ef6\u91cc\u4f1a\u5bfc\u81f4\u540e\u7eed\u6570\u636e\u52a0\u8f7d\u901f\u5ea6\u8fc7\u6162\u3002\u6b64\u65f6\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u5916\u90e8\u6587\u4ef6\uff0c\u4f8b\u5982train.yaml\u4e2d\u7684sample-path: train.json \u5c06\u6570\u636e\u5b58\u653e\u5230\u53ef\u9ad8\u6548\u8bfb\u53d6\u7684\u6587\u4ef6\u4e2d","title":"3.2 \u6570\u636e\u96c6yaml\u6587\u4ef6\u5b9a\u4e49"},{"location":"dsdl_template/cv/cv_generation/","text":"\u56fe\u50cf\u751f\u6210\u4efb\u52a1 \u6211\u4eec\u901a\u8fc7\u5bf9\u56fe\u50cf\u751f\u6210\u4efb\u52a1\u8fdb\u884c\u8c03\u7814\uff0c\u5e76\u603b\u7ed3\u56fe\u50cf\u751f\u6210\u6570\u636e\u96c6\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\uff0c\u4ece\u800c\u5236\u5b9a\u51fa\u56fe\u50cf\u751f\u6210\u4efb\u52a1\u7684DSDL\u6a21\u677f\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u4f7f\u7528\u3002 1. \u4efb\u52a1\u8c03\u7814 1.1 \u4efb\u52a1\u5b9a\u4e49 \u56fe\u50cf\u751f\u6210\u6307\u7684\u662f\u4ece\u5df2\u6709\u7684\u56fe\u50cf\u6570\u636e\u96c6\u4e2d\u5b66\u4e60\u7edf\u8ba1\u89c4\u5f8b\uff0c\u5e76\u751f\u6210\u7b26\u5408\u539f\u59cb\u6570\u636e\u96c6\u7684\u7edf\u8ba1\u89c4\u5f8b\uff0c\u4f46\u5728\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u672a\u51fa\u73b0\u8fc7\u7684\u65b0\u56fe\u50cf\u7684\u4efb\u52a1\u3002\u5982\u4e0b\u6240\u793a\uff1a AFHQv2\u6570\u636e\u96c6\u4e2d\u7684\u771f\u5b9e\u56fe\u50cf StyleGANv3\u751f\u6210\u7684\u56fe\u50cf \u5de6\u56fe\u662fAFHQv2\u6570\u636e\u96c6\u4e2d\u91c7\u96c6\u7684\u771f\u5b9e\u56fe\u50cf\uff0c\u53f3\u56fe\u5219\u662fStyleGANv3\u6a21\u578b\u751f\u6210\u7684\u65b0\u56fe\u50cf\uff08\u56fe\u50cf\u51fa\u81ea Alias-Free Generative Adversarial Networks \uff09\u3002\u53ef\u89c1\u56fe\u50cf\u751f\u6210\u7684\u6a21\u578b\u5df2\u7ecf\u53ef\u4ee5\u751f\u6210\u5341\u5206\u771f\u5b9e\u5e76\u4e14\u7b26\u5408\u539f\u59cb\u6570\u636e\u96c6\u89c6\u89c9\u7279\u70b9\u7684\u56fe\u50cf\u3002 1.2 \u8bc4\u4ef7\u6307\u6807 \u8bbe\u8ba1\u56fe\u50cf\u751f\u6210\u6a21\u578b\u7684\u8bc4\u4ef7\u6307\u6807\u7684\u65f6\u5019\u4e00\u822c\u6709\u4ee5\u4e0b\u51e0\u4e2a\u76ee\u6807\uff1a \u751f\u6210\u7684\u56fe\u50cf\u8d8a\u771f\u5b9e\uff0c\u8bc4\u4ef7\u5206\u6570\u8d8a\u597d\u3002\u56e0\u4e3a\u5927\u591a\u6570\u751f\u6210\u6a21\u578b\u7684\u4e3b\u8981\u76ee\u6807\u90fd\u662f\u751f\u6210\u66f4\u771f\u5b9e\u7684\u56fe\u50cf\u3002 \u751f\u6210\u7684\u56fe\u50cf\u8d8a\u591a\u6837\uff0c\u8bc4\u4ef7\u5206\u6570\u8d8a\u597d\u3002\u8fd9\u4e3b\u8981\u662f\u4e3a\u4e86\u5224\u65ad\u751f\u6210\u6a21\u578b\u662f\u5426\u51fa\u73b0\u8fc7\u62df\u5408\u3001\u6a21\u5f0f\u5d29\u584c\uff08Modal Collapse\uff09\u7b49\u95ee\u9898\u3002 \u5bf9\u4e8e\u751f\u6210\u6a21\u578b\u4e2d\u7684\u9690\u53d8\u91cf\uff0c\u6700\u597d\u5177\u6709\u4e00\u5b9a\u7684\u201c\u610f\u4e49\u201d\uff0c\u5373\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5f8b\u6539\u53d8\u9690\u53d8\u91cf\uff0c\u751f\u6210\u7684\u56fe\u50cf\u4e5f\u80fd\u51fa\u73b0\u6709\u89c4\u5f8b\u3001\u6709\u610f\u4e49\u7684\u53d8\u5316\u3002\u800c\u8bc4\u4ef7\u6307\u6807\u5e94\u8be5\u8981\u80fd\u8861\u91cf\u751f\u6210\u6a21\u578b\u7684\u9690\u53d8\u91cf\u662f\u5426\u5b58\u5728\u8fd9\u79cd\u201c\u610f\u4e49\u201d\u3002 \u8bc4\u4ef7\u5206\u6570\u7684\u53d8\u5316\u5e94\u8be5\u4e0e\u4eba\u7c7b\u7684\u611f\u77e5\u4e00\u81f4\uff0c\u5373\u8bc4\u4ef7\u5206\u6570\u5dee\u522b\u5927\u7684\u56fe\u50cf\uff0c\u4eba\u7c7b\u611f\u77e5\u5230\u7684\u89c6\u89c9\u6548\u679c\u4e5f\u5e94\u8be5\u5dee\u522b\u5927\u3002 \u76ee\u524d\u56fe\u50cf\u751f\u6210\u6a21\u578b\u7684\u8bc4\u4ef7\u6307\u6807\u6709\u5f88\u591a\u79cd\uff0c\u5b83\u4eec\u4e00\u822c\u90fd\u9700\u8981\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\uff08\u6216\u6ee1\u8db3\u90e8\u5206\u8981\u6c42\uff09\u3002\u867d\u7136\u8fd9\u4e9b\u6307\u6807\u672c\u8eab\u5b58\u5728\u4e00\u4e9b\u5c40\u9650\u6027\uff0c\u4f46\u662f\u5b83\u4eec\u5728\u8bc4\u4ef7\u4e00\u4e2a\u751f\u6210\u6a21\u578b\u7684\u6027\u80fd\u65f6\u4ecd\u7136\u5177\u6709\u91cd\u8981\u7684\u53c2\u8003\u4ef7\u503c\u3002 \u4e0b\u9762\u4ecb\u7ecd2\u79cd\u5e38\u7528\u7684\u8bc4\u4ef7\u6307\u6807\uff1a Inception Score (IS) \u548c Fr\u00e9chet Inception Distance (FID) \u3002 Inception Score (IS) \u8fd9\u4e2a\u8bc4\u4ef7\u6307\u6807\u4e3b\u8981\u662f\u8bc4\u4ef7\u751f\u6210\u7684\u56fe\u50cf\u7684\u771f\u5b9e\u6027\u548c\u591a\u6837\u6027\u3002\u5177\u4f53\u7684\u505a\u6cd5\u662f\uff1a\u5c06\u751f\u6210\u7684\u56fe\u50cf\u8f93\u5165\u5230\u4e00\u4e2aInception V3\u6a21\u578b\u4e2d\uff0c\u8be5\u6a21\u578b\u662f\u5728ImageNet-1K\u4e0a\u9884\u8bad\u7ec3\u7684\u5206\u7c7b\u6a21\u578b\uff0c\u6240\u4ee5\u4f1a\u8f93\u51fa\u4e00\u4e2a1000\u7ef4\u7684\u5411\u91cf\uff0c\u5176\u4e2d\u5411\u91cf\u7684\u6bcf\u4e00\u7ef4\u5ea6\u4e0a\u7684\u6570\u503c\u4ee3\u8868\u8f93\u5165\u7684\u56fe\u7247\u5c5e\u4e8e\u67d0\u4e00\u7c7b\u522b\u7684\u6982\u7387\uff0c\u7136\u540e\u57fa\u4e8e\u8be5\u5411\u91cf\u6765\u8bc4\u4f30\u771f\u5b9e\u6027\u548c\u591a\u6837\u6027\u3002 \u5728\u771f\u5b9e\u6027\u65b9\u9762\uff0cInception Score\u8ba4\u4e3a\uff0c\u5982\u679c\u751f\u6210\u7684\u56fe\u50cf\u8d28\u91cf\u8f83\u597d\uff0c\u90a3\u4e48\u56fe\u50cf\u4e2d\u5e94\u8be5\u5305\u542b\u4e00\u4e9b\u6e05\u6670\u4e14\u6709\u610f\u4e49\u7684\u7269\u4f53\uff0c\u6240\u4ee5\u8f93\u5165Inception V3\u4e4b\u540e\uff0c\u6a21\u578b\u5e94\u8be5\u80fd\u5c06\u5176\u5224\u522b\u4e3a\u67d0\u79cd\u7c7b\u522b\u7684\u56fe\u50cf\uff0c\u6240\u4ee5\u8f93\u51fa\u76841000\u7ef4\u5411\u91cf\u4e2d\u8f83\u5927\u7684\u6570\u503c\u5e94\u8be5\u96c6\u4e2d\u5728\u67d0\u4e2a\u7ef4\u5ea6\u4e0a\uff0c\u800c\u5176\u4ed6\u7ef4\u5ea6\u6570\u503c\u8f83\u5c0f\u3002\u5982\u679c\u7528 p(y|x) p(y|x) \u4ee3\u8868\u8f93\u5165\u4e00\u5f20\u56fe\u50cf x x \u4e4b\u540e\uff0c\u8f93\u51fa\u7684\u7c7b\u522b\u6982\u7387 y y \u7684\u5206\u5e03\uff0c\u90a3\u4e48 p(y|x) p(y|x) \u5e94\u8be5\u662f\u4e00\u4e2a\u5f62\u72b6\u5c16\u9510\u7684\u5206\u5e03\u3002 \u800c\u5728\u591a\u6837\u6027\u65b9\u9762\uff0cInception Score\u8ba4\u4e3a\uff0c\u5982\u679c\u4e00\u4e2a\u751f\u6210\u6a21\u578b\u80fd\u751f\u6210\u591a\u6837\u7684\u56fe\u7247\uff0c\u90a3\u4e48\u7406\u60f3\u60c5\u51b5\u4e0b\u5b83\u751f\u6210\u7684\u56fe\u7247\u5c5e\u4e8e\u5404\u4e2a\u7c7b\u522b\u7684\u6982\u7387\u5e94\u8be5\u662f\u5747\u7b49\u7684\uff0c\u5373\u5728 N N \u5f20\u751f\u6210\u7684\u56fe\u7247\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u522b\u7684\u56fe\u7247\u5e94\u8be5\u6709 \\frac{N}{1000} \\frac{N}{1000} \u5f20\u3002\u5982\u679c\u5bf9 p(y|x) p(y|x) \u6c42\u8fb9\u7f18\u5206\u5e03\uff1a p(y)=\\int_xp(y|x)p(x) p(y)=\\int_xp(y|x)p(x) \uff0c\u5f97\u5230\u7684 p(y) p(y) \u5e94\u8be5\u662f\u4e00\u4e2a\u5747\u5300\u5206\u5e03\uff0c\u5176\u5f62\u72b6\u662f\u4e00\u6761\u5e73\u5766\u7684\u76f4\u7ebf\u3002 \u4e3a\u4e86\u540c\u65f6\u8861\u91cf\u771f\u5b9e\u6027\u548c\u591a\u6837\u6027\uff0cInception Score\uff08\u4e0b\u9762\u7b80\u5199\u4e3aIS\uff09\u91c7\u7528\u4e86KL\u6563\u5ea6\uff1a IS=exp(\\mathbb{E}_{x\\sim p_g}D_{KL}(p(y|x)||p(y))) IS=exp(\\mathbb{E}_{x\\sim p_g}D_{KL}(p(y|x)||p(y))) \u5176\u4e2d p_g p_g \u4ee3\u8868\u751f\u6210\u6a21\u578b\u6240\u751f\u6210\u7684\u56fe\u50cf\u7684\u5206\u5e03\u3002\u6027\u80fd\u8d8a\u597d\u7684\u751f\u6210\u6a21\u578b\uff0c\u5176 p(y|x) p(y|x) \u5206\u5e03\u7684\u5f62\u72b6\u5e94\u8be5\u8d8a\u5c16\u9510\uff0c\u800c p(y) p(y) \u5206\u5e03\u7684\u5f62\u72b6\u5e94\u8be5\u8d8a\u5e73\u5766\uff0c\u6240\u4ee5\u5b83\u4eec\u4e4b\u95f4\u7684KL\u6563\u5ea6\u5e94\u8be5\u8d8a\u5927\uff0cIS\u5206\u6570\u4e5f\u5e94\u8be5\u8d8a\u5927\u3002\u5728\u5b9e\u9645\u8ba1\u7b97\u65f6\uff0c\u4e00\u822c\u901a\u8fc7\u8f93\u5165 N N \u5f20\u56fe\u7247\u5e76\u6c42\u5747\u503c\u6765\u4ee3\u66ff\u4e0a\u5f0f\u4e2d\u7684\u671f\u671b\uff1a IS=exp(\\frac{1}{N}\\sum_{i=1}^N D_{KL}(p(y|x^{(i)})||p(y))) IS=exp(\\frac{1}{N}\\sum_{i=1}^N D_{KL}(p(y|x^{(i)})||p(y))) IS\u5206\u6570\u5b58\u5728\u4e00\u4e9b\u7f3a\u70b9\uff0c\u6bd4\u5982\u4e0d\u80fd\u7528\u5728\u4e00\u4e2a\u6570\u636e\u96c6\u8bad\u7ec3\u7684Inception\u6a21\u578b\u6765\u8bc4\u4f30\u5728\u53e6\u4e00\u4e2a\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u7684\u751f\u6210\u6a21\u578b\uff0c\u53c8\u6bd4\u5982\u751f\u6210\u7684\u56fe\u50cf\u5982\u679c\u4e0d\u5728\u9884\u8bad\u7ec3\u7684\u7c7b\u522b\u4e2d\uff0c\u5373\u4f7f\u4eba\u7c7b\u611f\u77e5\u5230\u7684\u89c6\u89c9\u6548\u679c\u662f\u771f\u5b9e\u7684\uff0cIS\u5206\u6570\u4ecd\u7136\u5f88\u4f4e\uff0c\u7b49\u7b49\u3002 Fr\u00e9chet Inception Distance (FID) \u8fd9\u4e2a\u8bc4\u4ef7\u6307\u6807\u4e3b\u8981\u662f\u8bc4\u4ef7\u751f\u6210\u7684\u56fe\u50cf\u7684\u771f\u5b9e\u6027\uff0c\u5728\u8ba1\u7b97\u65f6\u4e5f\u9700\u8981\u7528\u5230Inception V3\u6a21\u578b\uff0c\u4f46\u662f\u4e0d\u9700\u8981\u501f\u52a9Inception V3\u4e2d\u7684\u5206\u7c7b\u5668\uff0c\u800c\u662f\u4f7f\u7528Inception V3\u4ece\u56fe\u50cf\u4e2d\u63d0\u53d6\u7684\u7279\u5f81\u5411\u91cf\u6765\u8ba1\u7b97\u751f\u6210\u56fe\u50cf\u548c\u771f\u5b9e\u56fe\u50cf\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u8d8a\u5c0f\u5219\u8bf4\u660e\u751f\u6210\u7684\u56fe\u50cf\u8d8a\u771f\u5b9e\u3002\u7531\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u6df1\u5c42\u53ef\u4ee5\u63d0\u53d6\u56fe\u50cf\u7684\u62bd\u8c61\u8bed\u4e49\u7279\u5f81\uff0c\u6240\u4ee5Fr\u00e9chet Inception Distance\uff08\u4e0b\u9762\u7b80\u5199\u4e3aFID\uff09\u4f7f\u7528\u7684\u662fInception V3\u8f93\u5165\u6700\u540e\u7684\u5206\u7c7b\u5668\u4e4b\u524d\u76842048\u7ef4\u7279\u5f81\u5411\u91cf\u6765\u8861\u91cf\u751f\u6210\u56fe\u50cf\u662f\u5426\u8db3\u591f\u771f\u5b9e\u3002 \u5177\u4f53\u7684\u505a\u6cd5\u662f\uff1a\u53d6\u540c\u6837\u6570\u76ee\u7684\u751f\u6210\u56fe\u50cf\u548c\u771f\u5b9e\u56fe\u50cf\u5404 N N \u5f20\uff0c\u8f93\u5165Inception Net-V3\uff0c\u5404\u81ea\u5f97\u5230 N*2048 N*2048 \u7ef4\u7684\u7279\u5f81\u5411\u91cf\uff0c\u7136\u540e\u5229\u7528\u4e0b\u9762\u7684\u5f0f\u5b50\u8ba1\u7b97FID\u5206\u6570\uff1a FID=||\\mu_r-\\mu_g||^2+Tr(\\Sigma_r+\\Sigma_g-2(\\Sigma_r\\Sigma_g)^{\\frac{1}{2}}) FID=||\\mu_r-\\mu_g||^2+Tr(\\Sigma_r+\\Sigma_g-2(\\Sigma_r\\Sigma_g)^{\\frac{1}{2}}) \u5176\u4e2d \\mu_r \\mu_r \u548c \\mu_g \\mu_g \u5206\u522b\u662f\u771f\u5b9e\u56fe\u50cf\u548c\u751f\u6210\u56fe\u50cf\u7684 N N \u4e2a\u7279\u5f81\u5411\u91cf\u7684\u5747\u503c\u5411\u91cf\uff0c \\Sigma_r \\Sigma_r \u548c \\Sigma_g \\Sigma_g \u5206\u522b\u662f\u771f\u5b9e\u56fe\u50cf\u548c\u751f\u6210\u56fe\u50cf\u7684 N*2048 N*2048 \u7ef4\u7279\u5f81\u5411\u91cf\u7684\u534f\u65b9\u5dee\u77e9\u9635\uff0c Tr Tr \u4ee3\u8868\u77e9\u9635\u7684\u8ff9\u3002FID\u5206\u6570\u8d8a\u5c0f\uff0c\u4ee3\u8868\u751f\u6210\u7684\u56fe\u50cf\u8d8a\u771f\u5b9e\u3002 \u8ddfIS\u5206\u6570\u76f8\u6bd4\uff0cFID\u5206\u6570\u7684\u4f18\u70b9\u662f\u5141\u8bb8\u751f\u6210\u6a21\u578b\u7684\u8bad\u7ec3\u96c6\u548cInception\u6a21\u578b\u7684\u8bad\u7ec3\u96c6\u4e0d\u76f8\u540c\uff0c\u56e0\u4e3aFID\u5206\u6570\u4e0d\u4f7f\u7528Inception\u6a21\u578b\u4e2d\u7684\u5206\u7c7b\u5668\u3002\u4f46FID\u5206\u6570\u4ecd\u7136\u5b58\u5728\u7f3a\u70b9\uff0c\u6bd4\u5982\u5f53\u751f\u6210\u6a21\u578b\u8fc7\u62df\u5408\uff0c\u751f\u6210\u7684\u56fe\u50cf\u548c\u8bad\u7ec3\u96c6\u4e2d\u7684\u56fe\u50cf\u4e00\u6a21\u4e00\u6837\u65f6\uff0cFID\u5206\u6570\u4e5f\u5f88\u5c0f\uff0c\u4f46\u6b64\u65f6\u751f\u6210\u6a21\u578b\u7684\u6027\u80fd\u5e76\u4e0d\u597d\u3002 1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814 \u6211\u4eec\u5bf9\u4e00\u4e9b\u56fe\u50cf\u751f\u6210\u6570\u636e\u96c6\u8fdb\u884c\u4e86\u8c03\u7814\uff0c\u5bf9\u76f8\u5173\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\uff08\u4e3b\u8981\u662f\u6807\u6ce8\u5b57\u6bb5\uff09\u8fdb\u884c\u4e86\u5206\u6790\u6c47\u603b\uff0c\u76f8\u540c\u542b\u4e49\u7684\u6807\u6ce8\u5b57\u6bb5\u4f1a\u4ee5\u7edf\u4e00\u547d\u540d\u8fdb\u884c\u5c55\u793a\uff0c\u6c47\u603b\u4fe1\u606f\u5982\u4e0b\u8868\u6240\u793a\uff1a \u56fe\u50cf\u751f\u6210\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 \u4efb\u52a1\u7c7b\u578b \u6570\u636e\u96c6\u540d\u79f0 image_id category_name paired_images domain Unconditional Generation LSUN Y Y FFHQ Y CelebA-HQ Y MetFaces Y AFHQ Y Y Conditional Generation ImageNet-1K Y Y Cifar-10 Y Y Style Transfer(Unpaired) Facade_CycleGAN Y Y Style Transfer(Paired) Facade_pix2pix Y Y Y \u5bf9\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u8fdb\u884c\u6c47\u603b\uff0c\u5f97\u5230\u4e0b\u8868\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a \u72ec\u7acb\u5b57\u6bb5 category_name \u56fe\u50cf\u6240\u5c5e\u7684\u7c7b\u522b\u540d paired_images \u662f\u5426\u6709\u6210\u5bf9\u7684\u56fe\u50cf domain \u56fe\u50cf\u6240\u5c5e\u7684\u57df\uff0c\u4e0e\u7c7b\u522b\u6709\u4e9b\u533a\u522b\uff0c\u5f80\u5f80\u4e0d\u7528\u4e8e\u5206\u7c7b\u4efb\u52a1\uff0c\u800c\u662f\u7528\u6765\u4ee3\u8868\u56fe\u50cf\u7684\u98ce\u683c\u7279\u70b9\uff0c\u53ef\u4ee5\u7528\u4e8e\u98ce\u683c\u8fc1\u79fb\u7b49\u4efb\u52a1\u3002 2. \u6a21\u677f\u5c55\u793a \u4ece\u6570\u636e\u96c6\u8c03\u7814\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8eUnconditional Generation\uff0c\u53ea\u6709image_id\u662f\u5fc5\u987b\u5b57\u6bb5\u3002\u800c\u5bf9\u4e8eConditional Generation\uff0c\u53ea\u6709image_id\u548ccategory_name\u662f\u5fc5\u987b\u5b57\u6bb5\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u4e13\u95e8\u4e3a\u8fd9\u4e24\u4e2a\u4efb\u52a1\u5236\u5b9a\u6a21\u677f\uff0cConditional Generation\u7684\u6570\u636e\u96c6\u53ef\u4ee5\u7528\u56fe\u50cf\u5206\u7c7b\u7684\u6a21\u677f\u6765\u63cf\u8ff0\uff0cUnconditional Generation\u7684\u6570\u636e\u96c6\u5219\u53ea\u9700\u8981\u5b9a\u4e49sample\u7684struct\u4e2d\u6709Image\u5b57\u6bb5\u5373\u53ef\u3002 \u5bf9\u4e8eStyle Transfer\u4efb\u52a1\uff0c\u6839\u636e\u662f\u5426\u6709\u6210\u5bf9\u56fe\u50cf\uff08paired/unpaired\uff09\uff0c\u53ef\u4ee5\u5236\u5b9a\u4e0d\u540c\u7684\u6a21\u677f\uff0c\u4e0b\u9762\u5206\u522b\u4ecb\u7ecd\u4e24\u79cd\u6a21\u677f\u3002 2.1 Style Transfer(Unpaired)\u6a21\u677f \u6211\u4eec\u5236\u5b9a\u7684Style Transfer(Unpaired)\u4efb\u52a1\u7684\u6a21\u677f\u5982\u4e0b\uff1a $dsdl-version : \"0.5.3\" UnpairedSample : $def : struct $params : [ 'cdom' ] $fields : image : Image domain : Label[dom=$cdom] \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c UnpairedSample: \u5b9a\u4e49\u4e86Style Transfer(Unpaired)\u4efb\u52a1\u7684sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e09\u4e2a\u5b57\u6bb5\uff1a $def: struct\uff1a\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params\uff1a\u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields\uff1a\u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image\uff1a\u56fe\u7247\u8def\u5f84\uff0c\u5bf9\u5e94\u4e8e\u5171\u4eab\u5b57\u6bb5\u4e2d\u7684image_id domain\uff1a\u57df\u4fe1\u606f\uff0c\u5bf9\u5e94\u4e8e\u72ec\u7acb\u5b57\u6bb5\u4e2d\u7684domain 2.2 Style Transfer(Paired)\u6a21\u677f \u6211\u4eec\u5236\u5b9a\u7684Style Transfer(Paired)\u4efb\u52a1\u7684\u6a21\u677f\u5982\u4e0b\uff1a $dsdl-version : \"0.5.3\" ImageMedia : $def : struct $params : [ 'cdom' ] $fields : image : Image domain : Label[dom=$cdom] PairedSample : $def : struct $params : [ 'cdom' ] $fields : image_a : ImageMedia[cdom=$cdom] image_b : ImageMedia[cdom=$cdom] \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c ImageMedia\uff1a\u5b9a\u4e49\u4e86Style Transfer(Paired)\u4efb\u52a1\u7684image\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e09\u4e2a\u5b57\u6bb5\uff1a $def: struct\uff1a\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params\uff1a\u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields\uff1a\u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec\uff1a image\uff1a\u56fe\u7247\u8def\u5f84\uff0c\u5bf9\u5e94\u4e8e\u5171\u4eab\u5b57\u6bb5\u4e2d\u7684image_id domain\uff1a\u57df\u4fe1\u606f\uff0c\u5bf9\u5e94\u4e8e\u72ec\u7acb\u5b57\u6bb5\u4e2d\u7684domain PairedSample: \u5b9a\u4e49\u4e86Style Transfer(Paired)\u4efb\u52a1\u7684sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e09\u4e2a\u5b57\u6bb5\uff1a $def: struct\uff1a\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params\uff1a\u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields\uff1a\u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec\uff1a image_a\uff1a\u56fe\u7247\u8def\u5f84\uff0c\u5bf9\u5e94\u4e8e\u5171\u4eab\u5b57\u6bb5\u4e2d\u7684image_id image_b\uff1a\u4e0eimage_a\u914d\u5bf9\u7684\u53e6\u4e00\u5f20\u56fe\u7247\u7684\u8def\u5f84 \u53ef\u4ee5\u770b\u51fa\uff0cStyle Transfer(Paired)\u6a21\u677f\u4e0eStyle Transfer(Unpaired)\u6a21\u677f\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u662f\u5426\u5b58\u5728\u6210\u5bf9\u7684\u56fe\u7247\u3002 3. \u5b8c\u6574\u793a\u4f8b \u6211\u4eec\u4ee5 CMP Facade \u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u5c55\u793a\u56fe\u50cf\u751f\u6210\u6570\u636e\u96c6DSDL\u63cf\u8ff0\u6587\u4ef6\u7684\u5177\u4f53\u5185\u5bb9\u3002 3.1 \u7528Style Transfer(Paired)\u6a21\u677f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0 CMP Facade\u6570\u636e\u96c6\u53ef\u4ee5\u7528\u4e8eStyle Transfer(Paired)\u4efb\u52a1\uff0c\u53ef\u4ee5\u53c2\u89c1 pix2pix \u65b9\u6cd5\u3002\u901a\u8fc7\u5206\u6790\u539f\u59cb\u6570\u636e\u96c6\u7684\u6807\u6ce8\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528DSDL\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\uff0c\u9996\u5148\u7528DSDL\u8bed\u6cd5\u63cf\u8ff0\u98ce\u683c\u57df\u4fe1\u606f\uff1a class-dom.yaml $dsdl-version : \"0.5.3\" FacadeStyleDom : $def : class_domain classes : - photo - mask \u7531\u4e8eStyle Transfer\u4e2d\u7684\u98ce\u683c\u57df\u548c\u56fe\u50cf\u5206\u7c7b\u4e2d\u7684\u7c7b\u522b\u57df\u7c7b\u4f3c\uff0c\u5728DSDL\u4e2d\u53ef\u4ee5\u4f7f\u7528 class_domain \u6765\u5b9a\u4e49\u3002 class-dom.yaml \u4e2d\u5305\u542b\u7684\u5173\u952e\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff1a FacadeStyleDom\uff1a\u98ce\u683c\u57df\u7684class domain\u7684\u540d\u5b57\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49 $def: \u63cf\u8ff0\u4e86FacadeStyleDom\u7684dsdl\u7c7b\u578b\uff0c\u8fd9\u91cc\u5373class_domain classes: \u8bb0\u5f55\u4e86\u6bcf\u79cd\u98ce\u683c\u7684\u540d\u5b57\uff0c\u5728CMP Facade\u6570\u636e\u96c6\u4e2d\uff0c\u5171\u6709photo\u548cmask\u4e24\u79cd\u98ce\u683c\uff0c\u5206\u522b\u5bf9\u5e94\u6570\u636e\u96c6\u4e2d\u7684\u539f\u59cb\u56fe\u50cf\u548c\u6807\u6ce8\u56fe\u50cf\u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cCMP Facade\u6570\u636e\u96c6\u8bbe\u8ba1\u7684\u521d\u8877\u5e76\u4e0d\u662f\u7528\u4e8eStyle Transfer\u4efb\u52a1\u7684\uff0c\u6240\u4ee5\u539f\u59cb\u6570\u636e\u96c6\u6ca1\u6709\u7ed9\u4e0d\u540c\u7684\u98ce\u683c\u8d4b\u4e88\u4e00\u4e2a\u7279\u5b9a\u7684\u540d\u5b57\uff0c\u4f46\u662f\u5728\u7528DSDL\u8bed\u8a00\u63cf\u8ff0\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u4e0d\u540c\u7684\u98ce\u683c\u8d77\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\uff0c\u5728\u672c\u6a21\u677f\u4e2d\u4f7f\u7528\u7684\u662fphoto\u548cmask \u63a5\u4e0b\u6765\u4f7f\u7528DSDL\u8bed\u6cd5\u63cf\u8ff0\u4e00\u4e2a\u6837\u672c\u7684\u7ed3\u6784\uff1a image-generation-facade.yaml $dsdl-version : \"0.5.3\" ImageMedia : $def : struct $params : [ 'sdom' ] $fields : image : Image domain : Label[dom=$sdom] FacadeImageSample : $def : struct $params : [ 'sdom' ] $fields : image_a : ImageMedia[sdom=$sdom] image_b : ImageMedia[sdom=$sdom] \u5176\u4e2d\u4e00\u4e9b\u5173\u952e\u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\uff1a ImageMedia\uff1a\u5b9a\u4e49\u4e86image\u7684\u7ed3\u6784\u4f53 $params: ['sdom']\uff1a\u5b9a\u4e49\u4e86image\u7684\u5f62\u53c2\uff0c\u8fd9\u4e2a\u5f62\u53c2\u7528\u6765\u4f20\u5165image\u7684\u98ce\u683c\u57df\u5217\u8868 domain: Label[dom=$sdom]\uff1a\u5b9a\u4e49\u4e86image\u6240\u5c5e\u7684\u98ce\u683c\uff0c\u63a5\u6536image\u7684\u5f62\u53c2\u4f5c\u4e3a\u98ce\u683c\u57df FacadeImageSample\uff1a\u5b9a\u4e49\u4e86sample\u7684\u7ed3\u6784\u4f53 $params: ['sdom']\uff1a\u5b9a\u4e49\u4e86sample\u7684\u5f62\u53c2\uff0c\u8be5\u5f62\u53c2\u4f1a\u4f20\u5165ImageMedia\u4e2d image_a/image_b\uff1a\u7ec4\u6210sample\u7684\u4e00\u5bf9\u56fe\u7247 \u5bf9\u4e8e\u6570\u636e\u96c6yaml\u6587\u4ef6\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u5f62\u5f0f\u5b9a\u4e49\uff1a base.yaml $dsdl-version : \"0.5.3\" $import : - ../defs/image-generation-facade - ../defs/class-dom meta : Dataset Name : \"CMP Facade\" HomePage : \"https://cmp.felk.cvut.cz/~tylecr1/facade/\" Subset Name : \"base\" Modality : \"Images\" Task : \"Image Generation\" data : sample-type : FacadeImageSample[sdom=FacadeStyleDom] sample-path : base_samples.json \u5176\u4e2d\u4e00\u4e9b\u5173\u952e\u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\uff1a $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165\u7684\u662f\u4efb\u52a1\u6a21\u677f\u548c\u7684class domain meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u6570\u636e\u96c6\u5b98\u7f51\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: data\u7684\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece\u4efb\u52a1\u6a21\u677f\u4e2d\u5bfc\u5165\u7684FacadeImageSample\u7c7b\uff0c\u540c\u65f6\u4f20\u5165\u4e86FacadeStyleDom\u4f5c\u4e3a\u6bcf\u5f20\u56fe\u7247\u7684\u98ce\u683c\u57df\u5217\u8868 sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\u3002\u672c\u6a21\u677f\u53c2\u8003DSDL\u8bed\u8a00\u6559\u7a0b\u4e2d\u7684 \u6570\u636e\u6a21\u5757 \u7684\u201c2.6.4 \u901a\u8fc7\u5916\u90e8\u6587\u4ef6\u8bfb\u53d6\u201d\u5c0f\u8282\u4ecb\u7ecd\u7684\u65b9\u6cd5\uff0c\u5c06\u6570\u636e\u96c6\u7684samples\u5217\u8868\u62bd\u51fa\u6765\u5355\u72ec\u653e\u5728JSON\u6587\u4ef6\u4e2d\uff0c\u4ee5\u63d0\u9ad8\u6570\u636e\u8bfb\u53d6\u6548\u7387 base.yaml \u4e2d\u63d0\u5230\u7684 base_samples.json \u6587\u4ef6\u7684\u5185\u5bb9\u548c\u683c\u5f0f\u5982\u4e0b\u6240\u793a\uff0c\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684FacadeImageSample\u5bf9\u5e94\uff1a base_samples.json { \"samples\" :[ { \"image_a\" :{ \"image\" : \"base/cmp_b0001.jpg\" , \"domain\" : \"photo\" , }, \"image_b\" :{ \"image\" : \"base/cmp_b0001.png\" , \"domain\" : \"mask\" , } }, ... ] } \u5728\u5b9e\u9645\u7528DSDL\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u96c6\u7684\u65f6\u5019\uff0c\u7c7b\u4f3c base_samples.json \u7684\u6587\u4ef6\u4e00\u822c\u5185\u5bb9\u8f83\u591a\uff0c\u9700\u8981\u901a\u8fc7\u811a\u672c\u6765\u751f\u6210\u3002 3.3 \u7528Style Transfer(Unpaired)\u6a21\u677f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0 CMP Facade\u6570\u636e\u96c6\u4e5f\u53ef\u4ee5\u7528\u4e8eStyle Transfer(Unpaired)\u4efb\u52a1\uff0c\u53ef\u4ee5\u53c2\u89c1 CycleGAN \u65b9\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u57fa\u4e8eStyle Transfer(Unpaired)\u4efb\u52a1\u7684\u7279\u70b9\uff0c\u7528DSDL\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\uff0c\u6b64\u65f6\u5f97\u5230\u7684DSDL\u6570\u636e\u96c6\u4e0eStyle Transfer(Paired)\u4efb\u52a1\u4e2d\u7684DSDL\u6570\u636e\u96c6\u5927\u4f53\u4e0a\u662f\u4e00\u6837\uff0c\u53ea\u662f\u5176\u4e2d\u4e00\u4e9b\u63cf\u8ff0\u6587\u4ef6\u7684\u5185\u5bb9\u548c\u683c\u5f0f\u4f1a\u6709\u6240\u53d8\u5316\uff0c\u4e0b\u9762\u4ec5\u4ecb\u7ecd\u4e0eStyle Transfer(Paired)\u4efb\u52a1\u4e0d\u540c\u7684\u63cf\u8ff0\u6587\u4ef6\uff1a image-generation-facade.yaml $dsdl-version : \"0.5.3\" FacadeImageSample : $def : struct $params : [ 'sdom' ] $fields : image : Image domain : Label[dom=$sdom] \u5176\u4e2d\u4e00\u4e9b\u5173\u952e\u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\uff1a FacadeImageSample\uff1a\u5b9a\u4e49\u4e86sample\u7684\u7ed3\u6784\u4f53 $params: ['sdom']\uff1a\u5b9a\u4e49\u4e86sample\u7684\u5f62\u53c2\uff0c\u8fd9\u4e2a\u5f62\u53c2\u4f1a\u4f20\u5165image\u7684\u98ce\u683c\u57df\u5217\u8868 image: Image\uff1a\u56fe\u7247\u7684\u8def\u5f84 domain: Label[dom=$sdom]\uff1a\u5b9a\u4e49\u4e86image\u6240\u5c5e\u7684\u98ce\u683c\uff0c\u63a5\u6536image\u7684\u5f62\u53c2\u4f5c\u4e3a\u98ce\u683c\u57df base_samples.json \u4e0eStyle Transfer(Paired)\u4efb\u52a1\u7c7b\u4f3c\uff0cbase_samples.json\u91cc\u9762\u7684\u5b57\u6bb5\u4e5f\u9700\u8981\u548c\u5f53\u524d\u4efb\u52a1\u5b9a\u4e49\u7684FacadeImageSample\u5bf9\u5e94\uff0c\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a { \"samples\" :[ { \"image\" : \"base/cmp_b0001.jpg\" , \"domain\" : \"photo\" , }, { \"image\" : \"base/cmp_b0001.png\" , \"domain\" : \"mask\" , }, ... ] }","title":"\u56fe\u50cf\u751f\u6210"},{"location":"dsdl_template/cv/cv_generation/#_1","text":"\u6211\u4eec\u901a\u8fc7\u5bf9\u56fe\u50cf\u751f\u6210\u4efb\u52a1\u8fdb\u884c\u8c03\u7814\uff0c\u5e76\u603b\u7ed3\u56fe\u50cf\u751f\u6210\u6570\u636e\u96c6\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\uff0c\u4ece\u800c\u5236\u5b9a\u51fa\u56fe\u50cf\u751f\u6210\u4efb\u52a1\u7684DSDL\u6a21\u677f\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u4f7f\u7528\u3002","title":"\u56fe\u50cf\u751f\u6210\u4efb\u52a1"},{"location":"dsdl_template/cv/cv_generation/#1","text":"","title":"1. \u4efb\u52a1\u8c03\u7814"},{"location":"dsdl_template/cv/cv_generation/#11","text":"\u56fe\u50cf\u751f\u6210\u6307\u7684\u662f\u4ece\u5df2\u6709\u7684\u56fe\u50cf\u6570\u636e\u96c6\u4e2d\u5b66\u4e60\u7edf\u8ba1\u89c4\u5f8b\uff0c\u5e76\u751f\u6210\u7b26\u5408\u539f\u59cb\u6570\u636e\u96c6\u7684\u7edf\u8ba1\u89c4\u5f8b\uff0c\u4f46\u5728\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u672a\u51fa\u73b0\u8fc7\u7684\u65b0\u56fe\u50cf\u7684\u4efb\u52a1\u3002\u5982\u4e0b\u6240\u793a\uff1a AFHQv2\u6570\u636e\u96c6\u4e2d\u7684\u771f\u5b9e\u56fe\u50cf StyleGANv3\u751f\u6210\u7684\u56fe\u50cf \u5de6\u56fe\u662fAFHQv2\u6570\u636e\u96c6\u4e2d\u91c7\u96c6\u7684\u771f\u5b9e\u56fe\u50cf\uff0c\u53f3\u56fe\u5219\u662fStyleGANv3\u6a21\u578b\u751f\u6210\u7684\u65b0\u56fe\u50cf\uff08\u56fe\u50cf\u51fa\u81ea Alias-Free Generative Adversarial Networks \uff09\u3002\u53ef\u89c1\u56fe\u50cf\u751f\u6210\u7684\u6a21\u578b\u5df2\u7ecf\u53ef\u4ee5\u751f\u6210\u5341\u5206\u771f\u5b9e\u5e76\u4e14\u7b26\u5408\u539f\u59cb\u6570\u636e\u96c6\u89c6\u89c9\u7279\u70b9\u7684\u56fe\u50cf\u3002","title":"1.1 \u4efb\u52a1\u5b9a\u4e49"},{"location":"dsdl_template/cv/cv_generation/#12","text":"\u8bbe\u8ba1\u56fe\u50cf\u751f\u6210\u6a21\u578b\u7684\u8bc4\u4ef7\u6307\u6807\u7684\u65f6\u5019\u4e00\u822c\u6709\u4ee5\u4e0b\u51e0\u4e2a\u76ee\u6807\uff1a \u751f\u6210\u7684\u56fe\u50cf\u8d8a\u771f\u5b9e\uff0c\u8bc4\u4ef7\u5206\u6570\u8d8a\u597d\u3002\u56e0\u4e3a\u5927\u591a\u6570\u751f\u6210\u6a21\u578b\u7684\u4e3b\u8981\u76ee\u6807\u90fd\u662f\u751f\u6210\u66f4\u771f\u5b9e\u7684\u56fe\u50cf\u3002 \u751f\u6210\u7684\u56fe\u50cf\u8d8a\u591a\u6837\uff0c\u8bc4\u4ef7\u5206\u6570\u8d8a\u597d\u3002\u8fd9\u4e3b\u8981\u662f\u4e3a\u4e86\u5224\u65ad\u751f\u6210\u6a21\u578b\u662f\u5426\u51fa\u73b0\u8fc7\u62df\u5408\u3001\u6a21\u5f0f\u5d29\u584c\uff08Modal Collapse\uff09\u7b49\u95ee\u9898\u3002 \u5bf9\u4e8e\u751f\u6210\u6a21\u578b\u4e2d\u7684\u9690\u53d8\u91cf\uff0c\u6700\u597d\u5177\u6709\u4e00\u5b9a\u7684\u201c\u610f\u4e49\u201d\uff0c\u5373\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5f8b\u6539\u53d8\u9690\u53d8\u91cf\uff0c\u751f\u6210\u7684\u56fe\u50cf\u4e5f\u80fd\u51fa\u73b0\u6709\u89c4\u5f8b\u3001\u6709\u610f\u4e49\u7684\u53d8\u5316\u3002\u800c\u8bc4\u4ef7\u6307\u6807\u5e94\u8be5\u8981\u80fd\u8861\u91cf\u751f\u6210\u6a21\u578b\u7684\u9690\u53d8\u91cf\u662f\u5426\u5b58\u5728\u8fd9\u79cd\u201c\u610f\u4e49\u201d\u3002 \u8bc4\u4ef7\u5206\u6570\u7684\u53d8\u5316\u5e94\u8be5\u4e0e\u4eba\u7c7b\u7684\u611f\u77e5\u4e00\u81f4\uff0c\u5373\u8bc4\u4ef7\u5206\u6570\u5dee\u522b\u5927\u7684\u56fe\u50cf\uff0c\u4eba\u7c7b\u611f\u77e5\u5230\u7684\u89c6\u89c9\u6548\u679c\u4e5f\u5e94\u8be5\u5dee\u522b\u5927\u3002 \u76ee\u524d\u56fe\u50cf\u751f\u6210\u6a21\u578b\u7684\u8bc4\u4ef7\u6307\u6807\u6709\u5f88\u591a\u79cd\uff0c\u5b83\u4eec\u4e00\u822c\u90fd\u9700\u8981\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\uff08\u6216\u6ee1\u8db3\u90e8\u5206\u8981\u6c42\uff09\u3002\u867d\u7136\u8fd9\u4e9b\u6307\u6807\u672c\u8eab\u5b58\u5728\u4e00\u4e9b\u5c40\u9650\u6027\uff0c\u4f46\u662f\u5b83\u4eec\u5728\u8bc4\u4ef7\u4e00\u4e2a\u751f\u6210\u6a21\u578b\u7684\u6027\u80fd\u65f6\u4ecd\u7136\u5177\u6709\u91cd\u8981\u7684\u53c2\u8003\u4ef7\u503c\u3002 \u4e0b\u9762\u4ecb\u7ecd2\u79cd\u5e38\u7528\u7684\u8bc4\u4ef7\u6307\u6807\uff1a Inception Score (IS) \u548c Fr\u00e9chet Inception Distance (FID) \u3002 Inception Score (IS) \u8fd9\u4e2a\u8bc4\u4ef7\u6307\u6807\u4e3b\u8981\u662f\u8bc4\u4ef7\u751f\u6210\u7684\u56fe\u50cf\u7684\u771f\u5b9e\u6027\u548c\u591a\u6837\u6027\u3002\u5177\u4f53\u7684\u505a\u6cd5\u662f\uff1a\u5c06\u751f\u6210\u7684\u56fe\u50cf\u8f93\u5165\u5230\u4e00\u4e2aInception V3\u6a21\u578b\u4e2d\uff0c\u8be5\u6a21\u578b\u662f\u5728ImageNet-1K\u4e0a\u9884\u8bad\u7ec3\u7684\u5206\u7c7b\u6a21\u578b\uff0c\u6240\u4ee5\u4f1a\u8f93\u51fa\u4e00\u4e2a1000\u7ef4\u7684\u5411\u91cf\uff0c\u5176\u4e2d\u5411\u91cf\u7684\u6bcf\u4e00\u7ef4\u5ea6\u4e0a\u7684\u6570\u503c\u4ee3\u8868\u8f93\u5165\u7684\u56fe\u7247\u5c5e\u4e8e\u67d0\u4e00\u7c7b\u522b\u7684\u6982\u7387\uff0c\u7136\u540e\u57fa\u4e8e\u8be5\u5411\u91cf\u6765\u8bc4\u4f30\u771f\u5b9e\u6027\u548c\u591a\u6837\u6027\u3002 \u5728\u771f\u5b9e\u6027\u65b9\u9762\uff0cInception Score\u8ba4\u4e3a\uff0c\u5982\u679c\u751f\u6210\u7684\u56fe\u50cf\u8d28\u91cf\u8f83\u597d\uff0c\u90a3\u4e48\u56fe\u50cf\u4e2d\u5e94\u8be5\u5305\u542b\u4e00\u4e9b\u6e05\u6670\u4e14\u6709\u610f\u4e49\u7684\u7269\u4f53\uff0c\u6240\u4ee5\u8f93\u5165Inception V3\u4e4b\u540e\uff0c\u6a21\u578b\u5e94\u8be5\u80fd\u5c06\u5176\u5224\u522b\u4e3a\u67d0\u79cd\u7c7b\u522b\u7684\u56fe\u50cf\uff0c\u6240\u4ee5\u8f93\u51fa\u76841000\u7ef4\u5411\u91cf\u4e2d\u8f83\u5927\u7684\u6570\u503c\u5e94\u8be5\u96c6\u4e2d\u5728\u67d0\u4e2a\u7ef4\u5ea6\u4e0a\uff0c\u800c\u5176\u4ed6\u7ef4\u5ea6\u6570\u503c\u8f83\u5c0f\u3002\u5982\u679c\u7528 p(y|x) p(y|x) \u4ee3\u8868\u8f93\u5165\u4e00\u5f20\u56fe\u50cf x x \u4e4b\u540e\uff0c\u8f93\u51fa\u7684\u7c7b\u522b\u6982\u7387 y y \u7684\u5206\u5e03\uff0c\u90a3\u4e48 p(y|x) p(y|x) \u5e94\u8be5\u662f\u4e00\u4e2a\u5f62\u72b6\u5c16\u9510\u7684\u5206\u5e03\u3002 \u800c\u5728\u591a\u6837\u6027\u65b9\u9762\uff0cInception Score\u8ba4\u4e3a\uff0c\u5982\u679c\u4e00\u4e2a\u751f\u6210\u6a21\u578b\u80fd\u751f\u6210\u591a\u6837\u7684\u56fe\u7247\uff0c\u90a3\u4e48\u7406\u60f3\u60c5\u51b5\u4e0b\u5b83\u751f\u6210\u7684\u56fe\u7247\u5c5e\u4e8e\u5404\u4e2a\u7c7b\u522b\u7684\u6982\u7387\u5e94\u8be5\u662f\u5747\u7b49\u7684\uff0c\u5373\u5728 N N \u5f20\u751f\u6210\u7684\u56fe\u7247\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u522b\u7684\u56fe\u7247\u5e94\u8be5\u6709 \\frac{N}{1000} \\frac{N}{1000} \u5f20\u3002\u5982\u679c\u5bf9 p(y|x) p(y|x) \u6c42\u8fb9\u7f18\u5206\u5e03\uff1a p(y)=\\int_xp(y|x)p(x) p(y)=\\int_xp(y|x)p(x) \uff0c\u5f97\u5230\u7684 p(y) p(y) \u5e94\u8be5\u662f\u4e00\u4e2a\u5747\u5300\u5206\u5e03\uff0c\u5176\u5f62\u72b6\u662f\u4e00\u6761\u5e73\u5766\u7684\u76f4\u7ebf\u3002 \u4e3a\u4e86\u540c\u65f6\u8861\u91cf\u771f\u5b9e\u6027\u548c\u591a\u6837\u6027\uff0cInception Score\uff08\u4e0b\u9762\u7b80\u5199\u4e3aIS\uff09\u91c7\u7528\u4e86KL\u6563\u5ea6\uff1a IS=exp(\\mathbb{E}_{x\\sim p_g}D_{KL}(p(y|x)||p(y))) IS=exp(\\mathbb{E}_{x\\sim p_g}D_{KL}(p(y|x)||p(y))) \u5176\u4e2d p_g p_g \u4ee3\u8868\u751f\u6210\u6a21\u578b\u6240\u751f\u6210\u7684\u56fe\u50cf\u7684\u5206\u5e03\u3002\u6027\u80fd\u8d8a\u597d\u7684\u751f\u6210\u6a21\u578b\uff0c\u5176 p(y|x) p(y|x) \u5206\u5e03\u7684\u5f62\u72b6\u5e94\u8be5\u8d8a\u5c16\u9510\uff0c\u800c p(y) p(y) \u5206\u5e03\u7684\u5f62\u72b6\u5e94\u8be5\u8d8a\u5e73\u5766\uff0c\u6240\u4ee5\u5b83\u4eec\u4e4b\u95f4\u7684KL\u6563\u5ea6\u5e94\u8be5\u8d8a\u5927\uff0cIS\u5206\u6570\u4e5f\u5e94\u8be5\u8d8a\u5927\u3002\u5728\u5b9e\u9645\u8ba1\u7b97\u65f6\uff0c\u4e00\u822c\u901a\u8fc7\u8f93\u5165 N N \u5f20\u56fe\u7247\u5e76\u6c42\u5747\u503c\u6765\u4ee3\u66ff\u4e0a\u5f0f\u4e2d\u7684\u671f\u671b\uff1a IS=exp(\\frac{1}{N}\\sum_{i=1}^N D_{KL}(p(y|x^{(i)})||p(y))) IS=exp(\\frac{1}{N}\\sum_{i=1}^N D_{KL}(p(y|x^{(i)})||p(y))) IS\u5206\u6570\u5b58\u5728\u4e00\u4e9b\u7f3a\u70b9\uff0c\u6bd4\u5982\u4e0d\u80fd\u7528\u5728\u4e00\u4e2a\u6570\u636e\u96c6\u8bad\u7ec3\u7684Inception\u6a21\u578b\u6765\u8bc4\u4f30\u5728\u53e6\u4e00\u4e2a\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u7684\u751f\u6210\u6a21\u578b\uff0c\u53c8\u6bd4\u5982\u751f\u6210\u7684\u56fe\u50cf\u5982\u679c\u4e0d\u5728\u9884\u8bad\u7ec3\u7684\u7c7b\u522b\u4e2d\uff0c\u5373\u4f7f\u4eba\u7c7b\u611f\u77e5\u5230\u7684\u89c6\u89c9\u6548\u679c\u662f\u771f\u5b9e\u7684\uff0cIS\u5206\u6570\u4ecd\u7136\u5f88\u4f4e\uff0c\u7b49\u7b49\u3002 Fr\u00e9chet Inception Distance (FID) \u8fd9\u4e2a\u8bc4\u4ef7\u6307\u6807\u4e3b\u8981\u662f\u8bc4\u4ef7\u751f\u6210\u7684\u56fe\u50cf\u7684\u771f\u5b9e\u6027\uff0c\u5728\u8ba1\u7b97\u65f6\u4e5f\u9700\u8981\u7528\u5230Inception V3\u6a21\u578b\uff0c\u4f46\u662f\u4e0d\u9700\u8981\u501f\u52a9Inception V3\u4e2d\u7684\u5206\u7c7b\u5668\uff0c\u800c\u662f\u4f7f\u7528Inception V3\u4ece\u56fe\u50cf\u4e2d\u63d0\u53d6\u7684\u7279\u5f81\u5411\u91cf\u6765\u8ba1\u7b97\u751f\u6210\u56fe\u50cf\u548c\u771f\u5b9e\u56fe\u50cf\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u8d8a\u5c0f\u5219\u8bf4\u660e\u751f\u6210\u7684\u56fe\u50cf\u8d8a\u771f\u5b9e\u3002\u7531\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u6df1\u5c42\u53ef\u4ee5\u63d0\u53d6\u56fe\u50cf\u7684\u62bd\u8c61\u8bed\u4e49\u7279\u5f81\uff0c\u6240\u4ee5Fr\u00e9chet Inception Distance\uff08\u4e0b\u9762\u7b80\u5199\u4e3aFID\uff09\u4f7f\u7528\u7684\u662fInception V3\u8f93\u5165\u6700\u540e\u7684\u5206\u7c7b\u5668\u4e4b\u524d\u76842048\u7ef4\u7279\u5f81\u5411\u91cf\u6765\u8861\u91cf\u751f\u6210\u56fe\u50cf\u662f\u5426\u8db3\u591f\u771f\u5b9e\u3002 \u5177\u4f53\u7684\u505a\u6cd5\u662f\uff1a\u53d6\u540c\u6837\u6570\u76ee\u7684\u751f\u6210\u56fe\u50cf\u548c\u771f\u5b9e\u56fe\u50cf\u5404 N N \u5f20\uff0c\u8f93\u5165Inception Net-V3\uff0c\u5404\u81ea\u5f97\u5230 N*2048 N*2048 \u7ef4\u7684\u7279\u5f81\u5411\u91cf\uff0c\u7136\u540e\u5229\u7528\u4e0b\u9762\u7684\u5f0f\u5b50\u8ba1\u7b97FID\u5206\u6570\uff1a FID=||\\mu_r-\\mu_g||^2+Tr(\\Sigma_r+\\Sigma_g-2(\\Sigma_r\\Sigma_g)^{\\frac{1}{2}}) FID=||\\mu_r-\\mu_g||^2+Tr(\\Sigma_r+\\Sigma_g-2(\\Sigma_r\\Sigma_g)^{\\frac{1}{2}}) \u5176\u4e2d \\mu_r \\mu_r \u548c \\mu_g \\mu_g \u5206\u522b\u662f\u771f\u5b9e\u56fe\u50cf\u548c\u751f\u6210\u56fe\u50cf\u7684 N N \u4e2a\u7279\u5f81\u5411\u91cf\u7684\u5747\u503c\u5411\u91cf\uff0c \\Sigma_r \\Sigma_r \u548c \\Sigma_g \\Sigma_g \u5206\u522b\u662f\u771f\u5b9e\u56fe\u50cf\u548c\u751f\u6210\u56fe\u50cf\u7684 N*2048 N*2048 \u7ef4\u7279\u5f81\u5411\u91cf\u7684\u534f\u65b9\u5dee\u77e9\u9635\uff0c Tr Tr \u4ee3\u8868\u77e9\u9635\u7684\u8ff9\u3002FID\u5206\u6570\u8d8a\u5c0f\uff0c\u4ee3\u8868\u751f\u6210\u7684\u56fe\u50cf\u8d8a\u771f\u5b9e\u3002 \u8ddfIS\u5206\u6570\u76f8\u6bd4\uff0cFID\u5206\u6570\u7684\u4f18\u70b9\u662f\u5141\u8bb8\u751f\u6210\u6a21\u578b\u7684\u8bad\u7ec3\u96c6\u548cInception\u6a21\u578b\u7684\u8bad\u7ec3\u96c6\u4e0d\u76f8\u540c\uff0c\u56e0\u4e3aFID\u5206\u6570\u4e0d\u4f7f\u7528Inception\u6a21\u578b\u4e2d\u7684\u5206\u7c7b\u5668\u3002\u4f46FID\u5206\u6570\u4ecd\u7136\u5b58\u5728\u7f3a\u70b9\uff0c\u6bd4\u5982\u5f53\u751f\u6210\u6a21\u578b\u8fc7\u62df\u5408\uff0c\u751f\u6210\u7684\u56fe\u50cf\u548c\u8bad\u7ec3\u96c6\u4e2d\u7684\u56fe\u50cf\u4e00\u6a21\u4e00\u6837\u65f6\uff0cFID\u5206\u6570\u4e5f\u5f88\u5c0f\uff0c\u4f46\u6b64\u65f6\u751f\u6210\u6a21\u578b\u7684\u6027\u80fd\u5e76\u4e0d\u597d\u3002","title":"1.2 \u8bc4\u4ef7\u6307\u6807"},{"location":"dsdl_template/cv/cv_generation/#13","text":"\u6211\u4eec\u5bf9\u4e00\u4e9b\u56fe\u50cf\u751f\u6210\u6570\u636e\u96c6\u8fdb\u884c\u4e86\u8c03\u7814\uff0c\u5bf9\u76f8\u5173\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\uff08\u4e3b\u8981\u662f\u6807\u6ce8\u5b57\u6bb5\uff09\u8fdb\u884c\u4e86\u5206\u6790\u6c47\u603b\uff0c\u76f8\u540c\u542b\u4e49\u7684\u6807\u6ce8\u5b57\u6bb5\u4f1a\u4ee5\u7edf\u4e00\u547d\u540d\u8fdb\u884c\u5c55\u793a\uff0c\u6c47\u603b\u4fe1\u606f\u5982\u4e0b\u8868\u6240\u793a\uff1a \u56fe\u50cf\u751f\u6210\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 \u4efb\u52a1\u7c7b\u578b \u6570\u636e\u96c6\u540d\u79f0 image_id category_name paired_images domain Unconditional Generation LSUN Y Y FFHQ Y CelebA-HQ Y MetFaces Y AFHQ Y Y Conditional Generation ImageNet-1K Y Y Cifar-10 Y Y Style Transfer(Unpaired) Facade_CycleGAN Y Y Style Transfer(Paired) Facade_pix2pix Y Y Y \u5bf9\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u8fdb\u884c\u6c47\u603b\uff0c\u5f97\u5230\u4e0b\u8868\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a \u72ec\u7acb\u5b57\u6bb5 category_name \u56fe\u50cf\u6240\u5c5e\u7684\u7c7b\u522b\u540d paired_images \u662f\u5426\u6709\u6210\u5bf9\u7684\u56fe\u50cf domain \u56fe\u50cf\u6240\u5c5e\u7684\u57df\uff0c\u4e0e\u7c7b\u522b\u6709\u4e9b\u533a\u522b\uff0c\u5f80\u5f80\u4e0d\u7528\u4e8e\u5206\u7c7b\u4efb\u52a1\uff0c\u800c\u662f\u7528\u6765\u4ee3\u8868\u56fe\u50cf\u7684\u98ce\u683c\u7279\u70b9\uff0c\u53ef\u4ee5\u7528\u4e8e\u98ce\u683c\u8fc1\u79fb\u7b49\u4efb\u52a1\u3002","title":"1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814"},{"location":"dsdl_template/cv/cv_generation/#2","text":"\u4ece\u6570\u636e\u96c6\u8c03\u7814\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8eUnconditional Generation\uff0c\u53ea\u6709image_id\u662f\u5fc5\u987b\u5b57\u6bb5\u3002\u800c\u5bf9\u4e8eConditional Generation\uff0c\u53ea\u6709image_id\u548ccategory_name\u662f\u5fc5\u987b\u5b57\u6bb5\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u4e13\u95e8\u4e3a\u8fd9\u4e24\u4e2a\u4efb\u52a1\u5236\u5b9a\u6a21\u677f\uff0cConditional Generation\u7684\u6570\u636e\u96c6\u53ef\u4ee5\u7528\u56fe\u50cf\u5206\u7c7b\u7684\u6a21\u677f\u6765\u63cf\u8ff0\uff0cUnconditional Generation\u7684\u6570\u636e\u96c6\u5219\u53ea\u9700\u8981\u5b9a\u4e49sample\u7684struct\u4e2d\u6709Image\u5b57\u6bb5\u5373\u53ef\u3002 \u5bf9\u4e8eStyle Transfer\u4efb\u52a1\uff0c\u6839\u636e\u662f\u5426\u6709\u6210\u5bf9\u56fe\u50cf\uff08paired/unpaired\uff09\uff0c\u53ef\u4ee5\u5236\u5b9a\u4e0d\u540c\u7684\u6a21\u677f\uff0c\u4e0b\u9762\u5206\u522b\u4ecb\u7ecd\u4e24\u79cd\u6a21\u677f\u3002","title":"2. \u6a21\u677f\u5c55\u793a"},{"location":"dsdl_template/cv/cv_generation/#21-style-transferunpaired","text":"\u6211\u4eec\u5236\u5b9a\u7684Style Transfer(Unpaired)\u4efb\u52a1\u7684\u6a21\u677f\u5982\u4e0b\uff1a $dsdl-version : \"0.5.3\" UnpairedSample : $def : struct $params : [ 'cdom' ] $fields : image : Image domain : Label[dom=$cdom] \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c UnpairedSample: \u5b9a\u4e49\u4e86Style Transfer(Unpaired)\u4efb\u52a1\u7684sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e09\u4e2a\u5b57\u6bb5\uff1a $def: struct\uff1a\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params\uff1a\u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields\uff1a\u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image\uff1a\u56fe\u7247\u8def\u5f84\uff0c\u5bf9\u5e94\u4e8e\u5171\u4eab\u5b57\u6bb5\u4e2d\u7684image_id domain\uff1a\u57df\u4fe1\u606f\uff0c\u5bf9\u5e94\u4e8e\u72ec\u7acb\u5b57\u6bb5\u4e2d\u7684domain","title":"2.1 Style Transfer(Unpaired)\u6a21\u677f"},{"location":"dsdl_template/cv/cv_generation/#22-style-transferpaired","text":"\u6211\u4eec\u5236\u5b9a\u7684Style Transfer(Paired)\u4efb\u52a1\u7684\u6a21\u677f\u5982\u4e0b\uff1a $dsdl-version : \"0.5.3\" ImageMedia : $def : struct $params : [ 'cdom' ] $fields : image : Image domain : Label[dom=$cdom] PairedSample : $def : struct $params : [ 'cdom' ] $fields : image_a : ImageMedia[cdom=$cdom] image_b : ImageMedia[cdom=$cdom] \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c ImageMedia\uff1a\u5b9a\u4e49\u4e86Style Transfer(Paired)\u4efb\u52a1\u7684image\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e09\u4e2a\u5b57\u6bb5\uff1a $def: struct\uff1a\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params\uff1a\u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields\uff1a\u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec\uff1a image\uff1a\u56fe\u7247\u8def\u5f84\uff0c\u5bf9\u5e94\u4e8e\u5171\u4eab\u5b57\u6bb5\u4e2d\u7684image_id domain\uff1a\u57df\u4fe1\u606f\uff0c\u5bf9\u5e94\u4e8e\u72ec\u7acb\u5b57\u6bb5\u4e2d\u7684domain PairedSample: \u5b9a\u4e49\u4e86Style Transfer(Paired)\u4efb\u52a1\u7684sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e09\u4e2a\u5b57\u6bb5\uff1a $def: struct\uff1a\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params\uff1a\u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields\uff1a\u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec\uff1a image_a\uff1a\u56fe\u7247\u8def\u5f84\uff0c\u5bf9\u5e94\u4e8e\u5171\u4eab\u5b57\u6bb5\u4e2d\u7684image_id image_b\uff1a\u4e0eimage_a\u914d\u5bf9\u7684\u53e6\u4e00\u5f20\u56fe\u7247\u7684\u8def\u5f84 \u53ef\u4ee5\u770b\u51fa\uff0cStyle Transfer(Paired)\u6a21\u677f\u4e0eStyle Transfer(Unpaired)\u6a21\u677f\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u662f\u5426\u5b58\u5728\u6210\u5bf9\u7684\u56fe\u7247\u3002","title":"2.2 Style Transfer(Paired)\u6a21\u677f"},{"location":"dsdl_template/cv/cv_generation/#3","text":"\u6211\u4eec\u4ee5 CMP Facade \u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u5c55\u793a\u56fe\u50cf\u751f\u6210\u6570\u636e\u96c6DSDL\u63cf\u8ff0\u6587\u4ef6\u7684\u5177\u4f53\u5185\u5bb9\u3002","title":"3. \u5b8c\u6574\u793a\u4f8b"},{"location":"dsdl_template/cv/cv_generation/#31-style-transferpaired","text":"CMP Facade\u6570\u636e\u96c6\u53ef\u4ee5\u7528\u4e8eStyle Transfer(Paired)\u4efb\u52a1\uff0c\u53ef\u4ee5\u53c2\u89c1 pix2pix \u65b9\u6cd5\u3002\u901a\u8fc7\u5206\u6790\u539f\u59cb\u6570\u636e\u96c6\u7684\u6807\u6ce8\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528DSDL\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\uff0c\u9996\u5148\u7528DSDL\u8bed\u6cd5\u63cf\u8ff0\u98ce\u683c\u57df\u4fe1\u606f\uff1a class-dom.yaml $dsdl-version : \"0.5.3\" FacadeStyleDom : $def : class_domain classes : - photo - mask \u7531\u4e8eStyle Transfer\u4e2d\u7684\u98ce\u683c\u57df\u548c\u56fe\u50cf\u5206\u7c7b\u4e2d\u7684\u7c7b\u522b\u57df\u7c7b\u4f3c\uff0c\u5728DSDL\u4e2d\u53ef\u4ee5\u4f7f\u7528 class_domain \u6765\u5b9a\u4e49\u3002 class-dom.yaml \u4e2d\u5305\u542b\u7684\u5173\u952e\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff1a FacadeStyleDom\uff1a\u98ce\u683c\u57df\u7684class domain\u7684\u540d\u5b57\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49 $def: \u63cf\u8ff0\u4e86FacadeStyleDom\u7684dsdl\u7c7b\u578b\uff0c\u8fd9\u91cc\u5373class_domain classes: \u8bb0\u5f55\u4e86\u6bcf\u79cd\u98ce\u683c\u7684\u540d\u5b57\uff0c\u5728CMP Facade\u6570\u636e\u96c6\u4e2d\uff0c\u5171\u6709photo\u548cmask\u4e24\u79cd\u98ce\u683c\uff0c\u5206\u522b\u5bf9\u5e94\u6570\u636e\u96c6\u4e2d\u7684\u539f\u59cb\u56fe\u50cf\u548c\u6807\u6ce8\u56fe\u50cf\u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cCMP Facade\u6570\u636e\u96c6\u8bbe\u8ba1\u7684\u521d\u8877\u5e76\u4e0d\u662f\u7528\u4e8eStyle Transfer\u4efb\u52a1\u7684\uff0c\u6240\u4ee5\u539f\u59cb\u6570\u636e\u96c6\u6ca1\u6709\u7ed9\u4e0d\u540c\u7684\u98ce\u683c\u8d4b\u4e88\u4e00\u4e2a\u7279\u5b9a\u7684\u540d\u5b57\uff0c\u4f46\u662f\u5728\u7528DSDL\u8bed\u8a00\u63cf\u8ff0\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u4e0d\u540c\u7684\u98ce\u683c\u8d77\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\uff0c\u5728\u672c\u6a21\u677f\u4e2d\u4f7f\u7528\u7684\u662fphoto\u548cmask \u63a5\u4e0b\u6765\u4f7f\u7528DSDL\u8bed\u6cd5\u63cf\u8ff0\u4e00\u4e2a\u6837\u672c\u7684\u7ed3\u6784\uff1a image-generation-facade.yaml $dsdl-version : \"0.5.3\" ImageMedia : $def : struct $params : [ 'sdom' ] $fields : image : Image domain : Label[dom=$sdom] FacadeImageSample : $def : struct $params : [ 'sdom' ] $fields : image_a : ImageMedia[sdom=$sdom] image_b : ImageMedia[sdom=$sdom] \u5176\u4e2d\u4e00\u4e9b\u5173\u952e\u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\uff1a ImageMedia\uff1a\u5b9a\u4e49\u4e86image\u7684\u7ed3\u6784\u4f53 $params: ['sdom']\uff1a\u5b9a\u4e49\u4e86image\u7684\u5f62\u53c2\uff0c\u8fd9\u4e2a\u5f62\u53c2\u7528\u6765\u4f20\u5165image\u7684\u98ce\u683c\u57df\u5217\u8868 domain: Label[dom=$sdom]\uff1a\u5b9a\u4e49\u4e86image\u6240\u5c5e\u7684\u98ce\u683c\uff0c\u63a5\u6536image\u7684\u5f62\u53c2\u4f5c\u4e3a\u98ce\u683c\u57df FacadeImageSample\uff1a\u5b9a\u4e49\u4e86sample\u7684\u7ed3\u6784\u4f53 $params: ['sdom']\uff1a\u5b9a\u4e49\u4e86sample\u7684\u5f62\u53c2\uff0c\u8be5\u5f62\u53c2\u4f1a\u4f20\u5165ImageMedia\u4e2d image_a/image_b\uff1a\u7ec4\u6210sample\u7684\u4e00\u5bf9\u56fe\u7247 \u5bf9\u4e8e\u6570\u636e\u96c6yaml\u6587\u4ef6\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u5f62\u5f0f\u5b9a\u4e49\uff1a base.yaml $dsdl-version : \"0.5.3\" $import : - ../defs/image-generation-facade - ../defs/class-dom meta : Dataset Name : \"CMP Facade\" HomePage : \"https://cmp.felk.cvut.cz/~tylecr1/facade/\" Subset Name : \"base\" Modality : \"Images\" Task : \"Image Generation\" data : sample-type : FacadeImageSample[sdom=FacadeStyleDom] sample-path : base_samples.json \u5176\u4e2d\u4e00\u4e9b\u5173\u952e\u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\uff1a $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165\u7684\u662f\u4efb\u52a1\u6a21\u677f\u548c\u7684class domain meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u6570\u636e\u96c6\u5b98\u7f51\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: data\u7684\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece\u4efb\u52a1\u6a21\u677f\u4e2d\u5bfc\u5165\u7684FacadeImageSample\u7c7b\uff0c\u540c\u65f6\u4f20\u5165\u4e86FacadeStyleDom\u4f5c\u4e3a\u6bcf\u5f20\u56fe\u7247\u7684\u98ce\u683c\u57df\u5217\u8868 sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\u3002\u672c\u6a21\u677f\u53c2\u8003DSDL\u8bed\u8a00\u6559\u7a0b\u4e2d\u7684 \u6570\u636e\u6a21\u5757 \u7684\u201c2.6.4 \u901a\u8fc7\u5916\u90e8\u6587\u4ef6\u8bfb\u53d6\u201d\u5c0f\u8282\u4ecb\u7ecd\u7684\u65b9\u6cd5\uff0c\u5c06\u6570\u636e\u96c6\u7684samples\u5217\u8868\u62bd\u51fa\u6765\u5355\u72ec\u653e\u5728JSON\u6587\u4ef6\u4e2d\uff0c\u4ee5\u63d0\u9ad8\u6570\u636e\u8bfb\u53d6\u6548\u7387 base.yaml \u4e2d\u63d0\u5230\u7684 base_samples.json \u6587\u4ef6\u7684\u5185\u5bb9\u548c\u683c\u5f0f\u5982\u4e0b\u6240\u793a\uff0c\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684FacadeImageSample\u5bf9\u5e94\uff1a base_samples.json { \"samples\" :[ { \"image_a\" :{ \"image\" : \"base/cmp_b0001.jpg\" , \"domain\" : \"photo\" , }, \"image_b\" :{ \"image\" : \"base/cmp_b0001.png\" , \"domain\" : \"mask\" , } }, ... ] } \u5728\u5b9e\u9645\u7528DSDL\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u96c6\u7684\u65f6\u5019\uff0c\u7c7b\u4f3c base_samples.json \u7684\u6587\u4ef6\u4e00\u822c\u5185\u5bb9\u8f83\u591a\uff0c\u9700\u8981\u901a\u8fc7\u811a\u672c\u6765\u751f\u6210\u3002","title":"3.1 \u7528Style Transfer(Paired)\u6a21\u677f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0"},{"location":"dsdl_template/cv/cv_generation/#33-style-transferunpaired","text":"CMP Facade\u6570\u636e\u96c6\u4e5f\u53ef\u4ee5\u7528\u4e8eStyle Transfer(Unpaired)\u4efb\u52a1\uff0c\u53ef\u4ee5\u53c2\u89c1 CycleGAN \u65b9\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u57fa\u4e8eStyle Transfer(Unpaired)\u4efb\u52a1\u7684\u7279\u70b9\uff0c\u7528DSDL\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\uff0c\u6b64\u65f6\u5f97\u5230\u7684DSDL\u6570\u636e\u96c6\u4e0eStyle Transfer(Paired)\u4efb\u52a1\u4e2d\u7684DSDL\u6570\u636e\u96c6\u5927\u4f53\u4e0a\u662f\u4e00\u6837\uff0c\u53ea\u662f\u5176\u4e2d\u4e00\u4e9b\u63cf\u8ff0\u6587\u4ef6\u7684\u5185\u5bb9\u548c\u683c\u5f0f\u4f1a\u6709\u6240\u53d8\u5316\uff0c\u4e0b\u9762\u4ec5\u4ecb\u7ecd\u4e0eStyle Transfer(Paired)\u4efb\u52a1\u4e0d\u540c\u7684\u63cf\u8ff0\u6587\u4ef6\uff1a image-generation-facade.yaml $dsdl-version : \"0.5.3\" FacadeImageSample : $def : struct $params : [ 'sdom' ] $fields : image : Image domain : Label[dom=$sdom] \u5176\u4e2d\u4e00\u4e9b\u5173\u952e\u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\uff1a FacadeImageSample\uff1a\u5b9a\u4e49\u4e86sample\u7684\u7ed3\u6784\u4f53 $params: ['sdom']\uff1a\u5b9a\u4e49\u4e86sample\u7684\u5f62\u53c2\uff0c\u8fd9\u4e2a\u5f62\u53c2\u4f1a\u4f20\u5165image\u7684\u98ce\u683c\u57df\u5217\u8868 image: Image\uff1a\u56fe\u7247\u7684\u8def\u5f84 domain: Label[dom=$sdom]\uff1a\u5b9a\u4e49\u4e86image\u6240\u5c5e\u7684\u98ce\u683c\uff0c\u63a5\u6536image\u7684\u5f62\u53c2\u4f5c\u4e3a\u98ce\u683c\u57df base_samples.json \u4e0eStyle Transfer(Paired)\u4efb\u52a1\u7c7b\u4f3c\uff0cbase_samples.json\u91cc\u9762\u7684\u5b57\u6bb5\u4e5f\u9700\u8981\u548c\u5f53\u524d\u4efb\u52a1\u5b9a\u4e49\u7684FacadeImageSample\u5bf9\u5e94\uff0c\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a { \"samples\" :[ { \"image\" : \"base/cmp_b0001.jpg\" , \"domain\" : \"photo\" , }, { \"image\" : \"base/cmp_b0001.png\" , \"domain\" : \"mask\" , }, ... ] }","title":"3.3 \u7528Style Transfer(Unpaired)\u6a21\u677f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0"},{"location":"dsdl_template/cv/cv_keypoint_detection/","text":"\u5173\u952e\u70b9\u68c0\u6d4b\uff08\u59ff\u6001\u4f30\u8ba1\uff09\u4efb\u52a1 1. \u4efb\u52a1\u8c03\u7814 1.1 \u4efb\u52a1\u5b9a\u4e49 \u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u76ee\u6807\u662f\u6807\u51fa\u7269\u4f53\u7684\u5173\u952e\u90e8\u4f4d\uff0c\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u76ee\u6807\u662f\u5bf9\u7269\u4f53\uff08\u901a\u5e38\u662f\u4eba\u548c\u52a8\u7269\uff09\u7684\u59ff\u6001\uff08\u5373\u5173\u952e\u70b9\u548c\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\uff09\u8fdb\u884c\u4f30\u8ba1\u3002\u5173\u952e\u70b9\u68c0\u6d4b\u548c\u59ff\u6001\u4f30\u8ba1\u901a\u5e38\u5408\u5728\u4e00\u8d77\u8ba8\u8bba\uff0c\u539f\u56e0\u662f\u5bf9\u4e8e\u4eba\u4f53\u548c\u52a8\u7269\u7b49\u5176\u8eab\u4f53\u90e8\u4f4d\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\u662f\u56fa\u5b9a\u7684\uff0c\u5f97\u5230\u4e86\u4eba\u4f53\u5173\u952e\u70b9\u7684\u68c0\u6d4b\u7ed3\u679c\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u59ff\u6001\u4f30\u8ba1\u7684\u7ed3\u679c(\u662f\u5426\u6709\u59ff\u6001\u4f30\u8ba1\u53d6\u51b3\u4e8e\u662f\u5426\u6709\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb)\u3002 \u56fe\u7247\u53d6\u81ea\uff1aDeep High-Resolution Representation Learning for Human Pose Estimation, CVPR19 1.2 \u8bc4\u4ef7\u6307\u6807 \u8bc4\u4ef7\u6307\u6807\u4e00\u822c\u91c7\u7528COCO\u683c\u5f0f\u7684mAP\u3002mAP\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e0eCOCO\u76ee\u6807\u68c0\u6d4b\u4e2d\u7684mAP\u8ba1\u7b97\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u5bf9\u4e8e\u5173\u952e\u70b9\u68c0\u6d4b\u65b9\u6cd5\u68c0\u6d4b\u51fa\u7684\u6240\u6709\u7269\u4f53\u4ee5\u53ca\u7269\u4f53\u4e2d\u7684\u5173\u952e\u70b9\uff0c\u9996\u5148\u4f7f\u7528\u5173\u952e\u70b9\u4e2d\u7684OKS\u5ea6\u91cf\u6307\u6807\u5bf9\u6240\u6709\u68c0\u6d4b\u51fa\u7684\u7269\u4f53\u8fdb\u884c\u5206\u7c7b\uff0c\u5206\u4e3aTP\u3001FP\u3001FN\u51e0\u7c7b\uff0c\u5212\u5206\u5b8c\u4e4b\u540e\uff0c\u901a\u8fc7\u6539\u53d8score\u7684\u9608\u503c\u8ba1\u7b97P-R\u66f2\u7ebf\uff0cP-R\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\u5373\u4e3aAP\u7684\u503c\u3002 \u4e0e\u76ee\u6807\u68c0\u6d4bmAP\u8ba1\u7b97\u65b9\u5f0f\u6700\u5927\u7684\u4e0d\u540c\u5728\u4e8e\uff0c\u76ee\u6807\u68c0\u6d4b\u4e2d\u8861\u91cf\u5b9e\u4f8b\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\u65f6\u4f7f\u7528\u7684\u662f\u68c0\u6d4b\u6846\u4e4b\u95f4\u7684IOU\uff0c\u800c\u5728\u5173\u952e\u70b9\u68c0\u6d4b\u4e2d\uff0c\u8861\u91cf\u5b9e\u4f8b\u76f8\u4f3c\u5ea6\u4f7f\u7528\u7684\u662f\u7269\u4f53\u5173\u952e\u70b9\u4e4b\u95f4\u7684OKS\u8ddd\u79bb\uff0cOKS\u7684\u8ba1\u7b97\u65b9\u5f0f\u5982\u4e0b\uff1a \u56fe\u7247\u53d6\u81ea\uff1ahttps://cocodataset.org/#keypoints-eval OKS\u4ee3\u8868\u7684\u662f\u4e00\u4e2a\u7269\u4f53\u5176\u6240\u6709\u5173\u952e\u70b9\u68c0\u6d4b\u7ed3\u679c\uff08prediction\uff09\u548c\u771f\u5b9e\u6807\u6ce8\uff08ground truth\uff09\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0cdi\u4ee3\u8868\u7b2ci\u4e2a\u68c0\u6d4b\u51fa\u7684\u5173\u952e\u70b9\u548c\u771f\u5b9e\u6807\u6ce8\u7684\u6b27\u6c0f\u8ddd\u79bb\uff0cs\u662f\u7269\u4f53\u7684\u50cf\u7d20\u9762\u79ef\uff0ck\u4ee3\u8868\u7b2ci\u79cd\u5173\u952e\u70b9\uff08\u4f8b\u5982\u9f3b\u5b50\uff09\u7684\u5f52\u4e00\u5316\u56e0\u5b50\uff0c\u662f\u5bf9\u5df2\u6709\u6570\u636e\u96c6\u4e2d\u6240\u6709\u7269\u4f53\u7684\u540c\u79cd\u5173\u952e\u70b9\uff08\u4f8b\u5982\u6570\u636e\u96c6\u79cd\u6240\u6709\u4eba\u7684\u9f3b\u5b50\u5173\u952e\u70b9\uff09\u8ba1\u7b97\u5f97\u5230\u7684\uff0c\u503c\u8d8a\u5927\uff0c\u4ee3\u8868\u6570\u636e\u96c6\u4e2d\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u8d8a\u5dee\u5373\u8fd9\u4e2a\u5173\u952e\u70b9\u8d8a\u96be\u68c0\u6d4b\uff0c\u503c\u8d8a\u5c0f\u4ee3\u8868\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u8d8a\u597d\uff0c\u5373\u8fd9\u4e2a\u5173\u952e\u70b9\u68c0\u6d4b\u96be\u5ea6\u8f83\u5c0f\u3002\u6709\u4e86OKS\u8ddd\u79bb\u4e4b\u540e\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230\u4e0d\u540cOKS\u9608\u503c\u4e0b\u7684AP\u6307\u6807\u3002COCO\u7684\u5173\u952e\u70b9\u68c0\u6d4b\u6307\u6807\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e0e\u76ee\u6807\u68c0\u6d4b\u7c7b\u4f3c\u5b9a\u4e49\uff1a \u56fe\u7247\u53d6\u81ea\uff1ahttps://cocodataset.org/#keypoints-eval 1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814 \u6839\u636e\u76ee\u6807\u7c7b\u578b\u7684\u4e0d\u540c\uff0c\u59ff\u6001\u4f30\u8ba1\uff08\u5173\u952e\u70b9\u68c0\u6d4b\uff09\u6570\u636e\u96c6\u7684\u6807\u6ce8\u5f62\u5f0f\u4e5f\u4e0d\u540c\u3002\u59ff\u6001\u4f30\u8ba1\uff08\u5173\u952e\u70b9\u68c0\u6d4b\uff09\u6570\u636e\u96c6\u6839\u636e\u76ee\u6807\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff1a \u76ee\u6807\u7c7b\u578b \u4efb\u52a1\u7c7b\u578b \u4ee3\u8868\u6570\u636e\u96c6 \u4eba\u4f53 \u4eba\u4f53\u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b (human body keypoint) COCO, MPII, MPII-TRB, AI Challenger, CrowdPose, OCHuman, MHP \u4eba\u4f53(\u5168\u8eab) \u4eba\u4f53(\u5168\u8eab)\u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b (human wholebody keypoint) COCO WholeBody, Halpe \u4eba\u8138 \u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b (face keypoint) 300W, WFLW, AFLW, COFW, COCO-WholeBody-Face \u624b \u624b\u90e8\u5173\u952e\u70b9\u68c0\u6d4b (hand keypoint) OneHand-10K, FreiHand, CMU Panoptic HandDB, InterHand2.6M, RHD, COCO-WholeBody-Hand \u8863\u7269 \u8863\u7269\u5173\u952e\u70b9\u68c0\u6d4b (fashion lanmark) DeepFashion \u52a8\u7269 \u52a8\u7269\u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b (animal keypoint) Animal-Pose, AP-10K, Horse-10, MacaquePose, Vinegar Fly, Desert Locust, Gr\u00e9vy\u2019s Zebra, ATRW \u6211\u4eec\u8c03\u7814\u4e8610\u4e2a\u4e3b\u6d41\u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b\u6570\u636e\u96c6\uff0c\u6db5\u76d6\u4e86\u6240\u6709\u4ee5\u4e0a\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u96c6\u3002\u5b8c\u6574\u7684\u5b57\u6bb5\u8c03\u7814\u7ed3\u679c\u5982\u4e0b\u8868\u6240\u793a\uff1a \u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b\u6570\u636e\u96c6 image_id height width instance_id category_id is_crowd area num_keypoints bbox segmentation keypoints visible center categories super_categories keypoint_names skeleton other COCO Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y MPII Y Y Y Y scale, person, torsoangle AIC Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y CrowdPose Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y crowd index COCO-WholeBody Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y face valid/kpts/bbox, right hand valid/kpts/bbox, left hand valid/kpts/bbox, foot valid/kpts Halpe Y Y Y Y Y Y Y Y Y Y Y Hoi 300W Y Y Y Y Y Y Y Y Y Y Y Y Y Y OneHand10K Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y DeepFashion Y Y Y Y Y Y Y variation AnimalPose Y Y Y Y Y Y Y Y Y Y \u7ecf\u8fc7\u6574\u7406\uff0c\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u7684\u5b57\u6bb5\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\uff1a\u4e00\u79cd\u662f\u4e0d\u540c\u6570\u636e\u96c6\u5171\u6709\u7684\u5171\u4eab\u5b57\u6bb5\uff0c\u4e00\u79cd\u662f\u4e0d\u540c\u6570\u636e\u96c6\u4e0d\u540c\u7684\u72ec\u7acb\u5b57\u6bb5\u3002\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u7684\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a keypoints \u5355\u4e2a\u76ee\u6807\u7684\u5173\u952e\u70b9\u6807\u6ce8\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u5750\u6807\u70b9\uff0c\u5750\u6807\u70b9\u7528[x, y]\u6216\u8005[x,y,vis]\u8868\u793a\uff08vis\u4ee3\u8868\u8fd9\u4e2a\u5173\u952e\u70b9\u662f\u5426\u53ef\u89c1\uff09 visible \u8868\u793a\u67d0\u4e2a\u5173\u952e\u70b9\u662f\u5426\u53ef\u89c1\uff0c\u4f7f\u7528\u6574\u6570\u6765\u6807\u8bc6 \u72ec\u7acb\u5b57\u6bb5 height/width \u56fe\u50cf\u7684\u539f\u59cb\u5c3a\u5bf8\uff08\u957f\u548c\u5bbd\uff09 instance_id \u8fd9\u4e2a\u76ee\u6807\u7684id\uff0c\u5b9a\u4f4d\u5230\u67d0\u4e2a\u5177\u4f53\u7684\u76ee\u6807 category_id \u7c7b\u522bid\uff0c\u8868\u793a\u8fd9\u4e2a\u76ee\u6807\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u522b is_crowd \u6807\u6ce8\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\u8fd8\u662f\u4e00\u7ec4\u5bf9\u8c61\uff0c\u4f7f\u75280\u6216\u80051\u6765\u6807\u8bc6\uff0c\u5982\u679c\u662f\u4e00\u7ec4\u5bf9\u8c61\u4e3a1\uff0c\u5426\u5219\u4e3a0\uff0c area \u8fd9\u4e2a\u76ee\u6807\u6240\u5360\u7684\u9762\u79ef\uff0c\u901a\u5e38\u4f7f\u7528\u6240\u5360\u50cf\u7d20\u4e2a\u6570\u6765\u8868\u793a num_keypoints \u5173\u952e\u70b9\u4e2a\u6570 bbox \u76ee\u6807\u7684\u77e9\u5f62\u6846\u6807\u6ce8\uff0c\u901a\u5e38\u4f7f\u7528[x,y,w,h]\u6765\u8868\u793a segmentation \u76ee\u6807\u7684\u50cf\u7d20\u7ea7\u5206\u5272\u6807\u6ce8\uff0c\u901a\u5e38\u4f7f\u7528\u4e00\u7ec4[x,y]\u5750\u6807\u6765\u8868\u793a center \u76ee\u6807\u7684\u4e2d\u5fc3\u70b9\u5750\u6807\uff0c\u4f7f\u7528[x,y]\u6765\u8868\u793a\uff0c\u901a\u5e38\u4ee3\u8868\u7684\u662f\u76ee\u6807\u77e9\u5f62\u6846\u7684\u4e2d\u5fc3\u70b9\u5750\u6807 categories \u8868\u793a\u6570\u636e\u96c6\u4e2d\u6240\u5305\u542b\u7684\u7c7b\u522b\u4ee5\u53ca\u7c7b\u522b\u7f16\u53f7 super_categories \u6570\u636e\u96c6\u4e2d\u7c7b\u522b\u7684\u7236\u7c7b keypoint_names \u5173\u952e\u70b9\u7684\u540d\u79f0 skeleton \u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb scale MPII\u4e2d\u5b57\u6bb5\uff0c\u8868\u793a\u76ee\u6807\u6846\u7684\u7f29\u653e\u6bd4\u4f8b\uff0cMPII\u4e2d\u7531\u4e8e\u76ee\u6807\u6846\u662f\u6b63\u65b9\u5f62\uff0cscale*200px\u53ef\u4ee5\u8fd8\u539f\u5f97\u5230\u76ee\u6807\u6846\u7684\u8fb9\u957f person MPII\u4e2d\u5b57\u6bb5\uff0c\u4ee3\u8868\u56fe\u7247\u4e2d\u4eba\u7684\u4e2a\u6570 torsoangle MPII\u4e2d\u5b57\u6bb5\uff0c\u4ee3\u8868\u4eba\u4f53\u8eaf\u5e72\u7684\u504f\u8f6c\u89d2\u5ea6 face/hand/foot valid COCO-WholeBody\u4e2d\u5b57\u6bb5\uff0c\u4ee3\u8868\u662f\u5426\u6709\u8138/\u624b/\u811a\u7684\u6807\u6ce8\uff0c\u503c\u4e3a0\u6216\u80051 face/hand/foot kpts COCO-WholeBody\u4e2d\u5b57\u6bb5\uff0c\u8868\u793a\u8138/\u624b/\u811a\u7684\u5173\u952e\u70b9\u6807\u6ce8\uff0c\u4e3a\u4e00\u7ec4\u5750\u6807\u70b9 face/hand bbox COCO-WholeBody\u4e2d\u5b57\u6bb5\uff0c\u8868\u793a\u8138/\u624b\u7684\u77e9\u5f62\u6846\u6807\u6ce8\uff0c\u8868\u793a\u4e3a\u77e9\u5f62\u6846[x,y,h,w] Hoi Halpe\u4e2d\u5b57\u6bb5\uff0c\u4f7f\u7528\u6574\u578b\u8868\u793a\uff0c\u4ee3\u8868\u7684\u662f\u4eba\u4f53\u548c\u5176\u4ed6\u7269\u4f53\u53d1\u751f\u4ea4\u4e92\u7684\u79cd\u7c7b\uff08\u4f8b\u59820\u4ee3\u8868\u62ff\u8d77\uff0c1\u4ee3\u8868\u5750\uff0c\u7b49\u7b49\uff09 Variation DeepFashion\u4e2d\u5b57\u6bb5\uff0c\u4f7f\u7528\u6574\u578b\u8868\u793a\uff0c\u4ee3\u8868\u7684\u662f\u4efb\u52a1\u7684\u59ff\u6001 \u7efc\u4e0a\u6240\u8ff0\uff0c\u9700\u8981\u63cf\u8ff0\u4e00\u4e2a\u5173\u952e\u70b9\u68c0\u6d4b\u6570\u636e\u96c6\uff0c\u6700\u57fa\u7840\u7684\u5b57\u6bb5\u5305\u62ecimage_id, keypoints, visible\u8fd9\u4e09\u4e2a\u5b57\u6bb5\uff0c\u6570\u636e\u96c6\u72ec\u7acb\u5b57\u6bb5\u7528\u6237\u81ea\u884c\u6dfb\u52a0\u4fee\u6539\u3002 2. \u6a21\u677f\u5c55\u793a \u6839\u636e\u4e0a\u8ff0\u7684\u8c03\u7814\u7ed3\u679c\uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\uff0c\u4e00\u4e2a\u6837\u672c\u6700\u91cd\u8981\u7684\u5c5e\u6027\u662f\u56fe\u7247\u7684id(\u6216\u8def\u5f84)\u3001\u6bcf\u4e2a\u76ee\u6807\u7684\u5173\u952e\u70b9\u6807\u6ce8\uff0c\u4ee5\u53ca\u5173\u952e\u70b9\u662f\u5426\u53ef\u89c1\u8fd9\u4e2a\u5c5e\u6027\uff0c\u8003\u8651\u5230\u6bcf\u5f20\u56fe\u7247\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u7269\u4f53\uff0c\u53ef\u80fd\u6709\u591a\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5d4c\u5957\u7ed3\u6784\u4f53KeyPointLocalObject\uff0c\u7528\u6765\u8868\u8ff0\u5355\u4e2a\u76ee\u6807\u7684\u5173\u952e\u70b9\u6807\u6ce8\u7684\u4fe1\u606f\uff08\u5373\u7c7b\u522b\u548c\u5173\u952e\u70b9\uff09\u3002\u5728\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u7ed3\u6784\u4f53\u7684$fields \u5c5e\u6027\u4e2d\u5b9a\u4e49\u4e86image\u548cannotations\u4e24\u4e2a\u5b57\u6bb5\uff0c\u5176\u4e2dannotations\u5b57\u6bb5\u5219\u4e3a\u591a\u4e2aKeyPointLocalObject\u7ed3\u6784\u4f53\u6784\u6210\u7684\u5217\u8868\uff08\u5217\u8868\u4e3a\u7a7a\u8868\u793a\u56fe\u7247\u4e2d\u6ca1\u6709\u5173\u952e\u70b9\u6807\u6ce8\u7684\u7269\u4f53\uff09\u3002\u6700\u540e\uff0c\u8003\u8651\u5230\u6a21\u677f\u9700\u8981\u5177\u6709\u7684\u4ee3\u8868\u6027\u548c\u53ef\u6269\u5c55\u6027\uff0c\u5728\u6240\u6709\u7684\u5c5e\u6027\u4e2d\uff0c\u6709\u4e00\u4e9b\u5c5e\u6027\u662f\u5fc5\u987b\u7684\uff0c\u5176\u4ed6\u4e00\u4e9b\u7279\u5b9a\u6570\u636e\u96c6\u4e2d\u7684\u72ec\u7acb\u5b57\u6bb5\u662f\u53ef\u9009\u7684\u3002\u57fa\u4e8e\u4e0a\u8ff0\u8003\u8651\uff0c\u6211\u4eec\u5236\u5b9a\u4e86\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a KeypointClassDom : $def : class_domain classes : - person - - ... KeypointDescDom : $def : class_domain classes : - \"left eye\" - - ... skeleton : - [ 14 , 16 ] - [ 5 , 6 ] - [ 10 , 12 ] - ... \u9996\u5148\u662f\u5b9a\u4e49\u4e86\u4efb\u52a1\u7c7b\u522b\u57df\u7684\u6587\u4ef6\u3002\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a \u5b9a\u4e49\u4e86\u76ee\u6807\u7c7b\u522b\u7684KeypointClassDom\u3002KeypointClassDom\u5b9a\u4e49\u4e86\u76ee\u6807\u7684\u7c7b\u522b\u57df\uff0c\u5373\u8fd9\u4e2a\u76ee\u6807\u5c5e\u4e8e\u54ea\u4e9b\u7c7b\u522b\uff0c\u6bd4\u5982person\u7b49\u3002 \u5b9a\u4e49\u4e86\u76ee\u6807\u5173\u952e\u70b9\u540d\u79f0\u4ee5\u53ca\u8fde\u63a5\u5173\u7cfb\u7684KeypointDescDom\u3002KeypointDescDom\u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u7684\u68c0\u6d4b\u4efb\u52a1\u4e2d\u4e00\u4e9b\u4e8b\u5148\u5b9a\u4e49\u597d\u7684\u57df\uff0c\u5305\u62ec\u5173\u952e\u70b9\u540d\u79f0\u548c\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfbskeleton\u3002 KeyPointLocalObject : $def : struct $params : [ 'cdom1' , 'cdom2' ] $fields : keypoint : Keypoint[dom=$cdom2] label : Label[dom=$cdom1] $optional : [ \"label\" ] KeyPointSample : $def : struct $params : [ 'cdom1' , 'cdom2' ] $fields : image : Image annotations : List[etype=LocalObjectEntry[cdom1=$cdom1, cdom2=$cdom2]] data : sample-type : ObjectKeypointSample[cdom1=KeypointClassDom, cdom2=KeypointDescDom] \u5176\u6b21\u662f\u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u68c0\u6d4bsample\u7684yaml\u6587\u4ef6\u3002\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a KeyPointSample\u3002KeyPointSample\u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u68c0\u6d4b\u4e2d\u7684\u4e00\u4e2asample\u5bf9\u8c61\uff0c\u5305\u62ec\u56fe\u50cf\u8def\u5f84image\u4ee5\u53ca\u6807\u6ce8\u4e86\u7684\u76ee\u6807\u5217\u8868annotations\u3002 KeyPointLocalObject\u3002KeyPointLocalObject\u5b9a\u4e49\u4e86\u4e00\u4e2a\u76ee\u6807\u7684\u6807\u6ce8\uff0c\u6807\u6ce8\u91cc\u5305\u62ec\uff1a \u76ee\u6807\u7684\u7c7b\u522blabel\uff0c\u6ce8\u610f\u8fd9\u4e2alabel\u6240\u5c5e\u7684\u57df\u662fKeypointClassDom\uff0c\u5373\u76ee\u6807\u6240\u5c5e\u7684\u7c7b\u522b\u3002 \u5173\u952e\u70b9\u6807\u6ce8keypoint\uff0c\u5373\u76ee\u6807\u7684\u5173\u952e\u70b9\u6807\u6ce8\uff0cKeypoint\u6807\u6ce8\u4f7f\u7528\u5217\u8868[x1,y1,v1,x2,y2,v2,.....]\u6765\u8868\u793a\uff0cx1,y1\u8868\u793a\u5173\u952e\u70b9\u7684\u5750\u6807\uff0cv1\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u7684\u53ef\u89c1\u6027\uff08\u5173\u952e\u70b9\u7684\u53ef\u89c1\u6027\u6807\u6ce8\u65b9\u9762\uff0c\u4e0d\u8bbe\u5b9a\u7edf\u4e00\u7684\u6807\u51c6\uff0c\u548c\u539f\u59cb\u6570\u636e\u96c6\u683c\u5f0f\u4fdd\u6301\u4e00\u81f4\uff0c\u8ba4\u4e3a<=0\u7684\u503c\u5373\u4ee3\u8868\u4e0d\u53ef\u89c1\u4e14\u65e0\u6807\u6ce8\uff0c>1\u4ee3\u8868\u6709\u6807\u6ce8\uff09\u3002keypoint\u6240\u5c5e\u7684\u57df\u662fKeypointDescDom\u5373\u63cf\u8ff0\u5173\u952e\u70b9\u7684domain\u3002 3. \u4f7f\u7528\u65b9\u6cd5 \u4e0b\u9762\u4ecb\u7ecd\u600e\u4e48\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u6a21\u677f\u6765\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u4ee5COCOKeypoint2017\u4e3a\u4f8b\uff0c\u63cf\u8ff0\u4e86sample\u7684yaml\u6587\u4ef6keypoint-coco2017.yaml\u5982\u4e0b\uff1a $dsdl-version : \"0.5.0\" KeyPointLocalObject : $def : struct $params : [ \"cdom0\" , \"cdom1\" ] $fields : iscrowd : Int area : Num category : Label[dom=$cdom0] bbox : BBox polygon : Polygon num_keypoints : Int ann_id : Int keypoints : Keypoint[dom=$cdom1] KeyPointSample : $def : struct $params : [ \"cdom0\" , \"cdom1\" ] $fields : media : Image height : Int width : Int image_id : Int annotations : List[etype=KeyPointLocalObject[cdom0=$cdom0, cdom1=$cdom1]] \u53ef\u4ee5\u770b\u51fa\uff0cCOCO2017Keypoints\u6570\u636e\u96c6\u7684\u6a21\u677f\u9664\u4e86\u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u4e2d\u7684\u5fc5\u987b\u5b57\u6bb5\u5916\uff08keypoints\uff0c visible\uff0c \u4ee5\u53caimage_id\uff09\uff0c\u8fd8\u6709\u8bb8\u591a\u6570\u636e\u96c6\u7279\u6709\u7684\u72ec\u7acb\u5b57\u6bb5 \u5728\u68c0\u6d4b\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff1a - $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c\u3002 ObjectKeypointEntry: \u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u6807\u6ce8\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u3002 $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain\u3002 $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: is_crowd\uff1a \u662f\u5bf9\u4e00\u4e2a\u7269\u4f53\u7684\u6807\u6ce8\u8fd8\u662f\u591a\u4e2a\u7269\u4f53\u7684\u6807\u6ce8\u3002 area\uff1a \u76ee\u6807\u5b9e\u4f8b\u7684\u50cf\u7d20\u9762\u79ef\u3002 category\uff1a \u7269\u4f53\u6240\u5c5e\u7684\u7c7b\u522b\u3002 bbox\uff1a \u76ee\u6807\u7684\u76ee\u6807\u6846\u6807\u6ce8\uff0c\u7c7b\u578b\u4e3aBBox\u3002 polygon\uff1a \u76ee\u6807\u7684\u5b9e\u4f8b\u5206\u5272\u6807\u6ce8\uff0c\u7c7b\u578b\u4e3aPolygon\u3002 num_keypoints\uff1a \u4ee3\u8868\u8fd9\u4e2a\u5bf9\u8c61\u5173\u952e\u70b9\u7684\u4e2a\u6570\u3002 ann_id\uff1a \u5b9e\u4f8b\u6807\u6ce8\u5728\u6574\u4e2a\u6570\u636e\u96c6\u4e2d\u7684\u7f16\u53f7\u3002 keypoints\uff1a \u5173\u952e\u70b9\u6807\u6ce8\u7684\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a[x,y,z]\u7684\u4e09\u7ef4\u5750\u6807\uff0cx\u548cy\u8868\u793a\u5173\u952e\u70b9\u4f4d\u7f6e\uff0cz\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u7684\u53ef\u89c1\u60c5\u51b5\u3002 KeypointDetectionSample: \u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u3002 $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain\u3002 $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: media \u56fe\u7247\u7684\u8def\u5f84\u3002 height: \u56fe\u50cf\u7684\u9ad8\u3002 width: \u56fe\u50cf\u7684\u5bbd\u3002 image_id: \u56fe\u50cf\u5728\u6570\u636e\u96c6\u4e2d\u7684\u7f16\u53f7\u3002 annotations \u6807\u6ce8\u4fe1\u606f\uff0c\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u4e2d\uff0c\u4e3a\u524d\u9762\u7684ObjectKeypointEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868\u3002 \u63cf\u8ff0\u4e86\u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u7684class-dom.yaml\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version : \"0.5.0\" COCO2017KeypointsClassDom : $def : class_domain classes : - person COCO2017KeypointsDescDom[COCO2017KeypointsClassDom] : $def : class_domain classes : - nose[person] - left_eye[person] - right_eye[person] - ... skeleton : - [ 16 , 14 ] - [ 14 , 12 ] - [ 17 , 15 ] - ... \u4e0a\u9762\u7684\u6587\u4ef6\u4e2d\u7ed9\u51fa\u4e86\u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u91cd\u7c7b\u522b\u57df\u7684\u5b9a\u4e49\uff0c\u5177\u4f53\u5305\u542b\u4e0b\u5217\u5b57\u6bb5\uff1a COCO2017KeypointsClassDom\uff1aCOCO2017Keypoint\u5173\u952e\u70b9\u68c0\u6d4b\u7684\u7c7b\u522b\u57df\uff0c\u53ea\u5305\u542b\u4e86\u4eba\u8fd9\u4e00\u4e2a\u7c7b\u522b \u3002 COCO2017KeypointsDescDom\uff1aCOCO2017Keypoint\u5173\u952e\u70b9\u68c0\u6d4b\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u4fe1\u606f\u57df\uff0c\u7ee7\u627f\u4e86COCO2017KeypointsClassDom\uff0c\u5305\u542b\u4e86\u6570\u636e\u96c6\u4e2d\u5bf9person\u7684\u63cf\u8ff0\u4fe1\u606f\uff0c\u5305\u62ec\u5173\u952e\u70b9\u540d\u79f0\u4ee5\u53ca\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\u3002","title":"\u5173\u952e\u70b9\u68c0\u6d4b"},{"location":"dsdl_template/cv/cv_keypoint_detection/#_1","text":"","title":"\u5173\u952e\u70b9\u68c0\u6d4b\uff08\u59ff\u6001\u4f30\u8ba1\uff09\u4efb\u52a1"},{"location":"dsdl_template/cv/cv_keypoint_detection/#1","text":"","title":"1. \u4efb\u52a1\u8c03\u7814"},{"location":"dsdl_template/cv/cv_keypoint_detection/#11","text":"\u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u76ee\u6807\u662f\u6807\u51fa\u7269\u4f53\u7684\u5173\u952e\u90e8\u4f4d\uff0c\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u76ee\u6807\u662f\u5bf9\u7269\u4f53\uff08\u901a\u5e38\u662f\u4eba\u548c\u52a8\u7269\uff09\u7684\u59ff\u6001\uff08\u5373\u5173\u952e\u70b9\u548c\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\uff09\u8fdb\u884c\u4f30\u8ba1\u3002\u5173\u952e\u70b9\u68c0\u6d4b\u548c\u59ff\u6001\u4f30\u8ba1\u901a\u5e38\u5408\u5728\u4e00\u8d77\u8ba8\u8bba\uff0c\u539f\u56e0\u662f\u5bf9\u4e8e\u4eba\u4f53\u548c\u52a8\u7269\u7b49\u5176\u8eab\u4f53\u90e8\u4f4d\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\u662f\u56fa\u5b9a\u7684\uff0c\u5f97\u5230\u4e86\u4eba\u4f53\u5173\u952e\u70b9\u7684\u68c0\u6d4b\u7ed3\u679c\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u59ff\u6001\u4f30\u8ba1\u7684\u7ed3\u679c(\u662f\u5426\u6709\u59ff\u6001\u4f30\u8ba1\u53d6\u51b3\u4e8e\u662f\u5426\u6709\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb)\u3002 \u56fe\u7247\u53d6\u81ea\uff1aDeep High-Resolution Representation Learning for Human Pose Estimation, CVPR19","title":"1.1 \u4efb\u52a1\u5b9a\u4e49"},{"location":"dsdl_template/cv/cv_keypoint_detection/#12","text":"\u8bc4\u4ef7\u6307\u6807\u4e00\u822c\u91c7\u7528COCO\u683c\u5f0f\u7684mAP\u3002mAP\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e0eCOCO\u76ee\u6807\u68c0\u6d4b\u4e2d\u7684mAP\u8ba1\u7b97\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u5bf9\u4e8e\u5173\u952e\u70b9\u68c0\u6d4b\u65b9\u6cd5\u68c0\u6d4b\u51fa\u7684\u6240\u6709\u7269\u4f53\u4ee5\u53ca\u7269\u4f53\u4e2d\u7684\u5173\u952e\u70b9\uff0c\u9996\u5148\u4f7f\u7528\u5173\u952e\u70b9\u4e2d\u7684OKS\u5ea6\u91cf\u6307\u6807\u5bf9\u6240\u6709\u68c0\u6d4b\u51fa\u7684\u7269\u4f53\u8fdb\u884c\u5206\u7c7b\uff0c\u5206\u4e3aTP\u3001FP\u3001FN\u51e0\u7c7b\uff0c\u5212\u5206\u5b8c\u4e4b\u540e\uff0c\u901a\u8fc7\u6539\u53d8score\u7684\u9608\u503c\u8ba1\u7b97P-R\u66f2\u7ebf\uff0cP-R\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\u5373\u4e3aAP\u7684\u503c\u3002 \u4e0e\u76ee\u6807\u68c0\u6d4bmAP\u8ba1\u7b97\u65b9\u5f0f\u6700\u5927\u7684\u4e0d\u540c\u5728\u4e8e\uff0c\u76ee\u6807\u68c0\u6d4b\u4e2d\u8861\u91cf\u5b9e\u4f8b\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\u65f6\u4f7f\u7528\u7684\u662f\u68c0\u6d4b\u6846\u4e4b\u95f4\u7684IOU\uff0c\u800c\u5728\u5173\u952e\u70b9\u68c0\u6d4b\u4e2d\uff0c\u8861\u91cf\u5b9e\u4f8b\u76f8\u4f3c\u5ea6\u4f7f\u7528\u7684\u662f\u7269\u4f53\u5173\u952e\u70b9\u4e4b\u95f4\u7684OKS\u8ddd\u79bb\uff0cOKS\u7684\u8ba1\u7b97\u65b9\u5f0f\u5982\u4e0b\uff1a \u56fe\u7247\u53d6\u81ea\uff1ahttps://cocodataset.org/#keypoints-eval OKS\u4ee3\u8868\u7684\u662f\u4e00\u4e2a\u7269\u4f53\u5176\u6240\u6709\u5173\u952e\u70b9\u68c0\u6d4b\u7ed3\u679c\uff08prediction\uff09\u548c\u771f\u5b9e\u6807\u6ce8\uff08ground truth\uff09\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0cdi\u4ee3\u8868\u7b2ci\u4e2a\u68c0\u6d4b\u51fa\u7684\u5173\u952e\u70b9\u548c\u771f\u5b9e\u6807\u6ce8\u7684\u6b27\u6c0f\u8ddd\u79bb\uff0cs\u662f\u7269\u4f53\u7684\u50cf\u7d20\u9762\u79ef\uff0ck\u4ee3\u8868\u7b2ci\u79cd\u5173\u952e\u70b9\uff08\u4f8b\u5982\u9f3b\u5b50\uff09\u7684\u5f52\u4e00\u5316\u56e0\u5b50\uff0c\u662f\u5bf9\u5df2\u6709\u6570\u636e\u96c6\u4e2d\u6240\u6709\u7269\u4f53\u7684\u540c\u79cd\u5173\u952e\u70b9\uff08\u4f8b\u5982\u6570\u636e\u96c6\u79cd\u6240\u6709\u4eba\u7684\u9f3b\u5b50\u5173\u952e\u70b9\uff09\u8ba1\u7b97\u5f97\u5230\u7684\uff0c\u503c\u8d8a\u5927\uff0c\u4ee3\u8868\u6570\u636e\u96c6\u4e2d\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u8d8a\u5dee\u5373\u8fd9\u4e2a\u5173\u952e\u70b9\u8d8a\u96be\u68c0\u6d4b\uff0c\u503c\u8d8a\u5c0f\u4ee3\u8868\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u8d8a\u597d\uff0c\u5373\u8fd9\u4e2a\u5173\u952e\u70b9\u68c0\u6d4b\u96be\u5ea6\u8f83\u5c0f\u3002\u6709\u4e86OKS\u8ddd\u79bb\u4e4b\u540e\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230\u4e0d\u540cOKS\u9608\u503c\u4e0b\u7684AP\u6307\u6807\u3002COCO\u7684\u5173\u952e\u70b9\u68c0\u6d4b\u6307\u6807\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e0e\u76ee\u6807\u68c0\u6d4b\u7c7b\u4f3c\u5b9a\u4e49\uff1a \u56fe\u7247\u53d6\u81ea\uff1ahttps://cocodataset.org/#keypoints-eval","title":"1.2 \u8bc4\u4ef7\u6307\u6807"},{"location":"dsdl_template/cv/cv_keypoint_detection/#13","text":"\u6839\u636e\u76ee\u6807\u7c7b\u578b\u7684\u4e0d\u540c\uff0c\u59ff\u6001\u4f30\u8ba1\uff08\u5173\u952e\u70b9\u68c0\u6d4b\uff09\u6570\u636e\u96c6\u7684\u6807\u6ce8\u5f62\u5f0f\u4e5f\u4e0d\u540c\u3002\u59ff\u6001\u4f30\u8ba1\uff08\u5173\u952e\u70b9\u68c0\u6d4b\uff09\u6570\u636e\u96c6\u6839\u636e\u76ee\u6807\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff1a \u76ee\u6807\u7c7b\u578b \u4efb\u52a1\u7c7b\u578b \u4ee3\u8868\u6570\u636e\u96c6 \u4eba\u4f53 \u4eba\u4f53\u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b (human body keypoint) COCO, MPII, MPII-TRB, AI Challenger, CrowdPose, OCHuman, MHP \u4eba\u4f53(\u5168\u8eab) \u4eba\u4f53(\u5168\u8eab)\u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b (human wholebody keypoint) COCO WholeBody, Halpe \u4eba\u8138 \u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b (face keypoint) 300W, WFLW, AFLW, COFW, COCO-WholeBody-Face \u624b \u624b\u90e8\u5173\u952e\u70b9\u68c0\u6d4b (hand keypoint) OneHand-10K, FreiHand, CMU Panoptic HandDB, InterHand2.6M, RHD, COCO-WholeBody-Hand \u8863\u7269 \u8863\u7269\u5173\u952e\u70b9\u68c0\u6d4b (fashion lanmark) DeepFashion \u52a8\u7269 \u52a8\u7269\u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b (animal keypoint) Animal-Pose, AP-10K, Horse-10, MacaquePose, Vinegar Fly, Desert Locust, Gr\u00e9vy\u2019s Zebra, ATRW \u6211\u4eec\u8c03\u7814\u4e8610\u4e2a\u4e3b\u6d41\u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b\u6570\u636e\u96c6\uff0c\u6db5\u76d6\u4e86\u6240\u6709\u4ee5\u4e0a\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u96c6\u3002\u5b8c\u6574\u7684\u5b57\u6bb5\u8c03\u7814\u7ed3\u679c\u5982\u4e0b\u8868\u6240\u793a\uff1a \u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b\u6570\u636e\u96c6 image_id height width instance_id category_id is_crowd area num_keypoints bbox segmentation keypoints visible center categories super_categories keypoint_names skeleton other COCO Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y MPII Y Y Y Y scale, person, torsoangle AIC Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y CrowdPose Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y crowd index COCO-WholeBody Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y face valid/kpts/bbox, right hand valid/kpts/bbox, left hand valid/kpts/bbox, foot valid/kpts Halpe Y Y Y Y Y Y Y Y Y Y Y Hoi 300W Y Y Y Y Y Y Y Y Y Y Y Y Y Y OneHand10K Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y DeepFashion Y Y Y Y Y Y Y variation AnimalPose Y Y Y Y Y Y Y Y Y Y \u7ecf\u8fc7\u6574\u7406\uff0c\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u7684\u5b57\u6bb5\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\uff1a\u4e00\u79cd\u662f\u4e0d\u540c\u6570\u636e\u96c6\u5171\u6709\u7684\u5171\u4eab\u5b57\u6bb5\uff0c\u4e00\u79cd\u662f\u4e0d\u540c\u6570\u636e\u96c6\u4e0d\u540c\u7684\u72ec\u7acb\u5b57\u6bb5\u3002\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u7684\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a keypoints \u5355\u4e2a\u76ee\u6807\u7684\u5173\u952e\u70b9\u6807\u6ce8\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u5750\u6807\u70b9\uff0c\u5750\u6807\u70b9\u7528[x, y]\u6216\u8005[x,y,vis]\u8868\u793a\uff08vis\u4ee3\u8868\u8fd9\u4e2a\u5173\u952e\u70b9\u662f\u5426\u53ef\u89c1\uff09 visible \u8868\u793a\u67d0\u4e2a\u5173\u952e\u70b9\u662f\u5426\u53ef\u89c1\uff0c\u4f7f\u7528\u6574\u6570\u6765\u6807\u8bc6 \u72ec\u7acb\u5b57\u6bb5 height/width \u56fe\u50cf\u7684\u539f\u59cb\u5c3a\u5bf8\uff08\u957f\u548c\u5bbd\uff09 instance_id \u8fd9\u4e2a\u76ee\u6807\u7684id\uff0c\u5b9a\u4f4d\u5230\u67d0\u4e2a\u5177\u4f53\u7684\u76ee\u6807 category_id \u7c7b\u522bid\uff0c\u8868\u793a\u8fd9\u4e2a\u76ee\u6807\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u522b is_crowd \u6807\u6ce8\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\u8fd8\u662f\u4e00\u7ec4\u5bf9\u8c61\uff0c\u4f7f\u75280\u6216\u80051\u6765\u6807\u8bc6\uff0c\u5982\u679c\u662f\u4e00\u7ec4\u5bf9\u8c61\u4e3a1\uff0c\u5426\u5219\u4e3a0\uff0c area \u8fd9\u4e2a\u76ee\u6807\u6240\u5360\u7684\u9762\u79ef\uff0c\u901a\u5e38\u4f7f\u7528\u6240\u5360\u50cf\u7d20\u4e2a\u6570\u6765\u8868\u793a num_keypoints \u5173\u952e\u70b9\u4e2a\u6570 bbox \u76ee\u6807\u7684\u77e9\u5f62\u6846\u6807\u6ce8\uff0c\u901a\u5e38\u4f7f\u7528[x,y,w,h]\u6765\u8868\u793a segmentation \u76ee\u6807\u7684\u50cf\u7d20\u7ea7\u5206\u5272\u6807\u6ce8\uff0c\u901a\u5e38\u4f7f\u7528\u4e00\u7ec4[x,y]\u5750\u6807\u6765\u8868\u793a center \u76ee\u6807\u7684\u4e2d\u5fc3\u70b9\u5750\u6807\uff0c\u4f7f\u7528[x,y]\u6765\u8868\u793a\uff0c\u901a\u5e38\u4ee3\u8868\u7684\u662f\u76ee\u6807\u77e9\u5f62\u6846\u7684\u4e2d\u5fc3\u70b9\u5750\u6807 categories \u8868\u793a\u6570\u636e\u96c6\u4e2d\u6240\u5305\u542b\u7684\u7c7b\u522b\u4ee5\u53ca\u7c7b\u522b\u7f16\u53f7 super_categories \u6570\u636e\u96c6\u4e2d\u7c7b\u522b\u7684\u7236\u7c7b keypoint_names \u5173\u952e\u70b9\u7684\u540d\u79f0 skeleton \u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb scale MPII\u4e2d\u5b57\u6bb5\uff0c\u8868\u793a\u76ee\u6807\u6846\u7684\u7f29\u653e\u6bd4\u4f8b\uff0cMPII\u4e2d\u7531\u4e8e\u76ee\u6807\u6846\u662f\u6b63\u65b9\u5f62\uff0cscale*200px\u53ef\u4ee5\u8fd8\u539f\u5f97\u5230\u76ee\u6807\u6846\u7684\u8fb9\u957f person MPII\u4e2d\u5b57\u6bb5\uff0c\u4ee3\u8868\u56fe\u7247\u4e2d\u4eba\u7684\u4e2a\u6570 torsoangle MPII\u4e2d\u5b57\u6bb5\uff0c\u4ee3\u8868\u4eba\u4f53\u8eaf\u5e72\u7684\u504f\u8f6c\u89d2\u5ea6 face/hand/foot valid COCO-WholeBody\u4e2d\u5b57\u6bb5\uff0c\u4ee3\u8868\u662f\u5426\u6709\u8138/\u624b/\u811a\u7684\u6807\u6ce8\uff0c\u503c\u4e3a0\u6216\u80051 face/hand/foot kpts COCO-WholeBody\u4e2d\u5b57\u6bb5\uff0c\u8868\u793a\u8138/\u624b/\u811a\u7684\u5173\u952e\u70b9\u6807\u6ce8\uff0c\u4e3a\u4e00\u7ec4\u5750\u6807\u70b9 face/hand bbox COCO-WholeBody\u4e2d\u5b57\u6bb5\uff0c\u8868\u793a\u8138/\u624b\u7684\u77e9\u5f62\u6846\u6807\u6ce8\uff0c\u8868\u793a\u4e3a\u77e9\u5f62\u6846[x,y,h,w] Hoi Halpe\u4e2d\u5b57\u6bb5\uff0c\u4f7f\u7528\u6574\u578b\u8868\u793a\uff0c\u4ee3\u8868\u7684\u662f\u4eba\u4f53\u548c\u5176\u4ed6\u7269\u4f53\u53d1\u751f\u4ea4\u4e92\u7684\u79cd\u7c7b\uff08\u4f8b\u59820\u4ee3\u8868\u62ff\u8d77\uff0c1\u4ee3\u8868\u5750\uff0c\u7b49\u7b49\uff09 Variation DeepFashion\u4e2d\u5b57\u6bb5\uff0c\u4f7f\u7528\u6574\u578b\u8868\u793a\uff0c\u4ee3\u8868\u7684\u662f\u4efb\u52a1\u7684\u59ff\u6001 \u7efc\u4e0a\u6240\u8ff0\uff0c\u9700\u8981\u63cf\u8ff0\u4e00\u4e2a\u5173\u952e\u70b9\u68c0\u6d4b\u6570\u636e\u96c6\uff0c\u6700\u57fa\u7840\u7684\u5b57\u6bb5\u5305\u62ecimage_id, keypoints, visible\u8fd9\u4e09\u4e2a\u5b57\u6bb5\uff0c\u6570\u636e\u96c6\u72ec\u7acb\u5b57\u6bb5\u7528\u6237\u81ea\u884c\u6dfb\u52a0\u4fee\u6539\u3002","title":"1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814"},{"location":"dsdl_template/cv/cv_keypoint_detection/#2","text":"\u6839\u636e\u4e0a\u8ff0\u7684\u8c03\u7814\u7ed3\u679c\uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\uff0c\u4e00\u4e2a\u6837\u672c\u6700\u91cd\u8981\u7684\u5c5e\u6027\u662f\u56fe\u7247\u7684id(\u6216\u8def\u5f84)\u3001\u6bcf\u4e2a\u76ee\u6807\u7684\u5173\u952e\u70b9\u6807\u6ce8\uff0c\u4ee5\u53ca\u5173\u952e\u70b9\u662f\u5426\u53ef\u89c1\u8fd9\u4e2a\u5c5e\u6027\uff0c\u8003\u8651\u5230\u6bcf\u5f20\u56fe\u7247\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u7269\u4f53\uff0c\u53ef\u80fd\u6709\u591a\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5d4c\u5957\u7ed3\u6784\u4f53KeyPointLocalObject\uff0c\u7528\u6765\u8868\u8ff0\u5355\u4e2a\u76ee\u6807\u7684\u5173\u952e\u70b9\u6807\u6ce8\u7684\u4fe1\u606f\uff08\u5373\u7c7b\u522b\u548c\u5173\u952e\u70b9\uff09\u3002\u5728\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u7ed3\u6784\u4f53\u7684$fields \u5c5e\u6027\u4e2d\u5b9a\u4e49\u4e86image\u548cannotations\u4e24\u4e2a\u5b57\u6bb5\uff0c\u5176\u4e2dannotations\u5b57\u6bb5\u5219\u4e3a\u591a\u4e2aKeyPointLocalObject\u7ed3\u6784\u4f53\u6784\u6210\u7684\u5217\u8868\uff08\u5217\u8868\u4e3a\u7a7a\u8868\u793a\u56fe\u7247\u4e2d\u6ca1\u6709\u5173\u952e\u70b9\u6807\u6ce8\u7684\u7269\u4f53\uff09\u3002\u6700\u540e\uff0c\u8003\u8651\u5230\u6a21\u677f\u9700\u8981\u5177\u6709\u7684\u4ee3\u8868\u6027\u548c\u53ef\u6269\u5c55\u6027\uff0c\u5728\u6240\u6709\u7684\u5c5e\u6027\u4e2d\uff0c\u6709\u4e00\u4e9b\u5c5e\u6027\u662f\u5fc5\u987b\u7684\uff0c\u5176\u4ed6\u4e00\u4e9b\u7279\u5b9a\u6570\u636e\u96c6\u4e2d\u7684\u72ec\u7acb\u5b57\u6bb5\u662f\u53ef\u9009\u7684\u3002\u57fa\u4e8e\u4e0a\u8ff0\u8003\u8651\uff0c\u6211\u4eec\u5236\u5b9a\u4e86\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a KeypointClassDom : $def : class_domain classes : - person - - ... KeypointDescDom : $def : class_domain classes : - \"left eye\" - - ... skeleton : - [ 14 , 16 ] - [ 5 , 6 ] - [ 10 , 12 ] - ... \u9996\u5148\u662f\u5b9a\u4e49\u4e86\u4efb\u52a1\u7c7b\u522b\u57df\u7684\u6587\u4ef6\u3002\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a \u5b9a\u4e49\u4e86\u76ee\u6807\u7c7b\u522b\u7684KeypointClassDom\u3002KeypointClassDom\u5b9a\u4e49\u4e86\u76ee\u6807\u7684\u7c7b\u522b\u57df\uff0c\u5373\u8fd9\u4e2a\u76ee\u6807\u5c5e\u4e8e\u54ea\u4e9b\u7c7b\u522b\uff0c\u6bd4\u5982person\u7b49\u3002 \u5b9a\u4e49\u4e86\u76ee\u6807\u5173\u952e\u70b9\u540d\u79f0\u4ee5\u53ca\u8fde\u63a5\u5173\u7cfb\u7684KeypointDescDom\u3002KeypointDescDom\u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u7684\u68c0\u6d4b\u4efb\u52a1\u4e2d\u4e00\u4e9b\u4e8b\u5148\u5b9a\u4e49\u597d\u7684\u57df\uff0c\u5305\u62ec\u5173\u952e\u70b9\u540d\u79f0\u548c\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfbskeleton\u3002 KeyPointLocalObject : $def : struct $params : [ 'cdom1' , 'cdom2' ] $fields : keypoint : Keypoint[dom=$cdom2] label : Label[dom=$cdom1] $optional : [ \"label\" ] KeyPointSample : $def : struct $params : [ 'cdom1' , 'cdom2' ] $fields : image : Image annotations : List[etype=LocalObjectEntry[cdom1=$cdom1, cdom2=$cdom2]] data : sample-type : ObjectKeypointSample[cdom1=KeypointClassDom, cdom2=KeypointDescDom] \u5176\u6b21\u662f\u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u68c0\u6d4bsample\u7684yaml\u6587\u4ef6\u3002\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a KeyPointSample\u3002KeyPointSample\u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u68c0\u6d4b\u4e2d\u7684\u4e00\u4e2asample\u5bf9\u8c61\uff0c\u5305\u62ec\u56fe\u50cf\u8def\u5f84image\u4ee5\u53ca\u6807\u6ce8\u4e86\u7684\u76ee\u6807\u5217\u8868annotations\u3002 KeyPointLocalObject\u3002KeyPointLocalObject\u5b9a\u4e49\u4e86\u4e00\u4e2a\u76ee\u6807\u7684\u6807\u6ce8\uff0c\u6807\u6ce8\u91cc\u5305\u62ec\uff1a \u76ee\u6807\u7684\u7c7b\u522blabel\uff0c\u6ce8\u610f\u8fd9\u4e2alabel\u6240\u5c5e\u7684\u57df\u662fKeypointClassDom\uff0c\u5373\u76ee\u6807\u6240\u5c5e\u7684\u7c7b\u522b\u3002 \u5173\u952e\u70b9\u6807\u6ce8keypoint\uff0c\u5373\u76ee\u6807\u7684\u5173\u952e\u70b9\u6807\u6ce8\uff0cKeypoint\u6807\u6ce8\u4f7f\u7528\u5217\u8868[x1,y1,v1,x2,y2,v2,.....]\u6765\u8868\u793a\uff0cx1,y1\u8868\u793a\u5173\u952e\u70b9\u7684\u5750\u6807\uff0cv1\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u7684\u53ef\u89c1\u6027\uff08\u5173\u952e\u70b9\u7684\u53ef\u89c1\u6027\u6807\u6ce8\u65b9\u9762\uff0c\u4e0d\u8bbe\u5b9a\u7edf\u4e00\u7684\u6807\u51c6\uff0c\u548c\u539f\u59cb\u6570\u636e\u96c6\u683c\u5f0f\u4fdd\u6301\u4e00\u81f4\uff0c\u8ba4\u4e3a<=0\u7684\u503c\u5373\u4ee3\u8868\u4e0d\u53ef\u89c1\u4e14\u65e0\u6807\u6ce8\uff0c>1\u4ee3\u8868\u6709\u6807\u6ce8\uff09\u3002keypoint\u6240\u5c5e\u7684\u57df\u662fKeypointDescDom\u5373\u63cf\u8ff0\u5173\u952e\u70b9\u7684domain\u3002","title":"2. \u6a21\u677f\u5c55\u793a"},{"location":"dsdl_template/cv/cv_keypoint_detection/#3","text":"\u4e0b\u9762\u4ecb\u7ecd\u600e\u4e48\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u6a21\u677f\u6765\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u4ee5COCOKeypoint2017\u4e3a\u4f8b\uff0c\u63cf\u8ff0\u4e86sample\u7684yaml\u6587\u4ef6keypoint-coco2017.yaml\u5982\u4e0b\uff1a $dsdl-version : \"0.5.0\" KeyPointLocalObject : $def : struct $params : [ \"cdom0\" , \"cdom1\" ] $fields : iscrowd : Int area : Num category : Label[dom=$cdom0] bbox : BBox polygon : Polygon num_keypoints : Int ann_id : Int keypoints : Keypoint[dom=$cdom1] KeyPointSample : $def : struct $params : [ \"cdom0\" , \"cdom1\" ] $fields : media : Image height : Int width : Int image_id : Int annotations : List[etype=KeyPointLocalObject[cdom0=$cdom0, cdom1=$cdom1]] \u53ef\u4ee5\u770b\u51fa\uff0cCOCO2017Keypoints\u6570\u636e\u96c6\u7684\u6a21\u677f\u9664\u4e86\u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u4e2d\u7684\u5fc5\u987b\u5b57\u6bb5\u5916\uff08keypoints\uff0c visible\uff0c \u4ee5\u53caimage_id\uff09\uff0c\u8fd8\u6709\u8bb8\u591a\u6570\u636e\u96c6\u7279\u6709\u7684\u72ec\u7acb\u5b57\u6bb5 \u5728\u68c0\u6d4b\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff1a - $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c\u3002 ObjectKeypointEntry: \u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u6807\u6ce8\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u3002 $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain\u3002 $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: is_crowd\uff1a \u662f\u5bf9\u4e00\u4e2a\u7269\u4f53\u7684\u6807\u6ce8\u8fd8\u662f\u591a\u4e2a\u7269\u4f53\u7684\u6807\u6ce8\u3002 area\uff1a \u76ee\u6807\u5b9e\u4f8b\u7684\u50cf\u7d20\u9762\u79ef\u3002 category\uff1a \u7269\u4f53\u6240\u5c5e\u7684\u7c7b\u522b\u3002 bbox\uff1a \u76ee\u6807\u7684\u76ee\u6807\u6846\u6807\u6ce8\uff0c\u7c7b\u578b\u4e3aBBox\u3002 polygon\uff1a \u76ee\u6807\u7684\u5b9e\u4f8b\u5206\u5272\u6807\u6ce8\uff0c\u7c7b\u578b\u4e3aPolygon\u3002 num_keypoints\uff1a \u4ee3\u8868\u8fd9\u4e2a\u5bf9\u8c61\u5173\u952e\u70b9\u7684\u4e2a\u6570\u3002 ann_id\uff1a \u5b9e\u4f8b\u6807\u6ce8\u5728\u6574\u4e2a\u6570\u636e\u96c6\u4e2d\u7684\u7f16\u53f7\u3002 keypoints\uff1a \u5173\u952e\u70b9\u6807\u6ce8\u7684\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a[x,y,z]\u7684\u4e09\u7ef4\u5750\u6807\uff0cx\u548cy\u8868\u793a\u5173\u952e\u70b9\u4f4d\u7f6e\uff0cz\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u7684\u53ef\u89c1\u60c5\u51b5\u3002 KeypointDetectionSample: \u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u3002 $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain\u3002 $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: media \u56fe\u7247\u7684\u8def\u5f84\u3002 height: \u56fe\u50cf\u7684\u9ad8\u3002 width: \u56fe\u50cf\u7684\u5bbd\u3002 image_id: \u56fe\u50cf\u5728\u6570\u636e\u96c6\u4e2d\u7684\u7f16\u53f7\u3002 annotations \u6807\u6ce8\u4fe1\u606f\uff0c\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u4e2d\uff0c\u4e3a\u524d\u9762\u7684ObjectKeypointEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868\u3002 \u63cf\u8ff0\u4e86\u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u7684class-dom.yaml\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version : \"0.5.0\" COCO2017KeypointsClassDom : $def : class_domain classes : - person COCO2017KeypointsDescDom[COCO2017KeypointsClassDom] : $def : class_domain classes : - nose[person] - left_eye[person] - right_eye[person] - ... skeleton : - [ 16 , 14 ] - [ 14 , 12 ] - [ 17 , 15 ] - ... \u4e0a\u9762\u7684\u6587\u4ef6\u4e2d\u7ed9\u51fa\u4e86\u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u91cd\u7c7b\u522b\u57df\u7684\u5b9a\u4e49\uff0c\u5177\u4f53\u5305\u542b\u4e0b\u5217\u5b57\u6bb5\uff1a COCO2017KeypointsClassDom\uff1aCOCO2017Keypoint\u5173\u952e\u70b9\u68c0\u6d4b\u7684\u7c7b\u522b\u57df\uff0c\u53ea\u5305\u542b\u4e86\u4eba\u8fd9\u4e00\u4e2a\u7c7b\u522b \u3002 COCO2017KeypointsDescDom\uff1aCOCO2017Keypoint\u5173\u952e\u70b9\u68c0\u6d4b\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u4fe1\u606f\u57df\uff0c\u7ee7\u627f\u4e86COCO2017KeypointsClassDom\uff0c\u5305\u542b\u4e86\u6570\u636e\u96c6\u4e2d\u5bf9person\u7684\u63cf\u8ff0\u4fe1\u606f\uff0c\u5305\u62ec\u5173\u952e\u70b9\u540d\u79f0\u4ee5\u53ca\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\u3002","title":"3. \u4f7f\u7528\u65b9\u6cd5"},{"location":"dsdl_template/cv/cv_object_tracking/","text":"\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1 \u6211\u4eec\u901a\u8fc7\u5bf9\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u8fdb\u884c\u8c03\u7814\uff0c\u5e76\u603b\u7ed3\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\uff0c\u4ece\u800c\u5236\u5b9a\u51fa\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1DSDL\u6a21\u677f\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u4f7f\u7528\u3002 1. \u4efb\u52a1\u8c03\u7814 1.1 \u4efb\u52a1\u5b9a\u4e49 \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u662f\u6307\u5728\u56fe\u50cf\u4e2d\u68c0\u6d4b\u51fa\u7269\u4f53\u7684\u4f4d\u7f6e\uff0c\u5e76\u8bc6\u522b\u51fa\u5177\u4f53\u7684\u5b9e\u4f8b\uff0c\u901a\u8fc7\u4e00\u4e2a\u7279\u6b8a\u8bc6\u522bID\u5bf9\u5176\u8fdb\u884c\u8ddf\u8e2a\u3002\u5206\u4e3a\u5355\u76ee\u6807\u8ddf\u8e2a\u548c\u591a\u76ee\u6807\u8ddf\u8e2a\uff0c\u6709\u7684\u6570\u636e\u96c6\u8fd8\u4f1a\u5bf9\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u7c7b\u522b\u8fdb\u884c\u6807\u6ce8\u3002\u5176\u793a\u610f\u56fe\u5982\u4e0b\u6240\u793a\uff1a \u56fe1 GOT10k \u5355\u76ee\u6807\u8ddf\u8e2a \u56fe2 MOT17 \u591a\u76ee\u6807\u8ddf\u8e2a 1.2 \u8bc4\u4ef7\u6307\u6807 \u6700\u5e38\u7528\u7684\u5c31\u662f\u4e24\u4e2a\uff1a\u7cbe\u786e\u5ea6\u548c\u6210\u529f\u7387\uff08\u6bd4\u5982TrackingNet\u3001UAV123\u3001Nfs\u3001OTB2015\u3001LaSOT\u3001TLP\uff09\u3002 \u6210\u529f\u7387\uff08Success Rate/IOU Rate/AOS\uff09 \u6210\u529f\u503c ( success )\u8ba1\u7b97\u662f\u8ba1\u7b97\u9884\u6d4b\u6846\u4e0e\u6807\u6ce8\u6846\u7684\u533a\u57df\u5185\u50cf\u7d20\u7684\u4ea4\u5e76\u6bd4\u3002\u6210\u529f\u7387 ( Success Rate )\u5373\u5728success\u4e00\u5b9a\u9608\u503c\u4e4b\u4e0b\uff0c\u6210\u529f\u4e2a\u6570\u7684\u6bd4\u4f8b\u3002\u5728\u4e0d\u540c\u7684\u9608\u503c\u4e0b\uff0c\u6210\u529f\u7387\u4e5f\u4f1a\u76f8\u5e94\u53d8\u5316\uff0c\u4ee5\u9608\u503c\u4e3ax\uff0c\u6210\u529f\u7387\u4e3ay\uff0c\u53ef\u4f5c\u51fa\u6210\u529f\u7387\u66f2\u7ebf ( Success rate plot) \u3002 AUC (Area under curve)\u5206\u6570\u5373\u4e3a\u6210\u529f\u7387\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\u3002\u6709\u7684\u8bba\u6587\u4e5f\u4f1a\u76f4\u63a5\u6307\u5b9a\u9608\u503c\uff0c\u7531\u4e8e\u4e2d\u503c\u5b9a\u7406\uff0c\u6700\u5e38\u7528\u7684\u9608\u503c\u662f0.5\u3002 \u7cbe\u786e\u5ea6 \uff08 Precision\uff09 \u7cbe\u786e\u5ea6\u662f\u8ffd\u8e2a\u6210\u529f\u7684\u4e2a\u6570\u6bd4\u4f8b\u3002\u4e3a\u4e86\u8ba1\u7b97\u8ffd\u8e2a\u6210\u529f\u7684\u4e2a\u6570\uff0c\u9700\u8981\u8ba1\u7b97\u9884\u6d4b\u6846\u4e2d\u5fc3\u70b9\u4e0e\u6807\u6ce8\u6846\u7684\u4e2d\u5fc3\u70b9\u7684\u4e4b\u95f4\u6b27\u6c0f\u8ddd\u79bb\uff0c\u901a\u5e38\u9608\u503c\u4e3a20\u50cf\u7d20\uff0c\u5373\u5b83\u4eec\u7684\u6b27\u6c0f\u8ddd\u79bb\u572820\u50cf\u7d20\u4e4b\u5185\u5c31\u89c6\u4e3a\u8ffd\u8e2a\u6210\u529f\u3002 \u5f52\u4e00\u5316\u7cbe\u786e\u5ea6\uff08Normalized Precision\uff09 \u8003\u8651\u5230\u6807\u6ce8\u6846\u7684\u5c3a\u5ea6\u5927\u5c0f\u5c06\u5f71\u54cd\u5bf9\u7cbe\u786e\u5ea6\u7684\u5224\u65ad\uff08\u6bd4\u5982\uff0c\u5bf9\u4e8e\u8f83\u5c0f\u7684\u6807\u6ce8\u6846\uff0c\u9884\u6d4b\u6846\u548c\u6807\u6ce8\u6846\u7684\u4e2d\u5fc3\u70b9\u76f8\u969420\u50cf\u7d20\uff0c\u4e24\u8005\u7684\u4ea4\u5e76\u6bd4\u5df2\u7ecf\u4e0b\u964d\u5230\u4e00\u4e2a\u975e\u5e38\u4f4e\u7684\u503c\uff09\uff0c\u56e0\u6b64\uff0c\u5c06\u7cbe\u786e\u5ea6 (Precision)\u6839\u636e\u6807\u6ce8\u6846\u5927\u5c0f\u8fdb\u884c\u4e86\u5f52\u4e00\u5316\uff0c\u5f97\u5230\u4e86\u5f52\u4e00\u5316\u7cbe\u786e\u5ea6 (Normalized Precision)\u3002 1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814 \u6211\u4eec\u5bf94\u4e2a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u8fdb\u884c\u8c03\u7814\uff0c\u5bf9\u76f8\u5173\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\uff08\u4e3b\u8981\u662f\u6807\u6ce8\u5b57\u6bb5\uff09\u8fdb\u884c\u5206\u6790\u6c47\u603b\uff0c\u76f8\u540c\u542b\u4e49\u7684\u6807\u6ce8\u5b57\u6bb5\u4f1a\u4ee5\u7edf\u4e00\u547d\u540d\u8fdb\u884c\u5c55\u793a\uff0c\u6c47\u603b\u4fe1\u606f\u5982\u4e0b\u8868\u6240\u793a\uff1a \u76ee\u6807\u8ddf\u8e2a\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 instance_id bbox category media_path frame_ID width height frameRate seqLength absence Visibility/Cover/Occluded truncated/cut_by_image ignore_flag TrackingNet Y Y Y GOT10k Y Y Y Y Y Y Y Y Y Y MOT17 Y Y Y Y Y Y Y Y Y Y Y KITTI-tracking Y Y Y Y Y Y Y \u5bf9\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u8fdb\u884c\u6c47\u603b\uff0c\u5f97\u5230\u4e0b\u8868\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 instance_id \u76ee\u6807\u7f16\u53f7\uff0c\u540c\u4e00\u76ee\u6807\u5728\u6574\u4e2a\u89c6\u9891\u7247\u6bb5\u4e2d\u5177\u6709\u552f\u4e00\u7684\u7f16\u53f7\uff0c\u5728\u591a\u76ee\u6807\u8ddf\u8e2a\u91cc\u4e3a\u5fc5\u9700\u5b57\u6bb5 bbox \u5b9a\u4f4d\u5355\u4e2a\u76ee\u6807\u7684\u77e9\u5f62\u6846\uff0c\u6bd4\u5982\u7528[xmin, ymin, xmax, ymax]\u8868\u793a category \u5355\u4e2a\u76ee\u6807\u6240\u5c5e\u7684\u7c7b\u522b media_path \u5a92\u4f53\u6587\u4ef6\u8def\u5f84 frame_ID \u5e27\u53f7\uff0c\u7528\u4e8e\u89c6\u9891\u5e8f\u5217\u6392\u5e8f \u72ec\u7acb\u5b57\u6bb5 width \u56fe\u7247\u7684\u5bbd height \u56fe\u7247\u7684\u9ad8 frameRate \u5e27\u7387\uff0c\u6709\u7684\u6570\u636e\u96c6\u4e5f\u53ebanno_fps seqLength \u89c6\u9891\u5e27\u5e8f\u5217\u957f\u5ea6/\u5f20\u6570 absence \u6307\u793a\u8be5\u5e27\u662f\u5426\u5b58\u5728\u8be5\u5bf9\u8c61 Visibility/Cover/Occluded \u906e\u6321\u5ea6\u3002\u5728\u4e0d\u540c\u6570\u636e\u96c6\u6709\u4e0d\u540c\u7684\u8868\u793a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u662fCover\uff08\u906e\u6321\u5ea6\u3001\u7ea7\u522b\u8303\u56f4\u4e3a0~8\uff09\uff0c\u4e5f\u53ef\u4ee5\u662fvisibility\uff08\u7269\u4f53\u53ef\u89c1\u7a0b\u5ea6\uff0c\u53d6\u503c\u5728 0~1 \u4e4b\u95f4\uff09,\u8fd8\u53ef\u4ee5\u662fOccluded\uff08\u5f53\u524d\u6807\u6ce8\u662f\u5426\u6709\u88ab\u906e\u6321\u30020 \u8868\u793a \"fully visiable\"\uff1b1 \u8868\u793a \"partly occluded\"\uff1b2 \u8868\u793a \"largely occluded\"\uff1b3 \u8868\u793a \"unknown\"\uff09 truncated/cut_by_image \u5f53\u524d\u6807\u6ce8\u7684\u5bf9\u8c61\u662f\u5426\u6b63\u88ab\u56fe\u50cf\u8fb9\u7f18\u622a\u65ad,1\u8868\u793a\u88ab\u622a\u65ad ignore_flag \u5f53\u524d\u6807\u6ce8\u5728\u8bc4\u4f30\u4e2d\u662f\u5426\u88ab\u8003\u8651\uff0c\u82e5 flag = 1\uff0c\u5219\u8003\u8651\u5f53\u524d\u6807\u6ce8\uff0c\u82e5 flag = 0\uff0c\u5219\u5ffd\u7565 \u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u8981\u63cf\u8ff0\u4e00\u4e2a\u68c0\u6d4b\u6570\u636e\u96c6\u7684\u6837\u672c\uff0cinstance_id\u3001bbox\u3001media_path\u548cframe_id\u662f\u6700\u57fa\u7840\u7684\u5b57\u6bb5\uff0c\u6b64\u5916\u8fd8\u5305\u542b\u4e86\u5404\u79cd\u63cf\u8ff0\u8fb9\u754c\u6846\u4fe1\u606f\u7684\u7279\u6b8a\u5b57\u6bb5\u3002 2. \u6a21\u677f\u5c55\u793a \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u662f\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u7684\u62d3\u5c55\uff0c\u4e5f\u5305\u542b\u5d4c\u5957\u7ed3\u6784\u4f53\uff08\u5176\u8be6\u7ec6\u5b9a\u4e49\u53ef\u4ee5\u53c2\u8003 DSDL\u5165\u95e8\u6587\u6863-\u8bed\u8a00\u5b9a\u4e49-\u5d4c\u5957\u7ed3\u6784\u4f53 \uff09\u548c\u7c7b\u522b\u57df\uff08class domain\uff0c\u6216\u8005cdom\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 DSDL\u5165\u95e8\u6587\u6863-\u8bed\u8a00\u5b9a\u4e49-\u7c7b\u522b\u57df \uff09\uff0c\u4f46\u4e0e\u4e4b\u4e0d\u540c\u7684\u662f\uff1a\u6839\u636e\u4e0a\u8ff0\u7684\u8c03\u7814\u7ed3\u679c\uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u91cd\u8981\u7684\u5c5e\u6027\u5305\u62ecframe_id\u3001media_path\u3001instance_id\u3001bbox\u548ccategory\uff0c\u800c\u8fd9\u4e9b\u5c5e\u6027\u5206\u522b\u5c5e\u4e8e \u4e09\u4e2a\u5c42\u7ea7\u7684\u7ed3\u6784\u4f53 \uff0c\u7b2c\u4e00\u5c42\u662f\u89c6\u9891\uff0c\u7b2c\u4e8c\u5c42\u662f\u89c6\u9891\u5e27\uff08\u5373\u56fe\u7247\uff09\uff0c\u7b2c\u4e09\u5c42\u662f\u6807\u6ce8\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e09\u5c42\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u7528\u6765\u8be6\u7ec6\u63cf\u8ff0\u6bcf\u4e2a\u6837\u672c\u7684\u4fe1\u606f\u3002 \u57fa\u4e8e\u4e0a\u8ff0\u8003\u8651\uff0c\u6211\u4eec\u5236\u5b9a\u4e86\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a object-tracking.yaml $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : instance_id : InstanceID bbox : BBox category : Label[dom=$cdom] FrameSample : $def : struct $params : [ \"cdom\" ] $fields : frame_id : UniqueID media_path : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] VideoFrame : $def : struct $params : [ \"cdom\" ] $fields : video_name : Str videoframes : List[etype=FrameSample[cdom=$cdom]] \u5728\u76ee\u6807\u8ddf\u8e2a\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff08\u8be6\u7ec6\u5b66\u4e60\u8bf7\u53c2\u8003 DSDL\u8bed\u8a00\u6559\u7a0b \uff09 $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalObjectEntry: \u5b9a\u4e49\u4e86\u6807\u6ce8\u6846\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: instance_id\uff1a\u7269\u4f53\u7f16\u53f7\uff0c\u540c\u4e00\u7269\u4f53\u5728\u6574\u4e2a\u89c6\u9891\u7247\u6bb5\u4e2d\u5177\u6709\u552f\u4e00\u7684\u7f16\u53f7 bbox\uff1a\u6807\u6ce8\u6846\u4fe1\u606f\uff0c\u8f6c\u5316\u4e3abbox\u6807\u51c6\uff0c\u5373[x,y,w,h] category\uff1a\u6807\u6ce8\u6846\u7c7b\u522b\uff0c\u4e0eClassDom\u5bf9\u5e94 FrameSample: \u5b9a\u4e49\u4e86\u89c6\u9891\u5e27sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: frame_id\uff1a\u89c6\u9891\u5e27\u5e8f\u53f7\uff0c\u7c7b\u578b\u4e3aUniqueID\uff0c\u5982\u6709\u591a\u4e2a\u5c42\u7ea7\u5305\u542bUniqueID\uff0c\u53ef\u6307\u5b9a\u53c2\u6570id_type\uff0c\u6bd4\u5982UniqueID[id_type='frame'] media_path\uff1a\u89c6\u9891\u5e27\u7684\u8def\u5f84 objects\uff1a\u6807\u6ce8\u4fe1\u606f\uff0c\u4e3a\u524d\u9762\u7684\u6807\u6ce8\u6846\u7ed3\u6784\u4f53\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 VideoFrame\uff1a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u89c6\u9891sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5 $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: video_name\uff1a\u89c6\u9891\u7684\u540d\u79f0\uff08\u4e00\u822c\u662f\u6587\u4ef6\u5939\u540d\u5b57\uff09 videoframes\uff1a\u4e3a\u524d\u9762\u7684\u89c6\u9891\u5e27sample\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 \u9664\u4e86\u8fd9\u4e9b\u5fc5\u9700\u5b57\u6bb5\u4ee5\u5916\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u53c2\u8003\u201c\u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814\u201d\u4e2d\u7684\u7279\u6b8a\u5b57\u6bb5\u548c\u5176\u4ed6\u5b57\u6bb5\uff0c\u65b0\u589e\u5bf9\u7ed3\u6784\u4f53\u7684\u5c5e\u6027\u5b9a\u4e49\u3002 3. \u5b8c\u6574\u793a\u4f8b \u6211\u4eec\u4ee5TrackingNet\u6570\u636e\u96c6\uff08\u5355\u76ee\u6807\u8ddf\u8e2a\uff09\u4e3a\u4f8b\uff0c\u5c55\u793a\u76ee\u6807\u8ddf\u8e2a\u6570\u636e\u96c6DSDL\u63cf\u8ff0\u6587\u4ef6\u5177\u4f53\u5185\u5bb9\u3002 object-tracking.yaml $dsdl-version : \"0.5.3\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : instance_id : InstanceID bbox : BBox category : Label[dom=$cdom] FrameSample : $def : struct $params : [ \"cdom\" ] $fields : frame_id : UniqueID media_path : Image _image_shape : ImageShape objects : List[etype=LocalObjectEntry[cdom=$cdom]] VideoFrame : $def : struct $params : [ \"cdom\" ] $fields : video_name : Str _folder : Str videoframes : List[etype=FrameSample[cdom=$cdom]] \u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\u53ca\u5bf9\u5e94\u5173\u7cfb\uff1a \uff08\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5b57\u6bb5\u662f \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f \u4e2d\u6ca1\u6709\u5305\u542b\u7684\u5b57\u6bb5\uff09 \u5728LocalObjectEntry\u4e2d\uff1a bbox\uff1a\u5bf9\u5e94\u539f\u6570\u636e\u96c6txt\u6807\u6ce8\u6587\u4ef6\u4e2d\u7684\u6807\u6ce8\u6846\u5750\u6807\uff0c\u5373[x,y,w,h] \u5728ObjectTrackingSample\u4e2d\uff1a frame_id\uff1a\u89c6\u9891\u5e27\u5e8f\u53f7\uff0c\u7c7b\u578b\u4e3aUniqueID\uff0c\u8fd9\u91cc\u5bf9\u5e94\u7684\u662f\u539f\u6570\u636e\u96c6\u7684\u89c6\u9891\u5e27\u6587\u4ef6\u540d\uff0c\u6bd4\u5982\u201c0.jpg\"\u5bf9\u5e94\u7684frame_id\u4e3a\u201c0\u201d\u3002 media_path\uff1a\u8be5\u5b57\u6bb5\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u7528\u4e8e\u50a8\u5b58\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u4e3b\u8981\u4ece\u539f\u59cb\u6570\u636e\u96c6\u7684filename\u5b57\u6bb5\u8f6c\u5316\u800c\u6765 _image_shape\uff1a\u56fe\u7247\u7684\u5bbd\u9ad8\u4fe1\u606f\uff0c\u683c\u5f0f\u4e3a[height, width]\uff0cTrackingNet\u4e2d\u5e76\u6ca1\u6709\u76f4\u63a5\u63d0\u4f9b\u56fe\u7247\u5bbd\u9ad8\u5c5e\u6027\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbfodl\u5de5\u5177\u7684\u7b5b\u9009\u7b49\u64cd\u4f5c\uff0c\u5efa\u8bae\u6dfb\u52a0\u8be5\u5b57\u6bb5 objects\uff1a\u8be5\u5b57\u6bb5\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684object\u5b57\u6bb5\uff0c\u4ee5List\u7684\u5f62\u5f0f\u5b58\u50a8\u5177\u4f53bounding box\u7684\u6807\u6ce8\u4fe1\u606f \u5728VideoFrame\u4e2d\uff1a video_name\uff1a\u89c6\u9891\u7684\u540d\u79f0\uff08\u5bf9\u5e94frames\u4e0b\u7684\u5b50\u76ee\u5f55\u6587\u4ef6\u540d\uff09 _folder: \u4e3b\u8981\u662f\u6807\u8bc6\u89c6\u9891\u6765\u81ea\u4e8e\u54ea\u4e2a\u6587\u4ef6\u5939\uff0c\u56e0\u4e3a\u8bad\u7ec3\u96c6\u4e00\u5171\u5206\u4e8612\u4e2a\u6587\u4ef6\u5939\uff0c\u6a21\u677f\u4e2d\u6ca1\u6709\u8be5\u5b57\u6bb5\uff0c\u4e3a\u65b0\u589e\u5b57\u6bb5 videoframes\uff1a\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u5b58\u50a8\u4e86\u89c6\u9891\u7684\u6bcf\u4e00\u5e27\u7684\u4fe1\u606f \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u8be5\u6570\u636e\u96c6\u6ca1\u6709\u7c7b\u522b\u4fe1\u606f\uff0c\u56e0\u6b64\u5176\u5b9e\u53ef\u4ee5\u4e0d\u9700\u8981category\u5b57\u6bb5\u548c\u7c7b\u522b\u57df\u6587\u4ef6\uff0c\u53e6\u5916\uff0c\u56e0\u4e3a\u662f\u5355\u76ee\u6807\u8ddf\u8e2a\uff0cinstance_id\u5b57\u6bb5\u4e5f\u53ef\u4ee5\u7701\u7565\u3002\u4f46\u4e3a\u4e86\u4fdd\u8bc1\u793a\u4f8b\u7684\u5b8c\u6574\u6027\uff0c\u5728\u6b64\u7686\u4fdd\u7559\uff0c\u4f9b\u7528\u6237\u53c2\u8003\u3002 \u7c7b\u522b\u57df\u7684\u6587\u4ef6\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff0c\u7531\u4e8eTrackingNet\u6ca1\u6709\u7c7b\u522b\u6807\u6ce8\uff0c\u5728\u8fd9\u91cc\u7528\u9ed8\u8ba4\u7c7b\u522b\"object\"\u4f5c\u4e3a\u5355\u4e00\u7c7b\u522b\u4fe1\u606f\u3002 class-dom.yaml $dsdl-version : 0.5.3 TrackingNetClassDom : $def : class_domain classes : - object train.yaml \u5728\u8be5\u793a\u4f8b\u4e2d\u5c06\u5c55\u793a\u7684\u65b9\u5f0f\u662f\u4ece\u5916\u90e8json\u8bfb\u53d6\u6837\u672c\u5177\u4f53\u6807\u6ce8\u4fe1\u606f\u3002 $dsdl-version : \"0.5.3\" $import : - ../defs/object-tracking - ../defs/class-dom meta : dataset_name : \"TrackingNet\" creator : \"King Abdullah University of Science and Technology\" home-page : \"https://tracking-net.org/\" opendatalab-page : \"https://opendatalab.com/TrackingNet\" sub_dataset_name : \"train\" task_name : \"single-object tracking\" data : sample-type : VideoFrame[cdom=TrackingNetClassDom] sample-path : train_samples.json \u4e0a\u9762\u7684\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff0c\u9996\u5148\u5b9a\u4e49\u4e86dsdl\u7684\u7248\u672c\u4fe1\u606f\uff0c\u7136\u540eimport\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u6570\u636e\u96c6\u6a21\u677f\u6587\u4ef6\uff0c\u5305\u62ec\u4efb\u52a1\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6a21\u677f\u3002\u63a5\u7740\u7528meta\u548cdata\u5b57\u6bb5\u6765\u63cf\u8ff0\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: dsdl\u7248\u672c\u4fe1\u606f $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u548cTrackingNet\u7684class domain meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u521b\u5efa\u8005\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: \u5176\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f\u4e2d\u5bfc\u5165\u7684VideoFrame\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aTrackingNetClassDom sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u8fd9\u91cc\u7ed9\u4e86\u5b9e\u9645\u7684json\u6587\u4ef6\u8def\u5f84\uff0c\u56e0\u6b64samples\u7684\u5185\u5bb9\u5c06\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6 train_samples.json train_samples.json\u9700\u8981\u6211\u4eec\u5199\u811a\u672c\u4ece\u539f\u59cb\u6570\u636e\u96c6\u8f6c\u6362\u6765\uff0c\u8f6c\u6362\u811a\u672c\u6a21\u677f\u53ef\u4ee5\u53c2\u8003 \u6570\u636e\u96c6\u8f6c\u6362 \u9875\u9762\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684struct\u5bf9\u5e94\uff0c\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a {\"samples\": [ { \"video_name\": \"0-6LB4FqxoE_0\", \"_folder\": \"TRAIN_0\", \"videoframes\": [ { \"frame_id\": \u201c0\u201d, \"media_path\": \"TRAIN_0/frames/0-6LB4FqxoE_0/0.jpg\", \"_image_shape\": [360, 480], \"objects\": [ { \"instance_id\": 000000000001, \"bbox\": [120.24, 0.32, 359.76, 596.04], \"category\": 1 }, ... ] }, ... ] }, ... ]}","title":"\u76ee\u6807\u8ddf\u8e2a"},{"location":"dsdl_template/cv/cv_object_tracking/#_1","text":"\u6211\u4eec\u901a\u8fc7\u5bf9\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u8fdb\u884c\u8c03\u7814\uff0c\u5e76\u603b\u7ed3\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\uff0c\u4ece\u800c\u5236\u5b9a\u51fa\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1DSDL\u6a21\u677f\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u4f7f\u7528\u3002","title":"\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1"},{"location":"dsdl_template/cv/cv_object_tracking/#1","text":"","title":"1. \u4efb\u52a1\u8c03\u7814"},{"location":"dsdl_template/cv/cv_object_tracking/#11","text":"\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u662f\u6307\u5728\u56fe\u50cf\u4e2d\u68c0\u6d4b\u51fa\u7269\u4f53\u7684\u4f4d\u7f6e\uff0c\u5e76\u8bc6\u522b\u51fa\u5177\u4f53\u7684\u5b9e\u4f8b\uff0c\u901a\u8fc7\u4e00\u4e2a\u7279\u6b8a\u8bc6\u522bID\u5bf9\u5176\u8fdb\u884c\u8ddf\u8e2a\u3002\u5206\u4e3a\u5355\u76ee\u6807\u8ddf\u8e2a\u548c\u591a\u76ee\u6807\u8ddf\u8e2a\uff0c\u6709\u7684\u6570\u636e\u96c6\u8fd8\u4f1a\u5bf9\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u7c7b\u522b\u8fdb\u884c\u6807\u6ce8\u3002\u5176\u793a\u610f\u56fe\u5982\u4e0b\u6240\u793a\uff1a \u56fe1 GOT10k \u5355\u76ee\u6807\u8ddf\u8e2a \u56fe2 MOT17 \u591a\u76ee\u6807\u8ddf\u8e2a","title":"1.1 \u4efb\u52a1\u5b9a\u4e49"},{"location":"dsdl_template/cv/cv_object_tracking/#12","text":"\u6700\u5e38\u7528\u7684\u5c31\u662f\u4e24\u4e2a\uff1a\u7cbe\u786e\u5ea6\u548c\u6210\u529f\u7387\uff08\u6bd4\u5982TrackingNet\u3001UAV123\u3001Nfs\u3001OTB2015\u3001LaSOT\u3001TLP\uff09\u3002 \u6210\u529f\u7387\uff08Success Rate/IOU Rate/AOS\uff09 \u6210\u529f\u503c ( success )\u8ba1\u7b97\u662f\u8ba1\u7b97\u9884\u6d4b\u6846\u4e0e\u6807\u6ce8\u6846\u7684\u533a\u57df\u5185\u50cf\u7d20\u7684\u4ea4\u5e76\u6bd4\u3002\u6210\u529f\u7387 ( Success Rate )\u5373\u5728success\u4e00\u5b9a\u9608\u503c\u4e4b\u4e0b\uff0c\u6210\u529f\u4e2a\u6570\u7684\u6bd4\u4f8b\u3002\u5728\u4e0d\u540c\u7684\u9608\u503c\u4e0b\uff0c\u6210\u529f\u7387\u4e5f\u4f1a\u76f8\u5e94\u53d8\u5316\uff0c\u4ee5\u9608\u503c\u4e3ax\uff0c\u6210\u529f\u7387\u4e3ay\uff0c\u53ef\u4f5c\u51fa\u6210\u529f\u7387\u66f2\u7ebf ( Success rate plot) \u3002 AUC (Area under curve)\u5206\u6570\u5373\u4e3a\u6210\u529f\u7387\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\u3002\u6709\u7684\u8bba\u6587\u4e5f\u4f1a\u76f4\u63a5\u6307\u5b9a\u9608\u503c\uff0c\u7531\u4e8e\u4e2d\u503c\u5b9a\u7406\uff0c\u6700\u5e38\u7528\u7684\u9608\u503c\u662f0.5\u3002 \u7cbe\u786e\u5ea6 \uff08 Precision\uff09 \u7cbe\u786e\u5ea6\u662f\u8ffd\u8e2a\u6210\u529f\u7684\u4e2a\u6570\u6bd4\u4f8b\u3002\u4e3a\u4e86\u8ba1\u7b97\u8ffd\u8e2a\u6210\u529f\u7684\u4e2a\u6570\uff0c\u9700\u8981\u8ba1\u7b97\u9884\u6d4b\u6846\u4e2d\u5fc3\u70b9\u4e0e\u6807\u6ce8\u6846\u7684\u4e2d\u5fc3\u70b9\u7684\u4e4b\u95f4\u6b27\u6c0f\u8ddd\u79bb\uff0c\u901a\u5e38\u9608\u503c\u4e3a20\u50cf\u7d20\uff0c\u5373\u5b83\u4eec\u7684\u6b27\u6c0f\u8ddd\u79bb\u572820\u50cf\u7d20\u4e4b\u5185\u5c31\u89c6\u4e3a\u8ffd\u8e2a\u6210\u529f\u3002 \u5f52\u4e00\u5316\u7cbe\u786e\u5ea6\uff08Normalized Precision\uff09 \u8003\u8651\u5230\u6807\u6ce8\u6846\u7684\u5c3a\u5ea6\u5927\u5c0f\u5c06\u5f71\u54cd\u5bf9\u7cbe\u786e\u5ea6\u7684\u5224\u65ad\uff08\u6bd4\u5982\uff0c\u5bf9\u4e8e\u8f83\u5c0f\u7684\u6807\u6ce8\u6846\uff0c\u9884\u6d4b\u6846\u548c\u6807\u6ce8\u6846\u7684\u4e2d\u5fc3\u70b9\u76f8\u969420\u50cf\u7d20\uff0c\u4e24\u8005\u7684\u4ea4\u5e76\u6bd4\u5df2\u7ecf\u4e0b\u964d\u5230\u4e00\u4e2a\u975e\u5e38\u4f4e\u7684\u503c\uff09\uff0c\u56e0\u6b64\uff0c\u5c06\u7cbe\u786e\u5ea6 (Precision)\u6839\u636e\u6807\u6ce8\u6846\u5927\u5c0f\u8fdb\u884c\u4e86\u5f52\u4e00\u5316\uff0c\u5f97\u5230\u4e86\u5f52\u4e00\u5316\u7cbe\u786e\u5ea6 (Normalized Precision)\u3002","title":"1.2 \u8bc4\u4ef7\u6307\u6807"},{"location":"dsdl_template/cv/cv_object_tracking/#13","text":"\u6211\u4eec\u5bf94\u4e2a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u8fdb\u884c\u8c03\u7814\uff0c\u5bf9\u76f8\u5173\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\uff08\u4e3b\u8981\u662f\u6807\u6ce8\u5b57\u6bb5\uff09\u8fdb\u884c\u5206\u6790\u6c47\u603b\uff0c\u76f8\u540c\u542b\u4e49\u7684\u6807\u6ce8\u5b57\u6bb5\u4f1a\u4ee5\u7edf\u4e00\u547d\u540d\u8fdb\u884c\u5c55\u793a\uff0c\u6c47\u603b\u4fe1\u606f\u5982\u4e0b\u8868\u6240\u793a\uff1a \u76ee\u6807\u8ddf\u8e2a\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 instance_id bbox category media_path frame_ID width height frameRate seqLength absence Visibility/Cover/Occluded truncated/cut_by_image ignore_flag TrackingNet Y Y Y GOT10k Y Y Y Y Y Y Y Y Y Y MOT17 Y Y Y Y Y Y Y Y Y Y Y KITTI-tracking Y Y Y Y Y Y Y \u5bf9\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u8fdb\u884c\u6c47\u603b\uff0c\u5f97\u5230\u4e0b\u8868\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 instance_id \u76ee\u6807\u7f16\u53f7\uff0c\u540c\u4e00\u76ee\u6807\u5728\u6574\u4e2a\u89c6\u9891\u7247\u6bb5\u4e2d\u5177\u6709\u552f\u4e00\u7684\u7f16\u53f7\uff0c\u5728\u591a\u76ee\u6807\u8ddf\u8e2a\u91cc\u4e3a\u5fc5\u9700\u5b57\u6bb5 bbox \u5b9a\u4f4d\u5355\u4e2a\u76ee\u6807\u7684\u77e9\u5f62\u6846\uff0c\u6bd4\u5982\u7528[xmin, ymin, xmax, ymax]\u8868\u793a category \u5355\u4e2a\u76ee\u6807\u6240\u5c5e\u7684\u7c7b\u522b media_path \u5a92\u4f53\u6587\u4ef6\u8def\u5f84 frame_ID \u5e27\u53f7\uff0c\u7528\u4e8e\u89c6\u9891\u5e8f\u5217\u6392\u5e8f \u72ec\u7acb\u5b57\u6bb5 width \u56fe\u7247\u7684\u5bbd height \u56fe\u7247\u7684\u9ad8 frameRate \u5e27\u7387\uff0c\u6709\u7684\u6570\u636e\u96c6\u4e5f\u53ebanno_fps seqLength \u89c6\u9891\u5e27\u5e8f\u5217\u957f\u5ea6/\u5f20\u6570 absence \u6307\u793a\u8be5\u5e27\u662f\u5426\u5b58\u5728\u8be5\u5bf9\u8c61 Visibility/Cover/Occluded \u906e\u6321\u5ea6\u3002\u5728\u4e0d\u540c\u6570\u636e\u96c6\u6709\u4e0d\u540c\u7684\u8868\u793a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u662fCover\uff08\u906e\u6321\u5ea6\u3001\u7ea7\u522b\u8303\u56f4\u4e3a0~8\uff09\uff0c\u4e5f\u53ef\u4ee5\u662fvisibility\uff08\u7269\u4f53\u53ef\u89c1\u7a0b\u5ea6\uff0c\u53d6\u503c\u5728 0~1 \u4e4b\u95f4\uff09,\u8fd8\u53ef\u4ee5\u662fOccluded\uff08\u5f53\u524d\u6807\u6ce8\u662f\u5426\u6709\u88ab\u906e\u6321\u30020 \u8868\u793a \"fully visiable\"\uff1b1 \u8868\u793a \"partly occluded\"\uff1b2 \u8868\u793a \"largely occluded\"\uff1b3 \u8868\u793a \"unknown\"\uff09 truncated/cut_by_image \u5f53\u524d\u6807\u6ce8\u7684\u5bf9\u8c61\u662f\u5426\u6b63\u88ab\u56fe\u50cf\u8fb9\u7f18\u622a\u65ad,1\u8868\u793a\u88ab\u622a\u65ad ignore_flag \u5f53\u524d\u6807\u6ce8\u5728\u8bc4\u4f30\u4e2d\u662f\u5426\u88ab\u8003\u8651\uff0c\u82e5 flag = 1\uff0c\u5219\u8003\u8651\u5f53\u524d\u6807\u6ce8\uff0c\u82e5 flag = 0\uff0c\u5219\u5ffd\u7565 \u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u8981\u63cf\u8ff0\u4e00\u4e2a\u68c0\u6d4b\u6570\u636e\u96c6\u7684\u6837\u672c\uff0cinstance_id\u3001bbox\u3001media_path\u548cframe_id\u662f\u6700\u57fa\u7840\u7684\u5b57\u6bb5\uff0c\u6b64\u5916\u8fd8\u5305\u542b\u4e86\u5404\u79cd\u63cf\u8ff0\u8fb9\u754c\u6846\u4fe1\u606f\u7684\u7279\u6b8a\u5b57\u6bb5\u3002","title":"1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814"},{"location":"dsdl_template/cv/cv_object_tracking/#2","text":"\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u662f\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u7684\u62d3\u5c55\uff0c\u4e5f\u5305\u542b\u5d4c\u5957\u7ed3\u6784\u4f53\uff08\u5176\u8be6\u7ec6\u5b9a\u4e49\u53ef\u4ee5\u53c2\u8003 DSDL\u5165\u95e8\u6587\u6863-\u8bed\u8a00\u5b9a\u4e49-\u5d4c\u5957\u7ed3\u6784\u4f53 \uff09\u548c\u7c7b\u522b\u57df\uff08class domain\uff0c\u6216\u8005cdom\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 DSDL\u5165\u95e8\u6587\u6863-\u8bed\u8a00\u5b9a\u4e49-\u7c7b\u522b\u57df \uff09\uff0c\u4f46\u4e0e\u4e4b\u4e0d\u540c\u7684\u662f\uff1a\u6839\u636e\u4e0a\u8ff0\u7684\u8c03\u7814\u7ed3\u679c\uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u91cd\u8981\u7684\u5c5e\u6027\u5305\u62ecframe_id\u3001media_path\u3001instance_id\u3001bbox\u548ccategory\uff0c\u800c\u8fd9\u4e9b\u5c5e\u6027\u5206\u522b\u5c5e\u4e8e \u4e09\u4e2a\u5c42\u7ea7\u7684\u7ed3\u6784\u4f53 \uff0c\u7b2c\u4e00\u5c42\u662f\u89c6\u9891\uff0c\u7b2c\u4e8c\u5c42\u662f\u89c6\u9891\u5e27\uff08\u5373\u56fe\u7247\uff09\uff0c\u7b2c\u4e09\u5c42\u662f\u6807\u6ce8\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e09\u5c42\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u7528\u6765\u8be6\u7ec6\u63cf\u8ff0\u6bcf\u4e2a\u6837\u672c\u7684\u4fe1\u606f\u3002 \u57fa\u4e8e\u4e0a\u8ff0\u8003\u8651\uff0c\u6211\u4eec\u5236\u5b9a\u4e86\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a object-tracking.yaml $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : instance_id : InstanceID bbox : BBox category : Label[dom=$cdom] FrameSample : $def : struct $params : [ \"cdom\" ] $fields : frame_id : UniqueID media_path : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] VideoFrame : $def : struct $params : [ \"cdom\" ] $fields : video_name : Str videoframes : List[etype=FrameSample[cdom=$cdom]] \u5728\u76ee\u6807\u8ddf\u8e2a\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff08\u8be6\u7ec6\u5b66\u4e60\u8bf7\u53c2\u8003 DSDL\u8bed\u8a00\u6559\u7a0b \uff09 $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalObjectEntry: \u5b9a\u4e49\u4e86\u6807\u6ce8\u6846\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: instance_id\uff1a\u7269\u4f53\u7f16\u53f7\uff0c\u540c\u4e00\u7269\u4f53\u5728\u6574\u4e2a\u89c6\u9891\u7247\u6bb5\u4e2d\u5177\u6709\u552f\u4e00\u7684\u7f16\u53f7 bbox\uff1a\u6807\u6ce8\u6846\u4fe1\u606f\uff0c\u8f6c\u5316\u4e3abbox\u6807\u51c6\uff0c\u5373[x,y,w,h] category\uff1a\u6807\u6ce8\u6846\u7c7b\u522b\uff0c\u4e0eClassDom\u5bf9\u5e94 FrameSample: \u5b9a\u4e49\u4e86\u89c6\u9891\u5e27sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: frame_id\uff1a\u89c6\u9891\u5e27\u5e8f\u53f7\uff0c\u7c7b\u578b\u4e3aUniqueID\uff0c\u5982\u6709\u591a\u4e2a\u5c42\u7ea7\u5305\u542bUniqueID\uff0c\u53ef\u6307\u5b9a\u53c2\u6570id_type\uff0c\u6bd4\u5982UniqueID[id_type='frame'] media_path\uff1a\u89c6\u9891\u5e27\u7684\u8def\u5f84 objects\uff1a\u6807\u6ce8\u4fe1\u606f\uff0c\u4e3a\u524d\u9762\u7684\u6807\u6ce8\u6846\u7ed3\u6784\u4f53\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 VideoFrame\uff1a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u89c6\u9891sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5 $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: video_name\uff1a\u89c6\u9891\u7684\u540d\u79f0\uff08\u4e00\u822c\u662f\u6587\u4ef6\u5939\u540d\u5b57\uff09 videoframes\uff1a\u4e3a\u524d\u9762\u7684\u89c6\u9891\u5e27sample\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 \u9664\u4e86\u8fd9\u4e9b\u5fc5\u9700\u5b57\u6bb5\u4ee5\u5916\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u53c2\u8003\u201c\u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814\u201d\u4e2d\u7684\u7279\u6b8a\u5b57\u6bb5\u548c\u5176\u4ed6\u5b57\u6bb5\uff0c\u65b0\u589e\u5bf9\u7ed3\u6784\u4f53\u7684\u5c5e\u6027\u5b9a\u4e49\u3002","title":"2. \u6a21\u677f\u5c55\u793a"},{"location":"dsdl_template/cv/cv_object_tracking/#3","text":"\u6211\u4eec\u4ee5TrackingNet\u6570\u636e\u96c6\uff08\u5355\u76ee\u6807\u8ddf\u8e2a\uff09\u4e3a\u4f8b\uff0c\u5c55\u793a\u76ee\u6807\u8ddf\u8e2a\u6570\u636e\u96c6DSDL\u63cf\u8ff0\u6587\u4ef6\u5177\u4f53\u5185\u5bb9\u3002 object-tracking.yaml $dsdl-version : \"0.5.3\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : instance_id : InstanceID bbox : BBox category : Label[dom=$cdom] FrameSample : $def : struct $params : [ \"cdom\" ] $fields : frame_id : UniqueID media_path : Image _image_shape : ImageShape objects : List[etype=LocalObjectEntry[cdom=$cdom]] VideoFrame : $def : struct $params : [ \"cdom\" ] $fields : video_name : Str _folder : Str videoframes : List[etype=FrameSample[cdom=$cdom]] \u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\u53ca\u5bf9\u5e94\u5173\u7cfb\uff1a \uff08\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5b57\u6bb5\u662f \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f \u4e2d\u6ca1\u6709\u5305\u542b\u7684\u5b57\u6bb5\uff09 \u5728LocalObjectEntry\u4e2d\uff1a bbox\uff1a\u5bf9\u5e94\u539f\u6570\u636e\u96c6txt\u6807\u6ce8\u6587\u4ef6\u4e2d\u7684\u6807\u6ce8\u6846\u5750\u6807\uff0c\u5373[x,y,w,h] \u5728ObjectTrackingSample\u4e2d\uff1a frame_id\uff1a\u89c6\u9891\u5e27\u5e8f\u53f7\uff0c\u7c7b\u578b\u4e3aUniqueID\uff0c\u8fd9\u91cc\u5bf9\u5e94\u7684\u662f\u539f\u6570\u636e\u96c6\u7684\u89c6\u9891\u5e27\u6587\u4ef6\u540d\uff0c\u6bd4\u5982\u201c0.jpg\"\u5bf9\u5e94\u7684frame_id\u4e3a\u201c0\u201d\u3002 media_path\uff1a\u8be5\u5b57\u6bb5\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u7528\u4e8e\u50a8\u5b58\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u4e3b\u8981\u4ece\u539f\u59cb\u6570\u636e\u96c6\u7684filename\u5b57\u6bb5\u8f6c\u5316\u800c\u6765 _image_shape\uff1a\u56fe\u7247\u7684\u5bbd\u9ad8\u4fe1\u606f\uff0c\u683c\u5f0f\u4e3a[height, width]\uff0cTrackingNet\u4e2d\u5e76\u6ca1\u6709\u76f4\u63a5\u63d0\u4f9b\u56fe\u7247\u5bbd\u9ad8\u5c5e\u6027\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbfodl\u5de5\u5177\u7684\u7b5b\u9009\u7b49\u64cd\u4f5c\uff0c\u5efa\u8bae\u6dfb\u52a0\u8be5\u5b57\u6bb5 objects\uff1a\u8be5\u5b57\u6bb5\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684object\u5b57\u6bb5\uff0c\u4ee5List\u7684\u5f62\u5f0f\u5b58\u50a8\u5177\u4f53bounding box\u7684\u6807\u6ce8\u4fe1\u606f \u5728VideoFrame\u4e2d\uff1a video_name\uff1a\u89c6\u9891\u7684\u540d\u79f0\uff08\u5bf9\u5e94frames\u4e0b\u7684\u5b50\u76ee\u5f55\u6587\u4ef6\u540d\uff09 _folder: \u4e3b\u8981\u662f\u6807\u8bc6\u89c6\u9891\u6765\u81ea\u4e8e\u54ea\u4e2a\u6587\u4ef6\u5939\uff0c\u56e0\u4e3a\u8bad\u7ec3\u96c6\u4e00\u5171\u5206\u4e8612\u4e2a\u6587\u4ef6\u5939\uff0c\u6a21\u677f\u4e2d\u6ca1\u6709\u8be5\u5b57\u6bb5\uff0c\u4e3a\u65b0\u589e\u5b57\u6bb5 videoframes\uff1a\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u5b58\u50a8\u4e86\u89c6\u9891\u7684\u6bcf\u4e00\u5e27\u7684\u4fe1\u606f \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u8be5\u6570\u636e\u96c6\u6ca1\u6709\u7c7b\u522b\u4fe1\u606f\uff0c\u56e0\u6b64\u5176\u5b9e\u53ef\u4ee5\u4e0d\u9700\u8981category\u5b57\u6bb5\u548c\u7c7b\u522b\u57df\u6587\u4ef6\uff0c\u53e6\u5916\uff0c\u56e0\u4e3a\u662f\u5355\u76ee\u6807\u8ddf\u8e2a\uff0cinstance_id\u5b57\u6bb5\u4e5f\u53ef\u4ee5\u7701\u7565\u3002\u4f46\u4e3a\u4e86\u4fdd\u8bc1\u793a\u4f8b\u7684\u5b8c\u6574\u6027\uff0c\u5728\u6b64\u7686\u4fdd\u7559\uff0c\u4f9b\u7528\u6237\u53c2\u8003\u3002 \u7c7b\u522b\u57df\u7684\u6587\u4ef6\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff0c\u7531\u4e8eTrackingNet\u6ca1\u6709\u7c7b\u522b\u6807\u6ce8\uff0c\u5728\u8fd9\u91cc\u7528\u9ed8\u8ba4\u7c7b\u522b\"object\"\u4f5c\u4e3a\u5355\u4e00\u7c7b\u522b\u4fe1\u606f\u3002 class-dom.yaml $dsdl-version : 0.5.3 TrackingNetClassDom : $def : class_domain classes : - object train.yaml \u5728\u8be5\u793a\u4f8b\u4e2d\u5c06\u5c55\u793a\u7684\u65b9\u5f0f\u662f\u4ece\u5916\u90e8json\u8bfb\u53d6\u6837\u672c\u5177\u4f53\u6807\u6ce8\u4fe1\u606f\u3002 $dsdl-version : \"0.5.3\" $import : - ../defs/object-tracking - ../defs/class-dom meta : dataset_name : \"TrackingNet\" creator : \"King Abdullah University of Science and Technology\" home-page : \"https://tracking-net.org/\" opendatalab-page : \"https://opendatalab.com/TrackingNet\" sub_dataset_name : \"train\" task_name : \"single-object tracking\" data : sample-type : VideoFrame[cdom=TrackingNetClassDom] sample-path : train_samples.json \u4e0a\u9762\u7684\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff0c\u9996\u5148\u5b9a\u4e49\u4e86dsdl\u7684\u7248\u672c\u4fe1\u606f\uff0c\u7136\u540eimport\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u6570\u636e\u96c6\u6a21\u677f\u6587\u4ef6\uff0c\u5305\u62ec\u4efb\u52a1\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6a21\u677f\u3002\u63a5\u7740\u7528meta\u548cdata\u5b57\u6bb5\u6765\u63cf\u8ff0\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: dsdl\u7248\u672c\u4fe1\u606f $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u548cTrackingNet\u7684class domain meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u521b\u5efa\u8005\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: \u5176\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f\u4e2d\u5bfc\u5165\u7684VideoFrame\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aTrackingNetClassDom sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u8fd9\u91cc\u7ed9\u4e86\u5b9e\u9645\u7684json\u6587\u4ef6\u8def\u5f84\uff0c\u56e0\u6b64samples\u7684\u5185\u5bb9\u5c06\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6 train_samples.json train_samples.json\u9700\u8981\u6211\u4eec\u5199\u811a\u672c\u4ece\u539f\u59cb\u6570\u636e\u96c6\u8f6c\u6362\u6765\uff0c\u8f6c\u6362\u811a\u672c\u6a21\u677f\u53ef\u4ee5\u53c2\u8003 \u6570\u636e\u96c6\u8f6c\u6362 \u9875\u9762\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684struct\u5bf9\u5e94\uff0c\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a {\"samples\": [ { \"video_name\": \"0-6LB4FqxoE_0\", \"_folder\": \"TRAIN_0\", \"videoframes\": [ { \"frame_id\": \u201c0\u201d, \"media_path\": \"TRAIN_0/frames/0-6LB4FqxoE_0/0.jpg\", \"_image_shape\": [360, 480], \"objects\": [ { \"instance_id\": 000000000001, \"bbox\": [120.24, 0.32, 359.76, 596.04], \"category\": 1 }, ... ] }, ... ] }, ... ]}","title":"3. \u5b8c\u6574\u793a\u4f8b"},{"location":"dsdl_template/cv/cv_ocr/","text":"\u5b57\u7b26\u8bc6\u522b\u4efb\u52a1 \u6211\u4eec\u901a\u8fc7\u5bf9\u5b57\u7b26\u8bc6\u522b\u4efb\u52a1\u8fdb\u884c\u8c03\u7814\uff0c\u5e76\u603b\u7ed3\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\uff0c\u4ece\u800c\u5236\u5b9a\u51fa\u5b57\u7b26\u8bc6\u522b\u4efb\u52a1DSDL\u6a21\u677f\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u4f7f\u7528\u3002 1. \u4efb\u52a1\u8c03\u7814 1.1 \u4efb\u52a1\u5b9a\u4e49 \u5b57\u7b26\u8bc6\u522bOCR \uff08Optical Character Recognition\uff0c\u5149\u5b66\u5b57\u7b26\u8bc6\u522b\uff09\u662f\u6307\u5bf9\u56fe\u7247\u4e2d\u7684\u6587\u5b57\u8fdb\u884c\u67e5\u627e\u3001\u63d0\u53d6\u3001\u8bc6\u522b\u7684\u4e00\u79cd\u6280\u672f\uff0c\u901a\u8fc7\u68c0\u6d4b\u6697\u3001\u4eae\u7684\u6a21\u5f0f\u786e\u5b9a\u5176\u5f62\u72b6\uff0c\u7136\u540e\u7528\u5b57\u7b26\u8bc6\u522b\u65b9\u6cd5\u5c06\u5f62\u72b6\u7ffb\u8bd1\u6210\u8ba1\u7b97\u673a\u6587\u5b57\u7684\u8fc7\u7a0b\u3002\u5176\u793a\u610f\u56fe\u5982\u4e0b\u6240\u793a\uff1a OCR\u4efb\u52a1\u6309\u7167\u7b97\u6cd5\u53ef\u5206\u4e3a\u51e0\u4e2a\u90e8\u5206\u3002 \u6587\u5b57\u68c0\u6d4b/\u5206\u5272\uff0c\u6307\u4ece\u573a\u666f\u56fe\u7247\u4e2d\u51c6\u786e\u627e\u5230\u6587\u5b57\u6240\u5728\u4f4d\u7f6e\uff0c\u6807\u6ce8\u5f62\u5f0f\u4e3apolygon\u3001bbox\u6216\u56fe\u7247 \u6587\u5b57\u8bc6\u522b\uff0c\u6307\u4ece\u7eaf\u6587\u5b57\u56fe\u7247\u6216\u4e0a\u8ff0\u7684\u68c0\u6d4b\u6846\u4e2d\u5f97\u5230\u6587\u5b57\u5185\u5bb9\uff0c\u6807\u6ce8\u5f62\u5f0f\u4e3atext \u5173\u952e\u4fe1\u606f\u63d0\u53d6\uff1a\u4ece\u5c0f\u7968\u3001\u8eab\u4efd\u8bc1\u7b49\u7279\u6b8a\u6587\u4ef6\u4e2d\u63d0\u53d6\u60f3\u8981\u7684\u7c7b\u522b \u5176\u4ed6\u5982\u8868\u683c\u8bc6\u522b\u3001\u5173\u7cfb\u63d0\u53d6\u3001\u7248\u9762\u5206\u6790\u7b49\u3002 \u6839\u636e\u8f93\u5165\u56fe\u7247\u53ef\u5206\u4e3a\u8857\u666f\u56fe\u7247\u3001\u624b\u5199\u56fe\u7247\u3001\u6587\u6863\u3001\u7f51\u7edc\u56fe\u7247\u7b49\u3002 1.2 \u8bc4\u4ef7\u6307\u6807 1.2.1\u68c0\u6d4b\u9636\u6bb5 \u5148\u6309\u7167\u68c0\u6d4b\u6846\u548c\u6807\u6ce8\u6846\u7684IOU\u8bc4\u4f30\uff0cIOU\u5927\u4e8e\u67d0\u4e2a\u9608\u503c\u5224\u65ad\u4e3a\u68c0\u6d4b\u51c6\u786e\u3002\u8fd9\u91cc\u68c0\u6d4b\u6846\u548c\u6807\u6ce8\u6846\u4e0d\u540c\u4e8e\u4e00\u822c\u7684\u901a\u7528\u76ee\u6807\u68c0\u6d4b\u6846\uff0c\u90e8\u5206\u662f\u91c7\u7528\u591a\u8fb9\u5f62\u8fdb\u884c\u8868\u793a\u3002 \u68c0\u6d4b\u7cbe\u786e\u7387= {\u6b63\u786e\u7684\u68c0\u6d4b\u6846\u4e2a\u6570\\over\u6a21\u578b\u68c0\u6d4b\u6846\u4e2a\u6570} \u68c0\u6d4b\u7cbe\u786e\u7387= {\u6b63\u786e\u7684\u68c0\u6d4b\u6846\u4e2a\u6570\\over\u6a21\u578b\u68c0\u6d4b\u6846\u4e2a\u6570} \u68c0\u6d4b\u53ec\u56de\u7387=\\frac {\u6b63\u786e\u7684\u68c0\u6d4b\u6846\u4e2a\u6570}{\u4eba\u5de5\u6807\u6ce8\u6846\u4e2a\u6570} \u68c0\u6d4b\u53ec\u56de\u7387=\\frac {\u6b63\u786e\u7684\u68c0\u6d4b\u6846\u4e2a\u6570}{\u4eba\u5de5\u6807\u6ce8\u6846\u4e2a\u6570} F1~score = \\frac {2*\u68c0\u6d4b\u7cbe\u786e\u7387*\u68c0\u6d4b\u53ec\u56de\u7387}{\u68c0\u6d4b\u7cbe\u786e\u7387+\u68c0\u6d4b\u53ec\u56de\u7387} F1~score = \\frac {2*\u68c0\u6d4b\u7cbe\u786e\u7387*\u68c0\u6d4b\u53ec\u56de\u7387}{\u68c0\u6d4b\u7cbe\u786e\u7387+\u68c0\u6d4b\u53ec\u56de\u7387} 1.2.2 \u8bc6\u522b\u9636\u6bb5 \u5355\u8bcd\u8bc6\u522b\u51c6\u786e\u7387\uff0c\u53ea\u6709\u6574\u884c\u6587\u672c\u8bc6\u522b\u5bf9\u624d\u7b97\u6b63\u786e\u8bc6\u522b\u3002 \u5355\u8bcd\u8bc6\u522b\u51c6\u786e\u7387 = \\frac {\u6b63\u786e\u8bc6\u522b\u7684\u6587\u672c\u884c\u6570\u91cf}{\u4eba\u5de5\u6807\u6ce8\u7684\u6587\u672c\u884c\u6570\u91cf} \u5355\u8bcd\u8bc6\u522b\u51c6\u786e\u7387 = \\frac {\u6b63\u786e\u8bc6\u522b\u7684\u6587\u672c\u884c\u6570\u91cf}{\u4eba\u5de5\u6807\u6ce8\u7684\u6587\u672c\u884c\u6570\u91cf} 1.2.3 \u7aef\u5230\u7aef\u7edf\u8ba1 \u7aef\u5230\u7aef\u7cbe\u786e\u7387=\\frac {\u51c6\u786e\u68c0\u6d4b\u5e76\u6b63\u786e\u8bc6\u522b\u6587\u672c\u884c\u6570\u91cf}{\u6a21\u578b\u68c0\u6d4b\u7684\u6587\u672c\u884c\u6570\u91cf} \u7aef\u5230\u7aef\u7cbe\u786e\u7387=\\frac {\u51c6\u786e\u68c0\u6d4b\u5e76\u6b63\u786e\u8bc6\u522b\u6587\u672c\u884c\u6570\u91cf}{\u6a21\u578b\u68c0\u6d4b\u7684\u6587\u672c\u884c\u6570\u91cf} \u7aef\u5230\u7aef\u53ec\u56de\u7387=\\frac{\u51c6\u786e\u68c0\u6d4b\u5e76\u6b63\u786e\u8bc6\u522b\u6587\u672c\u884c\u6570\u91cf}{\u4eba\u5de5\u6807\u6ce8\u7684\u6587\u672c\u884c\u6570\u91cf} \u7aef\u5230\u7aef\u53ec\u56de\u7387=\\frac{\u51c6\u786e\u68c0\u6d4b\u5e76\u6b63\u786e\u8bc6\u522b\u6587\u672c\u884c\u6570\u91cf}{\u4eba\u5de5\u6807\u6ce8\u7684\u6587\u672c\u884c\u6570\u91cf} 1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814 OCR\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u5305\u542b\u4e86Total-Text\u3001ICDAR2015\u7b49\u5e38\u89c1\u6570\u636e\u96c6\u3002\u8003\u8651\u5230\u6709\u4e9b\u6570\u636e\u96c6\u540c\u65f6\u5305\u542b\u4e86\u4e0d\u540c\u7684OCR\u5b50\u4efb\u52a1\uff0c\u8fd9\u91cc\u5bf9\u5e38\u7528\u7684\u5b50\u4efb\u52a1\u8fdb\u884c\u4e86\u62c6\u5206\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5b50\u4efb\u52a1\u53ea\u8003\u8651\u548c\u4ed6\u76f8\u5173\u7684\u6807\u6ce8\u5185\u5bb9\u3002\u4e3a\u4e86\u4f7f\u5f97\u6a21\u677f\u66f4\u52a0\u901a\u7528\uff0c\u540c\u65f6\u4e5f\u5177\u5907\u62d3\u5c55\u80fd\u529b\uff0c\u6211\u4eec\u7740\u91cd\u5173\u6ce8\u5404\u4e2a\u6570\u636e\u96c6\u4e4b\u95f4\u7684\u5171\u6027\u548c\u7279\u6027\uff0c\u6b64\u5916\uff0c\u8c03\u7814\u8fc7\u7a0b\u4f1a\u9047\u5230\u4e00\u4e9b\u540d\u79f0\u4e0d\u540c\uff0c\u4f46\u662f\u5b9e\u9645\u542b\u4e49\u76f8\u540c\u6216\u7c7b\u4f3c\u7684\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u6211\u4eec\u4e5f\u89c6\u4e3a\u540c\u4e00\u5b57\u6bb5\uff0c\u5e76\u7edf\u4e00\u53bb\u547d\u540d\uff0c\u6bd4\u5982image_id\u5b57\u6bb5\u4e00\u822c\u8868\u793a\u56fe\u7247\u7684\u8def\u5f84\u6216\u8005id\uff0c\u662f\u56fe\u7247\u7684\u552f\u4e00\u6807\u8bc6\u3002 1.3.1 \u6587\u5b57\u68c0\u6d4b\u6570\u636e\u96c6\u8c03\u7814 \u6211\u4eec\u8c03\u7814\u4e86ICDAR2013\u3001ICDAR2015\u3001SVT\u3001Total-Text\u3001MSRA-TD50\u3001CUTE80\uff0c\u6570\u636e\u96c6\u7684\u6807\u6ce8\u6846\u4fe1\u606f\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u683c\u5f0f\u53ef\u4ee5\u4e3abbox\u6216polygon\u5f62\u5f0f\u3002 OCR\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id bbox polygon orientation isdifficult ICDAR2013 Y Y Y ICDAR2015 Y Y SVT Y Y Total-Text Y Y Y MSRA-TD50 Y Y Y Y CUTE80 Y Y \u5907\u6ce8\uff1a\u5176\u4e2dTotal-Text\u6570\u636e\u96c6\u65e7\u7248\u63d0\u4f9b\u4e86bbox\u548cpolygon\u4e24\u4e2a\u5b57\u6bb5\uff0c\u4f46\u662f\u65b0\u7248\u4ec5\u63d0\u4f9bpolygon\uff0c\u8fd9\u91cc\u4ee5\u65b0\u7248\u4e3a\u4e3b\u3002 \u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a bbox \u5b9a\u4f4d\u5355\u4e2a\u76ee\u6807\u7684\u77e9\u5f62\u6846\uff0c\u6bd4\u5982\u7528[xmin, ymin, xmax, ymax]\u8868\u793a polygon \u5b9a\u4f4d\u5355\u4e2a\u76ee\u6807\u7684\u591a\u8fb9\u5f62\u6846\uff0c\u9876\u70b9\u4e2a\u6570\u4e0d\u56fa\u5b9a \u72ec\u7acb\u5b57\u6bb5 orientation \u76ee\u6807\u6846\u65cb\u8f6c\u7684\u89d2\u5ea6\uff0c\u6216\u76ee\u6807\u6846\u65cb\u8f6c\u7c7b\u522b\uff1a\u5f2f\u66f2\u3001\u6c34\u5e73\u7b49 isdifficult \u662f\u5426\u4e3a\u68c0\u6d4b\u56f0\u96be\u7684\u76ee\u6807 \u53ef\u4ee5\u770b\u5230\uff0c\u5728\u6587\u5b57\u68c0\u6d4b\u4efb\u52a1\u4e2d\uff0cimage_id\u548cbbox/polygon\u4e3a\u6700\u57fa\u7840\u7684\u5b57\u6bb5\uff0c\u5176\u4e2dbbox\u548cpolygon\u5b57\u6bb5\u9700\u81f3\u5c11\u9009\u62e9\u4e00\u79cd\u683c\u5f0f\u3002 1.3.2 \u6587\u5b57\u5206\u5272\u6570\u636e\u96c6\u8c03\u7814 \u652f\u6301\u6587\u5b57\u5206\u5272\u7684\u6570\u636e\u96c6\u8f83\u5c11\uff0c\u8fd9\u91cc\u6211\u4eec\u4ec5\u8c03\u7814\u4e86Total-Text\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a OCR\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 image_id segmentation_map Total-Text Y Y \u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a segmentation_map \u5206\u5272\u56fe\uff0c\u53ef\u4ee5\u662f\u5355\u8bcd\u5206\u5272\u4e5f\u53ef\u4ee5\u662f\u5b57\u7b26\u5206\u5272\uff0c\u4e00\u822c\u4e3a\u4e8c\u503c\u5316\u56fe 1.3.3 \u6587\u5b57\u8bc6\u522b\u6570\u636e\u96c6\u8c03\u7814 \u6211\u4eec\u8c03\u7814\u4e86ICDAR2013\u3001ICDAR2015\u3001SVT\u3001Total-Text\u3001IIIT-5K\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a OCR\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id text lexicon ICDAR2013 Y Y Y ICDAR2015 Y Y Y SVT Y Y Y Total-Text Y Y IIIT-5K Y Y Y \u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a text \u76ee\u6807\u6846\u4e2d\u6587\u672c\u5185\u5bb9 \u72ec\u7acb\u5b57\u6bb5 lexicon \u8bcd\u6c47\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5f20\u56fe\u7247\u8bcd\u6c47\u8868\uff0c\u4e5f\u53ef\u4ee5\u662f\u6570\u636e\u96c6\u8bcd\u6c47\u8868 2. \u6a21\u677f\u5c55\u793a \u6839\u636e\u4e0a\u8ff0\u7684\u8c03\u7814\u7ed3\u679c\uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8eOCR\u4efb\u52a1\uff0c\u4e00\u4e2a\u6837\u672c\u6700\u91cd\u8981\u7684\u5c5e\u6027\u662f\u56fe\u7247\u7684id(\u6216\u8def\u5f84)\u3001\u6bcf\u4e2a\u6807\u6ce8\u6846\u7684\u4f4d\u7f6e\u4ee5\u53ca\u6587\u672c\uff0c\u8003\u8651\u5230\u6bcf\u5f20\u56fe\u7247\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u6807\u6ce8\u6846\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5d4c\u5957\u7ed3\u6784\u4f53LocalInstanceEntry\uff08\u5176\u8be6\u7ec6\u5b9a\u4e49\u53ef\u4ee5\u53c2\u8003 DSDL\u5165\u95e8\u6587\u6863-\u8bed\u8a00\u5b9a\u4e49-\u5d4c\u5957\u7ed3\u6784\u4f53 \uff09\uff0c\u7528\u6765\u8868\u8ff0\u5355\u4e2a\u6807\u6ce8\u6846\u7684\u4fe1\u606f\uff08\u5373\u7c7b\u522b\u548c\u4f4d\u7f6e\uff09\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5728OCR\u4efb\u52a1\u7ed3\u6784\u4f53\u7684$fields\u5c5e\u6027\u4e2d\u5b9a\u4e49image\u548cinstances\u4e24\u4e2a\u5b57\u6bb5\uff0c\u5176\u4e2dinstances\u5b57\u6bb5\u5219\u4e3a\u591a\u4e2aLocalObjectEntry\u7ed3\u6784\u4f53\u6784\u6210\u7684\u5217\u8868\uff08\u5217\u8868\u4e3a\u7a7a\u8868\u793a\u56fe\u7247\u6ca1\u6709\u6807\u6ce8\u6846\uff09\u3002\u57fa\u4e8e\u4e0a\u8ff0\u8003\u8651\uff0c\u6211\u4eec\u5236\u5b9a\u4e86\u4e0d\u540cOCR\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u8fd9\u91cc\u6a21\u677f\u4e3a\u65b9\u4fbf\u7406\u89e3\uff0c\u5c06\u4efb\u52a1\u8fdb\u884c\u8be6\u7ec6\u62c6\u5206\u3002 2.1 \u6587\u5b57\u68c0\u6d4b\u6a21\u677f \u6587\u5b57\u68c0\u6d4b\u6a21\u677f\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u5355\u72ec\u7684 \u76ee\u6807\u68c0\u6d4b\u6587\u6863 \uff0c\u8fd9\u91cc\u6211\u4eec\u5236\u5b9a\u4e86OCR\u68c0\u6d4b\u4efb\u52a1\u7684\u8303\u4f8b\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version : \"0.5.0\" OCRSample : $def : struct $fields : image : Image instances : List[Bbox] \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c OCRSample: \u5b9a\u4e49\u4e86OCR\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 instances \u6807\u6ce8\u4fe1\u606f\uff0cOCR\u4efb\u52a1\u4e2d\uff0c\u4e3a\u591a\u4e2a\u6807\u6ce8\u6846\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868\uff0c\u6807\u6ce8\u6846\u5f62\u5f0f\u53d6\u51b3\u4e8e\u6570\u636e\u96c6\uff0c\u53ef\u4ee5\u662fBbox\uff0c\u4e5f\u53ef\u4ee5\u662fPolygon 2.2 \u6587\u5b57\u5206\u5272\u6a21\u677f \u6587\u5b57\u5206\u5272\u6a21\u677f\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u5355\u72ec\u7684 \u56fe\u50cf\u5206\u5272\u6587\u6863 \uff0c\u8fd9\u91cc\u6211\u4eec\u5236\u5b9a\u4e86OCR\u5206\u5272\u4efb\u52a1\u7684\u8303\u4f8b\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version : \"0.5.0\" SegClassDom : $def : class_domain classes : - text OCRSample : $def : struct $params : [ \"cdom\" ] $fields : image : Image word_segmap : LabelMap[dom=$cdom] chr_segmap : LabelMap[dom=$cdom] \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c SegClassDom: \u5b9a\u4e49\u4e86\u5206\u5272\u4efb\u52a1\u7684classdom\uff0c\u5305\u542b\u4e24\u4e2a\u5b57\u6bb5\uff1a $def: class_domain\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2aclass_domain\u7c7b\u578b classes \u5305\u542b\u5177\u4f53\u7c7b\u522b\uff0c\u8fd9\u91cc\u53ea\u6709\u4e00\u4e2atext\u7c7b\u522b OCRSample: \u5b9a\u4e49\u4e86OCR\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 word_segmap \u5355\u8bcd\u7c92\u5ea6\u7684\u5206\u5272\u56fe chr_segmap \u5b57\u7b26\u7c92\u5ea6\u7684\u5206\u5272\u56fe 2.3 \u6587\u5b57\u8bc6\u522b\u6a21\u677f \u6587\u5b57\u8bc6\u522b\u6a21\u677f\u4e3aOCR\u4efb\u52a1\u5355\u72ec\u4f7f\u7528\uff0c\u5b9a\u4e49\u4e86\u65b0\u7684\u5b57\u6bb5Text\u3002 $dsdl-version : \"0.5.0\" OCRSample : $def : struct $fields : word_image : Image text : Text \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c OCRSample: \u5b9a\u4e49\u4e86OCR\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: word_image \u56fe\u7247\u7684\u8def\u5f84\uff0c\u6ce8\u610f\u6587\u5b57\u8bc6\u522b\u4efb\u52a1\u4e2d\u56fe\u7247\u4e3a\u88c1\u5207\u56fe\u7247\uff0c\u5373\u6587\u5b57\u68c0\u6d4b\u540e\u7684\u56fe\u7247 annotations \u6807\u6ce8\u4fe1\u606f\uff0cOCR\u4efb\u52a1\u4e2d\uff0c\u4e3a\u524d\u9762\u7684LocalInstanceEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 2.4 \u7aef\u5230\u7aef\u6a21\u677f \u8fd9\u91cc\u7aef\u5230\u7aef\u4efb\u52a1\u4ee5\u6587\u5b57\u68c0\u6d4b+\u6587\u5b57\u8bc6\u522b\u4e3a\u4f8b\uff1a $dsdl-version : \"0.5.0\" LocalInstanceEntry : $def : struct $fields : location : Polygon/Bbox text : Text OCRSample : $def : struct $fields : image : Image instances : List[LocalInstanceEntry] \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalInstanceEntry: \u5b9a\u4e49\u4e86\u6807\u6ce8\u6846\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: polygon \u6807\u6ce8\u6846\u7684\u4f4d\u7f6e text \u6807\u6ce8\u6846\u7684\u5185\u5bb9 OCRSample: \u5b9a\u4e49\u4e86\u68c0\u6d4b\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 instances \u6807\u6ce8\u4fe1\u606f\uff0c\u4e3a\u524d\u9762\u7684LocalInstanceEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 3. \u4f7f\u7528\u8bf4\u660e \u5728\u8fd9\u4e2a\u7ae0\u8282\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u901a\u8fc7import\u7684\u65b9\u5f0f\u6765\u5f15\u7528\u6211\u4eec\u7684\u6a21\u677f\u3002\u4ee5SynthText\u7aef\u5230\u7aef\u6a21\u677f\u4e3a\u4f8b \u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a SynthText-dsdl/ \u251c\u2500\u2500 defs/ \u2502 \u251c\u2500\u2500 OCR-SynthText.yaml # struct\u5b9a\u4e49\u6587\u4ef6 \u251c\u2500\u2500 train/ # \u8be5\u6570\u636e\u96c6\u4ec5\u6709\u8bad\u7ec3\u96c6\uff0cmmocr\u4e2d\u4f7f\u7528\u5176\u4ed6\u6570\u636e\u96c6\u4f5c\u4e3a\u4e0b\u6e38\u6d4b\u8bd5 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u251c\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6 \u2514\u2500\u2500 README.md # \u6570\u636e\u96c6\u6559\u7a0b\uff1a\u4e0b\u8f7d\u3001\u600e\u4e48\u4f7f\u7528\u3001\u914d\u7f6e\u6587\u4ef6\u7684\u6559\u7a0b\u3002 3.1 \u6570\u636e\u96c6\u5b9a\u4e49\u6587\u4ef6 OCR-SynthText.yaml\u5982\u4e0b\uff1a $dsdl-version: \"0.5.0\" LocalCharEntry: # instance\u5185\u5b57\u7b26\u6807\u6ce8\u5185\u5bb9 $def: struct $fields: char_polygon: Polygon char_text: Text # \u6807\u6ce8\u7684\u5b57\u7b26\u5185\u5bb9 LocalInstanceEntry: # instance\u6807\u6ce8\u5185\u5bb9\uff0c\u5305\u62ec\u5355\u8bcd\u548c\u5b57\u7b26 $def: struct $fields: polygon: Polygon text: Text # \u6807\u6ce8\u7684\u5355\u8bcd\u5185\u5bb9 charlist: List[LocalCharEntry] OCRSample: $def: struct $fields: image: Image instances: List[LocalInstanceEntry] \u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalCharEntry: \u5b9a\u4e49\u4e86\u5b57\u7b26\u7c92\u5ea6\u7684\u6807\u6ce8\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e24\u4e2a\u5b57\u6bb5\uff1a $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: char_polygon \u5355\u4e2a\u5b57\u7b26\u7684polygon char_text \u5355\u4e2a\u5b57\u7b26\u7684\u6587\u672c\u6807\u6ce8 LocalInstanceEntry: \u5b9a\u4e49\u4e86\u5355\u8bcd\u7c92\u5ea6\u7684\u6807\u6ce8\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e24\u4e2a\u5b57\u6bb5\uff1a $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: polygon \u5355\u8bcd\u7684polygon text \u5355\u8bcd\u7684\u6587\u672c\u6807\u6ce8 charlist \u8be5\u5355\u8bcd\u5185\u5b57\u7b26\u7684\u6587\u672c\u6807\u6ce8,\u4e3a\u4e0a\u9762LocalCharEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 OCRSample: \u5b9a\u4e49\u4e86\u68c0\u6d4b\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 instances \u6807\u6ce8\u4fe1\u606f\uff0c\u4e3a\u524d\u9762\u7684LocalInstanceEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 3.2 samples\u76f8\u5173\u6587\u4ef6 train.yaml\u5982\u4e0b\uff1a $dsdl-version : \"0.5.2\" $import : - ../defs/OCR-SynthText meta : dataset_name : \"SynthText\" creator : \"University of Oxford\" home-page : \"https://www.robots.ox.ac.uk/~vgg/data/scenetext/\" opendatalab-page : \"https://opendatalab.com/SynthText\" sub-name : \"train\" task-type : \"Optical Character Recognition\" data : sample-type : OCRSample sample-path : train_samples.json train_sample.json\u7684\u5185\u5bb9\u5982\u4e0b\uff1a { \"samples\" : [ { \"image\" : \"image\" : \"8/ballet_106_0.jpg\" , \"instances\" : [ { \"polygon\" : [[[ 420 , 21 ],[ 512 , 23 ],[ 512 , 42 ],[ 420 , 40 ]]], \"text\" : \"Lines\" , \"charlist\" :[ { \"char_polygon\" :[[[ 423 , 22 ],[ 438 , 22 ],[ 436 , 40 ],[ 420 , 40 ]]], \"char_text\" : \"L\" } { \"char_polygon\" :[[[ 440 , 22 ],[ 453 , 22 ],[ 450 , 40 ],[ 437 , 40 ]]], \"char_text\" : \"i\" } ... ] }, ... ] }, ... ]}","title":"\u5149\u5b66\u5b57\u7b26\u8bc6\u522b(OCR)"},{"location":"dsdl_template/cv/cv_ocr/#_1","text":"\u6211\u4eec\u901a\u8fc7\u5bf9\u5b57\u7b26\u8bc6\u522b\u4efb\u52a1\u8fdb\u884c\u8c03\u7814\uff0c\u5e76\u603b\u7ed3\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\uff0c\u4ece\u800c\u5236\u5b9a\u51fa\u5b57\u7b26\u8bc6\u522b\u4efb\u52a1DSDL\u6a21\u677f\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u4f7f\u7528\u3002","title":"\u5b57\u7b26\u8bc6\u522b\u4efb\u52a1"},{"location":"dsdl_template/cv/cv_ocr/#1","text":"","title":"1. \u4efb\u52a1\u8c03\u7814"},{"location":"dsdl_template/cv/cv_ocr/#11","text":"\u5b57\u7b26\u8bc6\u522bOCR \uff08Optical Character Recognition\uff0c\u5149\u5b66\u5b57\u7b26\u8bc6\u522b\uff09\u662f\u6307\u5bf9\u56fe\u7247\u4e2d\u7684\u6587\u5b57\u8fdb\u884c\u67e5\u627e\u3001\u63d0\u53d6\u3001\u8bc6\u522b\u7684\u4e00\u79cd\u6280\u672f\uff0c\u901a\u8fc7\u68c0\u6d4b\u6697\u3001\u4eae\u7684\u6a21\u5f0f\u786e\u5b9a\u5176\u5f62\u72b6\uff0c\u7136\u540e\u7528\u5b57\u7b26\u8bc6\u522b\u65b9\u6cd5\u5c06\u5f62\u72b6\u7ffb\u8bd1\u6210\u8ba1\u7b97\u673a\u6587\u5b57\u7684\u8fc7\u7a0b\u3002\u5176\u793a\u610f\u56fe\u5982\u4e0b\u6240\u793a\uff1a OCR\u4efb\u52a1\u6309\u7167\u7b97\u6cd5\u53ef\u5206\u4e3a\u51e0\u4e2a\u90e8\u5206\u3002 \u6587\u5b57\u68c0\u6d4b/\u5206\u5272\uff0c\u6307\u4ece\u573a\u666f\u56fe\u7247\u4e2d\u51c6\u786e\u627e\u5230\u6587\u5b57\u6240\u5728\u4f4d\u7f6e\uff0c\u6807\u6ce8\u5f62\u5f0f\u4e3apolygon\u3001bbox\u6216\u56fe\u7247 \u6587\u5b57\u8bc6\u522b\uff0c\u6307\u4ece\u7eaf\u6587\u5b57\u56fe\u7247\u6216\u4e0a\u8ff0\u7684\u68c0\u6d4b\u6846\u4e2d\u5f97\u5230\u6587\u5b57\u5185\u5bb9\uff0c\u6807\u6ce8\u5f62\u5f0f\u4e3atext \u5173\u952e\u4fe1\u606f\u63d0\u53d6\uff1a\u4ece\u5c0f\u7968\u3001\u8eab\u4efd\u8bc1\u7b49\u7279\u6b8a\u6587\u4ef6\u4e2d\u63d0\u53d6\u60f3\u8981\u7684\u7c7b\u522b \u5176\u4ed6\u5982\u8868\u683c\u8bc6\u522b\u3001\u5173\u7cfb\u63d0\u53d6\u3001\u7248\u9762\u5206\u6790\u7b49\u3002 \u6839\u636e\u8f93\u5165\u56fe\u7247\u53ef\u5206\u4e3a\u8857\u666f\u56fe\u7247\u3001\u624b\u5199\u56fe\u7247\u3001\u6587\u6863\u3001\u7f51\u7edc\u56fe\u7247\u7b49\u3002","title":"1.1 \u4efb\u52a1\u5b9a\u4e49"},{"location":"dsdl_template/cv/cv_ocr/#12","text":"","title":"1.2 \u8bc4\u4ef7\u6307\u6807"},{"location":"dsdl_template/cv/cv_ocr/#121","text":"\u5148\u6309\u7167\u68c0\u6d4b\u6846\u548c\u6807\u6ce8\u6846\u7684IOU\u8bc4\u4f30\uff0cIOU\u5927\u4e8e\u67d0\u4e2a\u9608\u503c\u5224\u65ad\u4e3a\u68c0\u6d4b\u51c6\u786e\u3002\u8fd9\u91cc\u68c0\u6d4b\u6846\u548c\u6807\u6ce8\u6846\u4e0d\u540c\u4e8e\u4e00\u822c\u7684\u901a\u7528\u76ee\u6807\u68c0\u6d4b\u6846\uff0c\u90e8\u5206\u662f\u91c7\u7528\u591a\u8fb9\u5f62\u8fdb\u884c\u8868\u793a\u3002 \u68c0\u6d4b\u7cbe\u786e\u7387= {\u6b63\u786e\u7684\u68c0\u6d4b\u6846\u4e2a\u6570\\over\u6a21\u578b\u68c0\u6d4b\u6846\u4e2a\u6570} \u68c0\u6d4b\u7cbe\u786e\u7387= {\u6b63\u786e\u7684\u68c0\u6d4b\u6846\u4e2a\u6570\\over\u6a21\u578b\u68c0\u6d4b\u6846\u4e2a\u6570} \u68c0\u6d4b\u53ec\u56de\u7387=\\frac {\u6b63\u786e\u7684\u68c0\u6d4b\u6846\u4e2a\u6570}{\u4eba\u5de5\u6807\u6ce8\u6846\u4e2a\u6570} \u68c0\u6d4b\u53ec\u56de\u7387=\\frac {\u6b63\u786e\u7684\u68c0\u6d4b\u6846\u4e2a\u6570}{\u4eba\u5de5\u6807\u6ce8\u6846\u4e2a\u6570} F1~score = \\frac {2*\u68c0\u6d4b\u7cbe\u786e\u7387*\u68c0\u6d4b\u53ec\u56de\u7387}{\u68c0\u6d4b\u7cbe\u786e\u7387+\u68c0\u6d4b\u53ec\u56de\u7387} F1~score = \\frac {2*\u68c0\u6d4b\u7cbe\u786e\u7387*\u68c0\u6d4b\u53ec\u56de\u7387}{\u68c0\u6d4b\u7cbe\u786e\u7387+\u68c0\u6d4b\u53ec\u56de\u7387}","title":"1.2.1\u68c0\u6d4b\u9636\u6bb5"},{"location":"dsdl_template/cv/cv_ocr/#122","text":"\u5355\u8bcd\u8bc6\u522b\u51c6\u786e\u7387\uff0c\u53ea\u6709\u6574\u884c\u6587\u672c\u8bc6\u522b\u5bf9\u624d\u7b97\u6b63\u786e\u8bc6\u522b\u3002 \u5355\u8bcd\u8bc6\u522b\u51c6\u786e\u7387 = \\frac {\u6b63\u786e\u8bc6\u522b\u7684\u6587\u672c\u884c\u6570\u91cf}{\u4eba\u5de5\u6807\u6ce8\u7684\u6587\u672c\u884c\u6570\u91cf} \u5355\u8bcd\u8bc6\u522b\u51c6\u786e\u7387 = \\frac {\u6b63\u786e\u8bc6\u522b\u7684\u6587\u672c\u884c\u6570\u91cf}{\u4eba\u5de5\u6807\u6ce8\u7684\u6587\u672c\u884c\u6570\u91cf}","title":"1.2.2 \u8bc6\u522b\u9636\u6bb5"},{"location":"dsdl_template/cv/cv_ocr/#123","text":"\u7aef\u5230\u7aef\u7cbe\u786e\u7387=\\frac {\u51c6\u786e\u68c0\u6d4b\u5e76\u6b63\u786e\u8bc6\u522b\u6587\u672c\u884c\u6570\u91cf}{\u6a21\u578b\u68c0\u6d4b\u7684\u6587\u672c\u884c\u6570\u91cf} \u7aef\u5230\u7aef\u7cbe\u786e\u7387=\\frac {\u51c6\u786e\u68c0\u6d4b\u5e76\u6b63\u786e\u8bc6\u522b\u6587\u672c\u884c\u6570\u91cf}{\u6a21\u578b\u68c0\u6d4b\u7684\u6587\u672c\u884c\u6570\u91cf} \u7aef\u5230\u7aef\u53ec\u56de\u7387=\\frac{\u51c6\u786e\u68c0\u6d4b\u5e76\u6b63\u786e\u8bc6\u522b\u6587\u672c\u884c\u6570\u91cf}{\u4eba\u5de5\u6807\u6ce8\u7684\u6587\u672c\u884c\u6570\u91cf} \u7aef\u5230\u7aef\u53ec\u56de\u7387=\\frac{\u51c6\u786e\u68c0\u6d4b\u5e76\u6b63\u786e\u8bc6\u522b\u6587\u672c\u884c\u6570\u91cf}{\u4eba\u5de5\u6807\u6ce8\u7684\u6587\u672c\u884c\u6570\u91cf}","title":"1.2.3 \u7aef\u5230\u7aef\u7edf\u8ba1"},{"location":"dsdl_template/cv/cv_ocr/#13","text":"OCR\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u5305\u542b\u4e86Total-Text\u3001ICDAR2015\u7b49\u5e38\u89c1\u6570\u636e\u96c6\u3002\u8003\u8651\u5230\u6709\u4e9b\u6570\u636e\u96c6\u540c\u65f6\u5305\u542b\u4e86\u4e0d\u540c\u7684OCR\u5b50\u4efb\u52a1\uff0c\u8fd9\u91cc\u5bf9\u5e38\u7528\u7684\u5b50\u4efb\u52a1\u8fdb\u884c\u4e86\u62c6\u5206\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5b50\u4efb\u52a1\u53ea\u8003\u8651\u548c\u4ed6\u76f8\u5173\u7684\u6807\u6ce8\u5185\u5bb9\u3002\u4e3a\u4e86\u4f7f\u5f97\u6a21\u677f\u66f4\u52a0\u901a\u7528\uff0c\u540c\u65f6\u4e5f\u5177\u5907\u62d3\u5c55\u80fd\u529b\uff0c\u6211\u4eec\u7740\u91cd\u5173\u6ce8\u5404\u4e2a\u6570\u636e\u96c6\u4e4b\u95f4\u7684\u5171\u6027\u548c\u7279\u6027\uff0c\u6b64\u5916\uff0c\u8c03\u7814\u8fc7\u7a0b\u4f1a\u9047\u5230\u4e00\u4e9b\u540d\u79f0\u4e0d\u540c\uff0c\u4f46\u662f\u5b9e\u9645\u542b\u4e49\u76f8\u540c\u6216\u7c7b\u4f3c\u7684\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u6211\u4eec\u4e5f\u89c6\u4e3a\u540c\u4e00\u5b57\u6bb5\uff0c\u5e76\u7edf\u4e00\u53bb\u547d\u540d\uff0c\u6bd4\u5982image_id\u5b57\u6bb5\u4e00\u822c\u8868\u793a\u56fe\u7247\u7684\u8def\u5f84\u6216\u8005id\uff0c\u662f\u56fe\u7247\u7684\u552f\u4e00\u6807\u8bc6\u3002","title":"1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814"},{"location":"dsdl_template/cv/cv_ocr/#131","text":"\u6211\u4eec\u8c03\u7814\u4e86ICDAR2013\u3001ICDAR2015\u3001SVT\u3001Total-Text\u3001MSRA-TD50\u3001CUTE80\uff0c\u6570\u636e\u96c6\u7684\u6807\u6ce8\u6846\u4fe1\u606f\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u683c\u5f0f\u53ef\u4ee5\u4e3abbox\u6216polygon\u5f62\u5f0f\u3002 OCR\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id bbox polygon orientation isdifficult ICDAR2013 Y Y Y ICDAR2015 Y Y SVT Y Y Total-Text Y Y Y MSRA-TD50 Y Y Y Y CUTE80 Y Y \u5907\u6ce8\uff1a\u5176\u4e2dTotal-Text\u6570\u636e\u96c6\u65e7\u7248\u63d0\u4f9b\u4e86bbox\u548cpolygon\u4e24\u4e2a\u5b57\u6bb5\uff0c\u4f46\u662f\u65b0\u7248\u4ec5\u63d0\u4f9bpolygon\uff0c\u8fd9\u91cc\u4ee5\u65b0\u7248\u4e3a\u4e3b\u3002 \u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a bbox \u5b9a\u4f4d\u5355\u4e2a\u76ee\u6807\u7684\u77e9\u5f62\u6846\uff0c\u6bd4\u5982\u7528[xmin, ymin, xmax, ymax]\u8868\u793a polygon \u5b9a\u4f4d\u5355\u4e2a\u76ee\u6807\u7684\u591a\u8fb9\u5f62\u6846\uff0c\u9876\u70b9\u4e2a\u6570\u4e0d\u56fa\u5b9a \u72ec\u7acb\u5b57\u6bb5 orientation \u76ee\u6807\u6846\u65cb\u8f6c\u7684\u89d2\u5ea6\uff0c\u6216\u76ee\u6807\u6846\u65cb\u8f6c\u7c7b\u522b\uff1a\u5f2f\u66f2\u3001\u6c34\u5e73\u7b49 isdifficult \u662f\u5426\u4e3a\u68c0\u6d4b\u56f0\u96be\u7684\u76ee\u6807 \u53ef\u4ee5\u770b\u5230\uff0c\u5728\u6587\u5b57\u68c0\u6d4b\u4efb\u52a1\u4e2d\uff0cimage_id\u548cbbox/polygon\u4e3a\u6700\u57fa\u7840\u7684\u5b57\u6bb5\uff0c\u5176\u4e2dbbox\u548cpolygon\u5b57\u6bb5\u9700\u81f3\u5c11\u9009\u62e9\u4e00\u79cd\u683c\u5f0f\u3002","title":"1.3.1 \u6587\u5b57\u68c0\u6d4b\u6570\u636e\u96c6\u8c03\u7814"},{"location":"dsdl_template/cv/cv_ocr/#132","text":"\u652f\u6301\u6587\u5b57\u5206\u5272\u7684\u6570\u636e\u96c6\u8f83\u5c11\uff0c\u8fd9\u91cc\u6211\u4eec\u4ec5\u8c03\u7814\u4e86Total-Text\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a OCR\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 image_id segmentation_map Total-Text Y Y \u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a segmentation_map \u5206\u5272\u56fe\uff0c\u53ef\u4ee5\u662f\u5355\u8bcd\u5206\u5272\u4e5f\u53ef\u4ee5\u662f\u5b57\u7b26\u5206\u5272\uff0c\u4e00\u822c\u4e3a\u4e8c\u503c\u5316\u56fe","title":"1.3.2 \u6587\u5b57\u5206\u5272\u6570\u636e\u96c6\u8c03\u7814"},{"location":"dsdl_template/cv/cv_ocr/#133","text":"\u6211\u4eec\u8c03\u7814\u4e86ICDAR2013\u3001ICDAR2015\u3001SVT\u3001Total-Text\u3001IIIT-5K\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a OCR\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id text lexicon ICDAR2013 Y Y Y ICDAR2015 Y Y Y SVT Y Y Y Total-Text Y Y IIIT-5K Y Y Y \u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a text \u76ee\u6807\u6846\u4e2d\u6587\u672c\u5185\u5bb9 \u72ec\u7acb\u5b57\u6bb5 lexicon \u8bcd\u6c47\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5f20\u56fe\u7247\u8bcd\u6c47\u8868\uff0c\u4e5f\u53ef\u4ee5\u662f\u6570\u636e\u96c6\u8bcd\u6c47\u8868","title":"1.3.3 \u6587\u5b57\u8bc6\u522b\u6570\u636e\u96c6\u8c03\u7814"},{"location":"dsdl_template/cv/cv_ocr/#2","text":"\u6839\u636e\u4e0a\u8ff0\u7684\u8c03\u7814\u7ed3\u679c\uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8eOCR\u4efb\u52a1\uff0c\u4e00\u4e2a\u6837\u672c\u6700\u91cd\u8981\u7684\u5c5e\u6027\u662f\u56fe\u7247\u7684id(\u6216\u8def\u5f84)\u3001\u6bcf\u4e2a\u6807\u6ce8\u6846\u7684\u4f4d\u7f6e\u4ee5\u53ca\u6587\u672c\uff0c\u8003\u8651\u5230\u6bcf\u5f20\u56fe\u7247\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u6807\u6ce8\u6846\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5d4c\u5957\u7ed3\u6784\u4f53LocalInstanceEntry\uff08\u5176\u8be6\u7ec6\u5b9a\u4e49\u53ef\u4ee5\u53c2\u8003 DSDL\u5165\u95e8\u6587\u6863-\u8bed\u8a00\u5b9a\u4e49-\u5d4c\u5957\u7ed3\u6784\u4f53 \uff09\uff0c\u7528\u6765\u8868\u8ff0\u5355\u4e2a\u6807\u6ce8\u6846\u7684\u4fe1\u606f\uff08\u5373\u7c7b\u522b\u548c\u4f4d\u7f6e\uff09\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5728OCR\u4efb\u52a1\u7ed3\u6784\u4f53\u7684$fields\u5c5e\u6027\u4e2d\u5b9a\u4e49image\u548cinstances\u4e24\u4e2a\u5b57\u6bb5\uff0c\u5176\u4e2dinstances\u5b57\u6bb5\u5219\u4e3a\u591a\u4e2aLocalObjectEntry\u7ed3\u6784\u4f53\u6784\u6210\u7684\u5217\u8868\uff08\u5217\u8868\u4e3a\u7a7a\u8868\u793a\u56fe\u7247\u6ca1\u6709\u6807\u6ce8\u6846\uff09\u3002\u57fa\u4e8e\u4e0a\u8ff0\u8003\u8651\uff0c\u6211\u4eec\u5236\u5b9a\u4e86\u4e0d\u540cOCR\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u8fd9\u91cc\u6a21\u677f\u4e3a\u65b9\u4fbf\u7406\u89e3\uff0c\u5c06\u4efb\u52a1\u8fdb\u884c\u8be6\u7ec6\u62c6\u5206\u3002","title":"2. \u6a21\u677f\u5c55\u793a"},{"location":"dsdl_template/cv/cv_ocr/#21","text":"\u6587\u5b57\u68c0\u6d4b\u6a21\u677f\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u5355\u72ec\u7684 \u76ee\u6807\u68c0\u6d4b\u6587\u6863 \uff0c\u8fd9\u91cc\u6211\u4eec\u5236\u5b9a\u4e86OCR\u68c0\u6d4b\u4efb\u52a1\u7684\u8303\u4f8b\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version : \"0.5.0\" OCRSample : $def : struct $fields : image : Image instances : List[Bbox] \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c OCRSample: \u5b9a\u4e49\u4e86OCR\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 instances \u6807\u6ce8\u4fe1\u606f\uff0cOCR\u4efb\u52a1\u4e2d\uff0c\u4e3a\u591a\u4e2a\u6807\u6ce8\u6846\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868\uff0c\u6807\u6ce8\u6846\u5f62\u5f0f\u53d6\u51b3\u4e8e\u6570\u636e\u96c6\uff0c\u53ef\u4ee5\u662fBbox\uff0c\u4e5f\u53ef\u4ee5\u662fPolygon","title":"2.1 \u6587\u5b57\u68c0\u6d4b\u6a21\u677f"},{"location":"dsdl_template/cv/cv_ocr/#22","text":"\u6587\u5b57\u5206\u5272\u6a21\u677f\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u5355\u72ec\u7684 \u56fe\u50cf\u5206\u5272\u6587\u6863 \uff0c\u8fd9\u91cc\u6211\u4eec\u5236\u5b9a\u4e86OCR\u5206\u5272\u4efb\u52a1\u7684\u8303\u4f8b\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version : \"0.5.0\" SegClassDom : $def : class_domain classes : - text OCRSample : $def : struct $params : [ \"cdom\" ] $fields : image : Image word_segmap : LabelMap[dom=$cdom] chr_segmap : LabelMap[dom=$cdom] \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c SegClassDom: \u5b9a\u4e49\u4e86\u5206\u5272\u4efb\u52a1\u7684classdom\uff0c\u5305\u542b\u4e24\u4e2a\u5b57\u6bb5\uff1a $def: class_domain\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2aclass_domain\u7c7b\u578b classes \u5305\u542b\u5177\u4f53\u7c7b\u522b\uff0c\u8fd9\u91cc\u53ea\u6709\u4e00\u4e2atext\u7c7b\u522b OCRSample: \u5b9a\u4e49\u4e86OCR\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 word_segmap \u5355\u8bcd\u7c92\u5ea6\u7684\u5206\u5272\u56fe chr_segmap \u5b57\u7b26\u7c92\u5ea6\u7684\u5206\u5272\u56fe","title":"2.2 \u6587\u5b57\u5206\u5272\u6a21\u677f"},{"location":"dsdl_template/cv/cv_ocr/#23","text":"\u6587\u5b57\u8bc6\u522b\u6a21\u677f\u4e3aOCR\u4efb\u52a1\u5355\u72ec\u4f7f\u7528\uff0c\u5b9a\u4e49\u4e86\u65b0\u7684\u5b57\u6bb5Text\u3002 $dsdl-version : \"0.5.0\" OCRSample : $def : struct $fields : word_image : Image text : Text \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c OCRSample: \u5b9a\u4e49\u4e86OCR\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: word_image \u56fe\u7247\u7684\u8def\u5f84\uff0c\u6ce8\u610f\u6587\u5b57\u8bc6\u522b\u4efb\u52a1\u4e2d\u56fe\u7247\u4e3a\u88c1\u5207\u56fe\u7247\uff0c\u5373\u6587\u5b57\u68c0\u6d4b\u540e\u7684\u56fe\u7247 annotations \u6807\u6ce8\u4fe1\u606f\uff0cOCR\u4efb\u52a1\u4e2d\uff0c\u4e3a\u524d\u9762\u7684LocalInstanceEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868","title":"2.3 \u6587\u5b57\u8bc6\u522b\u6a21\u677f"},{"location":"dsdl_template/cv/cv_ocr/#24","text":"\u8fd9\u91cc\u7aef\u5230\u7aef\u4efb\u52a1\u4ee5\u6587\u5b57\u68c0\u6d4b+\u6587\u5b57\u8bc6\u522b\u4e3a\u4f8b\uff1a $dsdl-version : \"0.5.0\" LocalInstanceEntry : $def : struct $fields : location : Polygon/Bbox text : Text OCRSample : $def : struct $fields : image : Image instances : List[LocalInstanceEntry] \u5728\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalInstanceEntry: \u5b9a\u4e49\u4e86\u6807\u6ce8\u6846\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: polygon \u6807\u6ce8\u6846\u7684\u4f4d\u7f6e text \u6807\u6ce8\u6846\u7684\u5185\u5bb9 OCRSample: \u5b9a\u4e49\u4e86\u68c0\u6d4b\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 instances \u6807\u6ce8\u4fe1\u606f\uff0c\u4e3a\u524d\u9762\u7684LocalInstanceEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868","title":"2.4 \u7aef\u5230\u7aef\u6a21\u677f"},{"location":"dsdl_template/cv/cv_ocr/#3","text":"\u5728\u8fd9\u4e2a\u7ae0\u8282\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u901a\u8fc7import\u7684\u65b9\u5f0f\u6765\u5f15\u7528\u6211\u4eec\u7684\u6a21\u677f\u3002\u4ee5SynthText\u7aef\u5230\u7aef\u6a21\u677f\u4e3a\u4f8b \u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a SynthText-dsdl/ \u251c\u2500\u2500 defs/ \u2502 \u251c\u2500\u2500 OCR-SynthText.yaml # struct\u5b9a\u4e49\u6587\u4ef6 \u251c\u2500\u2500 train/ # \u8be5\u6570\u636e\u96c6\u4ec5\u6709\u8bad\u7ec3\u96c6\uff0cmmocr\u4e2d\u4f7f\u7528\u5176\u4ed6\u6570\u636e\u96c6\u4f5c\u4e3a\u4e0b\u6e38\u6d4b\u8bd5 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u251c\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6 \u2514\u2500\u2500 README.md # \u6570\u636e\u96c6\u6559\u7a0b\uff1a\u4e0b\u8f7d\u3001\u600e\u4e48\u4f7f\u7528\u3001\u914d\u7f6e\u6587\u4ef6\u7684\u6559\u7a0b\u3002","title":"3. \u4f7f\u7528\u8bf4\u660e"},{"location":"dsdl_template/cv/cv_ocr/#31","text":"OCR-SynthText.yaml\u5982\u4e0b\uff1a $dsdl-version: \"0.5.0\" LocalCharEntry: # instance\u5185\u5b57\u7b26\u6807\u6ce8\u5185\u5bb9 $def: struct $fields: char_polygon: Polygon char_text: Text # \u6807\u6ce8\u7684\u5b57\u7b26\u5185\u5bb9 LocalInstanceEntry: # instance\u6807\u6ce8\u5185\u5bb9\uff0c\u5305\u62ec\u5355\u8bcd\u548c\u5b57\u7b26 $def: struct $fields: polygon: Polygon text: Text # \u6807\u6ce8\u7684\u5355\u8bcd\u5185\u5bb9 charlist: List[LocalCharEntry] OCRSample: $def: struct $fields: image: Image instances: List[LocalInstanceEntry] \u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalCharEntry: \u5b9a\u4e49\u4e86\u5b57\u7b26\u7c92\u5ea6\u7684\u6807\u6ce8\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e24\u4e2a\u5b57\u6bb5\uff1a $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: char_polygon \u5355\u4e2a\u5b57\u7b26\u7684polygon char_text \u5355\u4e2a\u5b57\u7b26\u7684\u6587\u672c\u6807\u6ce8 LocalInstanceEntry: \u5b9a\u4e49\u4e86\u5355\u8bcd\u7c92\u5ea6\u7684\u6807\u6ce8\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e24\u4e2a\u5b57\u6bb5\uff1a $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: polygon \u5355\u8bcd\u7684polygon text \u5355\u8bcd\u7684\u6587\u672c\u6807\u6ce8 charlist \u8be5\u5355\u8bcd\u5185\u5b57\u7b26\u7684\u6587\u672c\u6807\u6ce8,\u4e3a\u4e0a\u9762LocalCharEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 OCRSample: \u5b9a\u4e49\u4e86\u68c0\u6d4b\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 instances \u6807\u6ce8\u4fe1\u606f\uff0c\u4e3a\u524d\u9762\u7684LocalInstanceEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868","title":"3.1 \u6570\u636e\u96c6\u5b9a\u4e49\u6587\u4ef6"},{"location":"dsdl_template/cv/cv_ocr/#32-samples","text":"train.yaml\u5982\u4e0b\uff1a $dsdl-version : \"0.5.2\" $import : - ../defs/OCR-SynthText meta : dataset_name : \"SynthText\" creator : \"University of Oxford\" home-page : \"https://www.robots.ox.ac.uk/~vgg/data/scenetext/\" opendatalab-page : \"https://opendatalab.com/SynthText\" sub-name : \"train\" task-type : \"Optical Character Recognition\" data : sample-type : OCRSample sample-path : train_samples.json train_sample.json\u7684\u5185\u5bb9\u5982\u4e0b\uff1a { \"samples\" : [ { \"image\" : \"image\" : \"8/ballet_106_0.jpg\" , \"instances\" : [ { \"polygon\" : [[[ 420 , 21 ],[ 512 , 23 ],[ 512 , 42 ],[ 420 , 40 ]]], \"text\" : \"Lines\" , \"charlist\" :[ { \"char_polygon\" :[[[ 423 , 22 ],[ 438 , 22 ],[ 436 , 40 ],[ 420 , 40 ]]], \"char_text\" : \"L\" } { \"char_polygon\" :[[[ 440 , 22 ],[ 453 , 22 ],[ 450 , 40 ],[ 437 , 40 ]]], \"char_text\" : \"i\" } ... ] }, ... ] }, ... ]}","title":"3.2 samples\u76f8\u5173\u6587\u4ef6"},{"location":"dsdl_template/cv/cv_rotated_detection/","text":"\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1 \u6211\u4eec\u901a\u8fc7\u5bf9\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u8fdb\u884c\u8c03\u7814\uff0c\u5e76\u603b\u7ed3\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\uff0c\u4ece\u800c\u5236\u5b9a\u51fa\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1DSDL\u6a21\u677f\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u4f7f\u7528\u3002 1. \u4efb\u52a1\u8c03\u7814 1.1 \u4efb\u52a1\u5b9a\u4e49 \u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u662f\u6307\u5728\u56fe\u50cf\u4e2d\u7528\u65cb\u8f6c\u77e9\u5f62\u6846\u3001\u56db\u8fb9\u5f62\u751a\u81f3\u4efb\u610f\u5f62\u72b6\u7684\u5f62\u5f0f\u68c0\u6d4b\u51fa\u7269\u4f53\u7684\u4f4d\u7f6e\uff0c\u5e76\u8bc6\u522b\u5176\u6240\u5c5e\u7c7b\u522b\uff0c\u793a\u610f\u56fe\u5982\u4e0b\uff1a 1.2 \u8bc4\u4ef7\u6307\u6807\uff1a \u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u7684\u8bc4\u4ef7\u6307\u6807\u4e0e\u76ee\u6807\u68c0\u6d4b\u76f8\u540c\uff0c\u6700\u5e38\u7528\u7684\u8bc4\u4ef7\u6307\u6807\u5c31\u662fmAP\uff08 m ean A verage P recision\uff09\u548cAP\uff08 A verage P recision\uff09\uff0c\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003 \u76ee\u6807\u68c0\u6d4b\u8bc4\u4ef7\u6307\u6807 \u3002 1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814\uff1a \u6211\u4eec\u5bf95\u4e2a\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u8fdb\u884c\u8c03\u7814\uff0c\u5bf9\u76f8\u5173\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\uff08\u4e3b\u8981\u662f\u6807\u6ce8\u5b57\u6bb5\uff09\u8fdb\u884c\u5206\u6790\u6c47\u603b\uff0c\u76f8\u540c\u542b\u4e49\u7684\u6807\u6ce8\u5b57\u6bb5\u4f1a\u4ee5\u7edf\u4e00\u547d\u540d\u8fdb\u884c\u5c55\u793a\uff0c\u6c47\u603b\u4fe1\u606f\u5982\u4e0b\u8868\u6240\u793a\uff1a \u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id label_id rbbox bbox istruncated isdifficult pose theta head DOTAv2.0 Y Y Y Y Y HRSC2016 Y Y Y Y Y Y Y UCAS_AOD Y Y Y Y Y SZTAKI-INRIA Y Y Y SSDD+ Y Y Y Y Y Y \u5bf9\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u8fdb\u884c\u6c47\u603b\uff0c\u5f97\u5230\u4e0b\u8868\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a label_id \u5355\u4e2a\u76ee\u6807\u6240\u5c5e\u7684\u7c7b\u522b rbbox \u5b9a\u4f4d\u5355\u4e2a\u65cb\u8f6c\u76ee\u6807\u6846\uff0c\u6bd4\u5982\u7528[x1, y1, x2, y2, x3, y3, x4, y4]\u8868\u793a \u72ec\u7acb\u5b57\u6bb5 bbox \u5b9a\u4f4d\u5355\u4e2a\u76ee\u6807\u7684\u666e\u901a\u77e9\u5f62\u6846\uff0c\u6bd4\u5982\u7528[xmin, ymin, xmax, ymax]\u8868\u793a\uff0c\u4e00\u822c\u7528\u4e8e\u666e\u901a\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\uff0c\u505a\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u65f6\uff0c\u5e76\u4e0d\u4f7f\u7528\u8be5\u5b57\u6bb5 istruncated \u76ee\u6807\u662f\u5426\u88ab\u622a\u65ad\uff0c\u5373\u76ee\u6807\u90e8\u5206\u5904\u4e8e\u56fe\u7247\u4e4b\u5916 isdifficult \u662f\u5426\u4e3a\u68c0\u6d4b\u56f0\u96be\u7684\u76ee\u6807 theta \u7269\u4f53\u5c3e\u90e8\u5230\u5934\u90e8\u7684\u5411\u91cf\u4e0ex\u8f74\u6b63\u65b9\u5411\u7684\u5939\u89d2 head \u7269\u4f53\u5934\u90e8\u5750\u6807 pose \u62cd\u6444\u89d2\u5ea6\uff0c\u53d6\u503c\u4e3a Unspecified\uff0cFrontal\uff0cRear\uff0cLeft\uff0cRight \u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u8981\u63cf\u8ff0\u4e00\u4e2a\u65cb\u8f6c\u68c0\u6d4b\u6570\u636e\u96c6\u7684\u6837\u672c\uff0cimage_id\u3001label_id\u548crbbox\u662f\u6700\u57fa\u7840\u7684\u5b57\u6bb5\uff0c\u6b64\u5916\u8fd8\u5305\u542b\u4e86\u5404\u79cd\u63cf\u8ff0\u8fb9\u754c\u6846\u4fe1\u606f\u7684\u7279\u6b8a\u5b57\u6bb5\u3002 2. \u6a21\u677f\u5c55\u793a \u6839\u636e\u4e0a\u8ff0\u8c03\u7814\uff0c\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u4e2d\u4e00\u5f20 \u56fe\u50cf \u5bf9\u5e94\u4e0d\u5b9a\u6570\u91cf\u7684 \u76ee\u6807 \uff0c\u6bcf\u4e2a\u76ee\u6807\u7528 \u8fb9\u754c\u6846RotatedBBox \u6765\u5b9a\u4f4d\u76ee\u6807\u4f4d\u7f6e\uff0c\u6bcf\u4e2aRotatedBBox\u540c\u65f6\u63d0\u4f9b \u8bed\u4e49\u6807\u7b7e \uff0c\u7531\u6b64\u6211\u4eec\u5b9a\u4e49\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u6a21\u677f\u5982\u4e0b\uff1a $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : rbbox : RotatedBBox[mode=\"xyxy\"] label : Label[dom=$cdom] OrientedObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] \u5728\u68c0\u6d4b\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff08\u8be6\u7ec6\u5b66\u4e60\u8bf7\u53c2\u8003 DSDL\u8bed\u8a00\u6559\u7a0b \uff09 $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalObjectEntry: \u5b9a\u4e49\u4e86\u8fb9\u754c\u6846\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: label \u8fb9\u754c\u6846\u7684\u7c7b\u522b rbbox \u8fb9\u754c\u6846\u7684\u4f4d\u7f6e\uff0c\u76ee\u524d\u6709\u4e24\u79cd\u6a21\u5f0f RotatedBBox[mode=\"xyxy\"]\uff1a\u4ee3\u8868\u4ee5\u56db\u8fb9\u5f62\u8868\u793a\u6807\u6ce8\u6846\uff0c\u5177\u4f53\u6807\u6ce8\u503c\u793a\u4f8b\uff1a[x1,y1,x2,y2,x3,y3,x4,y4]\uff0cxi,yi\u4ee3\u8868\u56db\u8fb9\u5f62\u7684\u56db\u4e2a\u9876\u70b9\u5750\u6807\u3002 RotatedBBox[mode=\"xywht\", measure=\"degree\"]\uff1a\u4ee3\u8868\u4ee5\u65cb\u8f6c\u77e9\u5f62\u8868\u793a\u6807\u6ce8\u6846\uff0c\u5177\u4f53\u6807\u6ce8\u503c\u793a\u4f8b\uff1a[x, y, w, h, t]\uff0cx,y\uff1a\u77e9\u5f62\u6846\u7684\u4e2d\u5fc3\u70b9\u5750\u6807\uff0cw,h\uff1a\u77e9\u5f62\u6846\u7684\u5bbd\u548c\u9ad8\uff0ct\uff1a\u77e9\u5f62\u6846\u65cb\u8f6c\u7684\u89d2\u5ea6\u3002 \u5f53measure=\"degree\" \u65f6\uff0ct\u4ee3\u8868\u89d2\u5ea6\uff0c\u8303\u56f4\u662f(-180,180)\uff1b\u5f53measure=\"radian\"\u65f6\uff0ct\u4ee3\u8868\u5f27\u5ea6\uff0c\u8303\u56f4\u662f\uff08-pi,pi\uff09\u3002 measure\u7684\u9ed8\u8ba4\u503c\u662f\u5f27\u5ea6\u3002\u5373RotatedBBox[mode=\"xywht\"]\u4ee3\u8868t\u53ea\u80fd\u586b\u5199\u5f27\u5ea6\u503c\u3002 OrientedObjectDetectionSample: \u5b9a\u4e49\u4e86\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 objects \u6807\u6ce8\u4fe1\u606f\uff0c\u68c0\u6d4b\u4efb\u52a1\u4e2d\uff0c\u4e3a\u524d\u9762\u7684LocalObjectEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 3. \u5b8c\u6574\u793a\u4f8b \u6211\u4eec\u4ee5DOTAv2.0\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u5c55\u793a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6DSDL\u63cf\u8ff0\u6587\u4ef6\u5177\u4f53\u5185\u5bb9\u3002 3.1 DSDL\u8bed\u6cd5\u63cf\u8ff0\u7c7b\u522b\u4fe1\u606f class-dom.yaml $dsdl-version : \"0.5.2\" DOTAV2ClassDom : $def : class_domain classes : - large_vehicle - small_vehicle - ship - ground_track_field - soccer_ball_field - tennis_court - swimming_pool - harbor - baseball_diamond - plane - storage_tank - roundabout - basketball_court - bridge - helicopter - container_crane - airport - helipad ExampleClassDomDescr : $def : struct $params : [ 'cdom' ] $fields : dsdl_name : Label[dom=$cdom] original_name : Str ClassMapInfo : $def : struct $params : [ 'cdom' ] $fields : class_info : List[ExampleClassDomDescr[cdom=$cdom]] \u4e0a\u9762\u7684\u6587\u4ef6\u4e2d\u7ed9\u51fa\u4e86DOTAV2ClassDom\u7684\u5b9a\u4e49\uff0c\u5177\u4f53\u5305\u542b\u4e0b\u5217\u5b57\u6bb5\uff1a $def: \u63cf\u8ff0\u4e86DOTAV2ClassDom\u7684dsdl\u7c7b\u578b\uff0c\u8fd9\u91cc\u5373class_domain classes: \u63cf\u8ff0\u4e86\u8be5\u7c7b\u522b\u57df\u4e2d\u6240\u5305\u542b\u7684\u7c7b\u522b\u53ca\u5176\u987a\u5e8f\uff0c\u5728DOTAV2ClassDom\u6570\u636e\u96c6\u4e2d\uff0c\u5219\u4f9d\u6b21\u4e3alarge_vehicle\u3001small_vehicle\u7b49\u7b49 \u4ececlass_domain\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u6570\u636e\u96c6\u6240\u6709\u7c7b\u522b\u4fe1\u606f\uff0c\u719f\u6089DOTA\u6570\u636e\u96c6\u7684\u7528\u6237\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53\u524d\u7684\u7c7b\u522b\u540d\u4e0e\u539f\u59cbDOTA\u6570\u636e\u96c6\u5b58\u5728\u4e00\u5b9a\u5dee\u5f02\uff0c\u8fd9\u662f\u56e0\u4e3aDOTA\u6570\u636e\u96c6\u7c7b\u522b\u547d\u540d\u5b58\u5728\u7279\u6b8a\u5b57\u7b26\uff0c\u6211\u4eec\u5bf9\u9f50\u8fdb\u884c\u89c4\u8303\u5316\u8f6c\u6362\u3002\u6211\u4eec\u5c06\u539f\u59cb\u547d\u540d\u5230DSDL\u547d\u540d\u7684\u6620\u5c04\u5173\u7cfb\u5b58\u50a8\u5728ClassMapInfo\u4e2d\uff0c\u9700\u8981\u7684\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u83b7\u53d6\uff0c\u5173\u4e8e\u5168\u5c40\u4fe1\u606f\u5b58\u50a8\u65b9\u5f0f\u7684\u5177\u4f53\u4fe1\u606f\u53ef\u4ee5\u67e5\u770bDSDL\u8bed\u8a00\u6559\u7a0b\u7684 Global-Info\u5b57\u6bb5\u7528\u6cd5 \u3002 3.2 \u6570\u636e\u96c6yaml\u6587\u4ef6\u5b9a\u4e49 train.yaml $dsdl-version : \"0.5.2\" $import : - ../defs/class-dom - ../defs/rotated-detection meta : dataset_name : \"DOTAv2.0\" subset-name : \"train\" creator : \"Wuhan University\u00b7Cornell University\u00b7Huazhong University of Science and Technology\" dataset-version : \"2.0\" home-page : \"https://captain-whu.github.io/DOTA/dataset.html\" opendatalab-page : \"https://opendatalab.com/DOTA_V2.0\" task_type : \"Rotated Object Detection\" data : global-info-type : ClassMapInfo[cdom=DOTAV2ClassDom] global-info-path : ../defs/global-info.json sample-type : OrientedObjectDetectionSample[cdom=DOTAV2ClassDom] sample-path : samples.json \u4e0a\u9762\u7684\u63cf\u8ff0\u6587\u4ef6train.yaml\u4e2d\uff0c\u9996\u5148\u5b9a\u4e49\u4e86dsdl\u7684\u7248\u672c\u4fe1\u606f\uff0c\u7136\u540eimport\u4e86\u4e24\u4e2a\u6a21\u677f\u6587\u4ef6\uff0c\u5305\u62ec\u4efb\u52a1\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6a21\u677f\uff0c\u63a5\u7740\u7528meta\u548cdata\u5b57\u6bb5\u6765\u63cf\u8ff0\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: dsdl\u7248\u672c\u4fe1\u606f $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u548cDOTAV2\u7684class domain\u3002 meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u521b\u5efa\u8005\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: \u5176\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a global-info-type: \u6570\u636e\u96c6\u7684\u5168\u5c40\u4fe1\u606f\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ececlass-dom.yaml\u4e2d\u5bfc\u5165\u7684ClassMapInfo\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aDOTAV2ClassDom. global-info-path: \u5168\u5c40\u4fe1\u606fglobal-info.json\u7684\u5b58\u653e\u8def\u5f84. sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u4e2d\u5bfc\u5165\u7684OrientedObjectDetectionSample\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aDOTAV2ClassDom. sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u5982\u679c\u5b9e\u9645\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219samples\u7684\u5185\u5bb9\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6\uff08\u6b64\u5904\u662f\u5f53\u524d\u76ee\u5f55\u4e0b\u7684samples.json\u6587\u4ef6\uff09\uff0c\u5982\u679c\u662f$local\uff0c\u5219\u4ece\u672c\u6587\u4ef6\u7684data.samples\u5b57\u6bb5\u4e2d\u76f4\u63a5\u8bfb\u53d6. samples: \u4fdd\u5b58\u6570\u636e\u96c6\u7684\u6837\u672c\u4fe1\u606f\uff0c\u6ce8\u610f\u53ea\u6709\u5728sample-path\u662f$local\u7684\u65f6\u5019\u8be5\u5b57\u6bb5\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219samples\u4f1a\u4f18\u5148\u4ecesample-path\u4e2d\u7684\u8def\u5f84\u53bb\u8bfb\u53d6 train.yaml\u4e2d\u51fa\u73b0\u7684\u6587\u4ef6\u548c\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a rotated-detection.yaml $dsdl-version : \"0.5.2\" LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : rbbox : RotatedBBox[mode=\"xyxy\"] label : Label[dom=$cdom] isdifficult : Bool bbox : BBox $optional : [ 'bbox' ] OrientedObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image imageshape : ImageShape objects : List[etype=LocalObjectEntry[cdom=$cdom]] acquisition_dates : Str imagesource : Str gsd : Num $optional : [ 'objects' , 'acquisition_dates' , 'imagesource' , 'gsd' ] \u6b64\u6a21\u677f\u4e2d\u4f7f\u7528\u5230\u4e86\u201c$optional\u201d\u5b57\u6bb5\uff0c\u8be5\u5b57\u6bb5\u7684\u503c\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u7684\u503c\u53ea\u80fd\u6765\u6e90\u4e8e\u201c$fields\u201d\u4e2d\u3002\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u5b57\u6bb5\u5728\u6837\u672c\u4e2d\u662f\u53ef\u4ee5\u4e0d\u51fa\u73b0\u7684\u3002\u5177\u4f53\u7528\u6cd5\u8bf7\u53c2\u8003DSDL\u8bed\u8a00\u6559\u7a0b\u4e2d Optional\u7684\u7528\u6cd5 \u3002 global-info.json { \"global-info\" : { \"class_info\" : [ { \"dsdl_name\" : \"roundabout\" , \"original_name\" : \"roundabout\" }, { \"dsdl_name\" : \"large_vehicle\" , \"original_name\" : \"large-vehicle\" }, { \"dsdl_name\" : \"small_vehicle\" , \"original_name\" : \"small-vehicle\" }, ... ] } } samples.json { \"samples\" : [ { \"image\" : \"train/images/P0000.png\" , \"imageshape\" : [ 5502 , 3875 ], \"objects\" : [ { \"rbbox\" : [ 2244.0 , 1791.0 , 2254.0 , 1795.0 , 2245.0 , 1813.0 , 2238.0 , 1809.0 ], \"label\" : \"small_vehicle\" , \"isdifficult\" : true , \"bbox\" : [ 2238.0 , 1791.0 , 16.0 , 22.0 ] }, ... ], \"acquisition_dates\" : \"2016-05-04\" , \"imagesource\" : \"GoogleEarth\" , \"gsd\" : 0.146343590398 } ... ] }","title":"\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b"},{"location":"dsdl_template/cv/cv_rotated_detection/#_1","text":"\u6211\u4eec\u901a\u8fc7\u5bf9\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u8fdb\u884c\u8c03\u7814\uff0c\u5e76\u603b\u7ed3\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\uff0c\u4ece\u800c\u5236\u5b9a\u51fa\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1DSDL\u6a21\u677f\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u4f7f\u7528\u3002","title":"\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1"},{"location":"dsdl_template/cv/cv_rotated_detection/#1","text":"","title":"1. \u4efb\u52a1\u8c03\u7814"},{"location":"dsdl_template/cv/cv_rotated_detection/#11","text":"\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u662f\u6307\u5728\u56fe\u50cf\u4e2d\u7528\u65cb\u8f6c\u77e9\u5f62\u6846\u3001\u56db\u8fb9\u5f62\u751a\u81f3\u4efb\u610f\u5f62\u72b6\u7684\u5f62\u5f0f\u68c0\u6d4b\u51fa\u7269\u4f53\u7684\u4f4d\u7f6e\uff0c\u5e76\u8bc6\u522b\u5176\u6240\u5c5e\u7c7b\u522b\uff0c\u793a\u610f\u56fe\u5982\u4e0b\uff1a","title":"1.1 \u4efb\u52a1\u5b9a\u4e49"},{"location":"dsdl_template/cv/cv_rotated_detection/#12","text":"\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u7684\u8bc4\u4ef7\u6307\u6807\u4e0e\u76ee\u6807\u68c0\u6d4b\u76f8\u540c\uff0c\u6700\u5e38\u7528\u7684\u8bc4\u4ef7\u6307\u6807\u5c31\u662fmAP\uff08 m ean A verage P recision\uff09\u548cAP\uff08 A verage P recision\uff09\uff0c\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003 \u76ee\u6807\u68c0\u6d4b\u8bc4\u4ef7\u6307\u6807 \u3002","title":"1.2 \u8bc4\u4ef7\u6307\u6807\uff1a"},{"location":"dsdl_template/cv/cv_rotated_detection/#13","text":"\u6211\u4eec\u5bf95\u4e2a\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u8fdb\u884c\u8c03\u7814\uff0c\u5bf9\u76f8\u5173\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\uff08\u4e3b\u8981\u662f\u6807\u6ce8\u5b57\u6bb5\uff09\u8fdb\u884c\u5206\u6790\u6c47\u603b\uff0c\u76f8\u540c\u542b\u4e49\u7684\u6807\u6ce8\u5b57\u6bb5\u4f1a\u4ee5\u7edf\u4e00\u547d\u540d\u8fdb\u884c\u5c55\u793a\uff0c\u6c47\u603b\u4fe1\u606f\u5982\u4e0b\u8868\u6240\u793a\uff1a \u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id label_id rbbox bbox istruncated isdifficult pose theta head DOTAv2.0 Y Y Y Y Y HRSC2016 Y Y Y Y Y Y Y UCAS_AOD Y Y Y Y Y SZTAKI-INRIA Y Y Y SSDD+ Y Y Y Y Y Y \u5bf9\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u8fdb\u884c\u6c47\u603b\uff0c\u5f97\u5230\u4e0b\u8868\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a label_id \u5355\u4e2a\u76ee\u6807\u6240\u5c5e\u7684\u7c7b\u522b rbbox \u5b9a\u4f4d\u5355\u4e2a\u65cb\u8f6c\u76ee\u6807\u6846\uff0c\u6bd4\u5982\u7528[x1, y1, x2, y2, x3, y3, x4, y4]\u8868\u793a \u72ec\u7acb\u5b57\u6bb5 bbox \u5b9a\u4f4d\u5355\u4e2a\u76ee\u6807\u7684\u666e\u901a\u77e9\u5f62\u6846\uff0c\u6bd4\u5982\u7528[xmin, ymin, xmax, ymax]\u8868\u793a\uff0c\u4e00\u822c\u7528\u4e8e\u666e\u901a\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\uff0c\u505a\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u65f6\uff0c\u5e76\u4e0d\u4f7f\u7528\u8be5\u5b57\u6bb5 istruncated \u76ee\u6807\u662f\u5426\u88ab\u622a\u65ad\uff0c\u5373\u76ee\u6807\u90e8\u5206\u5904\u4e8e\u56fe\u7247\u4e4b\u5916 isdifficult \u662f\u5426\u4e3a\u68c0\u6d4b\u56f0\u96be\u7684\u76ee\u6807 theta \u7269\u4f53\u5c3e\u90e8\u5230\u5934\u90e8\u7684\u5411\u91cf\u4e0ex\u8f74\u6b63\u65b9\u5411\u7684\u5939\u89d2 head \u7269\u4f53\u5934\u90e8\u5750\u6807 pose \u62cd\u6444\u89d2\u5ea6\uff0c\u53d6\u503c\u4e3a Unspecified\uff0cFrontal\uff0cRear\uff0cLeft\uff0cRight \u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u8981\u63cf\u8ff0\u4e00\u4e2a\u65cb\u8f6c\u68c0\u6d4b\u6570\u636e\u96c6\u7684\u6837\u672c\uff0cimage_id\u3001label_id\u548crbbox\u662f\u6700\u57fa\u7840\u7684\u5b57\u6bb5\uff0c\u6b64\u5916\u8fd8\u5305\u542b\u4e86\u5404\u79cd\u63cf\u8ff0\u8fb9\u754c\u6846\u4fe1\u606f\u7684\u7279\u6b8a\u5b57\u6bb5\u3002","title":"1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814\uff1a"},{"location":"dsdl_template/cv/cv_rotated_detection/#2","text":"\u6839\u636e\u4e0a\u8ff0\u8c03\u7814\uff0c\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u4e2d\u4e00\u5f20 \u56fe\u50cf \u5bf9\u5e94\u4e0d\u5b9a\u6570\u91cf\u7684 \u76ee\u6807 \uff0c\u6bcf\u4e2a\u76ee\u6807\u7528 \u8fb9\u754c\u6846RotatedBBox \u6765\u5b9a\u4f4d\u76ee\u6807\u4f4d\u7f6e\uff0c\u6bcf\u4e2aRotatedBBox\u540c\u65f6\u63d0\u4f9b \u8bed\u4e49\u6807\u7b7e \uff0c\u7531\u6b64\u6211\u4eec\u5b9a\u4e49\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u6a21\u677f\u5982\u4e0b\uff1a $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : rbbox : RotatedBBox[mode=\"xyxy\"] label : Label[dom=$cdom] OrientedObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] \u5728\u68c0\u6d4b\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff08\u8be6\u7ec6\u5b66\u4e60\u8bf7\u53c2\u8003 DSDL\u8bed\u8a00\u6559\u7a0b \uff09 $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalObjectEntry: \u5b9a\u4e49\u4e86\u8fb9\u754c\u6846\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: label \u8fb9\u754c\u6846\u7684\u7c7b\u522b rbbox \u8fb9\u754c\u6846\u7684\u4f4d\u7f6e\uff0c\u76ee\u524d\u6709\u4e24\u79cd\u6a21\u5f0f RotatedBBox[mode=\"xyxy\"]\uff1a\u4ee3\u8868\u4ee5\u56db\u8fb9\u5f62\u8868\u793a\u6807\u6ce8\u6846\uff0c\u5177\u4f53\u6807\u6ce8\u503c\u793a\u4f8b\uff1a[x1,y1,x2,y2,x3,y3,x4,y4]\uff0cxi,yi\u4ee3\u8868\u56db\u8fb9\u5f62\u7684\u56db\u4e2a\u9876\u70b9\u5750\u6807\u3002 RotatedBBox[mode=\"xywht\", measure=\"degree\"]\uff1a\u4ee3\u8868\u4ee5\u65cb\u8f6c\u77e9\u5f62\u8868\u793a\u6807\u6ce8\u6846\uff0c\u5177\u4f53\u6807\u6ce8\u503c\u793a\u4f8b\uff1a[x, y, w, h, t]\uff0cx,y\uff1a\u77e9\u5f62\u6846\u7684\u4e2d\u5fc3\u70b9\u5750\u6807\uff0cw,h\uff1a\u77e9\u5f62\u6846\u7684\u5bbd\u548c\u9ad8\uff0ct\uff1a\u77e9\u5f62\u6846\u65cb\u8f6c\u7684\u89d2\u5ea6\u3002 \u5f53measure=\"degree\" \u65f6\uff0ct\u4ee3\u8868\u89d2\u5ea6\uff0c\u8303\u56f4\u662f(-180,180)\uff1b\u5f53measure=\"radian\"\u65f6\uff0ct\u4ee3\u8868\u5f27\u5ea6\uff0c\u8303\u56f4\u662f\uff08-pi,pi\uff09\u3002 measure\u7684\u9ed8\u8ba4\u503c\u662f\u5f27\u5ea6\u3002\u5373RotatedBBox[mode=\"xywht\"]\u4ee3\u8868t\u53ea\u80fd\u586b\u5199\u5f27\u5ea6\u503c\u3002 OrientedObjectDetectionSample: \u5b9a\u4e49\u4e86\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 objects \u6807\u6ce8\u4fe1\u606f\uff0c\u68c0\u6d4b\u4efb\u52a1\u4e2d\uff0c\u4e3a\u524d\u9762\u7684LocalObjectEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868","title":"2. \u6a21\u677f\u5c55\u793a"},{"location":"dsdl_template/cv/cv_rotated_detection/#3","text":"\u6211\u4eec\u4ee5DOTAv2.0\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u5c55\u793a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6DSDL\u63cf\u8ff0\u6587\u4ef6\u5177\u4f53\u5185\u5bb9\u3002","title":"3. \u5b8c\u6574\u793a\u4f8b"},{"location":"dsdl_template/cv/cv_rotated_detection/#31-dsdl","text":"class-dom.yaml $dsdl-version : \"0.5.2\" DOTAV2ClassDom : $def : class_domain classes : - large_vehicle - small_vehicle - ship - ground_track_field - soccer_ball_field - tennis_court - swimming_pool - harbor - baseball_diamond - plane - storage_tank - roundabout - basketball_court - bridge - helicopter - container_crane - airport - helipad ExampleClassDomDescr : $def : struct $params : [ 'cdom' ] $fields : dsdl_name : Label[dom=$cdom] original_name : Str ClassMapInfo : $def : struct $params : [ 'cdom' ] $fields : class_info : List[ExampleClassDomDescr[cdom=$cdom]] \u4e0a\u9762\u7684\u6587\u4ef6\u4e2d\u7ed9\u51fa\u4e86DOTAV2ClassDom\u7684\u5b9a\u4e49\uff0c\u5177\u4f53\u5305\u542b\u4e0b\u5217\u5b57\u6bb5\uff1a $def: \u63cf\u8ff0\u4e86DOTAV2ClassDom\u7684dsdl\u7c7b\u578b\uff0c\u8fd9\u91cc\u5373class_domain classes: \u63cf\u8ff0\u4e86\u8be5\u7c7b\u522b\u57df\u4e2d\u6240\u5305\u542b\u7684\u7c7b\u522b\u53ca\u5176\u987a\u5e8f\uff0c\u5728DOTAV2ClassDom\u6570\u636e\u96c6\u4e2d\uff0c\u5219\u4f9d\u6b21\u4e3alarge_vehicle\u3001small_vehicle\u7b49\u7b49 \u4ececlass_domain\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u6570\u636e\u96c6\u6240\u6709\u7c7b\u522b\u4fe1\u606f\uff0c\u719f\u6089DOTA\u6570\u636e\u96c6\u7684\u7528\u6237\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53\u524d\u7684\u7c7b\u522b\u540d\u4e0e\u539f\u59cbDOTA\u6570\u636e\u96c6\u5b58\u5728\u4e00\u5b9a\u5dee\u5f02\uff0c\u8fd9\u662f\u56e0\u4e3aDOTA\u6570\u636e\u96c6\u7c7b\u522b\u547d\u540d\u5b58\u5728\u7279\u6b8a\u5b57\u7b26\uff0c\u6211\u4eec\u5bf9\u9f50\u8fdb\u884c\u89c4\u8303\u5316\u8f6c\u6362\u3002\u6211\u4eec\u5c06\u539f\u59cb\u547d\u540d\u5230DSDL\u547d\u540d\u7684\u6620\u5c04\u5173\u7cfb\u5b58\u50a8\u5728ClassMapInfo\u4e2d\uff0c\u9700\u8981\u7684\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u83b7\u53d6\uff0c\u5173\u4e8e\u5168\u5c40\u4fe1\u606f\u5b58\u50a8\u65b9\u5f0f\u7684\u5177\u4f53\u4fe1\u606f\u53ef\u4ee5\u67e5\u770bDSDL\u8bed\u8a00\u6559\u7a0b\u7684 Global-Info\u5b57\u6bb5\u7528\u6cd5 \u3002","title":"3.1 DSDL\u8bed\u6cd5\u63cf\u8ff0\u7c7b\u522b\u4fe1\u606f"},{"location":"dsdl_template/cv/cv_rotated_detection/#32-yaml","text":"train.yaml $dsdl-version : \"0.5.2\" $import : - ../defs/class-dom - ../defs/rotated-detection meta : dataset_name : \"DOTAv2.0\" subset-name : \"train\" creator : \"Wuhan University\u00b7Cornell University\u00b7Huazhong University of Science and Technology\" dataset-version : \"2.0\" home-page : \"https://captain-whu.github.io/DOTA/dataset.html\" opendatalab-page : \"https://opendatalab.com/DOTA_V2.0\" task_type : \"Rotated Object Detection\" data : global-info-type : ClassMapInfo[cdom=DOTAV2ClassDom] global-info-path : ../defs/global-info.json sample-type : OrientedObjectDetectionSample[cdom=DOTAV2ClassDom] sample-path : samples.json \u4e0a\u9762\u7684\u63cf\u8ff0\u6587\u4ef6train.yaml\u4e2d\uff0c\u9996\u5148\u5b9a\u4e49\u4e86dsdl\u7684\u7248\u672c\u4fe1\u606f\uff0c\u7136\u540eimport\u4e86\u4e24\u4e2a\u6a21\u677f\u6587\u4ef6\uff0c\u5305\u62ec\u4efb\u52a1\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6a21\u677f\uff0c\u63a5\u7740\u7528meta\u548cdata\u5b57\u6bb5\u6765\u63cf\u8ff0\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: dsdl\u7248\u672c\u4fe1\u606f $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u548cDOTAV2\u7684class domain\u3002 meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u521b\u5efa\u8005\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: \u5176\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a global-info-type: \u6570\u636e\u96c6\u7684\u5168\u5c40\u4fe1\u606f\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ececlass-dom.yaml\u4e2d\u5bfc\u5165\u7684ClassMapInfo\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aDOTAV2ClassDom. global-info-path: \u5168\u5c40\u4fe1\u606fglobal-info.json\u7684\u5b58\u653e\u8def\u5f84. sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u4e2d\u5bfc\u5165\u7684OrientedObjectDetectionSample\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aDOTAV2ClassDom. sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u5982\u679c\u5b9e\u9645\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219samples\u7684\u5185\u5bb9\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6\uff08\u6b64\u5904\u662f\u5f53\u524d\u76ee\u5f55\u4e0b\u7684samples.json\u6587\u4ef6\uff09\uff0c\u5982\u679c\u662f$local\uff0c\u5219\u4ece\u672c\u6587\u4ef6\u7684data.samples\u5b57\u6bb5\u4e2d\u76f4\u63a5\u8bfb\u53d6. samples: \u4fdd\u5b58\u6570\u636e\u96c6\u7684\u6837\u672c\u4fe1\u606f\uff0c\u6ce8\u610f\u53ea\u6709\u5728sample-path\u662f$local\u7684\u65f6\u5019\u8be5\u5b57\u6bb5\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219samples\u4f1a\u4f18\u5148\u4ecesample-path\u4e2d\u7684\u8def\u5f84\u53bb\u8bfb\u53d6 train.yaml\u4e2d\u51fa\u73b0\u7684\u6587\u4ef6\u548c\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a rotated-detection.yaml $dsdl-version : \"0.5.2\" LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : rbbox : RotatedBBox[mode=\"xyxy\"] label : Label[dom=$cdom] isdifficult : Bool bbox : BBox $optional : [ 'bbox' ] OrientedObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image imageshape : ImageShape objects : List[etype=LocalObjectEntry[cdom=$cdom]] acquisition_dates : Str imagesource : Str gsd : Num $optional : [ 'objects' , 'acquisition_dates' , 'imagesource' , 'gsd' ] \u6b64\u6a21\u677f\u4e2d\u4f7f\u7528\u5230\u4e86\u201c$optional\u201d\u5b57\u6bb5\uff0c\u8be5\u5b57\u6bb5\u7684\u503c\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u7684\u503c\u53ea\u80fd\u6765\u6e90\u4e8e\u201c$fields\u201d\u4e2d\u3002\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u5b57\u6bb5\u5728\u6837\u672c\u4e2d\u662f\u53ef\u4ee5\u4e0d\u51fa\u73b0\u7684\u3002\u5177\u4f53\u7528\u6cd5\u8bf7\u53c2\u8003DSDL\u8bed\u8a00\u6559\u7a0b\u4e2d Optional\u7684\u7528\u6cd5 \u3002 global-info.json { \"global-info\" : { \"class_info\" : [ { \"dsdl_name\" : \"roundabout\" , \"original_name\" : \"roundabout\" }, { \"dsdl_name\" : \"large_vehicle\" , \"original_name\" : \"large-vehicle\" }, { \"dsdl_name\" : \"small_vehicle\" , \"original_name\" : \"small-vehicle\" }, ... ] } } samples.json { \"samples\" : [ { \"image\" : \"train/images/P0000.png\" , \"imageshape\" : [ 5502 , 3875 ], \"objects\" : [ { \"rbbox\" : [ 2244.0 , 1791.0 , 2254.0 , 1795.0 , 2245.0 , 1813.0 , 2238.0 , 1809.0 ], \"label\" : \"small_vehicle\" , \"isdifficult\" : true , \"bbox\" : [ 2238.0 , 1791.0 , 16.0 , 22.0 ] }, ... ], \"acquisition_dates\" : \"2016-05-04\" , \"imagesource\" : \"GoogleEarth\" , \"gsd\" : 0.146343590398 } ... ] }","title":"3.2 \u6570\u636e\u96c6yaml\u6587\u4ef6\u5b9a\u4e49"},{"location":"dsdl_template/cv/cv_segmentation/","text":"\u56fe\u50cf\u5206\u5272\u4efb\u52a1 \u4e3a\u4e86\u5236\u5b9a\u56fe\u50cf\u5206\u5272\u4efb\u52a1\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684\u6a21\u677f\uff0c\u6211\u4eec\u5bf9\u4e3b\u6d41\u7684\u56fe\u50cf\u5206\u5272\u4efb\u52a1\u6570\u636e\u96c6\u8fdb\u884c\u4e86\u8c03\u7814\uff0c\u4e0e\u5206\u7c7b\u4efb\u52a1\u548c\u68c0\u6d4b\u4efb\u52a1\u4e0d\u540c\u7684\u662f\uff0c\u56fe\u50cf\u5206\u5272\u4efb\u52a1\u901a\u5e38\u5206\u4e3a\u8bed\u4e49\u5206\u5272\u3001\u5b9e\u4f8b\u5206\u5272\u3001\u5168\u666f\u5206\u5272\u4e09\u4e2a\u5b50\u4efb\u52a1\uff0c\u6211\u4eec\u4f1a\u5206\u5b50\u4efb\u52a1\u8ba8\u8bba\u5176\u76ee\u7684\u548c\u5e38\u89c1\u6807\u6ce8\u4fe1\u606f\u6240\u5305\u542b\u7684\u5b57\u6bb5\uff0c\u4ece\u4e2d\u6574\u7406\u51fa\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u5236\u5b9a\u4e09\u4e2a\u5b50\u4efb\u52a1\u6570\u7684\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684\u901a\u7528\u6a21\u677f\u3002 1. \u4efb\u52a1\u8c03\u7814 1.1 \u4efb\u52a1\u5b9a\u4e49 \u56fe\u50cf\u5206\u5272\u4efb\u52a1\u662f\u6307\u901a\u8fc7\u5bf9\u56fe\u7247\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u8fdb\u884c\u8bed\u4e49\u6807\u6ce8\uff0c\u6839\u636e\u5176\u6807\u6ce8\u7684\u76ee\u6807\u7684\u8f7b\u5fae\u4e0d\u540c\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u5b50\u4efb\u52a1\uff1a \u8bed\u4e49\u5206\u5272\uff1a\u5373\u6700\u57fa\u672c\u7684\u56fe\u50cf\u5206\u5272\uff0c\u5c06\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u8bed\u4e49\u7c7b\u522b\u6807\u6ce8\u51fa\u6765\uff1b \u5b9e\u4f8b\u5206\u5272\uff1a\u53ea\u5173\u6ce8\u53ef\u6570\u7269\u4f53\uff08\u5982\u4eba\uff0c\u8f66\u7b49\uff09\u7684\u56fe\u50cf\u5206\u5272\uff0c\u5c06\u56fe\u7247\u4e2d\u7684\u4e0d\u540c\u5b9e\u4f8b\u90fd\u533a\u5206\u6807\u6ce8\u51fa\u6765\uff1b \u5168\u666f\u5206\u5272\uff1a\u8bed\u4e49\u5206\u5272\u548c\u5b9e\u4f8b\u5206\u5272\u7684\u7efc\u5408\uff0c\u901a\u5e38\u5728\u81ea\u52a8\u9a7e\u9a76\u9886\u57df\u4e2d\u51fa\u73b0\uff0c\u5176\u5c06\u7269\u4f53\u5206\u4e3a\u53ef\u6570\u7269\u4f53\uff08things\uff0c\u6bd4\u5982\u4eba\uff0c\u732b\uff0c\u8f66\u7b49\u7b49\uff09\u548c\u4e0d\u53ef\u6570\u7269\u4f53\uff08stuff\uff0c\u6bd4\u5982\u5929\u7a7a\uff0c\u9a6c\u8def\u7b49\u7b49\uff09\uff0c\u5bf9\u4e8e\u53ef\u6570\u7269\u4f53\u6807\u6ce8\u8bed\u4e49\u548c\u5b9e\u4f8b\uff0c\u5bf9\u4e8e\u4e0d\u53ef\u6570\u7269\u4f53\uff0c\u5219\u53ea\u6807\u6ce8\u8bed\u4e49\uff1b \u4e09\u79cd\u56fe\u50cf\u5206\u5272\u7684\u53ef\u89c6\u5316\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a ( \u56fe\u7247\u53d6\u81eaCVPR2019\u7684\u8bba\u6587: Panoptic Segmentation )\uff1a 1.2 \u8bc4\u4ef7\u6307\u6807\uff1a \u56fe\u50cf\u5206\u5272\u4e09\u79cd\u5b50\u4efb\u52a1\u7684\u8bc4\u4ef7\u6307\u6807\u7565\u6709\u4e0d\u540c\uff0c\u5177\u4f53\u5982\u4e0b\uff1a 1.2.1 \u8bed\u4e49\u5206\u5272 \u8bed\u4e49\u5206\u5272\u7684\u8bc4\u4ef7\u6807\u51c6\u4e00\u822c\u91c7\u7528mIoU\uff08mean Intersection over Union\uff0c\u5373\u9884\u6d4b\u533a\u57df\u4e0e\u771f\u503c\u4e4b\u95f4\u7684\u4ea4\u96c6\u5e76\u96c6\u7684\u6bd4\u4f8b\uff09\u548cmPA\uff08mean Pixel Accuracy\uff0c\u5373\u6b63\u786e\u5206\u7c7b\u7684\u50cf\u7d20\u4e0e\u5168\u90e8\u50cf\u7d20\u7684\u6bd4\u4f8b\uff09\uff0c\u4e0e\u68c0\u6d4b\u4e0d\u540c\uff0c\u8bed\u4e49\u5206\u5272\u7684mIoU\u66f4\u591a\u662f\u8ba1\u7b97\u4e0d\u89c4\u5219\u533a\u57df\uff0c\u800c\u975e\u77e9\u5f62\u6846\u4e4b\u95f4\u3002 \u8fd9\u91cc\u4e3a\u65b9\u4fbf\u8ba1\u7b97\uff0c\u5047\u5b9a\u4e00\u5b9a\u6709k+1\u7c7b\uff08\u5305\u62eck\u4e2a\u76ee\u6807\u7c7b\u548c1\u4e2a\u80cc\u666f\u7c7b\uff09\uff0c p_{ij} p_{ij} \u8868\u793a\u672c\u5c5e\u4e8e i i \u7c7b\u5374\u9884\u6d4b\u4e3a j j \u7c7b\u7684\u50cf\u7d20\u70b9\u603b\u6570\uff0c\u5177\u4f53\u5730\uff0c p_{ii} p_{ii} \u8868\u793atrue postives\uff0c p_{ij} p_{ij} \u8868\u793afalse positives\uff0c p_{ji} p_{ji} \u8868\u793afalse negatives; \u5219mIoU\u548cmPA\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\u6240\u793a\uff1a mIoU mIoU = {1\\over{k+1}} \\sum_{i=0}^{k}{{p_{ii}}\\over{\\sum_{j=0}^{k}p_{ij}+\\sum_{j=0}^{k}p_{ji}-p_{ii}}} mIoU = {1\\over{k+1}} \\sum_{i=0}^{k}{{p_{ii}}\\over{\\sum_{j=0}^{k}p_{ij}+\\sum_{j=0}^{k}p_{ji}-p_{ii}}} mPA mPA = {1\\over{k+1}} \\sum_{i=0}^{k} {{p_{ii}}\\over{\\sum_{j=0}^{k}p_{ij}}} mPA = {1\\over{k+1}} \\sum_{i=0}^{k} {{p_{ii}}\\over{\\sum_{j=0}^{k}p_{ij}}} 1.2.2 \u5b9e\u4f8b\u5206\u5272 \u5b9e\u4f8b\u5206\u5272\u7684\u8bc4\u4ef7\u6807\u51c6\u901a\u5e38\u548c\u76ee\u6807\u68c0\u6d4b\u76f8\u540c\uff0c\u91c7\u7528mAP\u4f5c\u4e3a\u8bc4\u4ef7\u6807\u51c6\uff0c\u4f46\u662f\u5176\u4e2d\u7684mIoU\u8ba1\u7b97\u65b9\u5f0f\u4e3a\u9884\u6d4bmask\u548c\u771f\u503cmask\u4e4b\u95f4\u7684IoU\uff0c\u800c\u975e\u5728\u68c0\u6d4b\u4e2d\u9884\u6d4b\u6846\u548c\u771f\u503c\u68c0\u6d4b\u6846\u4e4b\u95f4\u7684IoU\uff0c\u5173\u4e8e\u68c0\u6d4b\u4e2dmAP\u7684\u8ba1\u7b97\u65b9\u5f0f\u53c2\u8003 \u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u8c03\u7814\u62a5\u544a \u3002 1.2.3 \u5168\u666f\u5206\u5272 \u5168\u666f\u5206\u5272\u91c7\u7528\u4e00\u79cd\u65b0\u7684\u8bc4\u4ef7\u6807\u51c6\uff0c\u65e2\u8003\u8651\u5230things\uff0c\u4e5f\u8003\u8651\u5230\u4e86stuff\uff0c\u5373Panoptic Quality\uff08PQ\uff09\uff0c\u8ba1\u7b97PQ\u6709\u4e24\u4e2a\u6b65\u9aa4\uff1a \u5206\u5272\u5339\u914d\uff1a\u5f53\u4e14\u4ec5\u5f53\u9884\u6d4b\u533a\u57df\u548c\u771f\u503c\u533a\u57df\u7684\u4ea4\u5e76\u6bd4\uff08IoU\uff09\u5927\u4e8e0.5\u65f6\uff0c\u8ba4\u4e3a\u4e8c\u8005\u5339\u914d\uff1b\uff08\u7ed3\u5408\u5168\u666f\u5206\u5272\u7684\u975e\u91cd\u53e0\u6027\u6211\u4eec\u53ef\u4ee5\u63a8\u8bba\uff0c\u6bcf\u4e2a\u771f\u503c\u533a\u57df\u6700\u591a\u53ef\u4ee5\u6709\u4e00\u4e2a\u9884\u6d4b\u533a\u57df\u5339\u914d\u3002\uff09 PQ\u8ba1\u7b97\uff1a\u5f53\u5206\u5272\u5339\u914d\u5b8c\u6210\u540e\uff0c\u6bcf\u4e00\u4e2a\u5206\u5272\u9884\u6d4b\u53ef\u80fd\u6709\u4e09\u79cd\u60c5\u51b5: TP (\u6b63\u786e\u5339\u914d\u7684\u5206\u5272\u5bf9), FP (\u672a\u5339\u914d\u7684\u9884\u6d4b\u7ed3\u679c), and FN (\u672a\u5339\u914d\u7684\u771f\u503c\u533a\u57df). \u7ed9\u5b9a TP, FP, \u548c FN, \u6bcf\u4e2a\u7c7b\u522b\u7684PQ\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u516c\u5f0f\u8ba1\u7b97: PQ = {{\\sum_{(p,g)\\in TP} {IoU(p,g)}}\\over{\\lvert TP \\rvert + {1\\over2} \\lvert FP \\rvert + {1\\over2} \\lvert FN \\rvert}} PQ = {{\\sum_{(p,g)\\in TP} {IoU(p,g)}}\\over{\\lvert TP \\rvert + {1\\over2} \\lvert FP \\rvert + {1\\over2} \\lvert FN \\rvert}} PQ\u540c\u65f6\u4e5f\u53ef\u4ee5\u770b\u6210\u662fsegmentation quality (SQ) \u548c recognition quality (RQ)\u7684\u4e58\u79ef\uff1a PQ = \\underbrace{{{\\sum_{(p,g)\\in TP} {IoU(p,g)}}\\over{\\lvert TP \\rvert}}}_{\\text{segmentation quality (SQ)}} \\times \\underbrace{{ {\\lvert TP \\rvert}\\over{{\\lvert TP \\rvert + {1\\over2} \\lvert FP \\rvert + {1\\over2} \\lvert FN \\rvert}}}}_{\\text{recognition quality (RQ)}} PQ = \\underbrace{{{\\sum_{(p,g)\\in TP} {IoU(p,g)}}\\over{\\lvert TP \\rvert}}}_{\\text{segmentation quality (SQ)}} \\times \\underbrace{{ {\\lvert TP \\rvert}\\over{{\\lvert TP \\rvert + {1\\over2} \\lvert FP \\rvert + {1\\over2} \\lvert FN \\rvert}}}}_{\\text{recognition quality (RQ)}} \u5173\u4e8ePQ\u8ba1\u7b97\u516c\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u53c2\u8003\u539f\u8bba\u6587 Panoptic Segmentation . 1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814\uff1a \u6211\u4eec\u8c03\u7814\u4e86\u4e3b\u6d41\u7684\u56fe\u50cf\u5206\u5272\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u5305\u542b\u4e86COCO\u3001VOC\u3001CityScapes\u3001ADE20K\u7b49\u5e38\u89c1\u6570\u636e\u96c6\u3002\u8003\u8651\u5230\u6709\u4e9b\u6570\u636e\u96c6\u540c\u65f6\u5305\u542b\u4e86\u4e0d\u540c\u7684\u5206\u5272\u5b50\u4efb\u52a1\uff0c\u8fd9\u91cc\u5bf9\u4e09\u4e2a\u5b50\u4efb\u52a1\u8fdb\u884c\u4e86\u62c6\u5206\uff0c\u4e14\u6bcf\u4e2a\u5b50\u4efb\u52a1\u4e0b\u53ea\u8003\u8651\u548c\u4ed6\u76f8\u5173\u7684\u6807\u6ce8\u5185\u5bb9\u3002\u6b64\u5916\uff0c\u8c03\u7814\u8fc7\u7a0b\u4f1a\u9047\u5230\u4e00\u4e9b\u540d\u79f0\u4e0d\u540c\uff0c\u4f46\u662f\u5b9e\u9645\u542b\u4e49\u76f8\u540c\u6216\u7c7b\u4f3c\u7684\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u6211\u4eec\u4e5f\u89c6\u4e3a\u540c\u4e00\u5b57\u6bb5\uff0c\u5e76\u5728\u8fd9\u91cc\u7edf\u4e00\u53bb\u79f0\u547c\uff0c\u6bd4\u5982image_id\u8868\u793a\u56fe\u7247\u7684\u552f\u4e00\u8868\u793a\uff0c\u6709\u65f6\u5019\u4e5f\u4f1a\u7528\u56fe\u7247\u8def\u5f84\u6765\u8868\u793a\uff0ccategory_id\u540c\u65f6\u4e5f\u5305\u542bcategory_name\u7684\u542b\u4e49\u3002\u6700\u540e\uff0c\u8003\u8651\u5230\u56fe\u50cf\u5206\u5272\u7279\u6709\u7684\u5206\u5272\u56fe(segmentation_map, \u5373\u56fe\u7247\u5f62\u5f0f\u5bf9\u539f\u56fe\u8fdb\u884c\u6807\u6ce8\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u50cf\u7d20\u503c\u90fd\u662f\u539f\u56fe\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6807\u6ce8\u4fe1\u606f)\u6807\u6ce8\u5f62\u5f0f\uff0ccategory_id\u6709\u65f6\u5019\u6ca1\u6709\u663e\u5f0f\u7684\u6807\u6ce8\u51fa\u6765\uff0c\u800c\u662f\u6839\u636e\u5206\u5272\u56fe\u4e2d\u7684\u50cf\u7d20\u503c\u901a\u8fc7\u4e00\u5b9a\u7684\u5173\u7cfb\u8ba1\u7b97\u5f97\u5230\uff0c\u56e0\u6b64\u6211\u4eec\u5177\u8c61\u5316\u4e86\u4e00\u4e2a\u4e0d\u5b58\u7684\u7684\u5b57\u6bb5pixel_mapping\uff0c\u7528\u6765\u63cf\u8ff0\u4ece\u50cf\u7d20\u503c\u5230\u5b9e\u9645\u7684label_id\u548cinstance_id\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u88ab\u52a0\u4e0a\u4e86*\u4ee5\u793a\u533a\u522b\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5b57\u6bb5\u5c06\u548csegmentation_map\u5b57\u6bb5\u7ed1\u5b9a\u51fa\u73b0\uff08\u6709\u4e9b\u50cf\u7d20\u503c\u7b49\u4e8elabel_id\u6216\u8005instance_id\u7684\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u6620\u5c04\u5173\u7cfb\u662f\u6052\u7b49\u6620\u5c04\uff09\u3002 1.3.1 \u8bed\u4e49\u5206\u5272\u6570\u636e\u96c6\u8c03\u7814 \u6211\u4eec\u8c03\u7814\u4e86VOC\uff0cCityScapes\u548cADE20K\u4e09\u4e2a\u6570\u636e\u96c6\u7684\u8bed\u4e49\u5206\u5272\u4efb\u52a1\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a \u8bed\u4e49\u5206\u5272\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id segmentation_map pixel_mapping* VOC Y Y Y CityScapes Y Y Y ADE20K Y Y Y \u4e0a\u8868\u4e2d*\u5373\u8868\u793a\u4e0a\u6587\u63d0\u5230\u7684\u5047\u60f3\u5b57\u6bb5\uff08\u5373\u5b9e\u9645\u6709\u8fd9\u4e2a\u4fe1\u606f\uff0c\u4f46\u662f\u4e0d\u662f\u901a\u8fc7\u6807\u6ce8\u6587\u4ef6\u7684\u5f62\u5f0f\u7ed9\u51fa\u6765\u7684\uff0c\u4e0b\u540c\uff09\uff0c\u5176\u4ed6\u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a segmentation_map \u5206\u5272\u56fe\uff0c\u8bed\u4e49\u5206\u5272\u4efb\u52a1\u5c31\u662f\u8bed\u4e49\u5206\u5272mask \u72ec\u7acb\u5b57\u6bb5 pixel_mapping* \u5206\u5272\u56fe\u4e2d\u7684\u50cf\u7d20\u503c\u5230\u8bed\u4e49id/\u5b9e\u4f8bid\u7684\u6620\u5c04\u5173\u7cfb 1.3.2 \u5b9e\u4f8b\u5206\u5272\u6570\u636e\u96c6\u8c03\u7814 \u6211\u4eec\u8c03\u7814\u4e86VOC, COCO, CityScapes, ADE20K\u8fd9\u56db\u4e2a\u6570\u636e\u96c6\u7684\u5b9e\u4f8b\u5206\u5272\u4efb\u52a1\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a \u5b9e\u4f8b\u5206\u5272\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id segmentation_map pixel_mapping* polygon/rle_polygon category_id instance_id area iscrowd occluded parts scenes VOC Y Y Y COCO Y Y Y Y Y Y CityScapes Y Y Y Y Y Y ADE20K Y Y Y Y Y Y Y Y Y \u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a \u72ec\u7acb\u5b57\u6bb5 segmentation_map \u5206\u5272\u56fe\u4e2d\u7684\u50cf\u7d20\u503c\u5230\u8bed\u4e49id/\u5b9e\u4f8bid\u7684\u6620\u5c04\u5173\u7cfb pixel_mapping* \u5206\u5272\u56fe\uff0c\u8bed\u4e49\u5206\u5272\u4efb\u52a1\u5c31\u662f\u8bed\u4e49\u5206\u5272mask polygon/rle_polygon \u5355\u4e2a\u5bf9\u8c61\u7684\u591a\u8fb9\u5f62\u6807\u6ce8\u7684\u9876\u70b9\u5750\u6807\u96c6\u5408 category_id \u5355\u4e2a\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u522bid instance_id \u5355\u4e2a\u5bf9\u8c61\u6240\u5c5e\u7684\u5b9e\u4f8bid area \u5355\u4e2a\u5bf9\u8c61\u7684\u5206\u5272\u533a\u57df\u9762\u79ef iscrowd \u8be5\u5bf9\u8c61\u662f\u5426\u4e3a\u4e00\u7ec4\u5bf9\u8c61\uff0c\u6bd4\u5982\u4e00\u7fa4\u4eba\u3001\u4e00\u5806\u82f9\u679c\u7b49 occluded \u8be5\u5bf9\u8c61\u662f\u5426\u88ab\u906e\u6321 parts \u90e8\u4ef6\u4fe1\u606f\uff0c\u5373\u8be5\u5bf9\u8c61\u662f\u5426\u5305\u542b\u67d0\u4e2a\u90e8\u4ef6(part)\uff0c\u6216\u8005\u8be5\u5bf9\u8c61\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u5bf9\u8c61\u7684\u90e8\u4ef6(part) scenes \u6bcf\u5f20\u56fe\u7247\u6240\u5c5e\u7684\u573a\u666f\u7c7b\u522b 1.3.3 \u5168\u666f\u5206\u5272\u6570\u636e\u96c6\u8c03\u7814 \u6211\u4eec\u8c03\u7814\u4e86COCO\u548cCityScapes\u4e24\u4e2a\u6570\u636e\u96c6\u7684\u5168\u666f\u5206\u5272\u4efb\u52a1\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a \u5b9e\u4f8b\u5206\u5272\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id segmentation_map pixel_mapping* polygon/rle_polygon category_id instance_id area iscrowd bbox isthing supercategory COCO Y Y Y Y Y Y Y Y Y Y Y CityScapes Y Y Y Y Y Y \u5907\u6ce8\uff1a\u8fd9\u91ccisthing\u548csupercategory\u90fd\u662f\u7c7b\u522b\u57df(class_domain)\u7684\u63cf\u8ff0\u5b57\u6bb5\uff0c\u5373\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u4e0d\u662f\u63cf\u8ff0\u67d0\u4e00\u4e2a\u6807\u6ce8\u7684\uff0c\u800c\u662f\u63cf\u8ff0\u67d0\u4e00\u4e2a\u7c7b\u522b\u7684\u3002 \u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a segmentation_map \u5206\u5272\u56fe\u4e2d\u7684\u50cf\u7d20\u503c\u5230\u8bed\u4e49id/\u5b9e\u4f8bid\u7684\u6620\u5c04\u5173\u7cfb \u72ec\u7acb\u5b57\u6bb5 pixel_mapping* \u5206\u5272\u56fe\uff0c\u8bed\u4e49\u5206\u5272\u4efb\u52a1\u5c31\u662f\u8bed\u4e49\u5206\u5272mask polygon/rle_polygon \u5355\u4e2a\u5bf9\u8c61\u7684\u591a\u8fb9\u5f62\u6807\u6ce8\u7684\u9876\u70b9\u5750\u6807\u96c6\u5408 category_id \u5355\u4e2a\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u522bid instance_id \u5355\u4e2a\u5bf9\u8c61\u6240\u5c5e\u7684\u5b9e\u4f8bid area \u5355\u4e2a\u5bf9\u8c61\u7684\u5206\u5272\u533a\u57df\u9762\u79ef iscrowd \u8be5\u5bf9\u8c61\u662f\u5426\u4e3a\u4e00\u7ec4\u5bf9\u8c61\uff0c\u6bd4\u5982\u4e00\u7fa4\u4eba\u3001\u4e00\u5806\u82f9\u679c\u7b49 bbox \u7269\u4f53\u7684\u8fb9\u754c\u6846 isthing \u662f\u5426\u662fthings\uff0c\u5168\u666f\u5206\u5272\u901a\u5e38\u628a\u76ee\u6807\u5206\u4e3athings\uff08\u53ef\u6570\uff0c\u8fdb\u884c\u5b9e\u4f8b\u6807\u6ce8\uff09\u548cstuff\uff08\u4e0d\u53ef\u6570\uff0c\u53ea\u8fdb\u884c\u8bed\u4e49\u6807\u6ce8\uff09 supercategory \u7c7b\u522b\u7684\u7236\u7c7b\u522b\uff0c\u6bd4\u5982\u7c7b\u522b\"\u732b\"\u7684\u7236\u7c7b\u522b\u53ef\u80fd\u662f\"\u52a8\u7269\" 1.3.4 \u5206\u5272\u56fesegmentation_map\u8c03\u7814 \u524d\u6587\u53ef\u4ee5\u770b\u51fasegmentation_map\u662f\u56fe\u50cf\u5206\u5272\u4e2d\u6700\u4e3b\u8981\u7684\u6807\u6ce8\u624b\u6bb5\uff0c\u4f46\u662f\u4e0d\u540c\u6570\u636e\u96c6\u7684segmentation_map\u5374\u6709\u4e0d\u540c\u7684\u683c\u5f0f\uff0c\u8fd9\u91cc\u4e3b\u8981\u8c03\u7814segmentation_map\u53ca\u5176\u5bf9\u5e94\u7684pixel_mapping\u7684\u4e0d\u540c\u60c5\u51b5\uff0c\u65b9\u4fbf\u5236\u5b9asegmentation_map\u7684dsdl\u89c4\u8303\u3002 segmentation_map\u7684\u5e38\u89c1\u60c5\u51b5\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a \u57fa\u672c\u5f62\u5f0f\uff1a \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0csegmentation_map\u662f\u5355\u901a\u9053\uff0c\u5176\u50cf\u7d20\u503c\u662fint\u7c7b\u578b\uff0c\u5bf9\u4e8e\u8bed\u4e49\u5206\u5272\u6765\u8bf4\uff0csegmentation_map\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u50cf\u7d20\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u8bed\u4e49\u7c7b\u522b\uff0c\u5bf9\u4e8e\u5b9e\u4f8b\u5206\u5272\u6765\u8bf4\uff0csegmentation_map\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u5b9e\u4f8b\u7c7b\u522b\u3002voc\u6570\u636e\u96c6\u7684\u8bed\u4e49\u5206\u5272\u548c\u5b9e\u4f8b\u5206\u5272\u4efb\u52a1\u5c31\u662f\u91c7\u7528\u7684\u8fd9\u79cd\u65b9\u6848\uff1a \u901a\u8fc7\u67d0\u79cd\u6620\u5c04\u5f97\u5230\u8bed\u4e49\u7c7b\u522b\u6216\u5b9e\u4f8b\u7c7b\u522b\uff1a \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5206\u5272map\u53ef\u80fd\u662f\u5355\u901a\u9053\u4e5f\u53ef\u80fd\u662f\u591a\u901a\u9053\uff0c\u800c\u8bed\u4e49\u7c7b\u522b\u6216\u8005\u5b9e\u4f8b\u7c7b\u522b\u9700\u8981\u901a\u8fc7\u4e00\u5b9a\u7684\u5173\u7cfb\u8fdb\u884c\u8ba1\u7b97\uff0c\u6bd4\u5982\u5728CityScapes\u3001ADE20K\u3001COCO Panoptic\u4e2d\uff0c\u90fd\u6709\u8fd9\u79cd\u8ba1\u7b97\u5173\u7cfb\uff1a CityScapes: AED20K: COCO Panoptic: \u5b9e\u4f8b\u5206\u5272\u6709\u591a\u4e2a\u5206\u5272map\uff08\u4e00\u4e2a\u5b9e\u4f8b\u4e00\u4e2amap\uff09: \u6709\u65f6\u5019\u5b9e\u4f8b\u5206\u5272\u4efb\u52a1\u4e2d\uff0c\u4e00\u5f20\u56fe\u7247\u4f1a\u63d0\u4f9b\u591a\u4e2a\u5b9e\u4f8bmap\uff0c\u6bcf\u4e2a\u5b9e\u4f8b\u4e00\u5f20map\uff0cmap\u4e3a\u5355\u901a\u9053\uff0c\u4e14\u53ea\u67090\uff0cx\u4e24\u79cd\u50cf\u7d20\uff0c0\u8868\u793a\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a\u80cc\u666f\uff0cx\u5219\u8868\u793a\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u8be5\u5b9e\u4f8b\uff0c\u5e76\u4e14\u5176\u8bed\u4e49\u7c7b\u522b\u4e3ax\uff0c\u6bd4\u5982\u5728ade20k\u4e2d\uff1a 2. \u6a21\u677f\u5c55\u793a \u6839\u636e\u4e0a\u9762\u7684\u8c03\u7814\uff0c\u53ef\u4ee5\u521d\u6b65\u68b3\u7406\u51fa\u6765\u5206\u5272\u4efb\u52a1\u6807\u6ce8\u7c7b\u578b\u7684\u51e0\u79cd\u60c5\u51b5\uff0c\u5927\u81f4\u7684\u5206\u7c7b\u5982\u4e0b\u6240\u793a\uff1a \u57fa\u4e8e\u6b64\u53ef\u4ee5\u8fdb\u884c\u6a21\u677f\u5236\u5b9a\u3002 2.1 segmentation_map\u89c4\u8303 \u5236\u5b9a\u4efb\u52a1\u6a21\u677f\u4e4b\u524d\uff0c\u9996\u5148\u9700\u8981\u89c4\u5b9a\u5206\u5272\u56fe\u7684\u6a21\u677f\uff0c\u7ed3\u5408\u4e0a\u9762\u5bf9\u5206\u5272\u56fe\u7684\u8c03\u7814\uff0c\u6211\u4eec\u5236\u5b9a\u4e86\u4e24\u4e2a\u5206\u5272\u56fe\u89c4\u8303\uff0c\u4ee5\u9002\u5e94\u8bed\u4e49\u5206\u5272\u548c\u5b9e\u4f8b\u5206\u5272\u4e24\u79cd\u4efb\u52a1\u7c7b\u578b\uff08\u5168\u666f\u5206\u5272\u53ef\u4ee5\u770b\u6210\u662f\u4e24\u79cd\u4efb\u52a1\u7684\u7ed3\u5408\uff09\uff0c\u5177\u4f53\u7684\u5c31\u662f\u4e0b\u9762\u4e24\u79cd\u89c4\u8303\uff1a LabelMap : \u5373label map\uff0c\u7528\u6765\u8868\u793a\u8bed\u4e49map\uff0cLabelMap\u662f\u4e00\u4e2a\u5355\u901a\u9053\uff0cint32\u7c7b\u578b\u7684\u56fe\u7247\uff0c\u4e14\u9700\u8981\u63a5\u53d7\u4e00\u4e2aclass domain\u53c2\u6570\uff0cLabelMap\u7684\u50cf\u7d20\u503c\u5373\u4ee3\u8868class domain\u4e2d\u7c7b\u522b\u7684\u7d22\u5f15\uff0c\u8fd9\u6837\u5373\u53ef\u5b9e\u73b0\u4ece\u50cf\u7d20\u5230\u8bed\u4e49\u7c7b\u522b\u7684\u6620\u5c04\uff1b InsMap : \u5373instance map\u7684\u7b80\u79f0\uff0c\u7528\u6765\u8868\u793a\u5b9e\u4f8bmap\uff0cInsMap\u540c\u6837\u662f\u4e00\u4e2a\u5355\u901a\u9053\uff0cint32\u7c7b\u578b\u7684\u56fe\u7247\uff0c\u77e9\u9635\u4e2d\u7684\u5143\u7d20\u7528\u6765\u8868\u793a\u5b9e\u4f8b\u7684\u4f4d\u7f6e\uff0c\u8bed\u4e49\u4fe1\u606f\u5219\u901a\u8fc7\u5bf9\u5e94\u4f4d\u7f6e\u7684LabelMap\u6765\u83b7\u53d6\uff08InsMap\u672c\u8eab\u4e0d\u9700\u8981class domain\u53c2\u6570\uff09\uff1b \u8fd9\u91ccLabelMap\u548cInsMap\u90fd\u8868\u793a\u4e00\u4e2a\u5355\u901a\u9053\u56fe\u7247\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u4e3a\u4e86\u51cf\u5c11\u6807\u6ce8\u6587\u4ef6\u7684\u5bb9\u91cf\uff0c\u4e5f\u53ef\u4ee5\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\uff0c\u7136\u540eLabelMap\u548cInsMap\u4fdd\u5b58\u6307\u5411\u8fd9\u4e2a\u7b26\u5408\u89c4\u8303\u7684\u56fe\u50cf\u6587\u4ef6\u7684\u8def\u5f84\u4fe1\u606f\u3002 \u6709\u4e86\u5206\u5272\u56fe\u7684\u89c4\u8303\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4e09\u4e2a\u5206\u5272\u4efb\u52a1\u7684\u89c4\u8303\u5236\u5b9a\u3002 2.2 \u8bed\u4e49\u5206\u5272\u6a21\u677f \u7531\u4e0a\u9762\u7684\u68b3\u7406\uff0c\u53ef\u4ee5\u77e5\u9053\u8bed\u4e49\u5206\u5272\u7684\u6807\u6ce8\u5f62\u5f0f\u53ea\u6709LabelMap\u7684\u5f62\u5f0f\uff0c\u4e14\u4e00\u5f20\u56fe\u7247\u5bf9\u5e94\u4e00\u5f20LabelMap\uff0c\u6240\u4ee5\u5236\u5b9a\u8bed\u4e49\u5206\u5272\u7684\u6a21\u677f\u5982\u4e0b\uff1a SemanticSegmentationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image semantic_map : LabelMap[dom=$cdom] 2.3 \u5b9e\u4f8b\u5206\u5272\u6a21\u677f \u5b9e\u4f8b\u5206\u5272\u7684\u6807\u6ce8\u5f62\u5f0f\u901a\u5e38\u6709instance map\u548cpolygon\u4e24\u79cd\uff0c\u6240\u4ee5\u5bf9\u5e94\u7684\u5b9e\u4f8b\u5206\u5272\u6a21\u677f\u5236\u5b9a\u5982\u4e0b\uff1a instance map\u7c7b\u578b\uff1a InstanceSegmentationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image instance_map : InsMap semantic_map : LabelMap[dom=$cdom] polygon\u7c7b\u578b\uff1a LocalInstanceEntry : $def : struct $params : [ 'cdom' ] $fields : label : Label[dom=$cdom] bbox : BBox polygon : Polygon InstanceSegmentationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image instances : List[LocalInstanceEntry[cdom=$cdom]] \u5b9e\u9645\u4f7f\u7528\u65f6\uff0c\u7528\u6237\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5176\u4e2d\u4e00\u79cd\u5373\u53ef\u3002 2.4 \u5168\u666f\u5206\u5272\u6a21\u677f \u548c\u5b9e\u4f8b\u5206\u5272\u7c7b\u4f3c\uff0c\u5168\u666f\u5206\u5272\u5f53\u4e2d\u7684\u5b9e\u4f8b\u4fe1\u606f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u7ed9\u51fa\uff0c\u8fd9\u91cc\u5206\u522b\u7ed9\u51fa\u5176\u6a21\u677f\u5b9a\u4e49\uff1a \u5b9e\u4f8b\u4fe1\u606f\u901a\u8fc7instance map\u7ed9\u51fa\uff1a PanopticSegmentationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image instance_map : InsMap semantic_map : LabelMap[dom=$cdom] \u5b9e\u4f8b\u4fe1\u606f\u901a\u8fc7polygon\u7ed9\u51fa\uff1a LocalInstanceEntry : $def : struct $params : [ 'cdom' ] $fields : label : Label[dom=$cdom] bbox : BBox polygon : Polygon InstanceSegmentationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image semantic_map : LabelMap[cdom=$cdom] instances : List[LocalInstanceEntry[cdom=$cdom]] \u5b9e\u9645\u4f7f\u7528\u65f6\uff0c\u7528\u6237\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5176\u4e2d\u4e00\u79cd\u5373\u53ef\u3002 \u6b64\u5916\uff0c\u5168\u666f\u5206\u5272\u7531\u4e8e\u5bf9\u7c7b\u522b\u6709things\u548cstuff\u7684\u533a\u5206\uff0c\u6240\u4ee5\u9700\u8981\u5bf9class domain\u8fdb\u884c\u8865\u5145\u8bf4\u660e\uff0c\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7\u7236\u7c7b\u522b\u6765\u8bf4\u660e\u7c7b\u522b\u662fthings\u8fd8\u662fstuff\uff1a \u5982\u4e0b\u6240\u793a\uff1a $dsdl-version : \"0.5.0\" COCOClassDom[ThingsorStuff] : $def : class_domain classes : - sky[stuff] - horse[things] - person[things] - bottle[things] - ... ThingsorStuff : $def : class_domain classes : - things - stuff \u540c\u65f6\uff0c\u5982\u679c\u6570\u636e\u96c6\u672c\u7701\u6709\u5c42\u6b21\u7ed3\u6784\uff0cdsdl\u652f\u6301\u591a\u4e2a\u7236\u7c7b\u522b\uff0c\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version : \"0.5.0\" COCOClassDom[COCOParentDom, ThingsorStuff] : $def : class_domain classes : - sky[][stuff] # \u5982\u679c\u6ca1\u6709\u5bf9\u5e94\u7684\u7236\u7c7b\u522b\u5219\u7528\u7a7a\u62ec\u53f7\u8868\u793a - horse[animal][things] - person[animal][things] - bottle[][things] - ... COCOParentDom : $def : class_domain classes : - animal - food - ... ThingsorStuff : $def : class_domain classes : - things - stuff","title":"\u56fe\u50cf\u5206\u5272"},{"location":"dsdl_template/cv/cv_segmentation/#_1","text":"\u4e3a\u4e86\u5236\u5b9a\u56fe\u50cf\u5206\u5272\u4efb\u52a1\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684\u6a21\u677f\uff0c\u6211\u4eec\u5bf9\u4e3b\u6d41\u7684\u56fe\u50cf\u5206\u5272\u4efb\u52a1\u6570\u636e\u96c6\u8fdb\u884c\u4e86\u8c03\u7814\uff0c\u4e0e\u5206\u7c7b\u4efb\u52a1\u548c\u68c0\u6d4b\u4efb\u52a1\u4e0d\u540c\u7684\u662f\uff0c\u56fe\u50cf\u5206\u5272\u4efb\u52a1\u901a\u5e38\u5206\u4e3a\u8bed\u4e49\u5206\u5272\u3001\u5b9e\u4f8b\u5206\u5272\u3001\u5168\u666f\u5206\u5272\u4e09\u4e2a\u5b50\u4efb\u52a1\uff0c\u6211\u4eec\u4f1a\u5206\u5b50\u4efb\u52a1\u8ba8\u8bba\u5176\u76ee\u7684\u548c\u5e38\u89c1\u6807\u6ce8\u4fe1\u606f\u6240\u5305\u542b\u7684\u5b57\u6bb5\uff0c\u4ece\u4e2d\u6574\u7406\u51fa\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u5236\u5b9a\u4e09\u4e2a\u5b50\u4efb\u52a1\u6570\u7684\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\u7684\u901a\u7528\u6a21\u677f\u3002","title":"\u56fe\u50cf\u5206\u5272\u4efb\u52a1"},{"location":"dsdl_template/cv/cv_segmentation/#1","text":"","title":"1. \u4efb\u52a1\u8c03\u7814"},{"location":"dsdl_template/cv/cv_segmentation/#11","text":"\u56fe\u50cf\u5206\u5272\u4efb\u52a1\u662f\u6307\u901a\u8fc7\u5bf9\u56fe\u7247\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u8fdb\u884c\u8bed\u4e49\u6807\u6ce8\uff0c\u6839\u636e\u5176\u6807\u6ce8\u7684\u76ee\u6807\u7684\u8f7b\u5fae\u4e0d\u540c\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u5b50\u4efb\u52a1\uff1a \u8bed\u4e49\u5206\u5272\uff1a\u5373\u6700\u57fa\u672c\u7684\u56fe\u50cf\u5206\u5272\uff0c\u5c06\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u8bed\u4e49\u7c7b\u522b\u6807\u6ce8\u51fa\u6765\uff1b \u5b9e\u4f8b\u5206\u5272\uff1a\u53ea\u5173\u6ce8\u53ef\u6570\u7269\u4f53\uff08\u5982\u4eba\uff0c\u8f66\u7b49\uff09\u7684\u56fe\u50cf\u5206\u5272\uff0c\u5c06\u56fe\u7247\u4e2d\u7684\u4e0d\u540c\u5b9e\u4f8b\u90fd\u533a\u5206\u6807\u6ce8\u51fa\u6765\uff1b \u5168\u666f\u5206\u5272\uff1a\u8bed\u4e49\u5206\u5272\u548c\u5b9e\u4f8b\u5206\u5272\u7684\u7efc\u5408\uff0c\u901a\u5e38\u5728\u81ea\u52a8\u9a7e\u9a76\u9886\u57df\u4e2d\u51fa\u73b0\uff0c\u5176\u5c06\u7269\u4f53\u5206\u4e3a\u53ef\u6570\u7269\u4f53\uff08things\uff0c\u6bd4\u5982\u4eba\uff0c\u732b\uff0c\u8f66\u7b49\u7b49\uff09\u548c\u4e0d\u53ef\u6570\u7269\u4f53\uff08stuff\uff0c\u6bd4\u5982\u5929\u7a7a\uff0c\u9a6c\u8def\u7b49\u7b49\uff09\uff0c\u5bf9\u4e8e\u53ef\u6570\u7269\u4f53\u6807\u6ce8\u8bed\u4e49\u548c\u5b9e\u4f8b\uff0c\u5bf9\u4e8e\u4e0d\u53ef\u6570\u7269\u4f53\uff0c\u5219\u53ea\u6807\u6ce8\u8bed\u4e49\uff1b \u4e09\u79cd\u56fe\u50cf\u5206\u5272\u7684\u53ef\u89c6\u5316\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a ( \u56fe\u7247\u53d6\u81eaCVPR2019\u7684\u8bba\u6587: Panoptic Segmentation )\uff1a","title":"1.1 \u4efb\u52a1\u5b9a\u4e49"},{"location":"dsdl_template/cv/cv_segmentation/#12","text":"\u56fe\u50cf\u5206\u5272\u4e09\u79cd\u5b50\u4efb\u52a1\u7684\u8bc4\u4ef7\u6307\u6807\u7565\u6709\u4e0d\u540c\uff0c\u5177\u4f53\u5982\u4e0b\uff1a","title":"1.2 \u8bc4\u4ef7\u6307\u6807\uff1a"},{"location":"dsdl_template/cv/cv_segmentation/#121","text":"\u8bed\u4e49\u5206\u5272\u7684\u8bc4\u4ef7\u6807\u51c6\u4e00\u822c\u91c7\u7528mIoU\uff08mean Intersection over Union\uff0c\u5373\u9884\u6d4b\u533a\u57df\u4e0e\u771f\u503c\u4e4b\u95f4\u7684\u4ea4\u96c6\u5e76\u96c6\u7684\u6bd4\u4f8b\uff09\u548cmPA\uff08mean Pixel Accuracy\uff0c\u5373\u6b63\u786e\u5206\u7c7b\u7684\u50cf\u7d20\u4e0e\u5168\u90e8\u50cf\u7d20\u7684\u6bd4\u4f8b\uff09\uff0c\u4e0e\u68c0\u6d4b\u4e0d\u540c\uff0c\u8bed\u4e49\u5206\u5272\u7684mIoU\u66f4\u591a\u662f\u8ba1\u7b97\u4e0d\u89c4\u5219\u533a\u57df\uff0c\u800c\u975e\u77e9\u5f62\u6846\u4e4b\u95f4\u3002 \u8fd9\u91cc\u4e3a\u65b9\u4fbf\u8ba1\u7b97\uff0c\u5047\u5b9a\u4e00\u5b9a\u6709k+1\u7c7b\uff08\u5305\u62eck\u4e2a\u76ee\u6807\u7c7b\u548c1\u4e2a\u80cc\u666f\u7c7b\uff09\uff0c p_{ij} p_{ij} \u8868\u793a\u672c\u5c5e\u4e8e i i \u7c7b\u5374\u9884\u6d4b\u4e3a j j \u7c7b\u7684\u50cf\u7d20\u70b9\u603b\u6570\uff0c\u5177\u4f53\u5730\uff0c p_{ii} p_{ii} \u8868\u793atrue postives\uff0c p_{ij} p_{ij} \u8868\u793afalse positives\uff0c p_{ji} p_{ji} \u8868\u793afalse negatives; \u5219mIoU\u548cmPA\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\u6240\u793a\uff1a mIoU mIoU = {1\\over{k+1}} \\sum_{i=0}^{k}{{p_{ii}}\\over{\\sum_{j=0}^{k}p_{ij}+\\sum_{j=0}^{k}p_{ji}-p_{ii}}} mIoU = {1\\over{k+1}} \\sum_{i=0}^{k}{{p_{ii}}\\over{\\sum_{j=0}^{k}p_{ij}+\\sum_{j=0}^{k}p_{ji}-p_{ii}}} mPA mPA = {1\\over{k+1}} \\sum_{i=0}^{k} {{p_{ii}}\\over{\\sum_{j=0}^{k}p_{ij}}} mPA = {1\\over{k+1}} \\sum_{i=0}^{k} {{p_{ii}}\\over{\\sum_{j=0}^{k}p_{ij}}}","title":"1.2.1 \u8bed\u4e49\u5206\u5272"},{"location":"dsdl_template/cv/cv_segmentation/#122","text":"\u5b9e\u4f8b\u5206\u5272\u7684\u8bc4\u4ef7\u6807\u51c6\u901a\u5e38\u548c\u76ee\u6807\u68c0\u6d4b\u76f8\u540c\uff0c\u91c7\u7528mAP\u4f5c\u4e3a\u8bc4\u4ef7\u6807\u51c6\uff0c\u4f46\u662f\u5176\u4e2d\u7684mIoU\u8ba1\u7b97\u65b9\u5f0f\u4e3a\u9884\u6d4bmask\u548c\u771f\u503cmask\u4e4b\u95f4\u7684IoU\uff0c\u800c\u975e\u5728\u68c0\u6d4b\u4e2d\u9884\u6d4b\u6846\u548c\u771f\u503c\u68c0\u6d4b\u6846\u4e4b\u95f4\u7684IoU\uff0c\u5173\u4e8e\u68c0\u6d4b\u4e2dmAP\u7684\u8ba1\u7b97\u65b9\u5f0f\u53c2\u8003 \u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u8c03\u7814\u62a5\u544a \u3002","title":"1.2.2 \u5b9e\u4f8b\u5206\u5272"},{"location":"dsdl_template/cv/cv_segmentation/#123","text":"\u5168\u666f\u5206\u5272\u91c7\u7528\u4e00\u79cd\u65b0\u7684\u8bc4\u4ef7\u6807\u51c6\uff0c\u65e2\u8003\u8651\u5230things\uff0c\u4e5f\u8003\u8651\u5230\u4e86stuff\uff0c\u5373Panoptic Quality\uff08PQ\uff09\uff0c\u8ba1\u7b97PQ\u6709\u4e24\u4e2a\u6b65\u9aa4\uff1a \u5206\u5272\u5339\u914d\uff1a\u5f53\u4e14\u4ec5\u5f53\u9884\u6d4b\u533a\u57df\u548c\u771f\u503c\u533a\u57df\u7684\u4ea4\u5e76\u6bd4\uff08IoU\uff09\u5927\u4e8e0.5\u65f6\uff0c\u8ba4\u4e3a\u4e8c\u8005\u5339\u914d\uff1b\uff08\u7ed3\u5408\u5168\u666f\u5206\u5272\u7684\u975e\u91cd\u53e0\u6027\u6211\u4eec\u53ef\u4ee5\u63a8\u8bba\uff0c\u6bcf\u4e2a\u771f\u503c\u533a\u57df\u6700\u591a\u53ef\u4ee5\u6709\u4e00\u4e2a\u9884\u6d4b\u533a\u57df\u5339\u914d\u3002\uff09 PQ\u8ba1\u7b97\uff1a\u5f53\u5206\u5272\u5339\u914d\u5b8c\u6210\u540e\uff0c\u6bcf\u4e00\u4e2a\u5206\u5272\u9884\u6d4b\u53ef\u80fd\u6709\u4e09\u79cd\u60c5\u51b5: TP (\u6b63\u786e\u5339\u914d\u7684\u5206\u5272\u5bf9), FP (\u672a\u5339\u914d\u7684\u9884\u6d4b\u7ed3\u679c), and FN (\u672a\u5339\u914d\u7684\u771f\u503c\u533a\u57df). \u7ed9\u5b9a TP, FP, \u548c FN, \u6bcf\u4e2a\u7c7b\u522b\u7684PQ\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u516c\u5f0f\u8ba1\u7b97: PQ = {{\\sum_{(p,g)\\in TP} {IoU(p,g)}}\\over{\\lvert TP \\rvert + {1\\over2} \\lvert FP \\rvert + {1\\over2} \\lvert FN \\rvert}} PQ = {{\\sum_{(p,g)\\in TP} {IoU(p,g)}}\\over{\\lvert TP \\rvert + {1\\over2} \\lvert FP \\rvert + {1\\over2} \\lvert FN \\rvert}} PQ\u540c\u65f6\u4e5f\u53ef\u4ee5\u770b\u6210\u662fsegmentation quality (SQ) \u548c recognition quality (RQ)\u7684\u4e58\u79ef\uff1a PQ = \\underbrace{{{\\sum_{(p,g)\\in TP} {IoU(p,g)}}\\over{\\lvert TP \\rvert}}}_{\\text{segmentation quality (SQ)}} \\times \\underbrace{{ {\\lvert TP \\rvert}\\over{{\\lvert TP \\rvert + {1\\over2} \\lvert FP \\rvert + {1\\over2} \\lvert FN \\rvert}}}}_{\\text{recognition quality (RQ)}} PQ = \\underbrace{{{\\sum_{(p,g)\\in TP} {IoU(p,g)}}\\over{\\lvert TP \\rvert}}}_{\\text{segmentation quality (SQ)}} \\times \\underbrace{{ {\\lvert TP \\rvert}\\over{{\\lvert TP \\rvert + {1\\over2} \\lvert FP \\rvert + {1\\over2} \\lvert FN \\rvert}}}}_{\\text{recognition quality (RQ)}} \u5173\u4e8ePQ\u8ba1\u7b97\u516c\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u53c2\u8003\u539f\u8bba\u6587 Panoptic Segmentation .","title":"1.2.3 \u5168\u666f\u5206\u5272"},{"location":"dsdl_template/cv/cv_segmentation/#13","text":"\u6211\u4eec\u8c03\u7814\u4e86\u4e3b\u6d41\u7684\u56fe\u50cf\u5206\u5272\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u5305\u542b\u4e86COCO\u3001VOC\u3001CityScapes\u3001ADE20K\u7b49\u5e38\u89c1\u6570\u636e\u96c6\u3002\u8003\u8651\u5230\u6709\u4e9b\u6570\u636e\u96c6\u540c\u65f6\u5305\u542b\u4e86\u4e0d\u540c\u7684\u5206\u5272\u5b50\u4efb\u52a1\uff0c\u8fd9\u91cc\u5bf9\u4e09\u4e2a\u5b50\u4efb\u52a1\u8fdb\u884c\u4e86\u62c6\u5206\uff0c\u4e14\u6bcf\u4e2a\u5b50\u4efb\u52a1\u4e0b\u53ea\u8003\u8651\u548c\u4ed6\u76f8\u5173\u7684\u6807\u6ce8\u5185\u5bb9\u3002\u6b64\u5916\uff0c\u8c03\u7814\u8fc7\u7a0b\u4f1a\u9047\u5230\u4e00\u4e9b\u540d\u79f0\u4e0d\u540c\uff0c\u4f46\u662f\u5b9e\u9645\u542b\u4e49\u76f8\u540c\u6216\u7c7b\u4f3c\u7684\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u6211\u4eec\u4e5f\u89c6\u4e3a\u540c\u4e00\u5b57\u6bb5\uff0c\u5e76\u5728\u8fd9\u91cc\u7edf\u4e00\u53bb\u79f0\u547c\uff0c\u6bd4\u5982image_id\u8868\u793a\u56fe\u7247\u7684\u552f\u4e00\u8868\u793a\uff0c\u6709\u65f6\u5019\u4e5f\u4f1a\u7528\u56fe\u7247\u8def\u5f84\u6765\u8868\u793a\uff0ccategory_id\u540c\u65f6\u4e5f\u5305\u542bcategory_name\u7684\u542b\u4e49\u3002\u6700\u540e\uff0c\u8003\u8651\u5230\u56fe\u50cf\u5206\u5272\u7279\u6709\u7684\u5206\u5272\u56fe(segmentation_map, \u5373\u56fe\u7247\u5f62\u5f0f\u5bf9\u539f\u56fe\u8fdb\u884c\u6807\u6ce8\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u50cf\u7d20\u503c\u90fd\u662f\u539f\u56fe\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6807\u6ce8\u4fe1\u606f)\u6807\u6ce8\u5f62\u5f0f\uff0ccategory_id\u6709\u65f6\u5019\u6ca1\u6709\u663e\u5f0f\u7684\u6807\u6ce8\u51fa\u6765\uff0c\u800c\u662f\u6839\u636e\u5206\u5272\u56fe\u4e2d\u7684\u50cf\u7d20\u503c\u901a\u8fc7\u4e00\u5b9a\u7684\u5173\u7cfb\u8ba1\u7b97\u5f97\u5230\uff0c\u56e0\u6b64\u6211\u4eec\u5177\u8c61\u5316\u4e86\u4e00\u4e2a\u4e0d\u5b58\u7684\u7684\u5b57\u6bb5pixel_mapping\uff0c\u7528\u6765\u63cf\u8ff0\u4ece\u50cf\u7d20\u503c\u5230\u5b9e\u9645\u7684label_id\u548cinstance_id\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u88ab\u52a0\u4e0a\u4e86*\u4ee5\u793a\u533a\u522b\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5b57\u6bb5\u5c06\u548csegmentation_map\u5b57\u6bb5\u7ed1\u5b9a\u51fa\u73b0\uff08\u6709\u4e9b\u50cf\u7d20\u503c\u7b49\u4e8elabel_id\u6216\u8005instance_id\u7684\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u6620\u5c04\u5173\u7cfb\u662f\u6052\u7b49\u6620\u5c04\uff09\u3002","title":"1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814\uff1a"},{"location":"dsdl_template/cv/cv_segmentation/#131","text":"\u6211\u4eec\u8c03\u7814\u4e86VOC\uff0cCityScapes\u548cADE20K\u4e09\u4e2a\u6570\u636e\u96c6\u7684\u8bed\u4e49\u5206\u5272\u4efb\u52a1\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a \u8bed\u4e49\u5206\u5272\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id segmentation_map pixel_mapping* VOC Y Y Y CityScapes Y Y Y ADE20K Y Y Y \u4e0a\u8868\u4e2d*\u5373\u8868\u793a\u4e0a\u6587\u63d0\u5230\u7684\u5047\u60f3\u5b57\u6bb5\uff08\u5373\u5b9e\u9645\u6709\u8fd9\u4e2a\u4fe1\u606f\uff0c\u4f46\u662f\u4e0d\u662f\u901a\u8fc7\u6807\u6ce8\u6587\u4ef6\u7684\u5f62\u5f0f\u7ed9\u51fa\u6765\u7684\uff0c\u4e0b\u540c\uff09\uff0c\u5176\u4ed6\u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a segmentation_map \u5206\u5272\u56fe\uff0c\u8bed\u4e49\u5206\u5272\u4efb\u52a1\u5c31\u662f\u8bed\u4e49\u5206\u5272mask \u72ec\u7acb\u5b57\u6bb5 pixel_mapping* \u5206\u5272\u56fe\u4e2d\u7684\u50cf\u7d20\u503c\u5230\u8bed\u4e49id/\u5b9e\u4f8bid\u7684\u6620\u5c04\u5173\u7cfb","title":"1.3.1 \u8bed\u4e49\u5206\u5272\u6570\u636e\u96c6\u8c03\u7814"},{"location":"dsdl_template/cv/cv_segmentation/#132","text":"\u6211\u4eec\u8c03\u7814\u4e86VOC, COCO, CityScapes, ADE20K\u8fd9\u56db\u4e2a\u6570\u636e\u96c6\u7684\u5b9e\u4f8b\u5206\u5272\u4efb\u52a1\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a \u5b9e\u4f8b\u5206\u5272\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id segmentation_map pixel_mapping* polygon/rle_polygon category_id instance_id area iscrowd occluded parts scenes VOC Y Y Y COCO Y Y Y Y Y Y CityScapes Y Y Y Y Y Y ADE20K Y Y Y Y Y Y Y Y Y \u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a \u72ec\u7acb\u5b57\u6bb5 segmentation_map \u5206\u5272\u56fe\u4e2d\u7684\u50cf\u7d20\u503c\u5230\u8bed\u4e49id/\u5b9e\u4f8bid\u7684\u6620\u5c04\u5173\u7cfb pixel_mapping* \u5206\u5272\u56fe\uff0c\u8bed\u4e49\u5206\u5272\u4efb\u52a1\u5c31\u662f\u8bed\u4e49\u5206\u5272mask polygon/rle_polygon \u5355\u4e2a\u5bf9\u8c61\u7684\u591a\u8fb9\u5f62\u6807\u6ce8\u7684\u9876\u70b9\u5750\u6807\u96c6\u5408 category_id \u5355\u4e2a\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u522bid instance_id \u5355\u4e2a\u5bf9\u8c61\u6240\u5c5e\u7684\u5b9e\u4f8bid area \u5355\u4e2a\u5bf9\u8c61\u7684\u5206\u5272\u533a\u57df\u9762\u79ef iscrowd \u8be5\u5bf9\u8c61\u662f\u5426\u4e3a\u4e00\u7ec4\u5bf9\u8c61\uff0c\u6bd4\u5982\u4e00\u7fa4\u4eba\u3001\u4e00\u5806\u82f9\u679c\u7b49 occluded \u8be5\u5bf9\u8c61\u662f\u5426\u88ab\u906e\u6321 parts \u90e8\u4ef6\u4fe1\u606f\uff0c\u5373\u8be5\u5bf9\u8c61\u662f\u5426\u5305\u542b\u67d0\u4e2a\u90e8\u4ef6(part)\uff0c\u6216\u8005\u8be5\u5bf9\u8c61\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u5bf9\u8c61\u7684\u90e8\u4ef6(part) scenes \u6bcf\u5f20\u56fe\u7247\u6240\u5c5e\u7684\u573a\u666f\u7c7b\u522b","title":"1.3.2 \u5b9e\u4f8b\u5206\u5272\u6570\u636e\u96c6\u8c03\u7814"},{"location":"dsdl_template/cv/cv_segmentation/#133","text":"\u6211\u4eec\u8c03\u7814\u4e86COCO\u548cCityScapes\u4e24\u4e2a\u6570\u636e\u96c6\u7684\u5168\u666f\u5206\u5272\u4efb\u52a1\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a \u5b9e\u4f8b\u5206\u5272\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id segmentation_map pixel_mapping* polygon/rle_polygon category_id instance_id area iscrowd bbox isthing supercategory COCO Y Y Y Y Y Y Y Y Y Y Y CityScapes Y Y Y Y Y Y \u5907\u6ce8\uff1a\u8fd9\u91ccisthing\u548csupercategory\u90fd\u662f\u7c7b\u522b\u57df(class_domain)\u7684\u63cf\u8ff0\u5b57\u6bb5\uff0c\u5373\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u4e0d\u662f\u63cf\u8ff0\u67d0\u4e00\u4e2a\u6807\u6ce8\u7684\uff0c\u800c\u662f\u63cf\u8ff0\u67d0\u4e00\u4e2a\u7c7b\u522b\u7684\u3002 \u5404\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a segmentation_map \u5206\u5272\u56fe\u4e2d\u7684\u50cf\u7d20\u503c\u5230\u8bed\u4e49id/\u5b9e\u4f8bid\u7684\u6620\u5c04\u5173\u7cfb \u72ec\u7acb\u5b57\u6bb5 pixel_mapping* \u5206\u5272\u56fe\uff0c\u8bed\u4e49\u5206\u5272\u4efb\u52a1\u5c31\u662f\u8bed\u4e49\u5206\u5272mask polygon/rle_polygon \u5355\u4e2a\u5bf9\u8c61\u7684\u591a\u8fb9\u5f62\u6807\u6ce8\u7684\u9876\u70b9\u5750\u6807\u96c6\u5408 category_id \u5355\u4e2a\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u522bid instance_id \u5355\u4e2a\u5bf9\u8c61\u6240\u5c5e\u7684\u5b9e\u4f8bid area \u5355\u4e2a\u5bf9\u8c61\u7684\u5206\u5272\u533a\u57df\u9762\u79ef iscrowd \u8be5\u5bf9\u8c61\u662f\u5426\u4e3a\u4e00\u7ec4\u5bf9\u8c61\uff0c\u6bd4\u5982\u4e00\u7fa4\u4eba\u3001\u4e00\u5806\u82f9\u679c\u7b49 bbox \u7269\u4f53\u7684\u8fb9\u754c\u6846 isthing \u662f\u5426\u662fthings\uff0c\u5168\u666f\u5206\u5272\u901a\u5e38\u628a\u76ee\u6807\u5206\u4e3athings\uff08\u53ef\u6570\uff0c\u8fdb\u884c\u5b9e\u4f8b\u6807\u6ce8\uff09\u548cstuff\uff08\u4e0d\u53ef\u6570\uff0c\u53ea\u8fdb\u884c\u8bed\u4e49\u6807\u6ce8\uff09 supercategory \u7c7b\u522b\u7684\u7236\u7c7b\u522b\uff0c\u6bd4\u5982\u7c7b\u522b\"\u732b\"\u7684\u7236\u7c7b\u522b\u53ef\u80fd\u662f\"\u52a8\u7269\"","title":"1.3.3 \u5168\u666f\u5206\u5272\u6570\u636e\u96c6\u8c03\u7814"},{"location":"dsdl_template/cv/cv_segmentation/#134-segmentation_map","text":"\u524d\u6587\u53ef\u4ee5\u770b\u51fasegmentation_map\u662f\u56fe\u50cf\u5206\u5272\u4e2d\u6700\u4e3b\u8981\u7684\u6807\u6ce8\u624b\u6bb5\uff0c\u4f46\u662f\u4e0d\u540c\u6570\u636e\u96c6\u7684segmentation_map\u5374\u6709\u4e0d\u540c\u7684\u683c\u5f0f\uff0c\u8fd9\u91cc\u4e3b\u8981\u8c03\u7814segmentation_map\u53ca\u5176\u5bf9\u5e94\u7684pixel_mapping\u7684\u4e0d\u540c\u60c5\u51b5\uff0c\u65b9\u4fbf\u5236\u5b9asegmentation_map\u7684dsdl\u89c4\u8303\u3002 segmentation_map\u7684\u5e38\u89c1\u60c5\u51b5\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a \u57fa\u672c\u5f62\u5f0f\uff1a \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0csegmentation_map\u662f\u5355\u901a\u9053\uff0c\u5176\u50cf\u7d20\u503c\u662fint\u7c7b\u578b\uff0c\u5bf9\u4e8e\u8bed\u4e49\u5206\u5272\u6765\u8bf4\uff0csegmentation_map\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u50cf\u7d20\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u8bed\u4e49\u7c7b\u522b\uff0c\u5bf9\u4e8e\u5b9e\u4f8b\u5206\u5272\u6765\u8bf4\uff0csegmentation_map\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u5b9e\u4f8b\u7c7b\u522b\u3002voc\u6570\u636e\u96c6\u7684\u8bed\u4e49\u5206\u5272\u548c\u5b9e\u4f8b\u5206\u5272\u4efb\u52a1\u5c31\u662f\u91c7\u7528\u7684\u8fd9\u79cd\u65b9\u6848\uff1a \u901a\u8fc7\u67d0\u79cd\u6620\u5c04\u5f97\u5230\u8bed\u4e49\u7c7b\u522b\u6216\u5b9e\u4f8b\u7c7b\u522b\uff1a \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5206\u5272map\u53ef\u80fd\u662f\u5355\u901a\u9053\u4e5f\u53ef\u80fd\u662f\u591a\u901a\u9053\uff0c\u800c\u8bed\u4e49\u7c7b\u522b\u6216\u8005\u5b9e\u4f8b\u7c7b\u522b\u9700\u8981\u901a\u8fc7\u4e00\u5b9a\u7684\u5173\u7cfb\u8fdb\u884c\u8ba1\u7b97\uff0c\u6bd4\u5982\u5728CityScapes\u3001ADE20K\u3001COCO Panoptic\u4e2d\uff0c\u90fd\u6709\u8fd9\u79cd\u8ba1\u7b97\u5173\u7cfb\uff1a CityScapes: AED20K: COCO Panoptic: \u5b9e\u4f8b\u5206\u5272\u6709\u591a\u4e2a\u5206\u5272map\uff08\u4e00\u4e2a\u5b9e\u4f8b\u4e00\u4e2amap\uff09: \u6709\u65f6\u5019\u5b9e\u4f8b\u5206\u5272\u4efb\u52a1\u4e2d\uff0c\u4e00\u5f20\u56fe\u7247\u4f1a\u63d0\u4f9b\u591a\u4e2a\u5b9e\u4f8bmap\uff0c\u6bcf\u4e2a\u5b9e\u4f8b\u4e00\u5f20map\uff0cmap\u4e3a\u5355\u901a\u9053\uff0c\u4e14\u53ea\u67090\uff0cx\u4e24\u79cd\u50cf\u7d20\uff0c0\u8868\u793a\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a\u80cc\u666f\uff0cx\u5219\u8868\u793a\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u8be5\u5b9e\u4f8b\uff0c\u5e76\u4e14\u5176\u8bed\u4e49\u7c7b\u522b\u4e3ax\uff0c\u6bd4\u5982\u5728ade20k\u4e2d\uff1a","title":"1.3.4 \u5206\u5272\u56fesegmentation_map\u8c03\u7814"},{"location":"dsdl_template/cv/cv_segmentation/#2","text":"\u6839\u636e\u4e0a\u9762\u7684\u8c03\u7814\uff0c\u53ef\u4ee5\u521d\u6b65\u68b3\u7406\u51fa\u6765\u5206\u5272\u4efb\u52a1\u6807\u6ce8\u7c7b\u578b\u7684\u51e0\u79cd\u60c5\u51b5\uff0c\u5927\u81f4\u7684\u5206\u7c7b\u5982\u4e0b\u6240\u793a\uff1a \u57fa\u4e8e\u6b64\u53ef\u4ee5\u8fdb\u884c\u6a21\u677f\u5236\u5b9a\u3002","title":"2. \u6a21\u677f\u5c55\u793a"},{"location":"dsdl_template/cv/cv_segmentation/#21-segmentation_map","text":"\u5236\u5b9a\u4efb\u52a1\u6a21\u677f\u4e4b\u524d\uff0c\u9996\u5148\u9700\u8981\u89c4\u5b9a\u5206\u5272\u56fe\u7684\u6a21\u677f\uff0c\u7ed3\u5408\u4e0a\u9762\u5bf9\u5206\u5272\u56fe\u7684\u8c03\u7814\uff0c\u6211\u4eec\u5236\u5b9a\u4e86\u4e24\u4e2a\u5206\u5272\u56fe\u89c4\u8303\uff0c\u4ee5\u9002\u5e94\u8bed\u4e49\u5206\u5272\u548c\u5b9e\u4f8b\u5206\u5272\u4e24\u79cd\u4efb\u52a1\u7c7b\u578b\uff08\u5168\u666f\u5206\u5272\u53ef\u4ee5\u770b\u6210\u662f\u4e24\u79cd\u4efb\u52a1\u7684\u7ed3\u5408\uff09\uff0c\u5177\u4f53\u7684\u5c31\u662f\u4e0b\u9762\u4e24\u79cd\u89c4\u8303\uff1a LabelMap : \u5373label map\uff0c\u7528\u6765\u8868\u793a\u8bed\u4e49map\uff0cLabelMap\u662f\u4e00\u4e2a\u5355\u901a\u9053\uff0cint32\u7c7b\u578b\u7684\u56fe\u7247\uff0c\u4e14\u9700\u8981\u63a5\u53d7\u4e00\u4e2aclass domain\u53c2\u6570\uff0cLabelMap\u7684\u50cf\u7d20\u503c\u5373\u4ee3\u8868class domain\u4e2d\u7c7b\u522b\u7684\u7d22\u5f15\uff0c\u8fd9\u6837\u5373\u53ef\u5b9e\u73b0\u4ece\u50cf\u7d20\u5230\u8bed\u4e49\u7c7b\u522b\u7684\u6620\u5c04\uff1b InsMap : \u5373instance map\u7684\u7b80\u79f0\uff0c\u7528\u6765\u8868\u793a\u5b9e\u4f8bmap\uff0cInsMap\u540c\u6837\u662f\u4e00\u4e2a\u5355\u901a\u9053\uff0cint32\u7c7b\u578b\u7684\u56fe\u7247\uff0c\u77e9\u9635\u4e2d\u7684\u5143\u7d20\u7528\u6765\u8868\u793a\u5b9e\u4f8b\u7684\u4f4d\u7f6e\uff0c\u8bed\u4e49\u4fe1\u606f\u5219\u901a\u8fc7\u5bf9\u5e94\u4f4d\u7f6e\u7684LabelMap\u6765\u83b7\u53d6\uff08InsMap\u672c\u8eab\u4e0d\u9700\u8981class domain\u53c2\u6570\uff09\uff1b \u8fd9\u91ccLabelMap\u548cInsMap\u90fd\u8868\u793a\u4e00\u4e2a\u5355\u901a\u9053\u56fe\u7247\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u4e3a\u4e86\u51cf\u5c11\u6807\u6ce8\u6587\u4ef6\u7684\u5bb9\u91cf\uff0c\u4e5f\u53ef\u4ee5\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\uff0c\u7136\u540eLabelMap\u548cInsMap\u4fdd\u5b58\u6307\u5411\u8fd9\u4e2a\u7b26\u5408\u89c4\u8303\u7684\u56fe\u50cf\u6587\u4ef6\u7684\u8def\u5f84\u4fe1\u606f\u3002 \u6709\u4e86\u5206\u5272\u56fe\u7684\u89c4\u8303\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4e09\u4e2a\u5206\u5272\u4efb\u52a1\u7684\u89c4\u8303\u5236\u5b9a\u3002","title":"2.1 segmentation_map\u89c4\u8303"},{"location":"dsdl_template/cv/cv_segmentation/#22","text":"\u7531\u4e0a\u9762\u7684\u68b3\u7406\uff0c\u53ef\u4ee5\u77e5\u9053\u8bed\u4e49\u5206\u5272\u7684\u6807\u6ce8\u5f62\u5f0f\u53ea\u6709LabelMap\u7684\u5f62\u5f0f\uff0c\u4e14\u4e00\u5f20\u56fe\u7247\u5bf9\u5e94\u4e00\u5f20LabelMap\uff0c\u6240\u4ee5\u5236\u5b9a\u8bed\u4e49\u5206\u5272\u7684\u6a21\u677f\u5982\u4e0b\uff1a SemanticSegmentationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image semantic_map : LabelMap[dom=$cdom]","title":"2.2 \u8bed\u4e49\u5206\u5272\u6a21\u677f"},{"location":"dsdl_template/cv/cv_segmentation/#23","text":"\u5b9e\u4f8b\u5206\u5272\u7684\u6807\u6ce8\u5f62\u5f0f\u901a\u5e38\u6709instance map\u548cpolygon\u4e24\u79cd\uff0c\u6240\u4ee5\u5bf9\u5e94\u7684\u5b9e\u4f8b\u5206\u5272\u6a21\u677f\u5236\u5b9a\u5982\u4e0b\uff1a instance map\u7c7b\u578b\uff1a InstanceSegmentationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image instance_map : InsMap semantic_map : LabelMap[dom=$cdom] polygon\u7c7b\u578b\uff1a LocalInstanceEntry : $def : struct $params : [ 'cdom' ] $fields : label : Label[dom=$cdom] bbox : BBox polygon : Polygon InstanceSegmentationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image instances : List[LocalInstanceEntry[cdom=$cdom]] \u5b9e\u9645\u4f7f\u7528\u65f6\uff0c\u7528\u6237\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5176\u4e2d\u4e00\u79cd\u5373\u53ef\u3002","title":"2.3 \u5b9e\u4f8b\u5206\u5272\u6a21\u677f"},{"location":"dsdl_template/cv/cv_segmentation/#24","text":"\u548c\u5b9e\u4f8b\u5206\u5272\u7c7b\u4f3c\uff0c\u5168\u666f\u5206\u5272\u5f53\u4e2d\u7684\u5b9e\u4f8b\u4fe1\u606f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u7ed9\u51fa\uff0c\u8fd9\u91cc\u5206\u522b\u7ed9\u51fa\u5176\u6a21\u677f\u5b9a\u4e49\uff1a \u5b9e\u4f8b\u4fe1\u606f\u901a\u8fc7instance map\u7ed9\u51fa\uff1a PanopticSegmentationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image instance_map : InsMap semantic_map : LabelMap[dom=$cdom] \u5b9e\u4f8b\u4fe1\u606f\u901a\u8fc7polygon\u7ed9\u51fa\uff1a LocalInstanceEntry : $def : struct $params : [ 'cdom' ] $fields : label : Label[dom=$cdom] bbox : BBox polygon : Polygon InstanceSegmentationSample : $def : struct $params : [ 'cdom' ] $fields : image : Image semantic_map : LabelMap[cdom=$cdom] instances : List[LocalInstanceEntry[cdom=$cdom]] \u5b9e\u9645\u4f7f\u7528\u65f6\uff0c\u7528\u6237\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5176\u4e2d\u4e00\u79cd\u5373\u53ef\u3002 \u6b64\u5916\uff0c\u5168\u666f\u5206\u5272\u7531\u4e8e\u5bf9\u7c7b\u522b\u6709things\u548cstuff\u7684\u533a\u5206\uff0c\u6240\u4ee5\u9700\u8981\u5bf9class domain\u8fdb\u884c\u8865\u5145\u8bf4\u660e\uff0c\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7\u7236\u7c7b\u522b\u6765\u8bf4\u660e\u7c7b\u522b\u662fthings\u8fd8\u662fstuff\uff1a \u5982\u4e0b\u6240\u793a\uff1a $dsdl-version : \"0.5.0\" COCOClassDom[ThingsorStuff] : $def : class_domain classes : - sky[stuff] - horse[things] - person[things] - bottle[things] - ... ThingsorStuff : $def : class_domain classes : - things - stuff \u540c\u65f6\uff0c\u5982\u679c\u6570\u636e\u96c6\u672c\u7701\u6709\u5c42\u6b21\u7ed3\u6784\uff0cdsdl\u652f\u6301\u591a\u4e2a\u7236\u7c7b\u522b\uff0c\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version : \"0.5.0\" COCOClassDom[COCOParentDom, ThingsorStuff] : $def : class_domain classes : - sky[][stuff] # \u5982\u679c\u6ca1\u6709\u5bf9\u5e94\u7684\u7236\u7c7b\u522b\u5219\u7528\u7a7a\u62ec\u53f7\u8868\u793a - horse[animal][things] - person[animal][things] - bottle[][things] - ... COCOParentDom : $def : class_domain classes : - animal - food - ... ThingsorStuff : $def : class_domain classes : - things - stuff","title":"2.4 \u5168\u666f\u5206\u5272\u6a21\u677f"},{"location":"dsdl_template/nlp/nlp/","text":"\u81ea\u7136\u8bed\u8a00\u5904\u7406","title":"\u81ea\u7136\u8bed\u8a00\u5904\u7406"},{"location":"dsdl_template/nlp/nlp/#_1","text":"","title":"\u81ea\u7136\u8bed\u8a00\u5904\u7406"},{"location":"getting_started/Detection/","text":"\u5b9e\u4f8b\u6f14\u793a- \u56fe\u50cf\u5206\u7c7b \u8be5\u6559\u7a0b\u4ecb\u7ecd\u4e86\u5982\u4f55\u5c06\u4e00\u4e2a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u8f6c\u6362\u4e3aDSDL\u683c\u5f0f\uff0c\u8fd9\u91cc\u4ee5VOC\u4e3a\u4f8b\u505a\u4e00\u4e2a\u4ecb\u7ecd\u3002\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u6570\u636e\u96c6\u8c03\u7814 DSDL\u6a21\u677f\u5236\u5b9a \u6570\u636e\u96c6\u8f6c\u6362 \u6570\u636e\u96c6\u9a8c\u8bc1 \u6570\u636e\u96c6\u8c03\u7814 \u8c03\u7814\u9700\u8981\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u7ed3\u6784 \u539f\u59cb\u6570\u636e\u96c6\u6807\u6ce8\u7684\u539f\u59cb\u5b57\u6bb5\u53ca\u5176\u542b\u4e49 \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u7ed3\u6784 VOC2007/ \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001 .xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001 .jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032 .png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032 .png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ... \u6211\u4eec\u8fd9\u91cc\u53ea\u4ee5\u68c0\u6d4b\u4efb\u52a1\u4e3a\u4f8b\u751f\u6210\u6a21\u677f\uff0c\u56e0\u6b64\u53ea\u9700\u8981Annotations/\u3001JPEGImages/\u8fd9\u4e24\u4e2a\u6587\u4ef6\u5939\uff0c\u53e6\u5916\uff0c\u8bad\u7ec3\u6d4b\u8bd5\u96c6\u5212\u5206\uff0c\u9700\u8981\u7528ImageSets/Main/train.txt\u3001val.txt\u3001test.txt\u8fd9\u4e09\u4e2a\u6587\u4ef6\u3002 \u539f\u59cb\u6570\u636e\u96c6\u6807\u6ce8\u7684\u539f\u59cb\u5b57\u6bb5\u53ca\u5176\u542b\u4e49 \u6807\u6ce8\u7c7b\u578b\u5982\u4e0b\uff08\u4ee5Annotations/000001.xml\u4e3a\u4f8b\uff09\uff1a <annotation> <folder> VOC2007 </folder> # \u6587\u4ef6\u5939 <filename> 000001.jpg </filename> # \u56fe\u7247\u6587\u4ef6\u540d <source> # \u56fe\u50cf\u5143\u4fe1\u606f <database> The VOC2007 Database </database> # \u6570\u636e\u96c6\u540d\u79f0 <annotation> PASCAL VOC2007 </annotation> # \u6807\u6ce8\u7c7b\u578b <image> flickr </image> # \u6765\u6e90 <flickrid> 341012865 </flickrid> # \u6765\u6e90ID </source> <owner> # \u6e90\u4fe1\u606f <flickrid> Fried Camels </flickrid> <name> Jinky the Fruit Bat </name> </owner> <size> <width> 353 </width> # \u56fe\u7247\u5bbd <height> 500 </height> # \u56fe\u7247\u9ad8 <depth> 3 </depth> # \u56fe\u7247\u901a\u9053\u6570 </size> <segmented> 0 </segmented> # \u662f\u5426\u7528\u4e8e\u5206\u5272 <object> # \u6807\u6ce8\u90e8\u5206 <name> dog </name> # \u6807\u7b7e <pose> Left </pose> # \u59ff\u6001 <truncated> 1 </truncated> # \u7269\u4f53\u662f\u5426\u88ab\u90e8\u5206\u906e\u6321\uff08>15%\uff09 <difficult> 0 </difficult> # \u662f\u5426\u4e3a\u96be\u4ee5\u8fa8\u8bc6\u7684\u7269\u4f53 <bndbox> <xmin> 48 </xmin> # \u5de6\u4e0a\u89d2\u70b9\u7684x <ymin> 240 </ymin> # \u5de6\u4e0a\u89d2\u70b9\u7684y <xmax> 195 </xmax> # \u53f3\u4e0b\u89d2\u70b9\u7684x <ymax> 371 </ymax> # \u53f3\u4e0b\u89d2\u70b9\u7684y </bndbox> </object> ... </annotation> \u8fd9\u91cc\u4ee5ImageSets/Main/train.txt\u4e3a\u4f8b\u5c55\u793a\u4e00\u4e0b\u6570\u636e\u96c6segment\u5212\u5206\u7684\u6587\u4ef6\u5185\u5bb9\uff1a 000012 # \u56fe\u7247\u540d\u524d\u7f00 000017 000023 000026 ... DSDL\u6a21\u677f\u5236\u5b9a Yaml\u683c\u5f0f\u89e3\u91ca \u6700\u7ec8\u9700\u8981\u8f6c\u6210\u7684yaml\u6570\u636e\u96c6\u683c\u5f0f\uff0c\u5728\u8fd9\u91cc\u505a\u4e00\u4e2a\u8be6\u7ec6\u89e3\u91ca\u3002\u8f6c\u6210\u540e\u7684DSDL\u6570\u636e\u96c6\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u91cd\u8981\u7684\u6587\u4ef6\uff1a struct\u7684\u5b9a\u4e49\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u6587\u4ef6\u540d\u4e3aobject-detetction.yaml\uff09\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5bf9struct\u505a\u4e00\u4e2a\u660e\u786e\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u6709sample\u7684\u7ed3\u6784\u4f53\u548c\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u7b49\uff0c\u9700\u6307\u660e\u5305\u542b\u4e86\u54ea\u4e9bfield\uff0c\u6bcf\u4e2afield\u7684\u7c7b\u578b\u3002 \u7c7b\u522b\u57df\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e3aVOC2007ClassDom.yaml\uff09\uff1a\u91cc\u9762\u5305\u542b\u4e86\u7c7b\u522b\u5217\u8868\uff0c\u5bf9\u5e94category\u7684\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\u6392\u5e8f\uff09 samples\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5206\u522b\u5206\u4e3atrain.yaml\u548ctrain_samples.json) train.yaml\u4e3b\u8981\u662f\u6307\u660e\u5f15\u7528\u54ea\u4e2astruct\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6587\u4ef6\uff0c\u5e76\u4e14\u6307\u660e\u6570\u636e\u7c7b\u578b\u548c\u5b58\u653e\u8def\u5f84\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9bmeta\u4fe1\u606f train_samples.json\u91cc\u4fdd\u5b58\u4e86\u5b9e\u9645\u7684samples\u4fe1\u606f\uff0c\u5176\u7ec4\u7ec7\u7ed3\u6784\u5fc5\u987b\u548c\u4e4b\u524d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u5339\u914d \u540e\u8fb9\u4f1a\u5bf9\u76ee\u5f55\u7ed3\u6784\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u8fdb\u884c\u4e00\u4e2a\u8be6\u7ec6\u5c55\u793a\u548c\u89e3\u91ca\u3002 DSDL\u6570\u636e\u96c6\u76ee\u5f55 VOC2007-dsdl/ \u251c\u2500\u2500 doms/ \u2502 \u251c\u2500\u2500 object-detection.yaml # struct\u5b9a\u4e49\u6587\u4ef6 \u2502 \u2514\u2500\u2500 VOC2007ClassDom.yaml # VOC\u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u2514\u2500\u2500 test/ # \u6d4b\u8bd5\u96c6 \u251c\u2500\u2500 test.yaml \u2514\u2500\u2500 test_samples.json \u6a21\u677f\u53ca\u6807\u6ce8\u6587\u4ef6 object-detection.yaml\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5b9a\u4e49struct\u7684yaml\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u540d\u79f0\u53ef\u4ee5\u6839\u636e\u539f\u59cb\u6570\u636e\u96c6\u8fdb\u884c\u4e00\u4e2a\u4fee\u6539\u548c\u9002\u5e94\uff08\u5c3d\u91cf\u4fdd\u7559\u539f\u59cb\u6570\u636e\u96c6\u7684\u5b57\u6bb5\u540d\u79f0\u548c\u7ed3\u6784\uff09\uff0c\u4f46\u662f\u5b57\u6bb5\u7c7b\u578b\u4e00\u5b9a\u8981\u4f7f\u7528\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\uff08\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\u8be6\u89c1\uff1ahttps://opendatalab.github.io/dsdl-docs/zh/lang/basic_types/\uff09 $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : _bbox : BBox _category : Label[dom=$cdom] pose : Str truncated : Bool difficult : Bool ObjectDetectionSample : $def : struct $params : [ \"cdom\" ] $fields : media_path : Image folder : Str source : Dict owner : Dict height : Int width : Int depth : Int segmented : Bool _objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\u53ca\u5bf9\u5e94\u5173\u7cfb\uff1a \uff08\u6ca1\u6709\u63d0\u5230\u7684\u5b57\u6bb5\u90fd\u662f\u4e0e\u539f\u6570\u636e\u96c6\u540c\u540d\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u53e6\u5916\uff0c\u547d\u540d\u4e2d\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u4e00\u822c\u90fd\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u5373\u539f\u6570\u636e\u96c6\u6ca1\u6709\u7684\u5b57\u6bb5\uff09 \u5728ObjectDetectionSample\u4e2d\uff1a media_path\uff1a\u8be5\u5b57\u6bb5\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u7528\u4e8e\u50a8\u5b58\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u4e3b\u8981\u4ece\u539f\u59cb\u6570\u636e\u96c6\u7684filename\u5b57\u6bb5\u8f6c\u5316\u800c\u6765 _objects\uff1a\u8be5\u5b57\u6bb5\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684object\u5b57\u6bb5\uff0c\u4ee5List\u7684\u5f62\u5f0f\u5b58\u50a8\u5177\u4f53bounding box\u7684\u6807\u6ce8\u4fe1\u606f source\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684source\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684source\u5b57\u6bb5\u4e0b\u7684database\u3001annotation\u3001image\u3001flickerid\u5b57\u6bb5 owner\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684owner\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684owner\u5b57\u6bb5\u4e0b\u7684flickerid\u548cname\u5b57\u6bb5 width\u3001height\u3001depth\uff1a\u662f\u539f\u59cb\u6570\u636e\u96c6\u7684size\u5b57\u6bb5\u4e0b\u7684 \u5728LocalObjectEntry\u4e2d\uff1a _bbox\uff1a\u5bf9\u5e94\u539f\u6570\u636e\u96c6\u7684bndbox\u5b57\u6bb5\uff0c\u4f46\u8f6c\u5316\u4e3abbox\u6807\u51c6\uff0c\u5373[x,y,w,h] _category\uff1a\u662f\u8be5\u76ee\u6807\u7684\u7c7b\u522b\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u53f7\uff0c\u5bf9\u5e94\u7684\u662f\u539f\u6570\u636e\u96c6\u7684name\u5b57\u6bb5\uff0c\u7c7b\u522b\u6807\u53f7\u53ef\u4ee5\u53c2\u89c1\u4e0b\u9762\u7684VOC2007ClassDom.yaml VOC2007ClassDom.yaml\uff1a\u8fd9\u662f\u4e00\u4e2a\u7c7b\u522b\u5b9a\u4e49\u7684Dom\u6587\u6863 $dsdl-version : \"0.5.0\" VOC2007ClassDom : $def : class_domain classes : - aeroplane # \u5bf9\u5e94category\u4e3a1 - bicycle # \u5bf9\u5e94category\u4e3a2 - bird - boat - bottle - bus - car - cat - chair - cow - diningtable - dog - horse - motorbike - person - pottedplant - sheep - sofa - train - tvmonitor train.yaml\uff1a\u8fd9\u4e2a\u6587\u6863\u5f15\u7528\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u4e24\u4e2a\u6587\u6863\uff0c\u5e76\u4e14\u6307\u5f15\u4e86\u5177\u4f53\u7684sample\u8def\u5f84\uff08test.yaml\u548cval.yaml\u7c7b\u4f3c\uff0c\u53ea\u662f\u4fee\u6539\u5bf9\u5e94sample-path\u548csub_dataset_name\u5b57\u6bb5\uff09 $dsdl-version : \"0.5.0\" $import : - VOC2007ClassDom - object-detection meta : dataset_name : \"VOC2007\" protocol_version : \"v0.3rc3\" sub_dataset_name : \"train\" data : sample-type : ObjectDetectionSample[cdom=VOC2007ClassDom] sample-path : train_samples.json \u5176\u4e2dtrain_samples.json\u9700\u8981\u6211\u4eec\u5199\u811a\u672c\u4ece\u539f\u59cb\u6570\u636e\u96c6\u8f6c\u6362\u6765\uff0c\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684struct\u5bf9\u5e94\uff0c\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"_media_path\" : \"JPEGImages/000001.jpg\" , \"folder\" : \"VOC2007\" , \"source\" : { \"database\" : \"The VOC2007 Database\" , \"annotation\" : \"PASCAL VOC2007\" , \"flickrid\" : \"341012865\" }, \"owner\" :{ \"flickrid\" : \"Fried Camels\" , \"name\" : \"Jinky the Fruit Bat\" }, \"height\" : 640 , \"width\" : 480 , \"depth\" : 3 , \"segmented\" : 0 , \"_objects\" : [ { \"_bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"_category\" : 1 , \"pose\" : \"Left\" , \"truncated\" : 1 , \"difficult\" : 0 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002 \u6570\u636e\u96c6\u8f6c\u6362 \u8fd9\u4e00\u8282\u63d0\u4f9b\u4e86\u9488\u5bf9\u4e4b\u524d\u5b9a\u4e49\u7684yaml\u6587\u4ef6\u5bf9\u5e94\u751f\u6210sample.json\u6587\u4ef6\u7684\u8f6c\u6362\u811a\u672c\uff0c\u8fd9\u4e2a\u811a\u672c\u53ef\u4ee5\u751f\u6210\u8bad\u7ec3\u3001\u6d4b\u8bd5\u548c\u9a8c\u8bc1\u4e09\u4e2asamples.json\u6587\u4ef6\uff08\u8f6c\u6362\u811a\u672c\u53ef\u81ea\u884c\u4f18\u5316\uff09\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6570\u636e\u96c6\u91cc\u7684\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684ObjectDetectionSample\u7c7b\u5bf9\u5e94\uff08\u65e0\u8bba\u662f\u5b57\u6bb5\u540d\uff0c\u8fd8\u662f\u5176\u503c\u7684\u7c7b\u578b\uff09\uff0c\u4e0d\u8981\u81ea\u884c\u589e\u52a0\u6216\u8005\u51cf\u5c11\u5b57\u6bb5\u3002 \u8f6c\u6362\u811a\u672c\u5982\u4e0b\uff1a #!/usr/bin/env python3 # # Copyright 2022 Shanghai Artificial Intelligence Laboratory. All rights reserved. # \"\"\" This file implements the generator of the VOC2007 DSDL format dataset. \"\"\" import itertools import itertools import yaml import os from xml.etree import ElementTree import json f = open ( 'train/VOC2007ClassDom.yaml' , 'r' ) data = yaml . safe_load ( f ) category_list = data [ 'VOC2007ClassDom' ][ 'classes' ] _VOC_CATEGORY_DICT = { _name : ( _ind + 1 ) for _ind , _name in enumerate ( category_list )} root_path = '/home/PJLAB/ouyanglinke/mmdetection-master/data/VOCdevkit/VOC2007' anno_paths = os . path . join ( root_path , \"Annotations\" ) segmentation = [ 'train' , 'val' , 'test' ] ann_id_gen = itertools . count () for seg in segmentation : seg_path = os . path . join ( root_path , 'ImageSets' , 'Main' , seg + '.txt' ) try : with open ( seg_path , 'r' ) as f : seg_list = f . readlines () except : print ( 'The segmentation file {} cannot be open, it will be skipped.' . format ( seg_path )) continue samples = [] for anno_id in seg_list : anno_path = os . path . join ( root_path , 'Annotations' , anno_id . strip () + '.xml' ) try : with open ( anno_path , 'r' ) as f : anno_tree = ElementTree . parse ( f ) except : print ( 'The annotation file {} cannot read, it will be skipped.' . format ( anno_path )) continue sample = { 'media_path' : os . path . join ( 'JPEGImages' , anno_tree . find ( 'filename' ) . text ), 'folder' : '' , 'source' : { 'database' : anno_tree . find ( 'source' ) . find ( 'database' ) . text , 'annotation' : anno_tree . find ( 'source' ) . find ( 'annotation' ) . text , 'flickrid' : anno_tree . find ( 'source' ) . find ( 'flickrid' ) . text , }, 'owner' : { 'flickrid' : anno_tree . find ( 'owner' ) . find ( 'flickrid' ) . text , 'name' : anno_tree . find ( 'owner' ) . find ( 'name' ) . text }, 'height' : int ( anno_tree . find ( 'size' ) . find ( 'height' ) . text ), 'width' : int ( anno_tree . find ( 'size' ) . find ( 'width' ) . text ), 'depth' : int ( anno_tree . find ( 'size' ) . find ( 'depth' ) . text ), 'segmented' : int ( anno_tree . find ( 'segmented' ) . text ), '_objects' : [] } for obj in anno_tree . iter ( 'object' ): xmin , ymin , xmax , ymax = [ float ( obj . find ( 'bndbox' ) . find ( boxes ) . text ) for boxes in [ 'xmin' , 'ymin' , 'xmax' , 'ymax' ]] sample [ '_objects' ] . append ({ '_bbox' : [ xmin , ymin , xmax - xmin , ymax - ymin ], '_category' : _VOC_CATEGORY_DICT [ obj . find ( 'name' ) . text ], 'pose' : obj . find ( 'pose' ) . text , 'truncated' : int ( obj . find ( 'truncated' ) . text ), 'difficult' : int ( obj . find ( 'difficult' ) . text ) }) samples . append ( sample ) samples_save = { 'samples' : samples } save_path = os . path . join ( seg , seg + '_samples_v2.json' ) with open ( save_path , 'w' ) as f : json . dump ( samples_save , f ) \u6570\u636e\u96c6\u9a8c\u8bc1 \u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u81ea\u52a8\u9a8c\u8bc1\u7684\u65b9\u6cd5\u5982\u4e0b\u3002 dsdl check - y xxx . yaml - c config . py - l ali - oss - t detection - p ./ - o ./ ### -y \u4e3a\u8f93\u5165\u7684yaml\u6587\u4ef6 ### -c \u4e3a\u6570\u636e\u96c6\u7684\u8bfb\u53d6\u914d\u7f6e\uff08\u8bb0\u5f55\u4e86\u6570\u636e\u96c6\u5728\u963f\u91cc\u4e91/\u672c\u5730\u7684\u4f4d\u7f6e\uff09\uff0c\u4e3b\u8981\u5f62\u5f0f\u5982\u4e0b\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) ### -l \u4e3a\u6307\u5b9a\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 ali-oss \u6216 local ### -t \u4e3a\u6307\u5b9a\u5f53\u524dyaml\u7684\u4efb\u52a1\u7c7b\u522b\uff0c\u5f53\u524d\u652f\u6301\u7684\u4efb\u52a1\u7c7b\u522b\u6709\uff08detection\uff0csegmentation\uff0cclassification\uff09 ### -p yaml\u6587\u4ef6\u5bfc\u5165\u7684\u5e93\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84\u5730\u5740 ### -o \u4e3a\u8f93\u51fa\u7684\u6587\u4ef6\u5939\uff0c\u5305\u542b\u56fe\u7247\u548cmd\u6587\u6863\uff0c\u6ce8\u610f\u6253\u5305\u4e0b\u8f7d \u6700\u7ec8\u83b7\u5f97\u7684\u62a5\u544a\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a parser\u68c0\u67e5\u7ed3\u679c\uff1a\u7ed3\u679c\u5305\u62ec\u4e86parse\u7ed3\u679c\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u5219\u53ef\u4ee5\u67e5\u770b\u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f samples\u5b9e\u4f8b\u5316\u68c0\u67e5\u7ed3\u679c\uff1a\u5176\u4e2d\u62a5\u544a\u8bf4\u660e\u4e86\u5f53\u524d\u6570\u636e\u96c6\u5171\u6709\u6837\u672c\u4e2a\u6570\uff0c\u6b63\u5e38\u6837\u672c\u4e2a\u6570\uff0c\u8b66\u544a\u6837\u672c\u4e2a\u6570\uff0c\u9519\u8bef\u6837\u672c\u4e2a\u6570\uff0c\u5e76\u63d0\u4f9b\u4e86\u5f02\u5e38\u6837\u672c\u7684\u5177\u4f53\u4fe1\u606f\u65e5\u5fd7 \u53ef\u89c6\u5316\u7ed3\u679c\uff1a\u9700\u8981\u8089\u773c\u89c2\u5bdf\u53ef\u89c6\u5316\u7ed3\u679c\u662f\u5426\u6b63\u786e\uff0c\u6bd4\u5982bbox\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\uff0c\u6807\u7b7e\u5185\u5bb9\u662f\u5426\u6b63\u786e\u7b49\u3002\u5728\u56fe\u7247\u4e0b\u9762\u5c55\u793a\u4e86\u53ef\u89c6\u5316\u8fc7\u7a0b\u4e2d\u7684\u65e5\u5fd7\u5185\u5bb9\uff0c\u6bd4\u5982\u662f\u53ef\u89c6\u5316\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u4ee5\u53ca\u5931\u8d25\u65e5\u5fd7\u7b49\u3002","title":"\u5b9e\u4f8b\u6f14\u793a- \u56fe\u50cf\u5206\u7c7b"},{"location":"getting_started/Detection/#-","text":"\u8be5\u6559\u7a0b\u4ecb\u7ecd\u4e86\u5982\u4f55\u5c06\u4e00\u4e2a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u8f6c\u6362\u4e3aDSDL\u683c\u5f0f\uff0c\u8fd9\u91cc\u4ee5VOC\u4e3a\u4f8b\u505a\u4e00\u4e2a\u4ecb\u7ecd\u3002\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u6570\u636e\u96c6\u8c03\u7814 DSDL\u6a21\u677f\u5236\u5b9a \u6570\u636e\u96c6\u8f6c\u6362 \u6570\u636e\u96c6\u9a8c\u8bc1","title":"\u5b9e\u4f8b\u6f14\u793a- \u56fe\u50cf\u5206\u7c7b"},{"location":"getting_started/Detection/#_1","text":"\u8c03\u7814\u9700\u8981\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u7ed3\u6784 \u539f\u59cb\u6570\u636e\u96c6\u6807\u6ce8\u7684\u539f\u59cb\u5b57\u6bb5\u53ca\u5176\u542b\u4e49","title":"\u6570\u636e\u96c6\u8c03\u7814"},{"location":"getting_started/Detection/#_2","text":"VOC2007/ \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001 .xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001 .jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032 .png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032 .png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ... \u6211\u4eec\u8fd9\u91cc\u53ea\u4ee5\u68c0\u6d4b\u4efb\u52a1\u4e3a\u4f8b\u751f\u6210\u6a21\u677f\uff0c\u56e0\u6b64\u53ea\u9700\u8981Annotations/\u3001JPEGImages/\u8fd9\u4e24\u4e2a\u6587\u4ef6\u5939\uff0c\u53e6\u5916\uff0c\u8bad\u7ec3\u6d4b\u8bd5\u96c6\u5212\u5206\uff0c\u9700\u8981\u7528ImageSets/Main/train.txt\u3001val.txt\u3001test.txt\u8fd9\u4e09\u4e2a\u6587\u4ef6\u3002","title":"\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u7ed3\u6784"},{"location":"getting_started/Detection/#_3","text":"\u6807\u6ce8\u7c7b\u578b\u5982\u4e0b\uff08\u4ee5Annotations/000001.xml\u4e3a\u4f8b\uff09\uff1a <annotation> <folder> VOC2007 </folder> # \u6587\u4ef6\u5939 <filename> 000001.jpg </filename> # \u56fe\u7247\u6587\u4ef6\u540d <source> # \u56fe\u50cf\u5143\u4fe1\u606f <database> The VOC2007 Database </database> # \u6570\u636e\u96c6\u540d\u79f0 <annotation> PASCAL VOC2007 </annotation> # \u6807\u6ce8\u7c7b\u578b <image> flickr </image> # \u6765\u6e90 <flickrid> 341012865 </flickrid> # \u6765\u6e90ID </source> <owner> # \u6e90\u4fe1\u606f <flickrid> Fried Camels </flickrid> <name> Jinky the Fruit Bat </name> </owner> <size> <width> 353 </width> # \u56fe\u7247\u5bbd <height> 500 </height> # \u56fe\u7247\u9ad8 <depth> 3 </depth> # \u56fe\u7247\u901a\u9053\u6570 </size> <segmented> 0 </segmented> # \u662f\u5426\u7528\u4e8e\u5206\u5272 <object> # \u6807\u6ce8\u90e8\u5206 <name> dog </name> # \u6807\u7b7e <pose> Left </pose> # \u59ff\u6001 <truncated> 1 </truncated> # \u7269\u4f53\u662f\u5426\u88ab\u90e8\u5206\u906e\u6321\uff08>15%\uff09 <difficult> 0 </difficult> # \u662f\u5426\u4e3a\u96be\u4ee5\u8fa8\u8bc6\u7684\u7269\u4f53 <bndbox> <xmin> 48 </xmin> # \u5de6\u4e0a\u89d2\u70b9\u7684x <ymin> 240 </ymin> # \u5de6\u4e0a\u89d2\u70b9\u7684y <xmax> 195 </xmax> # \u53f3\u4e0b\u89d2\u70b9\u7684x <ymax> 371 </ymax> # \u53f3\u4e0b\u89d2\u70b9\u7684y </bndbox> </object> ... </annotation> \u8fd9\u91cc\u4ee5ImageSets/Main/train.txt\u4e3a\u4f8b\u5c55\u793a\u4e00\u4e0b\u6570\u636e\u96c6segment\u5212\u5206\u7684\u6587\u4ef6\u5185\u5bb9\uff1a 000012 # \u56fe\u7247\u540d\u524d\u7f00 000017 000023 000026 ...","title":"\u539f\u59cb\u6570\u636e\u96c6\u6807\u6ce8\u7684\u539f\u59cb\u5b57\u6bb5\u53ca\u5176\u542b\u4e49"},{"location":"getting_started/Detection/#dsdl","text":"","title":"DSDL\u6a21\u677f\u5236\u5b9a"},{"location":"getting_started/Detection/#yaml","text":"\u6700\u7ec8\u9700\u8981\u8f6c\u6210\u7684yaml\u6570\u636e\u96c6\u683c\u5f0f\uff0c\u5728\u8fd9\u91cc\u505a\u4e00\u4e2a\u8be6\u7ec6\u89e3\u91ca\u3002\u8f6c\u6210\u540e\u7684DSDL\u6570\u636e\u96c6\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u91cd\u8981\u7684\u6587\u4ef6\uff1a struct\u7684\u5b9a\u4e49\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u6587\u4ef6\u540d\u4e3aobject-detetction.yaml\uff09\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5bf9struct\u505a\u4e00\u4e2a\u660e\u786e\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u6709sample\u7684\u7ed3\u6784\u4f53\u548c\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u7b49\uff0c\u9700\u6307\u660e\u5305\u542b\u4e86\u54ea\u4e9bfield\uff0c\u6bcf\u4e2afield\u7684\u7c7b\u578b\u3002 \u7c7b\u522b\u57df\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e3aVOC2007ClassDom.yaml\uff09\uff1a\u91cc\u9762\u5305\u542b\u4e86\u7c7b\u522b\u5217\u8868\uff0c\u5bf9\u5e94category\u7684\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\u6392\u5e8f\uff09 samples\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5206\u522b\u5206\u4e3atrain.yaml\u548ctrain_samples.json) train.yaml\u4e3b\u8981\u662f\u6307\u660e\u5f15\u7528\u54ea\u4e2astruct\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6587\u4ef6\uff0c\u5e76\u4e14\u6307\u660e\u6570\u636e\u7c7b\u578b\u548c\u5b58\u653e\u8def\u5f84\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9bmeta\u4fe1\u606f train_samples.json\u91cc\u4fdd\u5b58\u4e86\u5b9e\u9645\u7684samples\u4fe1\u606f\uff0c\u5176\u7ec4\u7ec7\u7ed3\u6784\u5fc5\u987b\u548c\u4e4b\u524d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u5339\u914d \u540e\u8fb9\u4f1a\u5bf9\u76ee\u5f55\u7ed3\u6784\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u8fdb\u884c\u4e00\u4e2a\u8be6\u7ec6\u5c55\u793a\u548c\u89e3\u91ca\u3002","title":"Yaml\u683c\u5f0f\u89e3\u91ca"},{"location":"getting_started/Detection/#dsdl_1","text":"VOC2007-dsdl/ \u251c\u2500\u2500 doms/ \u2502 \u251c\u2500\u2500 object-detection.yaml # struct\u5b9a\u4e49\u6587\u4ef6 \u2502 \u2514\u2500\u2500 VOC2007ClassDom.yaml # VOC\u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u2514\u2500\u2500 test/ # \u6d4b\u8bd5\u96c6 \u251c\u2500\u2500 test.yaml \u2514\u2500\u2500 test_samples.json","title":"DSDL\u6570\u636e\u96c6\u76ee\u5f55"},{"location":"getting_started/Detection/#_4","text":"object-detection.yaml\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5b9a\u4e49struct\u7684yaml\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u540d\u79f0\u53ef\u4ee5\u6839\u636e\u539f\u59cb\u6570\u636e\u96c6\u8fdb\u884c\u4e00\u4e2a\u4fee\u6539\u548c\u9002\u5e94\uff08\u5c3d\u91cf\u4fdd\u7559\u539f\u59cb\u6570\u636e\u96c6\u7684\u5b57\u6bb5\u540d\u79f0\u548c\u7ed3\u6784\uff09\uff0c\u4f46\u662f\u5b57\u6bb5\u7c7b\u578b\u4e00\u5b9a\u8981\u4f7f\u7528\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\uff08\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\u8be6\u89c1\uff1ahttps://opendatalab.github.io/dsdl-docs/zh/lang/basic_types/\uff09 $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : _bbox : BBox _category : Label[dom=$cdom] pose : Str truncated : Bool difficult : Bool ObjectDetectionSample : $def : struct $params : [ \"cdom\" ] $fields : media_path : Image folder : Str source : Dict owner : Dict height : Int width : Int depth : Int segmented : Bool _objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\u53ca\u5bf9\u5e94\u5173\u7cfb\uff1a \uff08\u6ca1\u6709\u63d0\u5230\u7684\u5b57\u6bb5\u90fd\u662f\u4e0e\u539f\u6570\u636e\u96c6\u540c\u540d\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u53e6\u5916\uff0c\u547d\u540d\u4e2d\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u4e00\u822c\u90fd\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u5373\u539f\u6570\u636e\u96c6\u6ca1\u6709\u7684\u5b57\u6bb5\uff09 \u5728ObjectDetectionSample\u4e2d\uff1a media_path\uff1a\u8be5\u5b57\u6bb5\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u7528\u4e8e\u50a8\u5b58\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u4e3b\u8981\u4ece\u539f\u59cb\u6570\u636e\u96c6\u7684filename\u5b57\u6bb5\u8f6c\u5316\u800c\u6765 _objects\uff1a\u8be5\u5b57\u6bb5\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684object\u5b57\u6bb5\uff0c\u4ee5List\u7684\u5f62\u5f0f\u5b58\u50a8\u5177\u4f53bounding box\u7684\u6807\u6ce8\u4fe1\u606f source\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684source\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684source\u5b57\u6bb5\u4e0b\u7684database\u3001annotation\u3001image\u3001flickerid\u5b57\u6bb5 owner\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684owner\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684owner\u5b57\u6bb5\u4e0b\u7684flickerid\u548cname\u5b57\u6bb5 width\u3001height\u3001depth\uff1a\u662f\u539f\u59cb\u6570\u636e\u96c6\u7684size\u5b57\u6bb5\u4e0b\u7684 \u5728LocalObjectEntry\u4e2d\uff1a _bbox\uff1a\u5bf9\u5e94\u539f\u6570\u636e\u96c6\u7684bndbox\u5b57\u6bb5\uff0c\u4f46\u8f6c\u5316\u4e3abbox\u6807\u51c6\uff0c\u5373[x,y,w,h] _category\uff1a\u662f\u8be5\u76ee\u6807\u7684\u7c7b\u522b\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u53f7\uff0c\u5bf9\u5e94\u7684\u662f\u539f\u6570\u636e\u96c6\u7684name\u5b57\u6bb5\uff0c\u7c7b\u522b\u6807\u53f7\u53ef\u4ee5\u53c2\u89c1\u4e0b\u9762\u7684VOC2007ClassDom.yaml VOC2007ClassDom.yaml\uff1a\u8fd9\u662f\u4e00\u4e2a\u7c7b\u522b\u5b9a\u4e49\u7684Dom\u6587\u6863 $dsdl-version : \"0.5.0\" VOC2007ClassDom : $def : class_domain classes : - aeroplane # \u5bf9\u5e94category\u4e3a1 - bicycle # \u5bf9\u5e94category\u4e3a2 - bird - boat - bottle - bus - car - cat - chair - cow - diningtable - dog - horse - motorbike - person - pottedplant - sheep - sofa - train - tvmonitor train.yaml\uff1a\u8fd9\u4e2a\u6587\u6863\u5f15\u7528\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u4e24\u4e2a\u6587\u6863\uff0c\u5e76\u4e14\u6307\u5f15\u4e86\u5177\u4f53\u7684sample\u8def\u5f84\uff08test.yaml\u548cval.yaml\u7c7b\u4f3c\uff0c\u53ea\u662f\u4fee\u6539\u5bf9\u5e94sample-path\u548csub_dataset_name\u5b57\u6bb5\uff09 $dsdl-version : \"0.5.0\" $import : - VOC2007ClassDom - object-detection meta : dataset_name : \"VOC2007\" protocol_version : \"v0.3rc3\" sub_dataset_name : \"train\" data : sample-type : ObjectDetectionSample[cdom=VOC2007ClassDom] sample-path : train_samples.json \u5176\u4e2dtrain_samples.json\u9700\u8981\u6211\u4eec\u5199\u811a\u672c\u4ece\u539f\u59cb\u6570\u636e\u96c6\u8f6c\u6362\u6765\uff0c\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684struct\u5bf9\u5e94\uff0c\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"_media_path\" : \"JPEGImages/000001.jpg\" , \"folder\" : \"VOC2007\" , \"source\" : { \"database\" : \"The VOC2007 Database\" , \"annotation\" : \"PASCAL VOC2007\" , \"flickrid\" : \"341012865\" }, \"owner\" :{ \"flickrid\" : \"Fried Camels\" , \"name\" : \"Jinky the Fruit Bat\" }, \"height\" : 640 , \"width\" : 480 , \"depth\" : 3 , \"segmented\" : 0 , \"_objects\" : [ { \"_bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"_category\" : 1 , \"pose\" : \"Left\" , \"truncated\" : 1 , \"difficult\" : 0 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002","title":"\u6a21\u677f\u53ca\u6807\u6ce8\u6587\u4ef6"},{"location":"getting_started/Detection/#_5","text":"\u8fd9\u4e00\u8282\u63d0\u4f9b\u4e86\u9488\u5bf9\u4e4b\u524d\u5b9a\u4e49\u7684yaml\u6587\u4ef6\u5bf9\u5e94\u751f\u6210sample.json\u6587\u4ef6\u7684\u8f6c\u6362\u811a\u672c\uff0c\u8fd9\u4e2a\u811a\u672c\u53ef\u4ee5\u751f\u6210\u8bad\u7ec3\u3001\u6d4b\u8bd5\u548c\u9a8c\u8bc1\u4e09\u4e2asamples.json\u6587\u4ef6\uff08\u8f6c\u6362\u811a\u672c\u53ef\u81ea\u884c\u4f18\u5316\uff09\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6570\u636e\u96c6\u91cc\u7684\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684ObjectDetectionSample\u7c7b\u5bf9\u5e94\uff08\u65e0\u8bba\u662f\u5b57\u6bb5\u540d\uff0c\u8fd8\u662f\u5176\u503c\u7684\u7c7b\u578b\uff09\uff0c\u4e0d\u8981\u81ea\u884c\u589e\u52a0\u6216\u8005\u51cf\u5c11\u5b57\u6bb5\u3002 \u8f6c\u6362\u811a\u672c\u5982\u4e0b\uff1a #!/usr/bin/env python3 # # Copyright 2022 Shanghai Artificial Intelligence Laboratory. All rights reserved. # \"\"\" This file implements the generator of the VOC2007 DSDL format dataset. \"\"\" import itertools import itertools import yaml import os from xml.etree import ElementTree import json f = open ( 'train/VOC2007ClassDom.yaml' , 'r' ) data = yaml . safe_load ( f ) category_list = data [ 'VOC2007ClassDom' ][ 'classes' ] _VOC_CATEGORY_DICT = { _name : ( _ind + 1 ) for _ind , _name in enumerate ( category_list )} root_path = '/home/PJLAB/ouyanglinke/mmdetection-master/data/VOCdevkit/VOC2007' anno_paths = os . path . join ( root_path , \"Annotations\" ) segmentation = [ 'train' , 'val' , 'test' ] ann_id_gen = itertools . count () for seg in segmentation : seg_path = os . path . join ( root_path , 'ImageSets' , 'Main' , seg + '.txt' ) try : with open ( seg_path , 'r' ) as f : seg_list = f . readlines () except : print ( 'The segmentation file {} cannot be open, it will be skipped.' . format ( seg_path )) continue samples = [] for anno_id in seg_list : anno_path = os . path . join ( root_path , 'Annotations' , anno_id . strip () + '.xml' ) try : with open ( anno_path , 'r' ) as f : anno_tree = ElementTree . parse ( f ) except : print ( 'The annotation file {} cannot read, it will be skipped.' . format ( anno_path )) continue sample = { 'media_path' : os . path . join ( 'JPEGImages' , anno_tree . find ( 'filename' ) . text ), 'folder' : '' , 'source' : { 'database' : anno_tree . find ( 'source' ) . find ( 'database' ) . text , 'annotation' : anno_tree . find ( 'source' ) . find ( 'annotation' ) . text , 'flickrid' : anno_tree . find ( 'source' ) . find ( 'flickrid' ) . text , }, 'owner' : { 'flickrid' : anno_tree . find ( 'owner' ) . find ( 'flickrid' ) . text , 'name' : anno_tree . find ( 'owner' ) . find ( 'name' ) . text }, 'height' : int ( anno_tree . find ( 'size' ) . find ( 'height' ) . text ), 'width' : int ( anno_tree . find ( 'size' ) . find ( 'width' ) . text ), 'depth' : int ( anno_tree . find ( 'size' ) . find ( 'depth' ) . text ), 'segmented' : int ( anno_tree . find ( 'segmented' ) . text ), '_objects' : [] } for obj in anno_tree . iter ( 'object' ): xmin , ymin , xmax , ymax = [ float ( obj . find ( 'bndbox' ) . find ( boxes ) . text ) for boxes in [ 'xmin' , 'ymin' , 'xmax' , 'ymax' ]] sample [ '_objects' ] . append ({ '_bbox' : [ xmin , ymin , xmax - xmin , ymax - ymin ], '_category' : _VOC_CATEGORY_DICT [ obj . find ( 'name' ) . text ], 'pose' : obj . find ( 'pose' ) . text , 'truncated' : int ( obj . find ( 'truncated' ) . text ), 'difficult' : int ( obj . find ( 'difficult' ) . text ) }) samples . append ( sample ) samples_save = { 'samples' : samples } save_path = os . path . join ( seg , seg + '_samples_v2.json' ) with open ( save_path , 'w' ) as f : json . dump ( samples_save , f )","title":"\u6570\u636e\u96c6\u8f6c\u6362"},{"location":"getting_started/Detection/#_6","text":"\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u81ea\u52a8\u9a8c\u8bc1\u7684\u65b9\u6cd5\u5982\u4e0b\u3002 dsdl check - y xxx . yaml - c config . py - l ali - oss - t detection - p ./ - o ./ ### -y \u4e3a\u8f93\u5165\u7684yaml\u6587\u4ef6 ### -c \u4e3a\u6570\u636e\u96c6\u7684\u8bfb\u53d6\u914d\u7f6e\uff08\u8bb0\u5f55\u4e86\u6570\u636e\u96c6\u5728\u963f\u91cc\u4e91/\u672c\u5730\u7684\u4f4d\u7f6e\uff09\uff0c\u4e3b\u8981\u5f62\u5f0f\u5982\u4e0b\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) ### -l \u4e3a\u6307\u5b9a\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 ali-oss \u6216 local ### -t \u4e3a\u6307\u5b9a\u5f53\u524dyaml\u7684\u4efb\u52a1\u7c7b\u522b\uff0c\u5f53\u524d\u652f\u6301\u7684\u4efb\u52a1\u7c7b\u522b\u6709\uff08detection\uff0csegmentation\uff0cclassification\uff09 ### -p yaml\u6587\u4ef6\u5bfc\u5165\u7684\u5e93\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84\u5730\u5740 ### -o \u4e3a\u8f93\u51fa\u7684\u6587\u4ef6\u5939\uff0c\u5305\u542b\u56fe\u7247\u548cmd\u6587\u6863\uff0c\u6ce8\u610f\u6253\u5305\u4e0b\u8f7d \u6700\u7ec8\u83b7\u5f97\u7684\u62a5\u544a\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a parser\u68c0\u67e5\u7ed3\u679c\uff1a\u7ed3\u679c\u5305\u62ec\u4e86parse\u7ed3\u679c\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u5219\u53ef\u4ee5\u67e5\u770b\u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f samples\u5b9e\u4f8b\u5316\u68c0\u67e5\u7ed3\u679c\uff1a\u5176\u4e2d\u62a5\u544a\u8bf4\u660e\u4e86\u5f53\u524d\u6570\u636e\u96c6\u5171\u6709\u6837\u672c\u4e2a\u6570\uff0c\u6b63\u5e38\u6837\u672c\u4e2a\u6570\uff0c\u8b66\u544a\u6837\u672c\u4e2a\u6570\uff0c\u9519\u8bef\u6837\u672c\u4e2a\u6570\uff0c\u5e76\u63d0\u4f9b\u4e86\u5f02\u5e38\u6837\u672c\u7684\u5177\u4f53\u4fe1\u606f\u65e5\u5fd7 \u53ef\u89c6\u5316\u7ed3\u679c\uff1a\u9700\u8981\u8089\u773c\u89c2\u5bdf\u53ef\u89c6\u5316\u7ed3\u679c\u662f\u5426\u6b63\u786e\uff0c\u6bd4\u5982bbox\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\uff0c\u6807\u7b7e\u5185\u5bb9\u662f\u5426\u6b63\u786e\u7b49\u3002\u5728\u56fe\u7247\u4e0b\u9762\u5c55\u793a\u4e86\u53ef\u89c6\u5316\u8fc7\u7a0b\u4e2d\u7684\u65e5\u5fd7\u5185\u5bb9\uff0c\u6bd4\u5982\u662f\u53ef\u89c6\u5316\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u4ee5\u53ca\u5931\u8d25\u65e5\u5fd7\u7b49\u3002","title":"\u6570\u636e\u96c6\u9a8c\u8bc1"},{"location":"getting_started/install/","text":"\u73af\u5883\u4f9d\u8d56 Python3.8+ DSDL-SDK\u5b89\u88c5 \u4e3a\u4e86\u4f7f\u7528DSDL\u76f8\u5173\u7684\u529f\u80fd\uff0c\u6211\u4eec\u63a8\u8350\u5b89\u88c5DSDL-SDK\u3002\u63d0\u4f9b\u4e24\u79cd\u5b89\u88c5\u65b9\u5f0f\uff1a 1. pip \u5b89\u88c5 pip install dsdl 2. \u6e90\u7801\u5b89\u88c5\uff08\u63a8\u8350\uff09 \u7531\u4e8eDSDL\u6b63\u5728\u5f00\u53d1\u5185\u6d4b\u9636\u6bb5\uff0c\u63a8\u8350\u4f7f\u7528\u6e90\u7801\u5b89\u88c5\uff0c\u4ee5\u83b7\u53d6\u6700\u65b0\u7684\u7248\u672c\u66f4\u65b0\u3002 git clone -b schema-dsdl https://github.com/opendatalab/dsdl-sdk.git cd dsdl python setup.py install OpenDataLab-CLI\u5b89\u88c5 \u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u83b7\u53d6\u539f\u59cb\u6570\u636e\u96c6\u548cDSDL\u6570\u636e\u96c6\uff0c\u63a8\u8350\u7528\u6237\u4e0b\u8f7dOpenDataLab CLI\u5de5\u5177\u3002 1. pip \u5b89\u88c5 # \u5b89\u88c5 pip install opendatalab # \u7248\u672c\u5347\u7ea7 pip install -U opendatalab 2. \u6570\u636e\u96c6\u83b7\u53d6 odl login # \u767b\u5f55 odl info <\u6570\u636e\u96c6\u552f\u4e00\u6807\u8bc6\u540d> # \u67e5\u770b\u6b64\u6570\u636e\u96c6\u7684\u5143\u6570\u636e odl ls <\u6570\u636e\u96c6\u552f\u4e00\u6807\u8bc6\u540d> # \u67e5\u770b\u6b64\u6570\u636e\u96c6\u7684\u6587\u4ef6\u5217\u8868 odl get <\u6570\u636e\u96c6\u552f\u4e00\u6807\u8bc6\u540d> # \u4e0b\u8f7d\u6b64\u6570\u636e\u96c6 \u6570\u636e\u96c6\u552f\u4e00\u6807\u8bc6\u540d\u53ef\u4ee5\u5728 OpenDataLab\u5b98\u7f51 \u83b7\u53d6\uff0c\u6b64\u5916\uff0c\u6570\u636e\u96c6\u4e5f\u53ef\u4ee5\u4ece\u7f51\u9875\u7aef\u76f4\u63a5\u4e0b\u8f7d\u3002","title":"\u5b89\u88c5\u90e8\u7f72"},{"location":"getting_started/install/#_1","text":"Python3.8+","title":"\u73af\u5883\u4f9d\u8d56"},{"location":"getting_started/install/#dsdl-sdk","text":"\u4e3a\u4e86\u4f7f\u7528DSDL\u76f8\u5173\u7684\u529f\u80fd\uff0c\u6211\u4eec\u63a8\u8350\u5b89\u88c5DSDL-SDK\u3002\u63d0\u4f9b\u4e24\u79cd\u5b89\u88c5\u65b9\u5f0f\uff1a","title":"DSDL-SDK\u5b89\u88c5"},{"location":"getting_started/install/#1-pip","text":"pip install dsdl","title":"1. pip \u5b89\u88c5"},{"location":"getting_started/install/#2","text":"\u7531\u4e8eDSDL\u6b63\u5728\u5f00\u53d1\u5185\u6d4b\u9636\u6bb5\uff0c\u63a8\u8350\u4f7f\u7528\u6e90\u7801\u5b89\u88c5\uff0c\u4ee5\u83b7\u53d6\u6700\u65b0\u7684\u7248\u672c\u66f4\u65b0\u3002 git clone -b schema-dsdl https://github.com/opendatalab/dsdl-sdk.git cd dsdl python setup.py install","title":"2. \u6e90\u7801\u5b89\u88c5\uff08\u63a8\u8350\uff09"},{"location":"getting_started/install/#opendatalab-cli","text":"\u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u83b7\u53d6\u539f\u59cb\u6570\u636e\u96c6\u548cDSDL\u6570\u636e\u96c6\uff0c\u63a8\u8350\u7528\u6237\u4e0b\u8f7dOpenDataLab CLI\u5de5\u5177\u3002","title":"OpenDataLab-CLI\u5b89\u88c5"},{"location":"getting_started/install/#1-pip_1","text":"# \u5b89\u88c5 pip install opendatalab # \u7248\u672c\u5347\u7ea7 pip install -U opendatalab","title":"1. pip \u5b89\u88c5"},{"location":"getting_started/install/#2_1","text":"odl login # \u767b\u5f55 odl info <\u6570\u636e\u96c6\u552f\u4e00\u6807\u8bc6\u540d> # \u67e5\u770b\u6b64\u6570\u636e\u96c6\u7684\u5143\u6570\u636e odl ls <\u6570\u636e\u96c6\u552f\u4e00\u6807\u8bc6\u540d> # \u67e5\u770b\u6b64\u6570\u636e\u96c6\u7684\u6587\u4ef6\u5217\u8868 odl get <\u6570\u636e\u96c6\u552f\u4e00\u6807\u8bc6\u540d> # \u4e0b\u8f7d\u6b64\u6570\u636e\u96c6 \u6570\u636e\u96c6\u552f\u4e00\u6807\u8bc6\u540d\u53ef\u4ee5\u5728 OpenDataLab\u5b98\u7f51 \u83b7\u53d6\uff0c\u6b64\u5916\uff0c\u6570\u636e\u96c6\u4e5f\u53ef\u4ee5\u4ece\u7f51\u9875\u7aef\u76f4\u63a5\u4e0b\u8f7d\u3002","title":"2. \u6570\u636e\u96c6\u83b7\u53d6"},{"location":"getting_started/overview/","text":"DSDL\u7b80\u4ecb \u6570\u636e\u96c6\u63cf\u8ff0\u8bed\u8a00DSDL\uff08Data Set Description Language\uff09\u65e8\u5728\u63d0\u4f9bAI\u6570\u636e\u96c6\u7edf\u4e00\u89c4\u8303\uff0c\u4f7f\u7528\u6237\u53ef\u4ee5\u9ad8\u6548\u4fbf\u6377\u5730\u4f7f\u7528\u591a\u9886\u57df\u4eba\u5de5\u667a\u80fd\u6570\u636e\u3002 \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u5feb\u6377\u83b7\u53d6\u6570\u636e\uff0c\u6211\u4eec\u642d\u5efa\u4e86AI\u6570\u636e\u96c6\u5e73\u53f0 \u3010OpenDataLab\u3011 \uff0c\u5e73\u53f0\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u63d0\u4f9b\u6570\u636e\u96c6LICENSE\u58f0\u660e\uff0c\u4fdd\u8bc1\u6570\u636e\u96c6\u4f7f\u7528\u5408\u89c4\u6027\uff1b \u6c47\u805a\u4e30\u5bcc\u7684\u516c\u5f00AI\u6570\u636e\u96c6\u8d44\u6e90\uff0c\u6db5\u76d6\u5404\u884c\u4e1a\u3001\u5404\u7814\u7a76\u9886\u57df\u7684\u9ad8\u8d28\u91cf\u6570\u636e\u96c6\uff1b \u63d0\u4f9b\u591a\u7ef4\u6570\u636e\u68c0\u7d22\u80fd\u529b\u53ca\u6570\u636e\u96c6\u9ad8\u901f\u4e0b\u8f7d\u652f\u6301\u3002 \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u9ad8\u6548\u4f7f\u7528\u6570\u636e\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86AI\u6570\u636e\u96c6\u63cf\u8ff0\u8bed\u8a00 \u3010DSDL\u3011 \uff1a \u7528\u6237\u53ef\u4ee5\u8bfb\u53d6AI\u5a92\u4f53\u6570\u636e\u53ca\u5bf9\u5e94\u6807\u6ce8\uff0c\u65e0\u9700\u8fdb\u884c\u7e41\u7410\u7684\u683c\u5f0f\u8f6c\u6362\u64cd\u4f5c\uff1b \u7528\u6237\u53ef\u4ee5\u7528\u7edf\u4e00\u63a5\u53e3\u64cd\u4f5c\u5404\u79cd\u4efb\u52a1\u53ca\u6a21\u6001\u6570\u636e\uff0c\u4fbf\u6377\u7075\u6d3b\u5730\u7ec4\u5408\u4f7f\u7528\u591a\u4efb\u52a1\uff0c\u591a\u6a21\u6001\u6570\u636e\u3002 DSDL\u76ee\u6807\u7528\u6237 DSDL\u6838\u5fc3\u76ee\u6807\u662f\u7edf\u4e00AI\u6570\u636e\u96c6\u6807\u6ce8\u89c4\u8303\uff0c\u6253\u901a\u4e0d\u540c\u4efb\u52a1\u53ca\u6a21\u6001\u95f4\u6570\u636e\u5173\u8054\uff0c\u5176\u76ee\u6807\u7528\u6237\u5305\u542b\uff1a AI\u521d\u5b66\u8005 \uff1a\u5bf9\u4e8e\u5f00\u59cb\u63a5\u89e6AI\u7814\u7a76\u7684\u65b0\u7528\u6237\uff0c\u65e0\u9700\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u5bf9\u6570\u636e\u96c6\u683c\u5f0f\u3001\u5185\u5bb9\u8fdb\u884c\u5206\u6790\u3002\u6211\u4eec\u63d0\u524d\u5bf9AI\u5404\u4e2a\u9886\u57df\u7684\u4e3b\u6d41\u6570\u636e\u96c6\u8fdb\u884cDSDL\u6807\u51c6\u5316\u64cd\u4f5c\uff08 DSDL\u6807\u51c6\u5316\u6570\u636e\u5217\u8868 \uff09\uff0cDSDL\u53ef\u4ee5\u6e05\u6670\u7b80\u6d01\u5730\u63d0\u4f9b\u6570\u636e\u5143\u4fe1\u606f\u3001\u6807\u6ce8\u4fe1\u606f\uff0c\u7528\u6237\u4e00\u76ee\u4e86\u7136\uff0c\u5e76\u4e14\u53ef\u76f4\u63a5\u4f7f\u7528\u7edf\u4e00\u63a5\u53e3\u8fdb\u884c\u8bad\u7ec3\u63a8\u7406\u64cd\u4f5c\u3002 \u7279\u5b9a\u9886\u57df\u7814\u7a76/\u5f00\u53d1 \uff1a\u6211\u4eec\u5bf9\u5927\u90e8\u5206\u4e3b\u6d41\u6570\u636e\u96c6\u8fdb\u884cDSDL\u6807\u51c6\u5316\uff0c\u540c\u65f6\u63d0\u4f9b\u7edf\u4e00\u7684Dataset\u51fd\u6570\u63a5\u53e3\uff0c\u7528\u6237\u4f7f\u7528\u5404\u79cd\u6570\u636e\u66f4\u52a0\u4fbf\u6377\u3002 \u5927\u6a21\u578b\u7814\u7a76/\u5f00\u53d1 \uff1a\u5927\u6a21\u578b\u7814\u7a76\u901a\u5e38\u9700\u8981\u5927\u91cf\u7684\u6570\u636e\u83b7\u53d6\uff0c\u9884\u5904\u7406\u64cd\u4f5c\u3002OpenDataLab\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u5404\u7c7b\u6570\u636e\uff0cDSDL\u4f7f\u5f97\u4e0d\u540c\u4efb\u52a1\u548c\u6a21\u6001\u6570\u636e\u4ee5\u7edf\u4e00\u89c4\u8303\u63cf\u8ff0\u3002\u7528\u6237\u53ef\u7075\u6d3b\u9ad8\u6548\u7ec4\u5408\u4f7f\u7528\u6240\u9700\u6570\u636e\u3002 DSDL\u5b66\u4e60\u4f7f\u7528 \u5bf9\u4e8e\u521d\u6b21\u4f7f\u7528DSDL\u7684\u7528\u6237\uff0c\u8bf7\u5148 \u5b89\u88c5\u90e8\u7f72 DSDL-SDK\uff0c\u6211\u4eec\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u4e0b\u8ff0\u5b66\u4e60\u8d44\u6e90\uff1a \u5feb\u901f\u5f00\u59cb \uff1a\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u4e86\u89e3DSDL\u6570\u636e\u96c6\u4e0b\u8f7d\u3001\u4f7f\u7528\u65b9\u6cd5\u3002 \u7528\u6237\u6559\u7a0b \uff1a\u63d0\u4f9b \u6570\u636e\u96c6\u4e0b\u8f7d \u3001 \u9884\u5904\u7406 \u3001 \u6570\u636e\u5206\u6790 \u3001 \u6a21\u578b\u8bad\u7ec3 \u3001 \u6a21\u578b\u63a8\u7406 \u7cfb\u7edf\u6027\u6559\u7a0b\u3002 DSDL\u4efb\u52a1\u6a21\u677f \uff1a\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u4e86\u89e3\u76f8\u5173\u4efb\u52a1DSDL\u6a21\u677f\u5b9a\u4e49\uff0c\u9ad8\u6548\u5b8c\u6210\u6570\u636e\u96c6\u8f6c\u6362\u5de5\u4f5c\u3002 DSDL\u8bed\u8a00\u6559\u7a0b \uff1a\u7528\u6237\u4e86\u89e3\u5e76\u7cfb\u7edf\u6027\u5b66\u4e60DSDL\u8bed\u8a00\u3002 \u9ad8\u9636\u6559\u7a0b \uff1a\u4ecb\u7ecd DSDL\u4efb\u52a1\u62d3\u5c55 \u3001 \u6570\u636e\u96c6\u8f6c\u6362 \u3001\u53ca DSDL Dataset\u5f00\u53d1 \u6d41\u7a0b\u3002 \u5982\u5bf9DSDL\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u6b22\u8fce\u5728GitHub\u9875\u9762\u63d0issue\u8fdb\u884c\u54a8\u8be2\u3002","title":"\u6574\u4f53\u4ecb\u7ecd"},{"location":"getting_started/overview/#dsdl","text":"\u6570\u636e\u96c6\u63cf\u8ff0\u8bed\u8a00DSDL\uff08Data Set Description Language\uff09\u65e8\u5728\u63d0\u4f9bAI\u6570\u636e\u96c6\u7edf\u4e00\u89c4\u8303\uff0c\u4f7f\u7528\u6237\u53ef\u4ee5\u9ad8\u6548\u4fbf\u6377\u5730\u4f7f\u7528\u591a\u9886\u57df\u4eba\u5de5\u667a\u80fd\u6570\u636e\u3002 \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u5feb\u6377\u83b7\u53d6\u6570\u636e\uff0c\u6211\u4eec\u642d\u5efa\u4e86AI\u6570\u636e\u96c6\u5e73\u53f0 \u3010OpenDataLab\u3011 \uff0c\u5e73\u53f0\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u63d0\u4f9b\u6570\u636e\u96c6LICENSE\u58f0\u660e\uff0c\u4fdd\u8bc1\u6570\u636e\u96c6\u4f7f\u7528\u5408\u89c4\u6027\uff1b \u6c47\u805a\u4e30\u5bcc\u7684\u516c\u5f00AI\u6570\u636e\u96c6\u8d44\u6e90\uff0c\u6db5\u76d6\u5404\u884c\u4e1a\u3001\u5404\u7814\u7a76\u9886\u57df\u7684\u9ad8\u8d28\u91cf\u6570\u636e\u96c6\uff1b \u63d0\u4f9b\u591a\u7ef4\u6570\u636e\u68c0\u7d22\u80fd\u529b\u53ca\u6570\u636e\u96c6\u9ad8\u901f\u4e0b\u8f7d\u652f\u6301\u3002 \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u9ad8\u6548\u4f7f\u7528\u6570\u636e\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86AI\u6570\u636e\u96c6\u63cf\u8ff0\u8bed\u8a00 \u3010DSDL\u3011 \uff1a \u7528\u6237\u53ef\u4ee5\u8bfb\u53d6AI\u5a92\u4f53\u6570\u636e\u53ca\u5bf9\u5e94\u6807\u6ce8\uff0c\u65e0\u9700\u8fdb\u884c\u7e41\u7410\u7684\u683c\u5f0f\u8f6c\u6362\u64cd\u4f5c\uff1b \u7528\u6237\u53ef\u4ee5\u7528\u7edf\u4e00\u63a5\u53e3\u64cd\u4f5c\u5404\u79cd\u4efb\u52a1\u53ca\u6a21\u6001\u6570\u636e\uff0c\u4fbf\u6377\u7075\u6d3b\u5730\u7ec4\u5408\u4f7f\u7528\u591a\u4efb\u52a1\uff0c\u591a\u6a21\u6001\u6570\u636e\u3002","title":"DSDL\u7b80\u4ecb"},{"location":"getting_started/overview/#dsdl_1","text":"DSDL\u6838\u5fc3\u76ee\u6807\u662f\u7edf\u4e00AI\u6570\u636e\u96c6\u6807\u6ce8\u89c4\u8303\uff0c\u6253\u901a\u4e0d\u540c\u4efb\u52a1\u53ca\u6a21\u6001\u95f4\u6570\u636e\u5173\u8054\uff0c\u5176\u76ee\u6807\u7528\u6237\u5305\u542b\uff1a AI\u521d\u5b66\u8005 \uff1a\u5bf9\u4e8e\u5f00\u59cb\u63a5\u89e6AI\u7814\u7a76\u7684\u65b0\u7528\u6237\uff0c\u65e0\u9700\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u5bf9\u6570\u636e\u96c6\u683c\u5f0f\u3001\u5185\u5bb9\u8fdb\u884c\u5206\u6790\u3002\u6211\u4eec\u63d0\u524d\u5bf9AI\u5404\u4e2a\u9886\u57df\u7684\u4e3b\u6d41\u6570\u636e\u96c6\u8fdb\u884cDSDL\u6807\u51c6\u5316\u64cd\u4f5c\uff08 DSDL\u6807\u51c6\u5316\u6570\u636e\u5217\u8868 \uff09\uff0cDSDL\u53ef\u4ee5\u6e05\u6670\u7b80\u6d01\u5730\u63d0\u4f9b\u6570\u636e\u5143\u4fe1\u606f\u3001\u6807\u6ce8\u4fe1\u606f\uff0c\u7528\u6237\u4e00\u76ee\u4e86\u7136\uff0c\u5e76\u4e14\u53ef\u76f4\u63a5\u4f7f\u7528\u7edf\u4e00\u63a5\u53e3\u8fdb\u884c\u8bad\u7ec3\u63a8\u7406\u64cd\u4f5c\u3002 \u7279\u5b9a\u9886\u57df\u7814\u7a76/\u5f00\u53d1 \uff1a\u6211\u4eec\u5bf9\u5927\u90e8\u5206\u4e3b\u6d41\u6570\u636e\u96c6\u8fdb\u884cDSDL\u6807\u51c6\u5316\uff0c\u540c\u65f6\u63d0\u4f9b\u7edf\u4e00\u7684Dataset\u51fd\u6570\u63a5\u53e3\uff0c\u7528\u6237\u4f7f\u7528\u5404\u79cd\u6570\u636e\u66f4\u52a0\u4fbf\u6377\u3002 \u5927\u6a21\u578b\u7814\u7a76/\u5f00\u53d1 \uff1a\u5927\u6a21\u578b\u7814\u7a76\u901a\u5e38\u9700\u8981\u5927\u91cf\u7684\u6570\u636e\u83b7\u53d6\uff0c\u9884\u5904\u7406\u64cd\u4f5c\u3002OpenDataLab\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u5404\u7c7b\u6570\u636e\uff0cDSDL\u4f7f\u5f97\u4e0d\u540c\u4efb\u52a1\u548c\u6a21\u6001\u6570\u636e\u4ee5\u7edf\u4e00\u89c4\u8303\u63cf\u8ff0\u3002\u7528\u6237\u53ef\u7075\u6d3b\u9ad8\u6548\u7ec4\u5408\u4f7f\u7528\u6240\u9700\u6570\u636e\u3002","title":"DSDL\u76ee\u6807\u7528\u6237"},{"location":"getting_started/overview/#dsdl_2","text":"\u5bf9\u4e8e\u521d\u6b21\u4f7f\u7528DSDL\u7684\u7528\u6237\uff0c\u8bf7\u5148 \u5b89\u88c5\u90e8\u7f72 DSDL-SDK\uff0c\u6211\u4eec\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u4e0b\u8ff0\u5b66\u4e60\u8d44\u6e90\uff1a \u5feb\u901f\u5f00\u59cb \uff1a\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u4e86\u89e3DSDL\u6570\u636e\u96c6\u4e0b\u8f7d\u3001\u4f7f\u7528\u65b9\u6cd5\u3002 \u7528\u6237\u6559\u7a0b \uff1a\u63d0\u4f9b \u6570\u636e\u96c6\u4e0b\u8f7d \u3001 \u9884\u5904\u7406 \u3001 \u6570\u636e\u5206\u6790 \u3001 \u6a21\u578b\u8bad\u7ec3 \u3001 \u6a21\u578b\u63a8\u7406 \u7cfb\u7edf\u6027\u6559\u7a0b\u3002 DSDL\u4efb\u52a1\u6a21\u677f \uff1a\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u4e86\u89e3\u76f8\u5173\u4efb\u52a1DSDL\u6a21\u677f\u5b9a\u4e49\uff0c\u9ad8\u6548\u5b8c\u6210\u6570\u636e\u96c6\u8f6c\u6362\u5de5\u4f5c\u3002 DSDL\u8bed\u8a00\u6559\u7a0b \uff1a\u7528\u6237\u4e86\u89e3\u5e76\u7cfb\u7edf\u6027\u5b66\u4e60DSDL\u8bed\u8a00\u3002 \u9ad8\u9636\u6559\u7a0b \uff1a\u4ecb\u7ecd DSDL\u4efb\u52a1\u62d3\u5c55 \u3001 \u6570\u636e\u96c6\u8f6c\u6362 \u3001\u53ca DSDL Dataset\u5f00\u53d1 \u6d41\u7a0b\u3002 \u5982\u5bf9DSDL\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u6b22\u8fce\u5728GitHub\u9875\u9762\u63d0issue\u8fdb\u884c\u54a8\u8be2\u3002","title":"DSDL\u5b66\u4e60\u4f7f\u7528"},{"location":"getting_started/quick_start/","text":"\u5feb\u901f\u5165\u95e8 \u672c\u6559\u7a0b\u5c06\u4f7f\u7528 PASCAL VOC 2007 \u68c0\u6d4b\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u6f14\u793a\u6570\u636e\u5904\u7406\u53ca\u6a21\u578b\u8bad\u7ec3\u5168\u6d41\u7a0b\u3002 1. \u6570\u636e\u96c6\u4e0b\u8f7d odl get PASCAL_VOC2007 \u51fa\u73b0\u5982\u4e0b\u65e5\u5fd7\uff0c\u8bf4\u660e\u6570\u636e\u96c6\u5df2\u7ecf\u4e0b\u8f7d\u5b8c\u6210\u3002 saving to {your home path}/datasets/PASCAL_VOC2007 preparing... start download... Download |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.0%, Eta 0 seconds Download Complete register local dataset... \u4e0b\u8f7d\u5b8c\u6210\u540e\u9700\u8981\u8fdb\u884c\u89e3\u538b\uff08\u89e3\u538b\u6b65\u9aa4\u53ef\u4ee5\u53c2\u8003\u6559\u7a0b \u6570\u636e\u96c6\u51c6\u5907 \uff09\uff0c\u89e3\u538b\u5b8c\u6210\u540e\uff0c\u539f\u59cb\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a voc\u6570\u636e\u96c6\u539f\u59cb\u76ee\u5f55\u7ed3\u6784 original/ # \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001.xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001.jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ... \u5bf9\u5e94\u7684DSDL\u6807\u51c6\u5316\u6587\u4ef6\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a dsdl-voc\u76ee\u5f55\u7ed3\u6784 dsdl/ \u251c\u2500\u2500 defs/ \u2502 \u251c\u2500\u2500 object-detection-def.yaml # \u4efb\u52a1\u7c7b\u578b\u7684\u5b9a\u4e49 \u2502 \u2514\u2500\u2500 class-dom.yaml # \u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 set-train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 set-val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u251c\u2500\u2500 set-test/ # \u6d4b\u8bd5\u96c6 \u2502 \u251c\u2500\u2500 test.yaml \u2502 \u2514\u2500\u2500 test_samples.json \u251c\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6 \u2514\u2500\u2500 README.md # \u6570\u636e\u96c6\u7b80\u4ecb \u6ce8: DSDL\u6587\u4ef6\u76ee\u5f55\u4e0b\u5404\u4e2a\u6587\u4ef6\u7684\u5177\u4f53\u5185\u5bb9\u548c\u89e3\u91ca\u53ef\u53c2\u8003 \u9ad8\u9636\u6559\u7a0b \u3002 2. \u6570\u636e\u96c6\u914d\u7f6e dsdl\u91c7\u7528\u4e86\u3010\u5a92\u4f53\u6570\u636e\u3011\u548c\u3010\u6807\u6ce8\u6587\u4ef6\u3011\u5206\u79bb\u8fd9\u4e00\u8bbe\u8ba1\u7406\u5ff5\uff0c\u82e5\u7528\u6237\u4e4b\u524d\u5df2\u7ecf\u4e0b\u8f7d\u8fc7\u76f8\u5173\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\uff0c\u53ea\u9700\u4e0b\u8f7ddsdl\u6807\u6ce8\u6587\u4ef6\u5373\u53ef\u4f7f\u7528\u8be5\u6570\u636e\u96c6\u3002\u4e3a\u4e86\u4f7f\u7528\u4e0b\u8f7d\u597d\u7684\u6570\u636e\u96c6\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u914d\u7f6e\u6587\u4ef6 config.py \uff08\u4f4d\u4e8e PASCAL_VOC2007/dsdl/config.py \uff09\u6765\u8fdb\u884c\u5bf9\u5a92\u4f53\u6570\u636e\u7684\u5b9a\u4f4d\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u5982\u4e0b\u8f7d\u7684 PASCAL_VOC2007 \u6570\u636e\u96c6\u7684\u89e3\u538b\u540e\u7684\u5a92\u4f53\u6587\u4ef6\u4f4d\u4e8e ~/datasets/PASCAL_VOC2007/original \u8def\u5f84\u4e0b\uff0c\u89e3\u538b\u540e\u7684DSDL\u6807\u6ce8\u6587\u4ef6\u4f4d\u4e8e ~/datasets/PASCAL_VOC2007/dsdl/ \u8def\u5f84\u4e0b\uff0c\u5219\u53ea\u9700\u8981\u5c06 ~/datasets/PASCAL_VOC2007/dsdl/config.py \u4e2d\u7684\u914d\u7f6e\u6309\u7167\u5982\u4e0b\u5185\u5bb9\u8fdb\u884c\u4fee\u6539\u5373\u53ef\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"~/datasets/PASCAL_VOC2007/original\" , ) \u5b9e\u9645\u4e0a\uff0cdsdl\u4e5f\u652f\u6301\u4ece\u963f\u91cc\u4e91\u8bfb\u53d6\u5a92\u4f53\u6570\u636e\uff0c\u540c\u6837\u4e5f\u53ea\u9700\u8981\u4fee\u6539 config.py \u6587\u4ef6\u5373\u53ef\uff0c\u8be6\u7ec6\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 \u6570\u636e\u96c6\u914d\u7f6e\u6559\u7a0b 3. \u6570\u636e\u96c6\u7b80\u5355\u4f7f\u7528 3.1. \u6570\u636e\u96c6\u521d\u59cb\u5316 dsdl\u5c06dsdl\u6570\u636e\u96c6\u7684\u4f7f\u7528\u63a5\u53e3\u5c01\u88c5\u8fdbDSDLDataset\u7c7b\uff0c\u521d\u59cb\u5316\u4e00\u4e2aDSDLDataset\u7c7b\u9700\u8981yaml\u6587\u4ef6\u548clocation config\uff0c\u8fd9\u91cc\u4ecd\u7136\u5047\u8bbe\u4e0a\u9762VOC\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u5a92\u4f53\u6587\u4ef6\u548cdsdl\u6807\u6ce8\u6587\u4ef6\u7684\u5b58\u653e\u8def\u5f84\u5206\u522b\u4e3a ~/datasets/PASCAL_VOC2007/ \u76ee\u5f55\u4e0b\u7684 original \u548c dsdl \uff0c\u5219\u521d\u59cb\u5316\u4ee3\u7801\u5982\u4e0b\uff1a from dsdl.dataset import DSDLDataset # 1. \u6307\u5b9a\u8981\u52a0\u8f7d\u6570\u636e\u7684dsdl\u6587\u4ef6 train_yaml = \"~/datasets/PASCAL_VOC2007/dsdl/set-train/train.yaml\" val_yaml = \"~/datasets/PASCAL_VOC2007/dsdl/set-val/val.yaml\" # 2. \u914d\u7f6e\u6570\u636e\u96c6\u8def\u5f84\uff08\u652f\u6301\u672c\u5730\u3001\u963f\u91cc\u4e91oss\u7b49\u4e3b\u6d41\u5b58\u50a8\uff09 loc_config = dict( type=\"LocalFileReader\", working_dir=\"~/datasets/PASCAL_VOC2007/original\" ) ds_train = DSDLDataset(dsdl_yaml=train_yaml, location_config=loc_config) ds_val = DSDLDataset(dsdl_yaml=val_yaml, location_config=loc_config) 3.2. \u83b7\u53d6\u7c7b\u522b\u540d\u79f0 \u83b7\u53d6\u6570\u636e\u96c6\u7684\u7c7b\u522b\u540d\u79f0\u5217\u8868\uff0c\u4ee3\u7801\u5982\u4e0b\uff08\u8fd9\u91cc\u53ea\u5c55\u793a\u4e86VOC\u6570\u636e\u96c6\u7684\u524d10\u4e2a\u6807\u7b7e\uff09\uff1a print(ds_val.class_names[0:10]) \u8f93\u51fa\u5982\u4e0b\u6240\u793a\uff1a ['aeroplane', 'bicycle', 'bird', 'boat', 'bottle', 'bus', 'car', 'cat', 'chair', 'cow'] 3.3. \u83b7\u53d6\u6837\u672c\u4fe1\u606f DSDLDataset\u4f7f\u7528\u7d22\u5f15\u7684\u65b9\u5f0f\u83b7\u53d6\u6837\u672c\uff0c\u5982\u4e0b\u5c55\u793a\u4e86VOC\u6570\u636e\u96c6\u7d22\u5f15\u4e3a0\u7684\u6837\u672c\u7684\u4fe1\u606f\uff1a print(ds_val[0]) \u8f93\u51fa\u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a {'Image': [path:JPEGImages/000005.jpg], 'Label': [chair, chair, chair, chair, chair], 'Bbox': [[263.0, 211.0, 324.0, 339.0], [165.0, 264.0, 253.0, 372.0], [5.0, 244.0, 67.0, 374.0], [241.0, 194.0, 295.0, 299.0], [277.0, 186.0, 312.0, 220.0]]} \u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u83b7\u53d6\u6837\u672c\u7684\u4e0d\u540c\u5b57\u6bb5\uff0c\u6bd4\u5982\u8981\u83b7\u53d6\u56fe\u7247\u5b57\u6bb5\uff0c\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u547d\u4ee4\uff1a print(ds_val[0].Image) \u5f97\u5230\u8f93\u51fa\u5982\u4e0b\uff1a [path:JPEGImages/000005.jpg] \u7c7b\u4f3c\u7684\uff0c\u8981\u83b7\u53d6\u6240\u6709\u6807\u6ce8\u6846\u7684\u7c7b\u522b\u5c5e\u6027\u548c\u7b2c\u4e00\u4e2a\u6807\u6ce8\u6846\u4f4d\u7f6e\u5c5e\u6027\uff0c\u5219\u53ef\u4ee5\u91c7\u7528\u4e0b\u9762\u7684\u8bed\u53e5\uff1a print(ds_val[0].Label) print(ds_val[0].Bbox[0]) \u5f97\u5230\u8f93\u51fa\u5206\u522b\u5982\u4e0b\uff1a [chair, chair, chair, chair, chair] [263.0, 211.0, 324.0, 339.0] 4. DSDL\u6570\u636e\u96c6\u9ad8\u9636\u4f7f\u7528 \u9664\u4e86\u5165\u95e8\u6559\u7a0b\u4e2d\u63d0\u5230\u7684\u529f\u80fd\u4ee5\u5916\uff0cDSDL\u7684 \u7528\u6237\u6559\u7a0b \u4e2d\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u5e94\u7528\uff1a \u6570\u636e\u96c6\u53ef\u89c6\u5316 \u6a21\u578b\u8bad\u7ec3&\u63a8\u7406\uff1a\u5305\u542b\u4e86 OpenMMLab \u548c Pytorch \u9ad8\u9636\u6559\u7a0b : \u5305\u542b\u4e86 DSDL\u6570\u636e\u96c6\u6a21\u677f\u5236\u5b9a \u3001 \u683c\u5f0f\u8f6c\u6362 \u548c \u9a8c\u8bc1 \u7684\u5168\u6d41\u7a0b\uff0c\u5e76\u4e14\u4ecb\u7ecd\u4e86 \u81ea\u5b9a\u4e49DSDL Field \u7684\u65b9\u6cd5","title":"\u5feb\u901f\u4e0a\u624b"},{"location":"getting_started/quick_start/#_1","text":"\u672c\u6559\u7a0b\u5c06\u4f7f\u7528 PASCAL VOC 2007 \u68c0\u6d4b\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u6f14\u793a\u6570\u636e\u5904\u7406\u53ca\u6a21\u578b\u8bad\u7ec3\u5168\u6d41\u7a0b\u3002","title":"\u5feb\u901f\u5165\u95e8"},{"location":"getting_started/quick_start/#1","text":"odl get PASCAL_VOC2007 \u51fa\u73b0\u5982\u4e0b\u65e5\u5fd7\uff0c\u8bf4\u660e\u6570\u636e\u96c6\u5df2\u7ecf\u4e0b\u8f7d\u5b8c\u6210\u3002 saving to {your home path}/datasets/PASCAL_VOC2007 preparing... start download... Download |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.0%, Eta 0 seconds Download Complete register local dataset... \u4e0b\u8f7d\u5b8c\u6210\u540e\u9700\u8981\u8fdb\u884c\u89e3\u538b\uff08\u89e3\u538b\u6b65\u9aa4\u53ef\u4ee5\u53c2\u8003\u6559\u7a0b \u6570\u636e\u96c6\u51c6\u5907 \uff09\uff0c\u89e3\u538b\u5b8c\u6210\u540e\uff0c\u539f\u59cb\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a voc\u6570\u636e\u96c6\u539f\u59cb\u76ee\u5f55\u7ed3\u6784 original/ # \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001.xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001.jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ... \u5bf9\u5e94\u7684DSDL\u6807\u51c6\u5316\u6587\u4ef6\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a dsdl-voc\u76ee\u5f55\u7ed3\u6784 dsdl/ \u251c\u2500\u2500 defs/ \u2502 \u251c\u2500\u2500 object-detection-def.yaml # \u4efb\u52a1\u7c7b\u578b\u7684\u5b9a\u4e49 \u2502 \u2514\u2500\u2500 class-dom.yaml # \u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 set-train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 set-val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u251c\u2500\u2500 set-test/ # \u6d4b\u8bd5\u96c6 \u2502 \u251c\u2500\u2500 test.yaml \u2502 \u2514\u2500\u2500 test_samples.json \u251c\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6 \u2514\u2500\u2500 README.md # \u6570\u636e\u96c6\u7b80\u4ecb \u6ce8: DSDL\u6587\u4ef6\u76ee\u5f55\u4e0b\u5404\u4e2a\u6587\u4ef6\u7684\u5177\u4f53\u5185\u5bb9\u548c\u89e3\u91ca\u53ef\u53c2\u8003 \u9ad8\u9636\u6559\u7a0b \u3002","title":"1. \u6570\u636e\u96c6\u4e0b\u8f7d"},{"location":"getting_started/quick_start/#2","text":"dsdl\u91c7\u7528\u4e86\u3010\u5a92\u4f53\u6570\u636e\u3011\u548c\u3010\u6807\u6ce8\u6587\u4ef6\u3011\u5206\u79bb\u8fd9\u4e00\u8bbe\u8ba1\u7406\u5ff5\uff0c\u82e5\u7528\u6237\u4e4b\u524d\u5df2\u7ecf\u4e0b\u8f7d\u8fc7\u76f8\u5173\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\uff0c\u53ea\u9700\u4e0b\u8f7ddsdl\u6807\u6ce8\u6587\u4ef6\u5373\u53ef\u4f7f\u7528\u8be5\u6570\u636e\u96c6\u3002\u4e3a\u4e86\u4f7f\u7528\u4e0b\u8f7d\u597d\u7684\u6570\u636e\u96c6\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u914d\u7f6e\u6587\u4ef6 config.py \uff08\u4f4d\u4e8e PASCAL_VOC2007/dsdl/config.py \uff09\u6765\u8fdb\u884c\u5bf9\u5a92\u4f53\u6570\u636e\u7684\u5b9a\u4f4d\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u5982\u4e0b\u8f7d\u7684 PASCAL_VOC2007 \u6570\u636e\u96c6\u7684\u89e3\u538b\u540e\u7684\u5a92\u4f53\u6587\u4ef6\u4f4d\u4e8e ~/datasets/PASCAL_VOC2007/original \u8def\u5f84\u4e0b\uff0c\u89e3\u538b\u540e\u7684DSDL\u6807\u6ce8\u6587\u4ef6\u4f4d\u4e8e ~/datasets/PASCAL_VOC2007/dsdl/ \u8def\u5f84\u4e0b\uff0c\u5219\u53ea\u9700\u8981\u5c06 ~/datasets/PASCAL_VOC2007/dsdl/config.py \u4e2d\u7684\u914d\u7f6e\u6309\u7167\u5982\u4e0b\u5185\u5bb9\u8fdb\u884c\u4fee\u6539\u5373\u53ef\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"~/datasets/PASCAL_VOC2007/original\" , ) \u5b9e\u9645\u4e0a\uff0cdsdl\u4e5f\u652f\u6301\u4ece\u963f\u91cc\u4e91\u8bfb\u53d6\u5a92\u4f53\u6570\u636e\uff0c\u540c\u6837\u4e5f\u53ea\u9700\u8981\u4fee\u6539 config.py \u6587\u4ef6\u5373\u53ef\uff0c\u8be6\u7ec6\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 \u6570\u636e\u96c6\u914d\u7f6e\u6559\u7a0b","title":"2. \u6570\u636e\u96c6\u914d\u7f6e"},{"location":"getting_started/quick_start/#3","text":"","title":"3. \u6570\u636e\u96c6\u7b80\u5355\u4f7f\u7528"},{"location":"getting_started/quick_start/#31","text":"dsdl\u5c06dsdl\u6570\u636e\u96c6\u7684\u4f7f\u7528\u63a5\u53e3\u5c01\u88c5\u8fdbDSDLDataset\u7c7b\uff0c\u521d\u59cb\u5316\u4e00\u4e2aDSDLDataset\u7c7b\u9700\u8981yaml\u6587\u4ef6\u548clocation config\uff0c\u8fd9\u91cc\u4ecd\u7136\u5047\u8bbe\u4e0a\u9762VOC\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u5a92\u4f53\u6587\u4ef6\u548cdsdl\u6807\u6ce8\u6587\u4ef6\u7684\u5b58\u653e\u8def\u5f84\u5206\u522b\u4e3a ~/datasets/PASCAL_VOC2007/ \u76ee\u5f55\u4e0b\u7684 original \u548c dsdl \uff0c\u5219\u521d\u59cb\u5316\u4ee3\u7801\u5982\u4e0b\uff1a from dsdl.dataset import DSDLDataset # 1. \u6307\u5b9a\u8981\u52a0\u8f7d\u6570\u636e\u7684dsdl\u6587\u4ef6 train_yaml = \"~/datasets/PASCAL_VOC2007/dsdl/set-train/train.yaml\" val_yaml = \"~/datasets/PASCAL_VOC2007/dsdl/set-val/val.yaml\" # 2. \u914d\u7f6e\u6570\u636e\u96c6\u8def\u5f84\uff08\u652f\u6301\u672c\u5730\u3001\u963f\u91cc\u4e91oss\u7b49\u4e3b\u6d41\u5b58\u50a8\uff09 loc_config = dict( type=\"LocalFileReader\", working_dir=\"~/datasets/PASCAL_VOC2007/original\" ) ds_train = DSDLDataset(dsdl_yaml=train_yaml, location_config=loc_config) ds_val = DSDLDataset(dsdl_yaml=val_yaml, location_config=loc_config)","title":"3.1. \u6570\u636e\u96c6\u521d\u59cb\u5316"},{"location":"getting_started/quick_start/#32","text":"\u83b7\u53d6\u6570\u636e\u96c6\u7684\u7c7b\u522b\u540d\u79f0\u5217\u8868\uff0c\u4ee3\u7801\u5982\u4e0b\uff08\u8fd9\u91cc\u53ea\u5c55\u793a\u4e86VOC\u6570\u636e\u96c6\u7684\u524d10\u4e2a\u6807\u7b7e\uff09\uff1a print(ds_val.class_names[0:10]) \u8f93\u51fa\u5982\u4e0b\u6240\u793a\uff1a ['aeroplane', 'bicycle', 'bird', 'boat', 'bottle', 'bus', 'car', 'cat', 'chair', 'cow']","title":"3.2. \u83b7\u53d6\u7c7b\u522b\u540d\u79f0"},{"location":"getting_started/quick_start/#33","text":"DSDLDataset\u4f7f\u7528\u7d22\u5f15\u7684\u65b9\u5f0f\u83b7\u53d6\u6837\u672c\uff0c\u5982\u4e0b\u5c55\u793a\u4e86VOC\u6570\u636e\u96c6\u7d22\u5f15\u4e3a0\u7684\u6837\u672c\u7684\u4fe1\u606f\uff1a print(ds_val[0]) \u8f93\u51fa\u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a {'Image': [path:JPEGImages/000005.jpg], 'Label': [chair, chair, chair, chair, chair], 'Bbox': [[263.0, 211.0, 324.0, 339.0], [165.0, 264.0, 253.0, 372.0], [5.0, 244.0, 67.0, 374.0], [241.0, 194.0, 295.0, 299.0], [277.0, 186.0, 312.0, 220.0]]} \u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u83b7\u53d6\u6837\u672c\u7684\u4e0d\u540c\u5b57\u6bb5\uff0c\u6bd4\u5982\u8981\u83b7\u53d6\u56fe\u7247\u5b57\u6bb5\uff0c\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u547d\u4ee4\uff1a print(ds_val[0].Image) \u5f97\u5230\u8f93\u51fa\u5982\u4e0b\uff1a [path:JPEGImages/000005.jpg] \u7c7b\u4f3c\u7684\uff0c\u8981\u83b7\u53d6\u6240\u6709\u6807\u6ce8\u6846\u7684\u7c7b\u522b\u5c5e\u6027\u548c\u7b2c\u4e00\u4e2a\u6807\u6ce8\u6846\u4f4d\u7f6e\u5c5e\u6027\uff0c\u5219\u53ef\u4ee5\u91c7\u7528\u4e0b\u9762\u7684\u8bed\u53e5\uff1a print(ds_val[0].Label) print(ds_val[0].Bbox[0]) \u5f97\u5230\u8f93\u51fa\u5206\u522b\u5982\u4e0b\uff1a [chair, chair, chair, chair, chair] [263.0, 211.0, 324.0, 339.0]","title":"3.3. \u83b7\u53d6\u6837\u672c\u4fe1\u606f"},{"location":"getting_started/quick_start/#4-dsdl","text":"\u9664\u4e86\u5165\u95e8\u6559\u7a0b\u4e2d\u63d0\u5230\u7684\u529f\u80fd\u4ee5\u5916\uff0cDSDL\u7684 \u7528\u6237\u6559\u7a0b \u4e2d\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u5e94\u7528\uff1a \u6570\u636e\u96c6\u53ef\u89c6\u5316 \u6a21\u578b\u8bad\u7ec3&\u63a8\u7406\uff1a\u5305\u542b\u4e86 OpenMMLab \u548c Pytorch \u9ad8\u9636\u6559\u7a0b : \u5305\u542b\u4e86 DSDL\u6570\u636e\u96c6\u6a21\u677f\u5236\u5b9a \u3001 \u683c\u5f0f\u8f6c\u6362 \u548c \u9a8c\u8bc1 \u7684\u5168\u6d41\u7a0b\uff0c\u5e76\u4e14\u4ecb\u7ecd\u4e86 \u81ea\u5b9a\u4e49DSDL Field \u7684\u65b9\u6cd5","title":"4. DSDL\u6570\u636e\u96c6\u9ad8\u9636\u4f7f\u7528"},{"location":"getting_started/quick_start_ex1/","text":"\u8ba1\u7b97\u673a\u89c6\u89c9-\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1 \u672c\u6559\u7a0b\u5c06\u4f7f\u7528\u7ecf\u5178 CAFAR-10 \u624b\u5199\u8bc6\u522b\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u6f14\u793a\u6570\u636e\u5904\u7406\u53ca\u6a21\u578b\u8bad\u7ec3\u5168\u6d41\u7a0b\u3002 \u6570\u636e\u96c6\u4e0b\u8f7d odl-cli get CIFAR-10 \u8fd9\u91cc\u5c06\u5bf9DSDL\u6807\u6ce8\u8fdb\u884c\u4e0b\u8f7d\uff0c\u4e0b\u8f7d\u540e\u6587\u4ef6\u76ee\u5f55\u5982\u4e0b\uff1a dsdl-voc\u76ee\u5f55\u7ed3\u6784 VOC2007-dsdl/ \u251c\u2500\u2500 doms/ \u2502 \u251c\u2500\u2500 object-detection.yaml # struct\u5b9a\u4e49\u6587\u4ef6 \u2502 \u2514\u2500\u2500 VOC2007ClassDom.yaml # VOC\u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u2514\u2500\u2500 test/ # \u6d4b\u8bd5\u96c6 \u251c\u2500\u2500 test.yaml \u2514\u2500\u2500 test_samples.json \u5982\u679c\u5bf9\u539f\u59cb\u6570\u636e\u96c6\u8fdb\u884c\u540c\u6b65\u4e0b\u8f7d\uff0c\u5176\u6587\u4ef6\u76ee\u5f55\u5982\u4e0b\uff1a voc\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784 VOC2007/ # \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001.xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001.jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ... \u6570\u636e\u96c6\u89e3\u6790 \uff08\u8fd9\u4e00\u6b65\u540e\u7eed\u597d\u50cf\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u6682\u65f6\u6309\u7167github\u4e0a\u7684\u5185\u5bb9\u4fdd\u7559\uff0c\u540e\u7eed\u53ef\u5220\u9664\uff09 \u89e3\u6790\u5668\u53cd\u5e8f\u5217\u5316Yaml\u6587\u4ef6\u4e3aPython\u4ee3\u7801 dsdl parse --yaml demo/coco_demo.yaml \u914d\u7f6e\u6587\u4ef6\u4fee\u6539\uff0c\u8bbe\u7f6e\u8bfb\u53d6\u8def\u5f84 \u521b\u5efa\u914d\u7f6e\u6587\u4ef6 config.py \uff0c\u5185\u5bb9\u5982\u4e0b\uff08\u76ee\u524d\u53ea\u652f\u6301\u8bfb\u53d6\u963f\u91cc\u4e91OSS\u6570\u636e\u4e0e\u672c\u5730\u6570\u636e\uff09\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) \u5728 config.py \u4e2d\uff0c\u5217\u4e3e\u4e86\u6240\u6709\u652f\u6301\u7684\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5e76\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u7b49\u4fe1\u606f\uff1a \u672c\u5730\u8bfb\u53d6\uff1a local \u4e2d\u7684\u53c2\u6570 working_dir \uff08\u672c\u5730\u6570\u636e\u6240\u5728\u7684\u76ee\u5f55\uff09 \u963f\u91cc\u4e91OSS\u8bfb\u53d6\uff1a ali_oss \u4e2d\u7684\u53c2\u6570\uff08\u963f\u91cc\u4e91OSS\u7684\u914d\u7f6e access_key_secret , endpoint , access_key_id \uff1b\u6876\u540d\u79f0 bucket_name \uff0c\u6570\u636e\u5728\u6876\u4e2d\u7684\u76ee\u5f55 working_dir \uff09 \u6570\u636e\u96c6\u53ef\u89c6\u5316 \u53ef\u89c6\u5316\u529f\u80fd\u5c55\u793a dsdl view -y <yaml-name>.yaml -c <config.py> -l ali-oss -n 10 -r -v -f Label BBox Attributes \u6bcf\u4e2a\u53c2\u6570\u7684\u610f\u4e49\u4e3a\uff1a \u53c2\u6570\u7b80\u5199 \u53c2\u6570\u5168\u5199 \u53c2\u6570\u89e3\u91ca -y --yaml \u5b9a\u4e49\u6240\u6709samples\u7684yaml\u6587\u4ef6\u7684\u8def\u5f84 -c --config \u914d\u7f6e\u6587\u4ef6\uff08 config.py \uff09\u7684\u8def\u5f84 -l --location \u53ea\u53ef\u4ee5\u6307\u5b9a\u4e3a local \u6216\u662f ali-oss \uff0c\u5206\u522b\u8868\u793a\u8bfb\u53d6\u672c\u5730\u7684\u6570\u636e\u4e0e\u8bfb\u53d6\u963f\u91cc\u4e91\u7684\u6570\u636e -n --num \u52a0\u8f7d\u6570\u636e\u96c6\u7684\u6837\u672c\u6570\u91cf -r --random \u5728\u52a0\u8f7d\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u65f6\u662f\u5426\u968f\u673a\u9009\u53d6\u6837\u672c\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u7684\u8bdd\u5c31\u6309\u987a\u5e8f\u4ece\u5f00\u59cb\u9009\u53d6\u6837\u672c -v --visualize \u662f\u5426\u5c06\u52a0\u8f7d\u7684\u6570\u636e\u8fdb\u884c\u53ef\u89c6\u5316\u5c55\u793a -f --field \u9009\u62e9\u9700\u8981\u8fdb\u884c\u53ef\u89c6\u5316\u7684\u5b57\u6bb5\uff0c\u5982 -f BBox \u8868\u793a\u53ef\u89c6\u5316bbox\uff0c -f Attributes \u8868\u793a\u5bf9\u6837\u672c\u7684attributes\u8fdb\u884c\u53ef\u89c6\u5316\u7b49\u7b49\uff0c\u53ef\u4ee5\u540c\u65f6\u9009\u62e9\u591a\u4e2a\uff0c\u5982 -f Label BBox Attributes -t --task \u53ef\u4ee5\u9009\u62e9\u5f53\u524d\u9700\u8981\u53ef\u89c6\u5316\u7684\u4efb\u52a1\u7c7b\u578b\uff0c\u5982\u679c\u9009\u62e9 -t detection \uff0c\u5219\u7b49\u4ef7\u4e8e -f Label BBox Polygon Attributes \u6570\u636e\u96c6\u5206\u6790 \u8c03\u7528\u65b9\u6cd5\uff1a dsdl check - y xxx . yaml - c config . py - l ali - oss - t detection - p ./ - o ./ ### -y \u4e3a\u8f93\u5165\u7684yaml\u6587\u4ef6 ### -c \u4e3a\u6570\u636e\u96c6\u7684\u8bfb\u53d6\u914d\u7f6e\uff08\u8bb0\u5f55\u4e86\u6570\u636e\u96c6\u5728\u963f\u91cc\u4e91/\u672c\u5730\u7684\u4f4d\u7f6e\uff09\uff0c\u4e3b\u8981\u5f62\u5f0f\u5982\u4e0b\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) ### -l \u4e3a\u6307\u5b9a\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 ali-oss \u6216 local ### -t \u4e3a\u6307\u5b9a\u5f53\u524dyaml\u7684\u4efb\u52a1\u7c7b\u522b\uff0c\u5f53\u524d\u652f\u6301\u7684\u4efb\u52a1\u7c7b\u522b\u6709\uff08detection\uff0csegmentation\uff0cclassification\uff09 ### -p yaml\u6587\u4ef6\u5bfc\u5165\u7684\u5e93\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84\u5730\u5740 ### -o \u4e3a\u8f93\u51fa\u7684\u6587\u4ef6\u5939\uff0c\u5305\u542b\u56fe\u7247\u548cmd\u6587\u6863\uff0c\u6ce8\u610f\u6253\u5305\u4e0b\u8f7d 2. \u62a5\u544a\u6837\u5f0f\uff1a \u62a5\u544a\u5206\u4e3a3\u4e2a\u90e8\u5206\uff1a parser\u68c0\u67e5\u7ed3\u679c\uff1a\u7ed3\u679c\u5305\u62ec\u4e86parse\u7ed3\u679c\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u5219\u53ef\u4ee5\u67e5\u770b\u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f samples\u5b9e\u4f8b\u5316\u68c0\u67e5\u7ed3\u679c\uff1a\u5176\u4e2d\u62a5\u544a\u8bf4\u660e\u4e86\u5f53\u524d\u6570\u636e\u96c6\u5171\u6709\u6837\u672c\u4e2a\u6570\uff0c\u6b63\u5e38\u6837\u672c\u4e2a\u6570\uff0c\u8b66\u544a\u6837\u672c\u4e2a\u6570\uff0c\u9519\u8bef\u6837\u672c\u4e2a\u6570\uff0c\u5e76\u63d0\u4f9b\u4e86\u5f02\u5e38\u6837\u672c\u7684\u5177\u4f53\u4fe1\u606f\u65e5\u5fd7\u3002 \u53ef\u89c6\u5316\u7ed3\u679c\uff1a\u9700\u8981\u8089\u773c\u89c2\u5bdf\u53ef\u89c6\u5316\u7ed3\u679c\u662f\u5426\u6b63\u786e\uff0c\u6bd4\u5982bbox\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\uff0c\u6807\u7b7e\u5185\u5bb9\u662f\u5426\u6b63\u786e\u7b49\uff0c\u5728\u56fe\u7247\u4e0b\u9762\u5c55\u793a\u4e86\u53ef\u89c6\u5316\u8fc7\u7a0b\u4e2d\u7684\u65e5\u5fd7\u5185\u5bb9\uff0c\u6bd4\u5982\u662f\u53ef\u89c6\u5316\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u4ee5\u53ca\u5931\u8d25\u65e5\u5fd7\u7b49\u3002 \u6570\u636e\u96c6\u8bad\u7ec3 \u4e0eOpenMMDetection\u7684\u5bf9\u63a5\u8bad\u7ec3\u3002 \u4fee\u6539config\u6587\u4ef6 faster_rcnn_r101_fpn_voc2007_dsdl_format.py model = dict ( type = 'FasterRCNN' , backbone = dict ( type = 'ResNet' , depth = 101 , num_stages = 4 , out_indices = ( 0 , 1 , 2 , 3 ), frozen_stages = 1 , norm_cfg = dict ( type = 'BN' , requires_grad = True ), norm_eval = True , style = 'pytorch' , init_cfg = dict ( type = 'Pretrained' , checkpoint = 'torchvision://resnet101' )), neck = dict ( type = 'FPN' , in_channels = [ 256 , 512 , 1024 , 2048 ], out_channels = 256 , num_outs = 5 ), rpn_head = dict ( type = 'RPNHead' , in_channels = 256 , feat_channels = 256 , anchor_generator = dict ( type = 'AnchorGenerator' , scales = [ 8 ], ratios = [ 0.5 , 1.0 , 2.0 ], strides = [ 4 , 8 , 16 , 32 , 64 ]), bbox_coder = dict ( type = 'DeltaXYWHBBoxCoder' , target_means = [ 0.0 , 0.0 , 0.0 , 0.0 ], target_stds = [ 1.0 , 1.0 , 1.0 , 1.0 ]), loss_cls = dict ( type = 'CrossEntropyLoss' , use_sigmoid = True , loss_weight = 1.0 ), loss_bbox = dict ( type = 'L1Loss' , loss_weight = 1.0 )), roi_head = dict ( type = 'StandardRoIHead' , bbox_roi_extractor = dict ( type = 'SingleRoIExtractor' , roi_layer = dict ( type = 'RoIAlign' , output_size = 7 , sampling_ratio = 0 ), out_channels = 256 , featmap_strides = [ 4 , 8 , 16 , 32 ]), bbox_head = dict ( type = 'Shared2FCBBoxHead' , in_channels = 256 , fc_out_channels = 1024 , roi_feat_size = 7 , num_classes = 20 , bbox_coder = dict ( type = 'DeltaXYWHBBoxCoder' , target_means = [ 0.0 , 0.0 , 0.0 , 0.0 ], target_stds = [ 0.1 , 0.1 , 0.2 , 0.2 ]), reg_class_agnostic = False , loss_cls = dict ( type = 'CrossEntropyLoss' , use_sigmoid = False , loss_weight = 1.0 ), loss_bbox = dict ( type = 'L1Loss' , loss_weight = 1.0 ))), train_cfg = dict ( rpn = dict ( assigner = dict ( type = 'MaxIoUAssigner' , pos_iou_thr = 0.7 , neg_iou_thr = 0.3 , min_pos_iou = 0.3 , match_low_quality = True , ignore_iof_thr =- 1 ), sampler = dict ( type = 'RandomSampler' , num = 256 , pos_fraction = 0.5 , neg_pos_ub =- 1 , add_gt_as_proposals = False ), allowed_border =- 1 , pos_weight =- 1 , debug = False ), rpn_proposal = dict ( nms_pre = 2000 , max_per_img = 1000 , nms = dict ( type = 'nms' , iou_threshold = 0.7 ), min_bbox_size = 0 ), rcnn = dict ( assigner = dict ( type = 'MaxIoUAssigner' , pos_iou_thr = 0.5 , neg_iou_thr = 0.5 , min_pos_iou = 0.5 , match_low_quality = False , ignore_iof_thr =- 1 ), sampler = dict ( type = 'RandomSampler' , num = 512 , pos_fraction = 0.25 , neg_pos_ub =- 1 , add_gt_as_proposals = True ), pos_weight =- 1 , debug = False )), test_cfg = dict ( rpn = dict ( nms_pre = 1000 , max_per_img = 1000 , nms = dict ( type = 'nms' , iou_threshold = 0.7 ), min_bbox_size = 0 ), rcnn = dict ( score_thr = 0.05 , nms = dict ( type = 'nms' , iou_threshold = 0.5 ), max_per_img = 100 ))) checkpoint_config = dict ( interval = 1 ) file_client_args = dict ( backend = 'petrel' ) log_config = dict ( interval = 50 , hooks = [ dict ( type = 'TextLoggerHook' )]) custom_hooks = [ dict ( type = 'NumClassCheckHook' )] dist_params = dict ( backend = 'nccl' ) log_level = 'INFO' load_from = None resume_from = None workflow = [( 'train' , 1 )] opencv_num_threads = 0 mp_start_method = 'fork' auto_scale_lr = dict ( enable = True , base_batch_size = 16 ) optimizer = dict ( type = 'SGD' , lr = 0.02 , momentum = 0.9 , weight_decay = 0.0001 ) optimizer_config = dict ( grad_clip = None ) lr_config = dict ( policy = 'step' , warmup = 'linear' , warmup_iters = 500 , warmup_ratio = 0.001 , step = [ 8 , 11 ]) runner = dict ( type = 'EpochBasedRunner' , max_epochs = 12 ) num_classes = 20 dataset_type = 'DSDLDetectionDataset' img_norm_cfg = dict ( mean = [ 123.675 , 116.28 , 103.53 ], std = [ 58.395 , 57.12 , 57.375 ], to_rgb = True ) # \u4fee\u6539data_root\u4e3as3\u8def\u5f84 train_pipeline = [ dict ( type = 'LoadImageFromDSDL' , file_client_args = file_client_args , data_root = 's3://open_dataset_original/PASCALVOC2007/public_datalist_17/VOCdevkit/VOC2007/' ), dict ( type = 'LoadAnnotations' , with_bbox = True ), dict ( type = 'Resize' , img_scale = ( 1333 , 800 ), keep_ratio = True ), dict ( type = 'RandomFlip' , flip_ratio = 0.5 ), dict ( type = 'Normalize' , mean = [ 123.675 , 116.28 , 103.53 ], std = [ 58.395 , 57.12 , 57.375 ], to_rgb = True ), dict ( type = 'Pad' , size_divisor = 32 ), dict ( type = 'DefaultFormatBundle' ), dict ( type = 'Collect' , keys = [ 'img' , 'gt_bboxes' , 'gt_labels' ]) ] # \u4fee\u6539data_root\u4e3as3\u8def\u5f84 test_pipeline = [ dict ( type = 'LoadImageFromDSDL' , file_client_args = file_client_args , data_root = 's3://open_dataset_original/PASCALVOC2007/public_datalist_17/VOCdevkit/VOC2007/' ), dict ( type = 'MultiScaleFlipAug' , img_scale = ( 1333 , 800 ), flip = False , transforms = [ dict ( type = 'Resize' , keep_ratio = True ), dict ( type = 'RandomFlip' ), dict ( type = 'Normalize' , mean = [ 123.675 , 116.28 , 103.53 ], std = [ 58.395 , 57.12 , 57.375 ], to_rgb = True ), dict ( type = 'Pad' , size_divisor = 32 ), dict ( type = 'ImageToTensor' , keys = [ 'img' ]), dict ( type = 'Collect' , keys = [ 'img' ]) ]) ] # \u4e3b\u8981\u4fee\u6539\u8fd9\u4e2a\u8def\u5f84 train_yaml_07 = '/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/train/train.yaml' val_yaml_07 = '/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/val/val.yaml' test_yaml = '/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/test/test.yaml' ignore_cfg = dict ( Continue = dict (), Ignore = dict ( difficult = ( True , 1 ))) dsdl_library_path = \"/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/train/\" local = dict ( type = \"LocalFileReader\" , working_dir = \"/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/\" ) data = dict ( samples_per_gpu = 1 , workers_per_gpu = 32 , train = dict ( type = 'DSDLDetectionDataset' , ann_file = train_yaml_07 , location_config = local , pipeline = train_pipeline , dsdl_library_path = dsdl_library_path ), val = dict ( type = 'DSDLDetectionDataset' , ann_file = val_yaml_07 , location_config = local , pipeline = test_pipeline , dsdl_library_path = dsdl_library_path ), test = dict ( type = 'DSDLDetectionDataset' , ann_file = test_yaml , location_config = local , pipeline = test_pipeline , dsdl_library_path = dsdl_library_path )) evaluation = dict ( interval = 1 , metric = 'mAP' ) gpu_ids = [ 0 ] work_dir = './work_dirs/voc_dsdl_test' auto_resume = False \u5f00\u59cb\u8bad\u7ec3 \u6253\u5f00terminal\u8fd0\u884c\uff1a conda activate openmmlab # \u5b89\u88c5\u4e86dsdl\u548cmmdetection\u7684conda\u73af\u5883 srun -p bigdata_s2 --quotatype = auto --gres = gpu:1 python tools/train.py configs/dsdl_detection/faster_rcnn_r101_fpn_voc2007_dsdl_format.py \u6700\u7ec8\u7ed3\u679c\u7cbe\u5ea6\uff1aAP50: 0.6680, mAP: 0.6680 \u8865\u5145\u5185\u5bb9 DSDL\u6587\u4ef6\u89e3\u91ca DSDL\u6570\u636e\u96c6\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u91cd\u8981\u7684\u6587\u4ef6\uff1a struct\u7684\u5b9a\u4e49\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u6587\u4ef6\u540d\u4e3aobject-detetction.yaml\uff09\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5bf9struct\u505a\u4e00\u4e2a\u660e\u786e\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u6709sample\u7684\u7ed3\u6784\u4f53\u548c\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u7b49\uff0c\u9700\u6307\u660e\u5305\u542b\u4e86\u54ea\u4e9bfield\uff0c\u6bcf\u4e2afield\u7684\u7c7b\u578b\u3002 \u7c7b\u522b\u57df\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e3aVOC2007ClassDom.yaml\uff09\uff1a\u91cc\u9762\u5305\u542b\u4e86\u7c7b\u522b\u5217\u8868\uff0c\u5bf9\u5e94category\u7684\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\u6392\u5e8f\uff09 samples\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5206\u522b\u5206\u4e3atrain.yaml\u548ctrain_samples.json) train.yaml\u4e3b\u8981\u662f\u6307\u660e\u5f15\u7528\u54ea\u4e2astruct\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6587\u4ef6\uff0c\u5e76\u4e14\u6307\u660e\u6570\u636e\u7c7b\u578b\u548c\u5b58\u653e\u8def\u5f84\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9bmeta\u4fe1\u606f train_samples.json\u91cc\u4fdd\u5b58\u4e86\u5b9e\u9645\u7684samples\u4fe1\u606f\uff0c\u5176\u7ec4\u7ec7\u7ed3\u6784\u5fc5\u987b\u548c\u4e4b\u524d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u5339\u914d object-detection.yaml \u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5b9a\u4e49struct\u7684yaml\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u540d\u79f0\u53ef\u4ee5\u6839\u636e\u539f\u59cb\u6570\u636e\u96c6\u8fdb\u884c\u4e00\u4e2a\u4fee\u6539\u548c\u9002\u5e94\uff08\u5c3d\u91cf\u4fdd\u7559\u539f\u59cb\u6570\u636e\u96c6\u7684\u5b57\u6bb5\u540d\u79f0\u548c\u7ed3\u6784\uff09\uff0c\u4f46\u662f\u5b57\u6bb5\u7c7b\u578b\u4e00\u5b9a\u8981\u4f7f\u7528\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\uff08\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\u8be6\u89c1\uff1ahttps://opendatalab.github.io/dsdl-docs/zh/lang/basic_types/\uff09 $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : _bbox : BBox _category : Label[dom=$cdom] pose : Str truncated : Bool difficult : Bool ObjectDetectionSample : $def : struct $params : [ \"cdom\" ] $fields : media_path : Image folder : Str source : Dict owner : Dict height : Int width : Int depth : Int segmented : Bool _objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\u53ca\u5bf9\u5e94\u5173\u7cfb\uff1a \uff08\u6ca1\u6709\u63d0\u5230\u7684\u5b57\u6bb5\u90fd\u662f\u4e0e\u539f\u6570\u636e\u96c6\u540c\u540d\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u53e6\u5916\uff0c\u547d\u540d\u4e2d\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u4e00\u822c\u90fd\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u5373\u539f\u6570\u636e\u96c6\u6ca1\u6709\u7684\u5b57\u6bb5\uff09 \u5728ObjectDetectionSample\u4e2d\uff1a media_path\uff1a\u8be5\u5b57\u6bb5\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u7528\u4e8e\u50a8\u5b58\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u4e3b\u8981\u4ece\u539f\u59cb\u6570\u636e\u96c6\u7684filename\u5b57\u6bb5\u8f6c\u5316\u800c\u6765 _objects\uff1a\u8be5\u5b57\u6bb5\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684object\u5b57\u6bb5\uff0c\u4ee5List\u7684\u5f62\u5f0f\u5b58\u50a8\u5177\u4f53bounding box\u7684\u6807\u6ce8\u4fe1\u606f source\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684source\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684source\u5b57\u6bb5\u4e0b\u7684database\u3001annotation\u3001image\u3001flickerid\u5b57\u6bb5 owner\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684owner\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684owner\u5b57\u6bb5\u4e0b\u7684flickerid\u548cname\u5b57\u6bb5 width\u3001height\u3001depth\uff1a\u662f\u539f\u59cb\u6570\u636e\u96c6\u7684size\u5b57\u6bb5\u4e0b\u7684 \u5728LocalObjectEntry\u4e2d\uff1a _bbox\uff1a\u5bf9\u5e94\u539f\u6570\u636e\u96c6\u7684bndbox\u5b57\u6bb5\uff0c\u4f46\u8f6c\u5316\u4e3abbox\u6807\u51c6\uff0c\u5373[x,y,w,h] _category\uff1a\u662f\u8be5\u76ee\u6807\u7684\u7c7b\u522b\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u53f7\uff0c\u5bf9\u5e94\u7684\u662f\u539f\u6570\u636e\u96c6\u7684name\u5b57\u6bb5\uff0c\u7c7b\u522b\u6807\u53f7\u53ef\u4ee5\u53c2\u89c1\u4e0b\u9762\u7684VOC2007ClassDom.yaml VOC2007ClassDom.yaml \u8fd9\u662f\u4e00\u4e2a\u7c7b\u522b\u5b9a\u4e49\u7684Dom\u6587\u6863\u3002 $dsdl-version : \"0.5.0\" VOC2007ClassDom : $def : class_domain classes : - aeroplane # \u5bf9\u5e94category\u4e3a1 - bicycle # \u5bf9\u5e94category\u4e3a2 - bird - boat - bottle - bus - car - cat - chair - cow - diningtable - dog - horse - motorbike - person - pottedplant - sheep - sofa - train - tvmonitor train.yaml \u8fd9\u4e2a\u6587\u6863\u5f15\u7528\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u4e24\u4e2a\u6587\u6863\uff0c\u5e76\u4e14\u6307\u5f15\u4e86\u5177\u4f53\u7684sample\u8def\u5f84\uff08test.yaml\u548cval.yaml\u7c7b\u4f3c\uff0c\u53ea\u662f\u4fee\u6539\u5bf9\u5e94sample-path\u548csub_dataset_name\u5b57\u6bb5\uff09 $dsdl-version : \"0.5.0\" $import : - VOC2007ClassDom - object-detection meta : dataset_name : \"VOC2007\" sub_dataset_name : \"train\" data : sample-type : ObjectDetectionSample[cdom=VOC2007ClassDom] sample-path : train_samples.json train_samples.json train_samples.json\u9700\u8981\u6211\u4eec\u5199\u811a\u672c\u4ece\u539f\u59cb\u6570\u636e\u96c6\u8f6c\u6362\u6765\uff0c\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684struct\u5bf9\u5e94\uff0c\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"_media_path\" : \"JPEGImages/000001.jpg\" , \"folder\" : \"VOC2007\" , \"source\" : { \"database\" : \"The VOC2007 Database\" , \"annotation\" : \"PASCAL VOC2007\" , \"flickrid\" : \"341012865\" }, \"owner\" :{ \"flickrid\" : \"Fried Camels\" , \"name\" : \"Jinky the Fruit Bat\" }, \"height\" : 640 , \"width\" : 480 , \"depth\" : 3 , \"segmented\" : 0 , \"_objects\" : [ { \"_bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"_category\" : 1 , \"pose\" : \"Left\" , \"truncated\" : 1 , \"difficult\" : 0 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002","title":"\u8ba1\u7b97\u673a\u89c6\u89c9-\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1"},{"location":"getting_started/quick_start_ex1/#-","text":"\u672c\u6559\u7a0b\u5c06\u4f7f\u7528\u7ecf\u5178 CAFAR-10 \u624b\u5199\u8bc6\u522b\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u6f14\u793a\u6570\u636e\u5904\u7406\u53ca\u6a21\u578b\u8bad\u7ec3\u5168\u6d41\u7a0b\u3002","title":"\u8ba1\u7b97\u673a\u89c6\u89c9-\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1"},{"location":"getting_started/quick_start_ex1/#_1","text":"odl-cli get CIFAR-10 \u8fd9\u91cc\u5c06\u5bf9DSDL\u6807\u6ce8\u8fdb\u884c\u4e0b\u8f7d\uff0c\u4e0b\u8f7d\u540e\u6587\u4ef6\u76ee\u5f55\u5982\u4e0b\uff1a dsdl-voc\u76ee\u5f55\u7ed3\u6784 VOC2007-dsdl/ \u251c\u2500\u2500 doms/ \u2502 \u251c\u2500\u2500 object-detection.yaml # struct\u5b9a\u4e49\u6587\u4ef6 \u2502 \u2514\u2500\u2500 VOC2007ClassDom.yaml # VOC\u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u2514\u2500\u2500 test/ # \u6d4b\u8bd5\u96c6 \u251c\u2500\u2500 test.yaml \u2514\u2500\u2500 test_samples.json \u5982\u679c\u5bf9\u539f\u59cb\u6570\u636e\u96c6\u8fdb\u884c\u540c\u6b65\u4e0b\u8f7d\uff0c\u5176\u6587\u4ef6\u76ee\u5f55\u5982\u4e0b\uff1a voc\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784 VOC2007/ # \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001.xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001.jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ...","title":"\u6570\u636e\u96c6\u4e0b\u8f7d"},{"location":"getting_started/quick_start_ex1/#_2","text":"\uff08\u8fd9\u4e00\u6b65\u540e\u7eed\u597d\u50cf\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u6682\u65f6\u6309\u7167github\u4e0a\u7684\u5185\u5bb9\u4fdd\u7559\uff0c\u540e\u7eed\u53ef\u5220\u9664\uff09","title":"\u6570\u636e\u96c6\u89e3\u6790"},{"location":"getting_started/quick_start_ex1/#yamlpython","text":"dsdl parse --yaml demo/coco_demo.yaml","title":"\u89e3\u6790\u5668\u53cd\u5e8f\u5217\u5316Yaml\u6587\u4ef6\u4e3aPython\u4ee3\u7801"},{"location":"getting_started/quick_start_ex1/#_3","text":"\u521b\u5efa\u914d\u7f6e\u6587\u4ef6 config.py \uff0c\u5185\u5bb9\u5982\u4e0b\uff08\u76ee\u524d\u53ea\u652f\u6301\u8bfb\u53d6\u963f\u91cc\u4e91OSS\u6570\u636e\u4e0e\u672c\u5730\u6570\u636e\uff09\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) \u5728 config.py \u4e2d\uff0c\u5217\u4e3e\u4e86\u6240\u6709\u652f\u6301\u7684\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5e76\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u7b49\u4fe1\u606f\uff1a \u672c\u5730\u8bfb\u53d6\uff1a local \u4e2d\u7684\u53c2\u6570 working_dir \uff08\u672c\u5730\u6570\u636e\u6240\u5728\u7684\u76ee\u5f55\uff09 \u963f\u91cc\u4e91OSS\u8bfb\u53d6\uff1a ali_oss \u4e2d\u7684\u53c2\u6570\uff08\u963f\u91cc\u4e91OSS\u7684\u914d\u7f6e access_key_secret , endpoint , access_key_id \uff1b\u6876\u540d\u79f0 bucket_name \uff0c\u6570\u636e\u5728\u6876\u4e2d\u7684\u76ee\u5f55 working_dir \uff09","title":"\u914d\u7f6e\u6587\u4ef6\u4fee\u6539\uff0c\u8bbe\u7f6e\u8bfb\u53d6\u8def\u5f84"},{"location":"getting_started/quick_start_ex1/#_4","text":"\u53ef\u89c6\u5316\u529f\u80fd\u5c55\u793a dsdl view -y <yaml-name>.yaml -c <config.py> -l ali-oss -n 10 -r -v -f Label BBox Attributes \u6bcf\u4e2a\u53c2\u6570\u7684\u610f\u4e49\u4e3a\uff1a \u53c2\u6570\u7b80\u5199 \u53c2\u6570\u5168\u5199 \u53c2\u6570\u89e3\u91ca -y --yaml \u5b9a\u4e49\u6240\u6709samples\u7684yaml\u6587\u4ef6\u7684\u8def\u5f84 -c --config \u914d\u7f6e\u6587\u4ef6\uff08 config.py \uff09\u7684\u8def\u5f84 -l --location \u53ea\u53ef\u4ee5\u6307\u5b9a\u4e3a local \u6216\u662f ali-oss \uff0c\u5206\u522b\u8868\u793a\u8bfb\u53d6\u672c\u5730\u7684\u6570\u636e\u4e0e\u8bfb\u53d6\u963f\u91cc\u4e91\u7684\u6570\u636e -n --num \u52a0\u8f7d\u6570\u636e\u96c6\u7684\u6837\u672c\u6570\u91cf -r --random \u5728\u52a0\u8f7d\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u65f6\u662f\u5426\u968f\u673a\u9009\u53d6\u6837\u672c\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u7684\u8bdd\u5c31\u6309\u987a\u5e8f\u4ece\u5f00\u59cb\u9009\u53d6\u6837\u672c -v --visualize \u662f\u5426\u5c06\u52a0\u8f7d\u7684\u6570\u636e\u8fdb\u884c\u53ef\u89c6\u5316\u5c55\u793a -f --field \u9009\u62e9\u9700\u8981\u8fdb\u884c\u53ef\u89c6\u5316\u7684\u5b57\u6bb5\uff0c\u5982 -f BBox \u8868\u793a\u53ef\u89c6\u5316bbox\uff0c -f Attributes \u8868\u793a\u5bf9\u6837\u672c\u7684attributes\u8fdb\u884c\u53ef\u89c6\u5316\u7b49\u7b49\uff0c\u53ef\u4ee5\u540c\u65f6\u9009\u62e9\u591a\u4e2a\uff0c\u5982 -f Label BBox Attributes -t --task \u53ef\u4ee5\u9009\u62e9\u5f53\u524d\u9700\u8981\u53ef\u89c6\u5316\u7684\u4efb\u52a1\u7c7b\u578b\uff0c\u5982\u679c\u9009\u62e9 -t detection \uff0c\u5219\u7b49\u4ef7\u4e8e -f Label BBox Polygon Attributes","title":"\u6570\u636e\u96c6\u53ef\u89c6\u5316"},{"location":"getting_started/quick_start_ex1/#_5","text":"\u8c03\u7528\u65b9\u6cd5\uff1a dsdl check - y xxx . yaml - c config . py - l ali - oss - t detection - p ./ - o ./ ### -y \u4e3a\u8f93\u5165\u7684yaml\u6587\u4ef6 ### -c \u4e3a\u6570\u636e\u96c6\u7684\u8bfb\u53d6\u914d\u7f6e\uff08\u8bb0\u5f55\u4e86\u6570\u636e\u96c6\u5728\u963f\u91cc\u4e91/\u672c\u5730\u7684\u4f4d\u7f6e\uff09\uff0c\u4e3b\u8981\u5f62\u5f0f\u5982\u4e0b\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) ### -l \u4e3a\u6307\u5b9a\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 ali-oss \u6216 local ### -t \u4e3a\u6307\u5b9a\u5f53\u524dyaml\u7684\u4efb\u52a1\u7c7b\u522b\uff0c\u5f53\u524d\u652f\u6301\u7684\u4efb\u52a1\u7c7b\u522b\u6709\uff08detection\uff0csegmentation\uff0cclassification\uff09 ### -p yaml\u6587\u4ef6\u5bfc\u5165\u7684\u5e93\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84\u5730\u5740 ### -o \u4e3a\u8f93\u51fa\u7684\u6587\u4ef6\u5939\uff0c\u5305\u542b\u56fe\u7247\u548cmd\u6587\u6863\uff0c\u6ce8\u610f\u6253\u5305\u4e0b\u8f7d 2. \u62a5\u544a\u6837\u5f0f\uff1a \u62a5\u544a\u5206\u4e3a3\u4e2a\u90e8\u5206\uff1a parser\u68c0\u67e5\u7ed3\u679c\uff1a\u7ed3\u679c\u5305\u62ec\u4e86parse\u7ed3\u679c\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u5219\u53ef\u4ee5\u67e5\u770b\u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f samples\u5b9e\u4f8b\u5316\u68c0\u67e5\u7ed3\u679c\uff1a\u5176\u4e2d\u62a5\u544a\u8bf4\u660e\u4e86\u5f53\u524d\u6570\u636e\u96c6\u5171\u6709\u6837\u672c\u4e2a\u6570\uff0c\u6b63\u5e38\u6837\u672c\u4e2a\u6570\uff0c\u8b66\u544a\u6837\u672c\u4e2a\u6570\uff0c\u9519\u8bef\u6837\u672c\u4e2a\u6570\uff0c\u5e76\u63d0\u4f9b\u4e86\u5f02\u5e38\u6837\u672c\u7684\u5177\u4f53\u4fe1\u606f\u65e5\u5fd7\u3002 \u53ef\u89c6\u5316\u7ed3\u679c\uff1a\u9700\u8981\u8089\u773c\u89c2\u5bdf\u53ef\u89c6\u5316\u7ed3\u679c\u662f\u5426\u6b63\u786e\uff0c\u6bd4\u5982bbox\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\uff0c\u6807\u7b7e\u5185\u5bb9\u662f\u5426\u6b63\u786e\u7b49\uff0c\u5728\u56fe\u7247\u4e0b\u9762\u5c55\u793a\u4e86\u53ef\u89c6\u5316\u8fc7\u7a0b\u4e2d\u7684\u65e5\u5fd7\u5185\u5bb9\uff0c\u6bd4\u5982\u662f\u53ef\u89c6\u5316\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u4ee5\u53ca\u5931\u8d25\u65e5\u5fd7\u7b49\u3002","title":"\u6570\u636e\u96c6\u5206\u6790"},{"location":"getting_started/quick_start_ex1/#_6","text":"\u4e0eOpenMMDetection\u7684\u5bf9\u63a5\u8bad\u7ec3\u3002","title":"\u6570\u636e\u96c6\u8bad\u7ec3"},{"location":"getting_started/quick_start_ex1/#config","text":"faster_rcnn_r101_fpn_voc2007_dsdl_format.py model = dict ( type = 'FasterRCNN' , backbone = dict ( type = 'ResNet' , depth = 101 , num_stages = 4 , out_indices = ( 0 , 1 , 2 , 3 ), frozen_stages = 1 , norm_cfg = dict ( type = 'BN' , requires_grad = True ), norm_eval = True , style = 'pytorch' , init_cfg = dict ( type = 'Pretrained' , checkpoint = 'torchvision://resnet101' )), neck = dict ( type = 'FPN' , in_channels = [ 256 , 512 , 1024 , 2048 ], out_channels = 256 , num_outs = 5 ), rpn_head = dict ( type = 'RPNHead' , in_channels = 256 , feat_channels = 256 , anchor_generator = dict ( type = 'AnchorGenerator' , scales = [ 8 ], ratios = [ 0.5 , 1.0 , 2.0 ], strides = [ 4 , 8 , 16 , 32 , 64 ]), bbox_coder = dict ( type = 'DeltaXYWHBBoxCoder' , target_means = [ 0.0 , 0.0 , 0.0 , 0.0 ], target_stds = [ 1.0 , 1.0 , 1.0 , 1.0 ]), loss_cls = dict ( type = 'CrossEntropyLoss' , use_sigmoid = True , loss_weight = 1.0 ), loss_bbox = dict ( type = 'L1Loss' , loss_weight = 1.0 )), roi_head = dict ( type = 'StandardRoIHead' , bbox_roi_extractor = dict ( type = 'SingleRoIExtractor' , roi_layer = dict ( type = 'RoIAlign' , output_size = 7 , sampling_ratio = 0 ), out_channels = 256 , featmap_strides = [ 4 , 8 , 16 , 32 ]), bbox_head = dict ( type = 'Shared2FCBBoxHead' , in_channels = 256 , fc_out_channels = 1024 , roi_feat_size = 7 , num_classes = 20 , bbox_coder = dict ( type = 'DeltaXYWHBBoxCoder' , target_means = [ 0.0 , 0.0 , 0.0 , 0.0 ], target_stds = [ 0.1 , 0.1 , 0.2 , 0.2 ]), reg_class_agnostic = False , loss_cls = dict ( type = 'CrossEntropyLoss' , use_sigmoid = False , loss_weight = 1.0 ), loss_bbox = dict ( type = 'L1Loss' , loss_weight = 1.0 ))), train_cfg = dict ( rpn = dict ( assigner = dict ( type = 'MaxIoUAssigner' , pos_iou_thr = 0.7 , neg_iou_thr = 0.3 , min_pos_iou = 0.3 , match_low_quality = True , ignore_iof_thr =- 1 ), sampler = dict ( type = 'RandomSampler' , num = 256 , pos_fraction = 0.5 , neg_pos_ub =- 1 , add_gt_as_proposals = False ), allowed_border =- 1 , pos_weight =- 1 , debug = False ), rpn_proposal = dict ( nms_pre = 2000 , max_per_img = 1000 , nms = dict ( type = 'nms' , iou_threshold = 0.7 ), min_bbox_size = 0 ), rcnn = dict ( assigner = dict ( type = 'MaxIoUAssigner' , pos_iou_thr = 0.5 , neg_iou_thr = 0.5 , min_pos_iou = 0.5 , match_low_quality = False , ignore_iof_thr =- 1 ), sampler = dict ( type = 'RandomSampler' , num = 512 , pos_fraction = 0.25 , neg_pos_ub =- 1 , add_gt_as_proposals = True ), pos_weight =- 1 , debug = False )), test_cfg = dict ( rpn = dict ( nms_pre = 1000 , max_per_img = 1000 , nms = dict ( type = 'nms' , iou_threshold = 0.7 ), min_bbox_size = 0 ), rcnn = dict ( score_thr = 0.05 , nms = dict ( type = 'nms' , iou_threshold = 0.5 ), max_per_img = 100 ))) checkpoint_config = dict ( interval = 1 ) file_client_args = dict ( backend = 'petrel' ) log_config = dict ( interval = 50 , hooks = [ dict ( type = 'TextLoggerHook' )]) custom_hooks = [ dict ( type = 'NumClassCheckHook' )] dist_params = dict ( backend = 'nccl' ) log_level = 'INFO' load_from = None resume_from = None workflow = [( 'train' , 1 )] opencv_num_threads = 0 mp_start_method = 'fork' auto_scale_lr = dict ( enable = True , base_batch_size = 16 ) optimizer = dict ( type = 'SGD' , lr = 0.02 , momentum = 0.9 , weight_decay = 0.0001 ) optimizer_config = dict ( grad_clip = None ) lr_config = dict ( policy = 'step' , warmup = 'linear' , warmup_iters = 500 , warmup_ratio = 0.001 , step = [ 8 , 11 ]) runner = dict ( type = 'EpochBasedRunner' , max_epochs = 12 ) num_classes = 20 dataset_type = 'DSDLDetectionDataset' img_norm_cfg = dict ( mean = [ 123.675 , 116.28 , 103.53 ], std = [ 58.395 , 57.12 , 57.375 ], to_rgb = True ) # \u4fee\u6539data_root\u4e3as3\u8def\u5f84 train_pipeline = [ dict ( type = 'LoadImageFromDSDL' , file_client_args = file_client_args , data_root = 's3://open_dataset_original/PASCALVOC2007/public_datalist_17/VOCdevkit/VOC2007/' ), dict ( type = 'LoadAnnotations' , with_bbox = True ), dict ( type = 'Resize' , img_scale = ( 1333 , 800 ), keep_ratio = True ), dict ( type = 'RandomFlip' , flip_ratio = 0.5 ), dict ( type = 'Normalize' , mean = [ 123.675 , 116.28 , 103.53 ], std = [ 58.395 , 57.12 , 57.375 ], to_rgb = True ), dict ( type = 'Pad' , size_divisor = 32 ), dict ( type = 'DefaultFormatBundle' ), dict ( type = 'Collect' , keys = [ 'img' , 'gt_bboxes' , 'gt_labels' ]) ] # \u4fee\u6539data_root\u4e3as3\u8def\u5f84 test_pipeline = [ dict ( type = 'LoadImageFromDSDL' , file_client_args = file_client_args , data_root = 's3://open_dataset_original/PASCALVOC2007/public_datalist_17/VOCdevkit/VOC2007/' ), dict ( type = 'MultiScaleFlipAug' , img_scale = ( 1333 , 800 ), flip = False , transforms = [ dict ( type = 'Resize' , keep_ratio = True ), dict ( type = 'RandomFlip' ), dict ( type = 'Normalize' , mean = [ 123.675 , 116.28 , 103.53 ], std = [ 58.395 , 57.12 , 57.375 ], to_rgb = True ), dict ( type = 'Pad' , size_divisor = 32 ), dict ( type = 'ImageToTensor' , keys = [ 'img' ]), dict ( type = 'Collect' , keys = [ 'img' ]) ]) ] # \u4e3b\u8981\u4fee\u6539\u8fd9\u4e2a\u8def\u5f84 train_yaml_07 = '/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/train/train.yaml' val_yaml_07 = '/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/val/val.yaml' test_yaml = '/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/test/test.yaml' ignore_cfg = dict ( Continue = dict (), Ignore = dict ( difficult = ( True , 1 ))) dsdl_library_path = \"/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/train/\" local = dict ( type = \"LocalFileReader\" , working_dir = \"/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/\" ) data = dict ( samples_per_gpu = 1 , workers_per_gpu = 32 , train = dict ( type = 'DSDLDetectionDataset' , ann_file = train_yaml_07 , location_config = local , pipeline = train_pipeline , dsdl_library_path = dsdl_library_path ), val = dict ( type = 'DSDLDetectionDataset' , ann_file = val_yaml_07 , location_config = local , pipeline = test_pipeline , dsdl_library_path = dsdl_library_path ), test = dict ( type = 'DSDLDetectionDataset' , ann_file = test_yaml , location_config = local , pipeline = test_pipeline , dsdl_library_path = dsdl_library_path )) evaluation = dict ( interval = 1 , metric = 'mAP' ) gpu_ids = [ 0 ] work_dir = './work_dirs/voc_dsdl_test' auto_resume = False","title":"\u4fee\u6539config\u6587\u4ef6"},{"location":"getting_started/quick_start_ex1/#_7","text":"\u6253\u5f00terminal\u8fd0\u884c\uff1a conda activate openmmlab # \u5b89\u88c5\u4e86dsdl\u548cmmdetection\u7684conda\u73af\u5883 srun -p bigdata_s2 --quotatype = auto --gres = gpu:1 python tools/train.py configs/dsdl_detection/faster_rcnn_r101_fpn_voc2007_dsdl_format.py \u6700\u7ec8\u7ed3\u679c\u7cbe\u5ea6\uff1aAP50: 0.6680, mAP: 0.6680","title":"\u5f00\u59cb\u8bad\u7ec3"},{"location":"getting_started/quick_start_ex1/#_8","text":"","title":"\u8865\u5145\u5185\u5bb9"},{"location":"getting_started/quick_start_ex1/#dsdl","text":"DSDL\u6570\u636e\u96c6\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u91cd\u8981\u7684\u6587\u4ef6\uff1a struct\u7684\u5b9a\u4e49\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u6587\u4ef6\u540d\u4e3aobject-detetction.yaml\uff09\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5bf9struct\u505a\u4e00\u4e2a\u660e\u786e\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u6709sample\u7684\u7ed3\u6784\u4f53\u548c\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u7b49\uff0c\u9700\u6307\u660e\u5305\u542b\u4e86\u54ea\u4e9bfield\uff0c\u6bcf\u4e2afield\u7684\u7c7b\u578b\u3002 \u7c7b\u522b\u57df\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e3aVOC2007ClassDom.yaml\uff09\uff1a\u91cc\u9762\u5305\u542b\u4e86\u7c7b\u522b\u5217\u8868\uff0c\u5bf9\u5e94category\u7684\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\u6392\u5e8f\uff09 samples\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5206\u522b\u5206\u4e3atrain.yaml\u548ctrain_samples.json) train.yaml\u4e3b\u8981\u662f\u6307\u660e\u5f15\u7528\u54ea\u4e2astruct\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6587\u4ef6\uff0c\u5e76\u4e14\u6307\u660e\u6570\u636e\u7c7b\u578b\u548c\u5b58\u653e\u8def\u5f84\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9bmeta\u4fe1\u606f train_samples.json\u91cc\u4fdd\u5b58\u4e86\u5b9e\u9645\u7684samples\u4fe1\u606f\uff0c\u5176\u7ec4\u7ec7\u7ed3\u6784\u5fc5\u987b\u548c\u4e4b\u524d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u5339\u914d","title":"DSDL\u6587\u4ef6\u89e3\u91ca"},{"location":"getting_started/quick_start_ex1/#object-detectionyaml","text":"\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5b9a\u4e49struct\u7684yaml\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u540d\u79f0\u53ef\u4ee5\u6839\u636e\u539f\u59cb\u6570\u636e\u96c6\u8fdb\u884c\u4e00\u4e2a\u4fee\u6539\u548c\u9002\u5e94\uff08\u5c3d\u91cf\u4fdd\u7559\u539f\u59cb\u6570\u636e\u96c6\u7684\u5b57\u6bb5\u540d\u79f0\u548c\u7ed3\u6784\uff09\uff0c\u4f46\u662f\u5b57\u6bb5\u7c7b\u578b\u4e00\u5b9a\u8981\u4f7f\u7528\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\uff08\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\u8be6\u89c1\uff1ahttps://opendatalab.github.io/dsdl-docs/zh/lang/basic_types/\uff09 $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : _bbox : BBox _category : Label[dom=$cdom] pose : Str truncated : Bool difficult : Bool ObjectDetectionSample : $def : struct $params : [ \"cdom\" ] $fields : media_path : Image folder : Str source : Dict owner : Dict height : Int width : Int depth : Int segmented : Bool _objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\u53ca\u5bf9\u5e94\u5173\u7cfb\uff1a \uff08\u6ca1\u6709\u63d0\u5230\u7684\u5b57\u6bb5\u90fd\u662f\u4e0e\u539f\u6570\u636e\u96c6\u540c\u540d\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u53e6\u5916\uff0c\u547d\u540d\u4e2d\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u4e00\u822c\u90fd\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u5373\u539f\u6570\u636e\u96c6\u6ca1\u6709\u7684\u5b57\u6bb5\uff09 \u5728ObjectDetectionSample\u4e2d\uff1a media_path\uff1a\u8be5\u5b57\u6bb5\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u7528\u4e8e\u50a8\u5b58\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u4e3b\u8981\u4ece\u539f\u59cb\u6570\u636e\u96c6\u7684filename\u5b57\u6bb5\u8f6c\u5316\u800c\u6765 _objects\uff1a\u8be5\u5b57\u6bb5\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684object\u5b57\u6bb5\uff0c\u4ee5List\u7684\u5f62\u5f0f\u5b58\u50a8\u5177\u4f53bounding box\u7684\u6807\u6ce8\u4fe1\u606f source\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684source\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684source\u5b57\u6bb5\u4e0b\u7684database\u3001annotation\u3001image\u3001flickerid\u5b57\u6bb5 owner\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684owner\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684owner\u5b57\u6bb5\u4e0b\u7684flickerid\u548cname\u5b57\u6bb5 width\u3001height\u3001depth\uff1a\u662f\u539f\u59cb\u6570\u636e\u96c6\u7684size\u5b57\u6bb5\u4e0b\u7684 \u5728LocalObjectEntry\u4e2d\uff1a _bbox\uff1a\u5bf9\u5e94\u539f\u6570\u636e\u96c6\u7684bndbox\u5b57\u6bb5\uff0c\u4f46\u8f6c\u5316\u4e3abbox\u6807\u51c6\uff0c\u5373[x,y,w,h] _category\uff1a\u662f\u8be5\u76ee\u6807\u7684\u7c7b\u522b\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u53f7\uff0c\u5bf9\u5e94\u7684\u662f\u539f\u6570\u636e\u96c6\u7684name\u5b57\u6bb5\uff0c\u7c7b\u522b\u6807\u53f7\u53ef\u4ee5\u53c2\u89c1\u4e0b\u9762\u7684VOC2007ClassDom.yaml","title":"object-detection.yaml"},{"location":"getting_started/quick_start_ex1/#voc2007classdomyaml","text":"\u8fd9\u662f\u4e00\u4e2a\u7c7b\u522b\u5b9a\u4e49\u7684Dom\u6587\u6863\u3002 $dsdl-version : \"0.5.0\" VOC2007ClassDom : $def : class_domain classes : - aeroplane # \u5bf9\u5e94category\u4e3a1 - bicycle # \u5bf9\u5e94category\u4e3a2 - bird - boat - bottle - bus - car - cat - chair - cow - diningtable - dog - horse - motorbike - person - pottedplant - sheep - sofa - train - tvmonitor","title":"VOC2007ClassDom.yaml"},{"location":"getting_started/quick_start_ex1/#trainyaml","text":"\u8fd9\u4e2a\u6587\u6863\u5f15\u7528\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u4e24\u4e2a\u6587\u6863\uff0c\u5e76\u4e14\u6307\u5f15\u4e86\u5177\u4f53\u7684sample\u8def\u5f84\uff08test.yaml\u548cval.yaml\u7c7b\u4f3c\uff0c\u53ea\u662f\u4fee\u6539\u5bf9\u5e94sample-path\u548csub_dataset_name\u5b57\u6bb5\uff09 $dsdl-version : \"0.5.0\" $import : - VOC2007ClassDom - object-detection meta : dataset_name : \"VOC2007\" sub_dataset_name : \"train\" data : sample-type : ObjectDetectionSample[cdom=VOC2007ClassDom] sample-path : train_samples.json","title":"train.yaml"},{"location":"getting_started/quick_start_ex1/#train_samplesjson","text":"train_samples.json\u9700\u8981\u6211\u4eec\u5199\u811a\u672c\u4ece\u539f\u59cb\u6570\u636e\u96c6\u8f6c\u6362\u6765\uff0c\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684struct\u5bf9\u5e94\uff0c\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"_media_path\" : \"JPEGImages/000001.jpg\" , \"folder\" : \"VOC2007\" , \"source\" : { \"database\" : \"The VOC2007 Database\" , \"annotation\" : \"PASCAL VOC2007\" , \"flickrid\" : \"341012865\" }, \"owner\" :{ \"flickrid\" : \"Fried Camels\" , \"name\" : \"Jinky the Fruit Bat\" }, \"height\" : 640 , \"width\" : 480 , \"depth\" : 3 , \"segmented\" : 0 , \"_objects\" : [ { \"_bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"_category\" : 1 , \"pose\" : \"Left\" , \"truncated\" : 1 , \"difficult\" : 0 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002","title":"train_samples.json"},{"location":"getting_started/quick_start_ex3/","text":"\u76ee\u6807\u68c0\u6d4bPASCAL VOC2007\u6570\u636e\u4e0b\u8f7d\u53ca\u6a21\u578b\u8bad\u7ec3 \u6570\u636e\u96c6\u4e0b\u8f7d dsdl get opendatalab/VOC2017 \u8fd9\u91cc\u5c06\u5bf9DSDL\u6807\u6ce8\u8fdb\u884c\u4e0b\u8f7d\uff0c\u4e0b\u8f7d\u540e\u6587\u4ef6\u76ee\u5f55\u5982\u4e0b\uff1a VOC2007-dsdl/ \u251c\u2500\u2500 doms/ \u2502 \u251c\u2500\u2500 object-detection.yaml # struct\u5b9a\u4e49\u6587\u4ef6 \u2502 \u2514\u2500\u2500 VOC2007ClassDom.yaml # VOC\u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u2514\u2500\u2500 test/ # \u6d4b\u8bd5\u96c6 \u251c\u2500\u2500 test.yaml \u2514\u2500\u2500 test_samples.json \u5982\u679c\u5bf9\u539f\u59cb\u6570\u636e\u96c6\u8fdb\u884c\u540c\u6b65\u4e0b\u8f7d\uff0c\u5176\u6587\u4ef6\u76ee\u5f55\u5982\u4e0b\uff1a VOC2007/ # \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001.xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001.jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ... \u6570\u636e\u96c6\u89e3\u6790 \uff08\u8fd9\u4e00\u6b65\u540e\u7eed\u597d\u50cf\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u6682\u65f6\u6309\u7167github\u4e0a\u7684\u5185\u5bb9\u4fdd\u7559\uff0c\u540e\u7eed\u53ef\u5220\u9664\uff09 \u89e3\u6790\u5668\u53cd\u5e8f\u5217\u5316Yaml\u6587\u4ef6\u4e3aPython\u4ee3\u7801 dsdl parse --yaml demo/coco_demo.yaml \u914d\u7f6e\u6587\u4ef6\u4fee\u6539\uff0c\u8bbe\u7f6e\u8bfb\u53d6\u8def\u5f84 \u521b\u5efa\u914d\u7f6e\u6587\u4ef6 config.py \uff0c\u5185\u5bb9\u5982\u4e0b\uff08\u76ee\u524d\u53ea\u652f\u6301\u8bfb\u53d6\u963f\u91cc\u4e91OSS\u6570\u636e\u4e0e\u672c\u5730\u6570\u636e\uff09\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) \u5728 config.py \u4e2d\uff0c\u5217\u4e3e\u4e86\u6240\u6709\u652f\u6301\u7684\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5e76\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u7b49\u4fe1\u606f\uff1a \u672c\u5730\u8bfb\u53d6\uff1a local \u4e2d\u7684\u53c2\u6570 working_dir \uff08\u672c\u5730\u6570\u636e\u6240\u5728\u7684\u76ee\u5f55\uff09 \u963f\u91cc\u4e91OSS\u8bfb\u53d6\uff1a ali_oss \u4e2d\u7684\u53c2\u6570\uff08\u963f\u91cc\u4e91OSS\u7684\u914d\u7f6e access_key_secret , endpoint , access_key_id \uff1b\u6876\u540d\u79f0 bucket_name \uff0c\u6570\u636e\u5728\u6876\u4e2d\u7684\u76ee\u5f55 working_dir \uff09 \u6570\u636e\u96c6\u53ef\u89c6\u5316 \u53ef\u89c6\u5316\u529f\u80fd\u5c55\u793a dsdl view -y <yaml-name>.yaml -c <config.py> -l ali-oss -n 10 -r -v -f Label BBox Attributes \u6bcf\u4e2a\u53c2\u6570\u7684\u610f\u4e49\u4e3a\uff1a \u53c2\u6570\u7b80\u5199 \u53c2\u6570\u5168\u5199 \u53c2\u6570\u89e3\u91ca -y --yaml \u5b9a\u4e49\u6240\u6709samples\u7684yaml\u6587\u4ef6\u7684\u8def\u5f84 -c --config \u914d\u7f6e\u6587\u4ef6\uff08 config.py \uff09\u7684\u8def\u5f84 -l --location \u53ea\u53ef\u4ee5\u6307\u5b9a\u4e3a local \u6216\u662f ali-oss \uff0c\u5206\u522b\u8868\u793a\u8bfb\u53d6\u672c\u5730\u7684\u6570\u636e\u4e0e\u8bfb\u53d6\u963f\u91cc\u4e91\u7684\u6570\u636e -n --num \u52a0\u8f7d\u6570\u636e\u96c6\u7684\u6837\u672c\u6570\u91cf -r --random \u5728\u52a0\u8f7d\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u65f6\u662f\u5426\u968f\u673a\u9009\u53d6\u6837\u672c\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u7684\u8bdd\u5c31\u6309\u987a\u5e8f\u4ece\u5f00\u59cb\u9009\u53d6\u6837\u672c -v --visualize \u662f\u5426\u5c06\u52a0\u8f7d\u7684\u6570\u636e\u8fdb\u884c\u53ef\u89c6\u5316\u5c55\u793a -f --field \u9009\u62e9\u9700\u8981\u8fdb\u884c\u53ef\u89c6\u5316\u7684\u5b57\u6bb5\uff0c\u5982 -f BBox \u8868\u793a\u53ef\u89c6\u5316bbox\uff0c -f Attributes \u8868\u793a\u5bf9\u6837\u672c\u7684attributes\u8fdb\u884c\u53ef\u89c6\u5316\u7b49\u7b49\uff0c\u53ef\u4ee5\u540c\u65f6\u9009\u62e9\u591a\u4e2a\uff0c\u5982 -f Label BBox Attributes -t --task \u53ef\u4ee5\u9009\u62e9\u5f53\u524d\u9700\u8981\u53ef\u89c6\u5316\u7684\u4efb\u52a1\u7c7b\u578b\uff0c\u5982\u679c\u9009\u62e9 -t detection \uff0c\u5219\u7b49\u4ef7\u4e8e -f Label BBox Polygon Attributes \u6570\u636e\u96c6\u5206\u6790 \u8c03\u7528\u65b9\u6cd5\uff1a dsdl check - y xxx . yaml - c config . py - l ali - oss - t detection - p ./ - o ./ ### -y \u4e3a\u8f93\u5165\u7684yaml\u6587\u4ef6 ### -c \u4e3a\u6570\u636e\u96c6\u7684\u8bfb\u53d6\u914d\u7f6e\uff08\u8bb0\u5f55\u4e86\u6570\u636e\u96c6\u5728\u963f\u91cc\u4e91/\u672c\u5730\u7684\u4f4d\u7f6e\uff09\uff0c\u4e3b\u8981\u5f62\u5f0f\u5982\u4e0b\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) ### -l \u4e3a\u6307\u5b9a\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 ali-oss \u6216 local ### -t \u4e3a\u6307\u5b9a\u5f53\u524dyaml\u7684\u4efb\u52a1\u7c7b\u522b\uff0c\u5f53\u524d\u652f\u6301\u7684\u4efb\u52a1\u7c7b\u522b\u6709\uff08detection\uff0csegmentation\uff0cclassification\uff09 ### -p yaml\u6587\u4ef6\u5bfc\u5165\u7684\u5e93\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84\u5730\u5740 ### -o \u4e3a\u8f93\u51fa\u7684\u6587\u4ef6\u5939\uff0c\u5305\u542b\u56fe\u7247\u548cmd\u6587\u6863\uff0c\u6ce8\u610f\u6253\u5305\u4e0b\u8f7d 2. \u62a5\u544a\u6837\u5f0f\uff1a \u62a5\u544a\u5206\u4e3a3\u4e2a\u90e8\u5206\uff1a parser\u68c0\u67e5\u7ed3\u679c\uff1a\u7ed3\u679c\u5305\u62ec\u4e86parse\u7ed3\u679c\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u5219\u53ef\u4ee5\u67e5\u770b\u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f samples\u5b9e\u4f8b\u5316\u68c0\u67e5\u7ed3\u679c\uff1a\u5176\u4e2d\u62a5\u544a\u8bf4\u660e\u4e86\u5f53\u524d\u6570\u636e\u96c6\u5171\u6709\u6837\u672c\u4e2a\u6570\uff0c\u6b63\u5e38\u6837\u672c\u4e2a\u6570\uff0c\u8b66\u544a\u6837\u672c\u4e2a\u6570\uff0c\u9519\u8bef\u6837\u672c\u4e2a\u6570\uff0c\u5e76\u63d0\u4f9b\u4e86\u5f02\u5e38\u6837\u672c\u7684\u5177\u4f53\u4fe1\u606f\u65e5\u5fd7\u3002 \u53ef\u89c6\u5316\u7ed3\u679c\uff1a\u9700\u8981\u8089\u773c\u89c2\u5bdf\u53ef\u89c6\u5316\u7ed3\u679c\u662f\u5426\u6b63\u786e\uff0c\u6bd4\u5982bbox\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\uff0c\u6807\u7b7e\u5185\u5bb9\u662f\u5426\u6b63\u786e\u7b49\uff0c\u5728\u56fe\u7247\u4e0b\u9762\u5c55\u793a\u4e86\u53ef\u89c6\u5316\u8fc7\u7a0b\u4e2d\u7684\u65e5\u5fd7\u5185\u5bb9\uff0c\u6bd4\u5982\u662f\u53ef\u89c6\u5316\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u4ee5\u53ca\u5931\u8d25\u65e5\u5fd7\u7b49\u3002 \u6570\u636e\u96c6\u8bad\u7ec3 \u4e0eOpenMMDetection\u7684\u5bf9\u63a5\u8bad\u7ec3\u3002 \u4fee\u6539config\u6587\u4ef6 faster_rcnn_r101_fpn_voc2007_dsdl_format.py model = dict ( type = 'FasterRCNN' , backbone = dict ( type = 'ResNet' , depth = 101 , num_stages = 4 , out_indices = ( 0 , 1 , 2 , 3 ), frozen_stages = 1 , norm_cfg = dict ( type = 'BN' , requires_grad = True ), norm_eval = True , style = 'pytorch' , init_cfg = dict ( type = 'Pretrained' , checkpoint = 'torchvision://resnet101' )), neck = dict ( type = 'FPN' , in_channels = [ 256 , 512 , 1024 , 2048 ], out_channels = 256 , num_outs = 5 ), rpn_head = dict ( type = 'RPNHead' , in_channels = 256 , feat_channels = 256 , anchor_generator = dict ( type = 'AnchorGenerator' , scales = [ 8 ], ratios = [ 0.5 , 1.0 , 2.0 ], strides = [ 4 , 8 , 16 , 32 , 64 ]), bbox_coder = dict ( type = 'DeltaXYWHBBoxCoder' , target_means = [ 0.0 , 0.0 , 0.0 , 0.0 ], target_stds = [ 1.0 , 1.0 , 1.0 , 1.0 ]), loss_cls = dict ( type = 'CrossEntropyLoss' , use_sigmoid = True , loss_weight = 1.0 ), loss_bbox = dict ( type = 'L1Loss' , loss_weight = 1.0 )), roi_head = dict ( type = 'StandardRoIHead' , bbox_roi_extractor = dict ( type = 'SingleRoIExtractor' , roi_layer = dict ( type = 'RoIAlign' , output_size = 7 , sampling_ratio = 0 ), out_channels = 256 , featmap_strides = [ 4 , 8 , 16 , 32 ]), bbox_head = dict ( type = 'Shared2FCBBoxHead' , in_channels = 256 , fc_out_channels = 1024 , roi_feat_size = 7 , num_classes = 20 , bbox_coder = dict ( type = 'DeltaXYWHBBoxCoder' , target_means = [ 0.0 , 0.0 , 0.0 , 0.0 ], target_stds = [ 0.1 , 0.1 , 0.2 , 0.2 ]), reg_class_agnostic = False , loss_cls = dict ( type = 'CrossEntropyLoss' , use_sigmoid = False , loss_weight = 1.0 ), loss_bbox = dict ( type = 'L1Loss' , loss_weight = 1.0 ))), train_cfg = dict ( rpn = dict ( assigner = dict ( type = 'MaxIoUAssigner' , pos_iou_thr = 0.7 , neg_iou_thr = 0.3 , min_pos_iou = 0.3 , match_low_quality = True , ignore_iof_thr =- 1 ), sampler = dict ( type = 'RandomSampler' , num = 256 , pos_fraction = 0.5 , neg_pos_ub =- 1 , add_gt_as_proposals = False ), allowed_border =- 1 , pos_weight =- 1 , debug = False ), rpn_proposal = dict ( nms_pre = 2000 , max_per_img = 1000 , nms = dict ( type = 'nms' , iou_threshold = 0.7 ), min_bbox_size = 0 ), rcnn = dict ( assigner = dict ( type = 'MaxIoUAssigner' , pos_iou_thr = 0.5 , neg_iou_thr = 0.5 , min_pos_iou = 0.5 , match_low_quality = False , ignore_iof_thr =- 1 ), sampler = dict ( type = 'RandomSampler' , num = 512 , pos_fraction = 0.25 , neg_pos_ub =- 1 , add_gt_as_proposals = True ), pos_weight =- 1 , debug = False )), test_cfg = dict ( rpn = dict ( nms_pre = 1000 , max_per_img = 1000 , nms = dict ( type = 'nms' , iou_threshold = 0.7 ), min_bbox_size = 0 ), rcnn = dict ( score_thr = 0.05 , nms = dict ( type = 'nms' , iou_threshold = 0.5 ), max_per_img = 100 ))) checkpoint_config = dict ( interval = 1 ) file_client_args = dict ( backend = 'petrel' ) log_config = dict ( interval = 50 , hooks = [ dict ( type = 'TextLoggerHook' )]) custom_hooks = [ dict ( type = 'NumClassCheckHook' )] dist_params = dict ( backend = 'nccl' ) log_level = 'INFO' load_from = None resume_from = None workflow = [( 'train' , 1 )] opencv_num_threads = 0 mp_start_method = 'fork' auto_scale_lr = dict ( enable = True , base_batch_size = 16 ) optimizer = dict ( type = 'SGD' , lr = 0.02 , momentum = 0.9 , weight_decay = 0.0001 ) optimizer_config = dict ( grad_clip = None ) lr_config = dict ( policy = 'step' , warmup = 'linear' , warmup_iters = 500 , warmup_ratio = 0.001 , step = [ 8 , 11 ]) runner = dict ( type = 'EpochBasedRunner' , max_epochs = 12 ) num_classes = 20 dataset_type = 'DSDLDetectionDataset' img_norm_cfg = dict ( mean = [ 123.675 , 116.28 , 103.53 ], std = [ 58.395 , 57.12 , 57.375 ], to_rgb = True ) # \u4fee\u6539data_root\u4e3as3\u8def\u5f84 train_pipeline = [ dict ( type = 'LoadImageFromDSDL' , file_client_args = file_client_args , data_root = 's3://open_dataset_original/PASCALVOC2007/public_datalist_17/VOCdevkit/VOC2007/' ), dict ( type = 'LoadAnnotations' , with_bbox = True ), dict ( type = 'Resize' , img_scale = ( 1333 , 800 ), keep_ratio = True ), dict ( type = 'RandomFlip' , flip_ratio = 0.5 ), dict ( type = 'Normalize' , mean = [ 123.675 , 116.28 , 103.53 ], std = [ 58.395 , 57.12 , 57.375 ], to_rgb = True ), dict ( type = 'Pad' , size_divisor = 32 ), dict ( type = 'DefaultFormatBundle' ), dict ( type = 'Collect' , keys = [ 'img' , 'gt_bboxes' , 'gt_labels' ]) ] # \u4fee\u6539data_root\u4e3as3\u8def\u5f84 test_pipeline = [ dict ( type = 'LoadImageFromDSDL' , file_client_args = file_client_args , data_root = 's3://open_dataset_original/PASCALVOC2007/public_datalist_17/VOCdevkit/VOC2007/' ), dict ( type = 'MultiScaleFlipAug' , img_scale = ( 1333 , 800 ), flip = False , transforms = [ dict ( type = 'Resize' , keep_ratio = True ), dict ( type = 'RandomFlip' ), dict ( type = 'Normalize' , mean = [ 123.675 , 116.28 , 103.53 ], std = [ 58.395 , 57.12 , 57.375 ], to_rgb = True ), dict ( type = 'Pad' , size_divisor = 32 ), dict ( type = 'ImageToTensor' , keys = [ 'img' ]), dict ( type = 'Collect' , keys = [ 'img' ]) ]) ] # \u4e3b\u8981\u4fee\u6539\u8fd9\u4e2a\u8def\u5f84 train_yaml_07 = '/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/train/train.yaml' val_yaml_07 = '/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/val/val.yaml' test_yaml = '/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/test/test.yaml' ignore_cfg = dict ( Continue = dict (), Ignore = dict ( difficult = ( True , 1 ))) dsdl_library_path = \"/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/train/\" local = dict ( type = \"LocalFileReader\" , working_dir = \"/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/\" ) data = dict ( samples_per_gpu = 1 , workers_per_gpu = 32 , train = dict ( type = 'DSDLDetectionDataset' , ann_file = train_yaml_07 , location_config = local , pipeline = train_pipeline , dsdl_library_path = dsdl_library_path ), val = dict ( type = 'DSDLDetectionDataset' , ann_file = val_yaml_07 , location_config = local , pipeline = test_pipeline , dsdl_library_path = dsdl_library_path ), test = dict ( type = 'DSDLDetectionDataset' , ann_file = test_yaml , location_config = local , pipeline = test_pipeline , dsdl_library_path = dsdl_library_path )) evaluation = dict ( interval = 1 , metric = 'mAP' ) gpu_ids = [ 0 ] work_dir = './work_dirs/voc_dsdl_test' auto_resume = False \u5f00\u59cb\u8bad\u7ec3 \u6253\u5f00terminal\u8fd0\u884c\uff1a conda activate openmmlab # \u5b89\u88c5\u4e86dsdl\u548cmmdetection\u7684conda\u73af\u5883 srun -p bigdata_s2 --quotatype = auto --gres = gpu:1 python tools/train.py configs/dsdl_detection/faster_rcnn_r101_fpn_voc2007_dsdl_format.py \u6700\u7ec8\u7ed3\u679c\u7cbe\u5ea6\uff1aAP50: 0.6680, mAP: 0.6680 \u8865\u5145\u5185\u5bb9 DSDL\u6587\u4ef6\u89e3\u91ca DSDL\u6570\u636e\u96c6\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u91cd\u8981\u7684\u6587\u4ef6\uff1a struct\u7684\u5b9a\u4e49\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u6587\u4ef6\u540d\u4e3aobject-detetction.yaml\uff09\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5bf9struct\u505a\u4e00\u4e2a\u660e\u786e\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u6709sample\u7684\u7ed3\u6784\u4f53\u548c\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u7b49\uff0c\u9700\u6307\u660e\u5305\u542b\u4e86\u54ea\u4e9bfield\uff0c\u6bcf\u4e2afield\u7684\u7c7b\u578b\u3002 \u7c7b\u522b\u57df\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e3aVOC2007ClassDom.yaml\uff09\uff1a\u91cc\u9762\u5305\u542b\u4e86\u7c7b\u522b\u5217\u8868\uff0c\u5bf9\u5e94category\u7684\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\u6392\u5e8f\uff09 samples\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5206\u522b\u5206\u4e3atrain.yaml\u548ctrain_samples.json) train.yaml\u4e3b\u8981\u662f\u6307\u660e\u5f15\u7528\u54ea\u4e2astruct\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6587\u4ef6\uff0c\u5e76\u4e14\u6307\u660e\u6570\u636e\u7c7b\u578b\u548c\u5b58\u653e\u8def\u5f84\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9bmeta\u4fe1\u606f train_samples.json\u91cc\u4fdd\u5b58\u4e86\u5b9e\u9645\u7684samples\u4fe1\u606f\uff0c\u5176\u7ec4\u7ec7\u7ed3\u6784\u5fc5\u987b\u548c\u4e4b\u524d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u5339\u914d object-detection.yaml \u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5b9a\u4e49struct\u7684yaml\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u540d\u79f0\u53ef\u4ee5\u6839\u636e\u539f\u59cb\u6570\u636e\u96c6\u8fdb\u884c\u4e00\u4e2a\u4fee\u6539\u548c\u9002\u5e94\uff08\u5c3d\u91cf\u4fdd\u7559\u539f\u59cb\u6570\u636e\u96c6\u7684\u5b57\u6bb5\u540d\u79f0\u548c\u7ed3\u6784\uff09\uff0c\u4f46\u662f\u5b57\u6bb5\u7c7b\u578b\u4e00\u5b9a\u8981\u4f7f\u7528\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\uff08\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\u8be6\u89c1\uff1ahttps://opendatalab.github.io/dsdl-docs/zh/lang/basic_types/\uff09 $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : _bbox : BBox _category : Label[dom=$cdom] pose : Str truncated : Bool difficult : Bool ObjectDetectionSample : $def : struct $params : [ \"cdom\" ] $fields : media_path : Image folder : Str source : Dict owner : Dict height : Int width : Int depth : Int segmented : Bool _objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\u53ca\u5bf9\u5e94\u5173\u7cfb\uff1a \uff08\u6ca1\u6709\u63d0\u5230\u7684\u5b57\u6bb5\u90fd\u662f\u4e0e\u539f\u6570\u636e\u96c6\u540c\u540d\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u53e6\u5916\uff0c\u547d\u540d\u4e2d\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u4e00\u822c\u90fd\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u5373\u539f\u6570\u636e\u96c6\u6ca1\u6709\u7684\u5b57\u6bb5\uff09 \u5728ObjectDetectionSample\u4e2d\uff1a media_path\uff1a\u8be5\u5b57\u6bb5\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u7528\u4e8e\u50a8\u5b58\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u4e3b\u8981\u4ece\u539f\u59cb\u6570\u636e\u96c6\u7684filename\u5b57\u6bb5\u8f6c\u5316\u800c\u6765 _objects\uff1a\u8be5\u5b57\u6bb5\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684object\u5b57\u6bb5\uff0c\u4ee5List\u7684\u5f62\u5f0f\u5b58\u50a8\u5177\u4f53bounding box\u7684\u6807\u6ce8\u4fe1\u606f source\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684source\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684source\u5b57\u6bb5\u4e0b\u7684database\u3001annotation\u3001image\u3001flickerid\u5b57\u6bb5 owner\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684owner\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684owner\u5b57\u6bb5\u4e0b\u7684flickerid\u548cname\u5b57\u6bb5 width\u3001height\u3001depth\uff1a\u662f\u539f\u59cb\u6570\u636e\u96c6\u7684size\u5b57\u6bb5\u4e0b\u7684 \u5728LocalObjectEntry\u4e2d\uff1a _bbox\uff1a\u5bf9\u5e94\u539f\u6570\u636e\u96c6\u7684bndbox\u5b57\u6bb5\uff0c\u4f46\u8f6c\u5316\u4e3abbox\u6807\u51c6\uff0c\u5373[x,y,w,h] _category\uff1a\u662f\u8be5\u76ee\u6807\u7684\u7c7b\u522b\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u53f7\uff0c\u5bf9\u5e94\u7684\u662f\u539f\u6570\u636e\u96c6\u7684name\u5b57\u6bb5\uff0c\u7c7b\u522b\u6807\u53f7\u53ef\u4ee5\u53c2\u89c1\u4e0b\u9762\u7684VOC2007ClassDom.yaml VOC2007ClassDom.yaml \u8fd9\u662f\u4e00\u4e2a\u7c7b\u522b\u5b9a\u4e49\u7684Dom\u6587\u6863\u3002 $dsdl-version : \"0.5.0\" VOC2007ClassDom : $def : class_domain classes : - aeroplane # \u5bf9\u5e94category\u4e3a1 - bicycle # \u5bf9\u5e94category\u4e3a2 - bird - boat - bottle - bus - car - cat - chair - cow - diningtable - dog - horse - motorbike - person - pottedplant - sheep - sofa - train - tvmonitor train.yaml \u8fd9\u4e2a\u6587\u6863\u5f15\u7528\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u4e24\u4e2a\u6587\u6863\uff0c\u5e76\u4e14\u6307\u5f15\u4e86\u5177\u4f53\u7684sample\u8def\u5f84\uff08test.yaml\u548cval.yaml\u7c7b\u4f3c\uff0c\u53ea\u662f\u4fee\u6539\u5bf9\u5e94sample-path\u548csub_dataset_name\u5b57\u6bb5\uff09 $dsdl-version : \"0.5.0\" $import : - VOC2007ClassDom - object-detection meta : dataset_name : \"VOC2007\" sub_dataset_name : \"train\" data : sample-type : ObjectDetectionSample[cdom=VOC2007ClassDom] sample-path : train_samples.json train_samples.json train_samples.json\u9700\u8981\u6211\u4eec\u5199\u811a\u672c\u4ece\u539f\u59cb\u6570\u636e\u96c6\u8f6c\u6362\u6765\uff0c\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684struct\u5bf9\u5e94\uff0c\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"_media_path\" : \"JPEGImages/000001.jpg\" , \"folder\" : \"VOC2007\" , \"source\" : { \"database\" : \"The VOC2007 Database\" , \"annotation\" : \"PASCAL VOC2007\" , \"flickrid\" : \"341012865\" }, \"owner\" :{ \"flickrid\" : \"Fried Camels\" , \"name\" : \"Jinky the Fruit Bat\" }, \"height\" : 640 , \"width\" : 480 , \"depth\" : 3 , \"segmented\" : 0 , \"_objects\" : [ { \"_bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"_category\" : 1 , \"pose\" : \"Left\" , \"truncated\" : 1 , \"difficult\" : 0 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002","title":"Quick start ex3"},{"location":"getting_started/quick_start_ex3/#_1","text":"dsdl get opendatalab/VOC2017 \u8fd9\u91cc\u5c06\u5bf9DSDL\u6807\u6ce8\u8fdb\u884c\u4e0b\u8f7d\uff0c\u4e0b\u8f7d\u540e\u6587\u4ef6\u76ee\u5f55\u5982\u4e0b\uff1a VOC2007-dsdl/ \u251c\u2500\u2500 doms/ \u2502 \u251c\u2500\u2500 object-detection.yaml # struct\u5b9a\u4e49\u6587\u4ef6 \u2502 \u2514\u2500\u2500 VOC2007ClassDom.yaml # VOC\u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u2514\u2500\u2500 test/ # \u6d4b\u8bd5\u96c6 \u251c\u2500\u2500 test.yaml \u2514\u2500\u2500 test_samples.json \u5982\u679c\u5bf9\u539f\u59cb\u6570\u636e\u96c6\u8fdb\u884c\u540c\u6b65\u4e0b\u8f7d\uff0c\u5176\u6587\u4ef6\u76ee\u5f55\u5982\u4e0b\uff1a VOC2007/ # \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001.xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001.jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ...","title":"\u6570\u636e\u96c6\u4e0b\u8f7d"},{"location":"getting_started/quick_start_ex3/#_2","text":"\uff08\u8fd9\u4e00\u6b65\u540e\u7eed\u597d\u50cf\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u6682\u65f6\u6309\u7167github\u4e0a\u7684\u5185\u5bb9\u4fdd\u7559\uff0c\u540e\u7eed\u53ef\u5220\u9664\uff09","title":"\u6570\u636e\u96c6\u89e3\u6790"},{"location":"getting_started/quick_start_ex3/#yamlpython","text":"dsdl parse --yaml demo/coco_demo.yaml","title":"\u89e3\u6790\u5668\u53cd\u5e8f\u5217\u5316Yaml\u6587\u4ef6\u4e3aPython\u4ee3\u7801"},{"location":"getting_started/quick_start_ex3/#_3","text":"\u521b\u5efa\u914d\u7f6e\u6587\u4ef6 config.py \uff0c\u5185\u5bb9\u5982\u4e0b\uff08\u76ee\u524d\u53ea\u652f\u6301\u8bfb\u53d6\u963f\u91cc\u4e91OSS\u6570\u636e\u4e0e\u672c\u5730\u6570\u636e\uff09\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) \u5728 config.py \u4e2d\uff0c\u5217\u4e3e\u4e86\u6240\u6709\u652f\u6301\u7684\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5e76\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u7b49\u4fe1\u606f\uff1a \u672c\u5730\u8bfb\u53d6\uff1a local \u4e2d\u7684\u53c2\u6570 working_dir \uff08\u672c\u5730\u6570\u636e\u6240\u5728\u7684\u76ee\u5f55\uff09 \u963f\u91cc\u4e91OSS\u8bfb\u53d6\uff1a ali_oss \u4e2d\u7684\u53c2\u6570\uff08\u963f\u91cc\u4e91OSS\u7684\u914d\u7f6e access_key_secret , endpoint , access_key_id \uff1b\u6876\u540d\u79f0 bucket_name \uff0c\u6570\u636e\u5728\u6876\u4e2d\u7684\u76ee\u5f55 working_dir \uff09","title":"\u914d\u7f6e\u6587\u4ef6\u4fee\u6539\uff0c\u8bbe\u7f6e\u8bfb\u53d6\u8def\u5f84"},{"location":"getting_started/quick_start_ex3/#_4","text":"\u53ef\u89c6\u5316\u529f\u80fd\u5c55\u793a dsdl view -y <yaml-name>.yaml -c <config.py> -l ali-oss -n 10 -r -v -f Label BBox Attributes \u6bcf\u4e2a\u53c2\u6570\u7684\u610f\u4e49\u4e3a\uff1a \u53c2\u6570\u7b80\u5199 \u53c2\u6570\u5168\u5199 \u53c2\u6570\u89e3\u91ca -y --yaml \u5b9a\u4e49\u6240\u6709samples\u7684yaml\u6587\u4ef6\u7684\u8def\u5f84 -c --config \u914d\u7f6e\u6587\u4ef6\uff08 config.py \uff09\u7684\u8def\u5f84 -l --location \u53ea\u53ef\u4ee5\u6307\u5b9a\u4e3a local \u6216\u662f ali-oss \uff0c\u5206\u522b\u8868\u793a\u8bfb\u53d6\u672c\u5730\u7684\u6570\u636e\u4e0e\u8bfb\u53d6\u963f\u91cc\u4e91\u7684\u6570\u636e -n --num \u52a0\u8f7d\u6570\u636e\u96c6\u7684\u6837\u672c\u6570\u91cf -r --random \u5728\u52a0\u8f7d\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u65f6\u662f\u5426\u968f\u673a\u9009\u53d6\u6837\u672c\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u7684\u8bdd\u5c31\u6309\u987a\u5e8f\u4ece\u5f00\u59cb\u9009\u53d6\u6837\u672c -v --visualize \u662f\u5426\u5c06\u52a0\u8f7d\u7684\u6570\u636e\u8fdb\u884c\u53ef\u89c6\u5316\u5c55\u793a -f --field \u9009\u62e9\u9700\u8981\u8fdb\u884c\u53ef\u89c6\u5316\u7684\u5b57\u6bb5\uff0c\u5982 -f BBox \u8868\u793a\u53ef\u89c6\u5316bbox\uff0c -f Attributes \u8868\u793a\u5bf9\u6837\u672c\u7684attributes\u8fdb\u884c\u53ef\u89c6\u5316\u7b49\u7b49\uff0c\u53ef\u4ee5\u540c\u65f6\u9009\u62e9\u591a\u4e2a\uff0c\u5982 -f Label BBox Attributes -t --task \u53ef\u4ee5\u9009\u62e9\u5f53\u524d\u9700\u8981\u53ef\u89c6\u5316\u7684\u4efb\u52a1\u7c7b\u578b\uff0c\u5982\u679c\u9009\u62e9 -t detection \uff0c\u5219\u7b49\u4ef7\u4e8e -f Label BBox Polygon Attributes","title":"\u6570\u636e\u96c6\u53ef\u89c6\u5316"},{"location":"getting_started/quick_start_ex3/#_5","text":"\u8c03\u7528\u65b9\u6cd5\uff1a dsdl check - y xxx . yaml - c config . py - l ali - oss - t detection - p ./ - o ./ ### -y \u4e3a\u8f93\u5165\u7684yaml\u6587\u4ef6 ### -c \u4e3a\u6570\u636e\u96c6\u7684\u8bfb\u53d6\u914d\u7f6e\uff08\u8bb0\u5f55\u4e86\u6570\u636e\u96c6\u5728\u963f\u91cc\u4e91/\u672c\u5730\u7684\u4f4d\u7f6e\uff09\uff0c\u4e3b\u8981\u5f62\u5f0f\u5982\u4e0b\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) ### -l \u4e3a\u6307\u5b9a\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 ali-oss \u6216 local ### -t \u4e3a\u6307\u5b9a\u5f53\u524dyaml\u7684\u4efb\u52a1\u7c7b\u522b\uff0c\u5f53\u524d\u652f\u6301\u7684\u4efb\u52a1\u7c7b\u522b\u6709\uff08detection\uff0csegmentation\uff0cclassification\uff09 ### -p yaml\u6587\u4ef6\u5bfc\u5165\u7684\u5e93\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84\u5730\u5740 ### -o \u4e3a\u8f93\u51fa\u7684\u6587\u4ef6\u5939\uff0c\u5305\u542b\u56fe\u7247\u548cmd\u6587\u6863\uff0c\u6ce8\u610f\u6253\u5305\u4e0b\u8f7d 2. \u62a5\u544a\u6837\u5f0f\uff1a \u62a5\u544a\u5206\u4e3a3\u4e2a\u90e8\u5206\uff1a parser\u68c0\u67e5\u7ed3\u679c\uff1a\u7ed3\u679c\u5305\u62ec\u4e86parse\u7ed3\u679c\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u5219\u53ef\u4ee5\u67e5\u770b\u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f samples\u5b9e\u4f8b\u5316\u68c0\u67e5\u7ed3\u679c\uff1a\u5176\u4e2d\u62a5\u544a\u8bf4\u660e\u4e86\u5f53\u524d\u6570\u636e\u96c6\u5171\u6709\u6837\u672c\u4e2a\u6570\uff0c\u6b63\u5e38\u6837\u672c\u4e2a\u6570\uff0c\u8b66\u544a\u6837\u672c\u4e2a\u6570\uff0c\u9519\u8bef\u6837\u672c\u4e2a\u6570\uff0c\u5e76\u63d0\u4f9b\u4e86\u5f02\u5e38\u6837\u672c\u7684\u5177\u4f53\u4fe1\u606f\u65e5\u5fd7\u3002 \u53ef\u89c6\u5316\u7ed3\u679c\uff1a\u9700\u8981\u8089\u773c\u89c2\u5bdf\u53ef\u89c6\u5316\u7ed3\u679c\u662f\u5426\u6b63\u786e\uff0c\u6bd4\u5982bbox\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\uff0c\u6807\u7b7e\u5185\u5bb9\u662f\u5426\u6b63\u786e\u7b49\uff0c\u5728\u56fe\u7247\u4e0b\u9762\u5c55\u793a\u4e86\u53ef\u89c6\u5316\u8fc7\u7a0b\u4e2d\u7684\u65e5\u5fd7\u5185\u5bb9\uff0c\u6bd4\u5982\u662f\u53ef\u89c6\u5316\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u4ee5\u53ca\u5931\u8d25\u65e5\u5fd7\u7b49\u3002","title":"\u6570\u636e\u96c6\u5206\u6790"},{"location":"getting_started/quick_start_ex3/#_6","text":"\u4e0eOpenMMDetection\u7684\u5bf9\u63a5\u8bad\u7ec3\u3002","title":"\u6570\u636e\u96c6\u8bad\u7ec3"},{"location":"getting_started/quick_start_ex3/#config","text":"faster_rcnn_r101_fpn_voc2007_dsdl_format.py model = dict ( type = 'FasterRCNN' , backbone = dict ( type = 'ResNet' , depth = 101 , num_stages = 4 , out_indices = ( 0 , 1 , 2 , 3 ), frozen_stages = 1 , norm_cfg = dict ( type = 'BN' , requires_grad = True ), norm_eval = True , style = 'pytorch' , init_cfg = dict ( type = 'Pretrained' , checkpoint = 'torchvision://resnet101' )), neck = dict ( type = 'FPN' , in_channels = [ 256 , 512 , 1024 , 2048 ], out_channels = 256 , num_outs = 5 ), rpn_head = dict ( type = 'RPNHead' , in_channels = 256 , feat_channels = 256 , anchor_generator = dict ( type = 'AnchorGenerator' , scales = [ 8 ], ratios = [ 0.5 , 1.0 , 2.0 ], strides = [ 4 , 8 , 16 , 32 , 64 ]), bbox_coder = dict ( type = 'DeltaXYWHBBoxCoder' , target_means = [ 0.0 , 0.0 , 0.0 , 0.0 ], target_stds = [ 1.0 , 1.0 , 1.0 , 1.0 ]), loss_cls = dict ( type = 'CrossEntropyLoss' , use_sigmoid = True , loss_weight = 1.0 ), loss_bbox = dict ( type = 'L1Loss' , loss_weight = 1.0 )), roi_head = dict ( type = 'StandardRoIHead' , bbox_roi_extractor = dict ( type = 'SingleRoIExtractor' , roi_layer = dict ( type = 'RoIAlign' , output_size = 7 , sampling_ratio = 0 ), out_channels = 256 , featmap_strides = [ 4 , 8 , 16 , 32 ]), bbox_head = dict ( type = 'Shared2FCBBoxHead' , in_channels = 256 , fc_out_channels = 1024 , roi_feat_size = 7 , num_classes = 20 , bbox_coder = dict ( type = 'DeltaXYWHBBoxCoder' , target_means = [ 0.0 , 0.0 , 0.0 , 0.0 ], target_stds = [ 0.1 , 0.1 , 0.2 , 0.2 ]), reg_class_agnostic = False , loss_cls = dict ( type = 'CrossEntropyLoss' , use_sigmoid = False , loss_weight = 1.0 ), loss_bbox = dict ( type = 'L1Loss' , loss_weight = 1.0 ))), train_cfg = dict ( rpn = dict ( assigner = dict ( type = 'MaxIoUAssigner' , pos_iou_thr = 0.7 , neg_iou_thr = 0.3 , min_pos_iou = 0.3 , match_low_quality = True , ignore_iof_thr =- 1 ), sampler = dict ( type = 'RandomSampler' , num = 256 , pos_fraction = 0.5 , neg_pos_ub =- 1 , add_gt_as_proposals = False ), allowed_border =- 1 , pos_weight =- 1 , debug = False ), rpn_proposal = dict ( nms_pre = 2000 , max_per_img = 1000 , nms = dict ( type = 'nms' , iou_threshold = 0.7 ), min_bbox_size = 0 ), rcnn = dict ( assigner = dict ( type = 'MaxIoUAssigner' , pos_iou_thr = 0.5 , neg_iou_thr = 0.5 , min_pos_iou = 0.5 , match_low_quality = False , ignore_iof_thr =- 1 ), sampler = dict ( type = 'RandomSampler' , num = 512 , pos_fraction = 0.25 , neg_pos_ub =- 1 , add_gt_as_proposals = True ), pos_weight =- 1 , debug = False )), test_cfg = dict ( rpn = dict ( nms_pre = 1000 , max_per_img = 1000 , nms = dict ( type = 'nms' , iou_threshold = 0.7 ), min_bbox_size = 0 ), rcnn = dict ( score_thr = 0.05 , nms = dict ( type = 'nms' , iou_threshold = 0.5 ), max_per_img = 100 ))) checkpoint_config = dict ( interval = 1 ) file_client_args = dict ( backend = 'petrel' ) log_config = dict ( interval = 50 , hooks = [ dict ( type = 'TextLoggerHook' )]) custom_hooks = [ dict ( type = 'NumClassCheckHook' )] dist_params = dict ( backend = 'nccl' ) log_level = 'INFO' load_from = None resume_from = None workflow = [( 'train' , 1 )] opencv_num_threads = 0 mp_start_method = 'fork' auto_scale_lr = dict ( enable = True , base_batch_size = 16 ) optimizer = dict ( type = 'SGD' , lr = 0.02 , momentum = 0.9 , weight_decay = 0.0001 ) optimizer_config = dict ( grad_clip = None ) lr_config = dict ( policy = 'step' , warmup = 'linear' , warmup_iters = 500 , warmup_ratio = 0.001 , step = [ 8 , 11 ]) runner = dict ( type = 'EpochBasedRunner' , max_epochs = 12 ) num_classes = 20 dataset_type = 'DSDLDetectionDataset' img_norm_cfg = dict ( mean = [ 123.675 , 116.28 , 103.53 ], std = [ 58.395 , 57.12 , 57.375 ], to_rgb = True ) # \u4fee\u6539data_root\u4e3as3\u8def\u5f84 train_pipeline = [ dict ( type = 'LoadImageFromDSDL' , file_client_args = file_client_args , data_root = 's3://open_dataset_original/PASCALVOC2007/public_datalist_17/VOCdevkit/VOC2007/' ), dict ( type = 'LoadAnnotations' , with_bbox = True ), dict ( type = 'Resize' , img_scale = ( 1333 , 800 ), keep_ratio = True ), dict ( type = 'RandomFlip' , flip_ratio = 0.5 ), dict ( type = 'Normalize' , mean = [ 123.675 , 116.28 , 103.53 ], std = [ 58.395 , 57.12 , 57.375 ], to_rgb = True ), dict ( type = 'Pad' , size_divisor = 32 ), dict ( type = 'DefaultFormatBundle' ), dict ( type = 'Collect' , keys = [ 'img' , 'gt_bboxes' , 'gt_labels' ]) ] # \u4fee\u6539data_root\u4e3as3\u8def\u5f84 test_pipeline = [ dict ( type = 'LoadImageFromDSDL' , file_client_args = file_client_args , data_root = 's3://open_dataset_original/PASCALVOC2007/public_datalist_17/VOCdevkit/VOC2007/' ), dict ( type = 'MultiScaleFlipAug' , img_scale = ( 1333 , 800 ), flip = False , transforms = [ dict ( type = 'Resize' , keep_ratio = True ), dict ( type = 'RandomFlip' ), dict ( type = 'Normalize' , mean = [ 123.675 , 116.28 , 103.53 ], std = [ 58.395 , 57.12 , 57.375 ], to_rgb = True ), dict ( type = 'Pad' , size_divisor = 32 ), dict ( type = 'ImageToTensor' , keys = [ 'img' ]), dict ( type = 'Collect' , keys = [ 'img' ]) ]) ] # \u4e3b\u8981\u4fee\u6539\u8fd9\u4e2a\u8def\u5f84 train_yaml_07 = '/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/train/train.yaml' val_yaml_07 = '/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/val/val.yaml' test_yaml = '/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/test/test.yaml' ignore_cfg = dict ( Continue = dict (), Ignore = dict ( difficult = ( True , 1 ))) dsdl_library_path = \"/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/train/\" local = dict ( type = \"LocalFileReader\" , working_dir = \"/mnt/lustre/ouyanglinke/mmdetection/work_dir/VOC2007_dsdl/\" ) data = dict ( samples_per_gpu = 1 , workers_per_gpu = 32 , train = dict ( type = 'DSDLDetectionDataset' , ann_file = train_yaml_07 , location_config = local , pipeline = train_pipeline , dsdl_library_path = dsdl_library_path ), val = dict ( type = 'DSDLDetectionDataset' , ann_file = val_yaml_07 , location_config = local , pipeline = test_pipeline , dsdl_library_path = dsdl_library_path ), test = dict ( type = 'DSDLDetectionDataset' , ann_file = test_yaml , location_config = local , pipeline = test_pipeline , dsdl_library_path = dsdl_library_path )) evaluation = dict ( interval = 1 , metric = 'mAP' ) gpu_ids = [ 0 ] work_dir = './work_dirs/voc_dsdl_test' auto_resume = False","title":"\u4fee\u6539config\u6587\u4ef6"},{"location":"getting_started/quick_start_ex3/#_7","text":"\u6253\u5f00terminal\u8fd0\u884c\uff1a conda activate openmmlab # \u5b89\u88c5\u4e86dsdl\u548cmmdetection\u7684conda\u73af\u5883 srun -p bigdata_s2 --quotatype = auto --gres = gpu:1 python tools/train.py configs/dsdl_detection/faster_rcnn_r101_fpn_voc2007_dsdl_format.py \u6700\u7ec8\u7ed3\u679c\u7cbe\u5ea6\uff1aAP50: 0.6680, mAP: 0.6680","title":"\u5f00\u59cb\u8bad\u7ec3"},{"location":"getting_started/quick_start_ex3/#_8","text":"","title":"\u8865\u5145\u5185\u5bb9"},{"location":"getting_started/quick_start_ex3/#dsdl","text":"DSDL\u6570\u636e\u96c6\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u91cd\u8981\u7684\u6587\u4ef6\uff1a struct\u7684\u5b9a\u4e49\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u6587\u4ef6\u540d\u4e3aobject-detetction.yaml\uff09\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5bf9struct\u505a\u4e00\u4e2a\u660e\u786e\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u6709sample\u7684\u7ed3\u6784\u4f53\u548c\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u7b49\uff0c\u9700\u6307\u660e\u5305\u542b\u4e86\u54ea\u4e9bfield\uff0c\u6bcf\u4e2afield\u7684\u7c7b\u578b\u3002 \u7c7b\u522b\u57df\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e3aVOC2007ClassDom.yaml\uff09\uff1a\u91cc\u9762\u5305\u542b\u4e86\u7c7b\u522b\u5217\u8868\uff0c\u5bf9\u5e94category\u7684\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\u6392\u5e8f\uff09 samples\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5206\u522b\u5206\u4e3atrain.yaml\u548ctrain_samples.json) train.yaml\u4e3b\u8981\u662f\u6307\u660e\u5f15\u7528\u54ea\u4e2astruct\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6587\u4ef6\uff0c\u5e76\u4e14\u6307\u660e\u6570\u636e\u7c7b\u578b\u548c\u5b58\u653e\u8def\u5f84\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9bmeta\u4fe1\u606f train_samples.json\u91cc\u4fdd\u5b58\u4e86\u5b9e\u9645\u7684samples\u4fe1\u606f\uff0c\u5176\u7ec4\u7ec7\u7ed3\u6784\u5fc5\u987b\u548c\u4e4b\u524d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u5339\u914d","title":"DSDL\u6587\u4ef6\u89e3\u91ca"},{"location":"getting_started/quick_start_ex3/#object-detectionyaml","text":"\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5b9a\u4e49struct\u7684yaml\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u540d\u79f0\u53ef\u4ee5\u6839\u636e\u539f\u59cb\u6570\u636e\u96c6\u8fdb\u884c\u4e00\u4e2a\u4fee\u6539\u548c\u9002\u5e94\uff08\u5c3d\u91cf\u4fdd\u7559\u539f\u59cb\u6570\u636e\u96c6\u7684\u5b57\u6bb5\u540d\u79f0\u548c\u7ed3\u6784\uff09\uff0c\u4f46\u662f\u5b57\u6bb5\u7c7b\u578b\u4e00\u5b9a\u8981\u4f7f\u7528\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\uff08\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\u8be6\u89c1\uff1ahttps://opendatalab.github.io/dsdl-docs/zh/lang/basic_types/\uff09 $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : _bbox : BBox _category : Label[dom=$cdom] pose : Str truncated : Bool difficult : Bool ObjectDetectionSample : $def : struct $params : [ \"cdom\" ] $fields : media_path : Image folder : Str source : Dict owner : Dict height : Int width : Int depth : Int segmented : Bool _objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\u53ca\u5bf9\u5e94\u5173\u7cfb\uff1a \uff08\u6ca1\u6709\u63d0\u5230\u7684\u5b57\u6bb5\u90fd\u662f\u4e0e\u539f\u6570\u636e\u96c6\u540c\u540d\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u53e6\u5916\uff0c\u547d\u540d\u4e2d\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u4e00\u822c\u90fd\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u5373\u539f\u6570\u636e\u96c6\u6ca1\u6709\u7684\u5b57\u6bb5\uff09 \u5728ObjectDetectionSample\u4e2d\uff1a media_path\uff1a\u8be5\u5b57\u6bb5\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u7528\u4e8e\u50a8\u5b58\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u4e3b\u8981\u4ece\u539f\u59cb\u6570\u636e\u96c6\u7684filename\u5b57\u6bb5\u8f6c\u5316\u800c\u6765 _objects\uff1a\u8be5\u5b57\u6bb5\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684object\u5b57\u6bb5\uff0c\u4ee5List\u7684\u5f62\u5f0f\u5b58\u50a8\u5177\u4f53bounding box\u7684\u6807\u6ce8\u4fe1\u606f source\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684source\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684source\u5b57\u6bb5\u4e0b\u7684database\u3001annotation\u3001image\u3001flickerid\u5b57\u6bb5 owner\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684owner\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684owner\u5b57\u6bb5\u4e0b\u7684flickerid\u548cname\u5b57\u6bb5 width\u3001height\u3001depth\uff1a\u662f\u539f\u59cb\u6570\u636e\u96c6\u7684size\u5b57\u6bb5\u4e0b\u7684 \u5728LocalObjectEntry\u4e2d\uff1a _bbox\uff1a\u5bf9\u5e94\u539f\u6570\u636e\u96c6\u7684bndbox\u5b57\u6bb5\uff0c\u4f46\u8f6c\u5316\u4e3abbox\u6807\u51c6\uff0c\u5373[x,y,w,h] _category\uff1a\u662f\u8be5\u76ee\u6807\u7684\u7c7b\u522b\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u53f7\uff0c\u5bf9\u5e94\u7684\u662f\u539f\u6570\u636e\u96c6\u7684name\u5b57\u6bb5\uff0c\u7c7b\u522b\u6807\u53f7\u53ef\u4ee5\u53c2\u89c1\u4e0b\u9762\u7684VOC2007ClassDom.yaml","title":"object-detection.yaml"},{"location":"getting_started/quick_start_ex3/#voc2007classdomyaml","text":"\u8fd9\u662f\u4e00\u4e2a\u7c7b\u522b\u5b9a\u4e49\u7684Dom\u6587\u6863\u3002 $dsdl-version : \"0.5.0\" VOC2007ClassDom : $def : class_domain classes : - aeroplane # \u5bf9\u5e94category\u4e3a1 - bicycle # \u5bf9\u5e94category\u4e3a2 - bird - boat - bottle - bus - car - cat - chair - cow - diningtable - dog - horse - motorbike - person - pottedplant - sheep - sofa - train - tvmonitor","title":"VOC2007ClassDom.yaml"},{"location":"getting_started/quick_start_ex3/#trainyaml","text":"\u8fd9\u4e2a\u6587\u6863\u5f15\u7528\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u4e24\u4e2a\u6587\u6863\uff0c\u5e76\u4e14\u6307\u5f15\u4e86\u5177\u4f53\u7684sample\u8def\u5f84\uff08test.yaml\u548cval.yaml\u7c7b\u4f3c\uff0c\u53ea\u662f\u4fee\u6539\u5bf9\u5e94sample-path\u548csub_dataset_name\u5b57\u6bb5\uff09 $dsdl-version : \"0.5.0\" $import : - VOC2007ClassDom - object-detection meta : dataset_name : \"VOC2007\" sub_dataset_name : \"train\" data : sample-type : ObjectDetectionSample[cdom=VOC2007ClassDom] sample-path : train_samples.json","title":"train.yaml"},{"location":"getting_started/quick_start_ex3/#train_samplesjson","text":"train_samples.json\u9700\u8981\u6211\u4eec\u5199\u811a\u672c\u4ece\u539f\u59cb\u6570\u636e\u96c6\u8f6c\u6362\u6765\uff0c\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684struct\u5bf9\u5e94\uff0c\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"_media_path\" : \"JPEGImages/000001.jpg\" , \"folder\" : \"VOC2007\" , \"source\" : { \"database\" : \"The VOC2007 Database\" , \"annotation\" : \"PASCAL VOC2007\" , \"flickrid\" : \"341012865\" }, \"owner\" :{ \"flickrid\" : \"Fried Camels\" , \"name\" : \"Jinky the Fruit Bat\" }, \"height\" : 640 , \"width\" : 480 , \"depth\" : 3 , \"segmented\" : 0 , \"_objects\" : [ { \"_bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"_category\" : 1 , \"pose\" : \"Left\" , \"truncated\" : 1 , \"difficult\" : 0 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002","title":"train_samples.json"},{"location":"tutorials/dataset_analysis/","text":"\u5185\u5bb9\u5f85\u66f4\u65b0\u3002","title":"Dataset analysis"},{"location":"tutorials/dataset_distribution/","text":"\u5185\u5bb9\u5f85\u66f4\u65b0\u3002","title":"Dataset distribution"},{"location":"tutorials/dataset_download/","text":"\u6570\u636e\u96c6\u51c6\u5907 OpenDataLab\u5b98\u7f51\u6536\u96c6\u4e86\u6d77\u91cf\u516c\u5f00\u6570\u636e\u96c6\uff0c\u5bf9\u4e8e\u5927\u90e8\u5206\u6570\u636e\u96c6\u7528\u6237\u53ef\u4ee5\u5728\u8be5\u7f51\u7ad9\u76f4\u63a5\u4e0b\u8f7d\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u9488\u5bf9\u4e3b\u6d41CV\u6570\u636e\u96c6\u90fd\u63d0\u4f9b\u4e86DSDL\u89c4\u8303\u6807\u6ce8\uff0c\u57fa\u4e8e\u539f\u59cb\u516c\u5f00\u6570\u636e\u96c6 \u5a92\u4f53\u6587\u4ef6 \u548c DSDL\u6807\u6ce8\u6587\u4ef6 \uff0c\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u5730\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u3001\u63a8\u7406\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u914d\u5957\u7684\u5de5\u5177\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u6790\u3001\u5904\u7406\u3002 \u6570\u636e\u96c6\u51c6\u5907\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u6570\u636e\u96c6\u4e0b\u8f7d\uff1a\u53ef\u4ee5\u5728OpenDataLab\u5b98\u7f51\u8fdb\u884c\u4e0b\u8f7d\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528odl\u547d\u4ee4\u8fdb\u884c\u4e0b\u8f7d\u3002\u5177\u4f53\u8bf7\u53c2\u8003 \u6570\u636e\u96c6\u4e0b\u8f7d \u90e8\u5206\u3002 \u6570\u636e\u96c6\u7ec4\u7ec7\uff1a\u6570\u636e\u96c6\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u8bf7\u7528\u6237\u81ea\u884c\u9605\u8bfbREADME.md\uff0c\u53c2\u9605README\u4e2d\u7684\u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u786e\u8ba4\u539f\u59cb\u6570\u636e\u96c6\u4e0b\u8f7d\u5b8c\u6574\u3002\u53e6\u5916\uff0c\u6709\u90e8\u5206\u6570\u636e\u96c6\u5728dsdl\u76ee\u5f55\u4e0b\u6709tools\u6587\u4ef6\u5939\uff08\u5305\u542bprepare.py\uff09\uff0c\u8bf7\u6309\u7167README\u6307\u793a\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u8f6c\u6362\uff0c\u4ee5\u4fdd\u8bc1DSDL\u6b63\u5e38\u4f7f\u7528\u3002\u5177\u4f53\u4f7f\u7528\u8bf7\u53c2\u8003 \u6570\u636e\u96c6\u7ec4\u7ec7 \u90e8\u5206\u3002 \u6570\u636e\u96c6\u914d\u7f6e\uff1a\u7528\u6237\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\uff0c\u6307\u5b9aconfig.py\u6587\u4ef6\u4e2d\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\u548c\u6839\u76ee\u5f55\u3002\u5177\u4f53\u4f7f\u7528\u8bf7\u53c2\u8003 \u6570\u636e\u96c6\u914d\u7f6e \u90e8\u5206\u3002 1. \u6570\u636e\u96c6\u4e0b\u8f7d \u6839\u636e\uff081\uff09\u662f\u5426\u63d0\u4f9b\u539f\u59cb\u6570\u636e\u96c6\u4e0b\u8f7d\uff1b\uff082\uff09\u662f\u5426\u63d0\u4f9bDSDL\u6807\u6ce8\u4e0b\u8f7d\uff0c\u6211\u4eec\u5c06\u6570\u636e\u96c6\u4e0b\u8f7d\u5206\u4e3a\u56db\u7c7b\u60c5\u5f62\u8fdb\u884c\u8ba8\u8bba\u3002 1.1 \u540c\u65f6\u63d0\u4f9b\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\u548cDSDL\u6807\u6ce8\u6587\u4ef6 \u5728\u539f\u59cb\u6570\u636e\u96c6\u5141\u8bb8\u5206\u53d1\uff0c\u4e14DSDL\u6807\u6ce8\u6587\u4ef6\u5df2\u652f\u6301\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u53ef\u4ee5\u540c\u65f6\u4e0b\u8f7d\u5230\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\u548cDSDL\u6807\u6ce8\u6587\u4ef6\u3002 CLI\u547d\u4ee4\u5982\u4e0b\uff1a odl get <dataset_name> \u6ce8\u610f\u8fd9\u91cc\u7684 <dataset_name> \u9700\u8981\u4e0e OpenDataLab\u5b98\u7f51 \u4e0a\u7684\u540d\u5b57\u5bf9\u5e94\u3002\u7528\u6237\u53ef\u5728\u5b98\u7f51\u641c\u7d22\u76f8\u5173\u6570\u636e\u96c6\uff0c\u5e76\u5728\u6570\u636e\u96c6\u8be6\u60c5\u9875\u9762\u7684CLI\u90e8\u5206\u83b7\u53d6\u5230\u6570\u636e\u96c6\u540d\u79f0\uff0c\u6bd4\u5982\uff1a odl get CIFAR-10 \u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u8bf7\u7528\u6237\u81ea\u884c\u89e3\u538bdsdl\u538b\u7f29\u5305\uff0c\u7ec4\u7ec7\u540e\u7684\u6570\u636e\u96c6\u76ee\u5f55\u5982\u4e0b\uff1a <root-path> \u251c\u2500\u2500 compressed # \u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u7684\u6587\u4ef6\u5939 \u2502 \u2514\u2500\u2500 ... # \u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305 \u2514\u2500\u2500 dsdl # \u89e3\u538b\u540e\u7684DSDL\u6807\u6ce8\u6587\u4ef6\u5939 \u251c\u2500\u2500 defs \u2502 \u251c\u2500\u2500 task-def.yaml # \u4efb\u52a1\u7c7b\u578b\u7684struct\u5b9a\u4e49\u6587\u4ef6 \u2502 \u2514\u2500\u2500 class-dom.yaml # \u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 set-train # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 set-val # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u251c\u2500\u2500 set-test # \u6d4b\u8bd5\u96c6 \u2502 \u251c\u2500\u2500 test.yaml \u2502 \u2514\u2500\u2500 test_samples.json \u251c\u2500\u2500 tools # \u5982\u679c\u6570\u636e\u96c6\u4e0d\u9700\u8981\u989d\u5916\u7684\u811a\u672c\u652f\u6301\uff0c\u5219\u4e0d\u5b58\u5728tools\u6587\u4ef6\u5939 \u2502 \u2514\u2500\u2500 prepare.py # \u5305\u62ec\u89e3\u538b\u3001\u8f6c\u4e2d\u95f4\u683c\u5f0f\uff08\u5982\u679c\u9700\u8981\u7684\u8bdd\uff09\u548c\u751f\u6210dsdl\u76ee\u5f55 \u251c\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6 \u2514\u2500\u2500 README.md # \u5173\u4e8e\u6570\u636e\u96c6\u4e0b\u8f7d\u3001\u4f7f\u7528\u3001\u914d\u7f6e\u7684\u6559\u7a0b \u5176\u4e2d\uff1a defs\u6587\u4ef6\u5939\u548cset-xxx\u6587\u4ef6\u5939\u4e3b\u8981\u5305\u542bDSDL\u6570\u636e\u96c6\u7684\u5b9a\u4e49\u6587\u4ef6\u3001\u7c7b\u522b\u57df\u6587\u4ef6\u548c\u6570\u636e\u6587\u4ef6\u7b49\uff08\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u53c2\u9605 \u81ea\u5b9a\u4e49DSDL\u6570\u636e\u96c6 \uff09\uff1b config.py\u9700\u8981\u4fee\u6539\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\u548c\u8def\u5f84\uff0c\u5177\u4f53\u8bf7\u67e5\u770b \u6570\u636e\u96c6\u914d\u7f6e \u90e8\u5206\u3002 \u90e8\u5206\u6570\u636e\u96c6\u5b58\u5728tools\u6587\u4ef6\u5939\uff0c\u63d0\u4f9b\u4e86prepare.py\u5de5\u5177\uff0c\u80fd\u591f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u89e3\u538b\u548c\u6807\u51c6\u5316\u64cd\u4f5c\uff0c\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u8bf7\u67e5\u770b\u6570\u636e\u96c6\u7ec4\u7ec7\u4e2d\u7684 \u6267\u884c\u89e3\u538b\u5e76\u8f6c\u6362 \u90e8\u5206\u7684\u547d\u4ee4\u3002 \u6ce8\u610f\uff1a\u5982\u679cdsdl\u4e0b\u5b58\u5728tools\u6587\u4ef6\u5939\uff0c\u8bf7\u7528\u6237\u53c2\u8003 \u6570\u636e\u96c6\u7ec4\u7ec7 \u90e8\u5206\u5bf9\u539f\u59cb\u6570\u636e\u96c6\u6267\u884c\u89e3\u538b\u548c\u6807\u51c6\u5316\u64cd\u4f5c\u3002 1.2 \u4ec5\u63d0\u4f9bDSDL\u6807\u6ce8\u6587\u4ef6 \u5982\u679c\u539f\u59cb\u6570\u636e\u96c6\u4e0d\u5141\u8bb8\u5206\u53d1\uff0c\u800cDSDL\u5df2\u652f\u6301\uff0c\u7528\u6237\u9700\u8981\u81ea\u884c\u4e0b\u8f7d\u539f\u59cb\u6570\u636e\u96c6\u3002 \u547d\u4ee4\u5982\u4e0b\uff1a odl get <dataset_name> \u4e0b\u8f7d\u5230\u7684\u6570\u636e\u96c6\u5c06\u53ea\u6709dsdl\u6587\u4ef6\u5939\uff0c\u800c\u4e0d\u5305\u542b\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\u3002\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u4e0b\u8f7d\u6570\u636e\u96c6\u5e76\u89e3\u538b\uff0c\u8bf7\u4fdd\u8bc1\u539f\u59cb\u6570\u636e\u96c6\u7684\u76ee\u5f55\u683c\u5f0f\u4e0eREADME\u4e2d\u5c55\u793a\u7684\u539f\u59cb\u6570\u636e\u96c6\u76ee\u5f55\u683c\u5f0f\u4e00\u81f4\u3002\u901a\u8fc7\u4fee\u6539config.py\u4e2d\u7684\u8def\u5f84\uff0c\u6765\u6307\u5b9a\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\u7684\u5b58\u653e\u4f4d\u7f6e\u3002\u6ce8\u610f\uff0c\u5982\u679cdsdl\u76ee\u5f55\u4e0b\u5b58\u5728tools\u6587\u4ef6\u5939\uff0c\u8bf7\u53c2\u8003\u6570\u636e\u96c6\u7ec4\u7ec7\u4e2d \u8df3\u8fc7\u89e3\u538b \u7684\u4e24\u4e2a\u547d\u4ee4\u6765\u6267\u884c\u5bf9\u539f\u59cb\u6570\u636e\u96c6\u7684\u6807\u51c6\u5316\u64cd\u4f5c\u3002 1.3 \u4ec5\u63d0\u4f9b\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u548c\u6807\u6ce8\u6587\u4ef6 OpenDataLab\u5b98\u7f51 \u4e0a\u5141\u8bb8\u5206\u53d1\u7684\u6570\u636e\u96c6\uff0c\u76ee\u524d\u5c1a\u6709\u90e8\u5206\u6682\u672a\u652f\u6301DSDL\u6807\u51c6\u5316\u6807\u6ce8\uff0c\u4f46\u662f\u7528\u6237\u4ecd\u7136\u53ef\u4ee5\u4e0b\u8f7d\u5230\u539f\u59cb\u6570\u636e\u96c6\u7684\u5a92\u4f53\u548c\u6807\u6ce8\u6587\u4ef6\u3002 \u547d\u4ee4\u5982\u4e0b\uff1a odl get <dataset_name> \u4e0b\u8f7d\u5230\u7684\u6570\u636e\u96c6\u5c06\u53ea\u6709\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\uff0c\u800c\u4e0d\u5305\u542bdsdl\u6587\u4ef6\u5939\u3002 \u7528\u6237\u5982\u679c\u9700\u8981\u81ea\u884c\u5c06\u5176\u5b9a\u4e49\u4e3aDSDL\u6570\u636e\u96c6\uff0c\u4ee5\u4fbf\u4f7f\u7528ODL\u5de5\u5177\u94fe\u76f8\u5173\u529f\u80fd\u548cOpenMMLab\u8bad\u7ec3\uff0c\u8bf7\u53c2\u9605 \u81ea\u5b9a\u4e49DSDL\u6570\u636e\u96c6 \u3002 1.4 \u4e0d\u63d0\u4f9b\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\u548cDSDL\u6807\u6ce8\u6587\u4ef6 \u5982\u679c\u5f53\u524d\u6570\u636e\u96c6\u5728 OpenDataLab\u5b98\u7f51 \u4e0a\u6682\u4e0d\u63d0\u4f9b\u4e0b\u8f7d\uff0c\u4e14\u5c1a\u672a\u652f\u6301DSDL\u6807\u51c6\u5316\u6807\u6ce8\uff0c\u7528\u6237\u9700\u81ea\u884c\u5230\u6570\u636e\u96c6\u5b98\u7f51\u8fdb\u884c\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\u548c\u6807\u6ce8\u6587\u4ef6\u4e0b\u8f7d\u3002 \u53e6\u5916\uff0c\u7528\u6237\u5982\u679c\u9700\u8981\u81ea\u884c\u5c06\u5176\u5b9a\u4e49\u4e3aDSDL\u6570\u636e\u96c6\uff0c\u4ee5\u4fbf\u4f7f\u7528ODL\u5de5\u5177\u94fe\u76f8\u5173\u529f\u80fd\u548cOpenMMLab\u8bad\u7ec3\uff0c\u8bf7\u53c2\u9605 \u81ea\u5b9a\u4e49DSDL\u6570\u636e\u96c6 \u3002 2. \u6570\u636e\u96c6\u7ec4\u7ec7 \u7528\u6237\u4e0b\u8f7d\u597d\u6570\u636e\u96c6\u540e\uff0c\u8bf7\u81ea\u884c\u89e3\u538bdsdl\u538b\u7f29\u5305\uff0c\u5e76\u9605\u8bfbREADME\uff0c\u6839\u636e\u662f\u5426\u9700\u8981\u7528\u6237\u8fd0\u884ctools/prepare.py\uff0c\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a DSDL\u4e0e\u539f\u59cb\u6570\u636e\u96c6\u53ef\u4ee5\u76f4\u63a5\u5339\u914d \uff1adsdl\u76ee\u5f55\u4e0b\u4e0d\u5305\u542btools\u6587\u4ef6\u5939\uff0cREADME\u4e2d\u4e0d\u5305\u542b\u201cprepare the dataset\u201d\u6a21\u5757\u5185\u5bb9\uff0c\u8bf7\u7528\u6237\u81ea\u884c\u89e3\u538b\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\uff0c\u5373\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528DSDL\u6570\u636e\u96c6 \u9700\u8981\u8fd0\u884cprepare.py\u5bf9\u6570\u636e\u96c6\u505a\u9884\u5904\u7406 \uff1adsdl\u76ee\u5f55\u4e0b\u5305\u542btools\u6587\u4ef6\u5939\uff0cREADME\u4e2d\u5305\u542b\u201cprepare the dataset\u201d\u6a21\u5757\u5185\u5bb9\uff0c\u8bf7\u53c2\u9605 2.2\u5c0f\u8282 \u9009\u62e9\u9002\u5408\u7684CLI\u547d\u4ee4\u8fd0\u884cprepare.py 2.1 DSDL\u4e0e\u539f\u59cb\u6570\u636e\u96c6\u53ef\u4ee5\u76f4\u63a5\u5339\u914d \u8fd9\u7c7b\u6570\u636e\u96c6\u7684dsdl\u76ee\u5f55\u4e0b\u4e0d\u5305\u542btools\u6587\u4ef6\u5939\uff0c\u5e76\u4e14\u5176README\u4e2d\u4e0d\u5305\u542b\u201cprepare the dataset\u201d\u6a21\u5757\u3002\u8bf7\u7528\u6237\u81ea\u884c\u89e3\u538b\u539f\u59cb\u6570\u636e\u96c6\u548cDSDL\u6587\u4ef6\u5939\uff0c\u5e76\u4fdd\u8bc1\u5176\u76ee\u5f55\u7ed3\u6784\u4e0eREADME\u4e2d\u5c55\u793a\u7684\u201c\u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u201d\u4e00\u81f4\uff0c\u5373\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528DSDL\u6807\u51c6\u5316\u6570\u636e\u96c6\u3002README\u5185\u5bb9\u5982\u4e0b\uff1a \u4e0d\u5305\u542b\u201cprepare the dataset\u201d\u6a21\u5757\u7684README # Data Set Description Language(DSDL) for [dataset_name] dataset ## Data Structure Please make sure the folder structure of prepared dataset is organized as followed: <dataset_root> \u251c\u2500\u2500 ... # \u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784 The folder structure of dsdl annotation is organized as followed: <dataset_root> \u251c\u2500\u2500 ... # dsdl\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784 ## config.py You can load your dataset from local or oss. From local: local = dict( type=\"LocalFileReader\", working_dir=\"the root path of the prepared dataset\", ) Please change the 'working_dir' to the path of your prepared dataset where media data can be found, for example: \"`<root>`/dataset_name/prepared\". From oss: ali_oss = dict( type=\"AliOSSFileReader\", access_key_secret=\"your secret key of aliyun oss\", endpoint=\"your endpoint of aliyun oss\", access_key_id=\"your access key of aliyun oss\", bucket_name=\"your bucket name of aliyun oss\", working_dir=\"the prefix of the prepared dataset within the bucket\") Please change the 'access_key_secret', 'endpoint', 'access_key_id', 'bucket_name' and 'working_dir', e.g. if the full path of your prepared dataset is \"oss://bucket_name/dataset_name/prepared\", then the working_dir should be \"dataset_name/prepared\". ## Related source: 1. Get more information about DSDL: [dsdl-docs](https://opendatalab.github.io/dsdl-docs/) 2. DSDL-SDK official repo: [dsdl-sdk](https://github.com/opendatalab/dsdl-sdk/) 3. Get more dataset: [opendatalab](https://opendatalab.com/) 2.2 \u9700\u8981\u8fd0\u884cprepare.py\u5bf9\u6570\u636e\u96c6\u505a\u9884\u5904\u7406 \u8fd9\u7c7b\u6570\u636e\u96c6\u7684dsdl\u76ee\u5f55\u4e0b\u5305\u542btools\u6587\u4ef6\u5939\uff0c\u9700\u8981\u8fd0\u884ctools/prepare.py\u5c06\u6570\u636e\u96c6\u8f6c\u6362\u4e3aDSDL\u6807\u51c6\u540e\uff08\u540e\u6587\u5c06\u4f1a\u8be6\u8ff0\u5982\u4f55\u8fd0\u884c\u8be5\u4ee3\u7801\uff09\uff0c\u624d\u80fd\u6b63\u5e38\u4f7f\u7528DSDL\u6807\u51c6\u5316\u6570\u636e\u96c6\u3002 \u6ce8\u610f\uff1a\u5728\u8fd0\u884ctools/prepare.py\u4e4b\u524d\uff0c\u7528\u6237\u9700\u8981 \u90e8\u7f72dsdl-sdk \u3002\u53e6\u5916\uff0c\u90e8\u5206\u6570\u636e\u96c6\u7684tools/prepare.py\u53ef\u80fd\u8fd8\u9700\u8981\u5b89\u88c5\u4e00\u4e9b\u5176\u4ed6\u7684python\u4f9d\u8d56\u5305\u3002 \u8fd9\u7c7b\u6570\u636e\u96c6\u7684README\u5185\u5bb9\u5982\u4e0b\uff1a \u5305\u542b\u201cprepare the dataset\u201d\u6a21\u5757\u7684README # Data Set Description Language(DSDL) for [dataset_name] dataset ## prepare the dataset To make sure the DSDL dataset for [task_name] run successfully, the tools/prepare.py should be executed. For this dataset, the following step will be selected to execute: - decompress - prepare dataset and generate DSDL annotation There are four usage scenarios: ### decompress, convert python tools/prepare.py <path_to_the_compressed_dataset_folder> ### decompress, copy and convert python tools/prepare.py -c <path_to_the_compressed_dataset_folder> ### (already decompressed) copy and convert python tools/prepare.py -d -c <path_to_the_decompressed_dataset_folder> ### (already decompressed) convert, directly overwrite python tools/prepare.py -d <path_to_the_decompressed_dataset_folder> For more messages, see [Dataset Prepare Section](https://opendatalab.github.io/dsdl-docs/tutorials/dataset_download/) in DSDL DOC, or use the help option: python tools/prepare.py --help ## Data Structure Please make sure the folder structure of prepared dataset is organized as followed: <dataset_root> \u251c\u2500\u2500 ... # \u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784 The folder structure of dsdl annotation for [task_name] is organized as followed: <dataset_root> \u251c\u2500\u2500 ... # dsdl\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784 ## config.py You can load your dataset from local or oss. From local: local = dict( type=\"LocalFileReader\", working_dir=\"the root path of the prepared dataset\", ) Please change the 'working_dir' to the path of your prepared dataset where media data can be found, for example: \"`<root>`/dataset_name/prepared\". From oss: ali_oss = dict( type=\"AliOSSFileReader\", access_key_secret=\"your secret key of aliyun oss\", endpoint=\"your endpoint of aliyun oss\", access_key_id=\"your access key of aliyun oss\", bucket_name=\"your bucket name of aliyun oss\", working_dir=\"the prefix of the prepared dataset within the bucket\") Please change the 'access_key_secret', 'endpoint', 'access_key_id', 'bucket_name' and 'working_dir', e.g. if the full path of your prepared dataset is \"oss://bucket_name/dataset_name/prepared\", then the working_dir should be \"dataset_name/prepared\". ## Related source: 1. Get more information about DSDL: [dsdl-docs](https://opendatalab.github.io/dsdl-docs/) 2. DSDL-SDK official repo: [dsdl-sdk](https://github.com/opendatalab/dsdl-sdk/) 3. Get more dataset: [opendatalab](https://opendatalab.com/) \u4e3a\u4e86\u6ee1\u8db3\u539f\u59cb\u6570\u636e\u96c6\u6765\u6e90\u4e0d\u540c\u7684\u7528\u6237\uff0cprepare.py\u8bbe\u5b9a\u4e86\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u6307\u793a\u662f\u5426\u8df3\u8fc7\u89e3\u538b (-d) \u4ee5\u53ca\u662f\u5426\u4fdd\u7559\u4e00\u4efd\u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6 (-c)\uff0c\u5206\u4e3a\u4ee5\u4e0b\u56db\u79cd\u4f7f\u7528\u573a\u666f\uff1a ### \u6267\u884c\u89e3\u538b\u5e76\u8f6c\u6362 python tools/prepare.py <path_to_the_compressed_dataset_folder> ### \u6267\u884c\u89e3\u538b\uff0c\u590d\u5236\u4e00\u4efd\u539f\u59cb\u6570\u636e\u96c6\u540e\u8f6c\u6362 python tools/prepare.py -c <path_to_the_compressed_dataset_folder> ### \u8df3\u8fc7\u89e3\u538b\uff0c\u590d\u5236\u4e00\u4efd\u539f\u59cb\u6570\u636e\u96c6\u540e\u6267\u884c\u8f6c\u6362 python tools/prepare.py -d -c <path_to_the_decompressed_dataset_folder> ### \u8df3\u8fc7\u89e3\u538b\uff0c\u6267\u884c\u8f6c\u6362\uff08\u76f4\u63a5\u8986\u76d6\u539f\u59cb\u6570\u636e\u96c6\uff09 python tools/prepare.py -d <path_to_the_decompressed_dataset_folder> \u5177\u4f53\u7684\u4ee3\u7801\u8fd0\u884c\u573a\u666f\u548c\u7ec6\u8282\u8bf7\u67e5\u770b2.2.1-2.2.4\u5c0f\u8282\u3002 2.2.1 \u6267\u884c\u89e3\u538b\u5e76\u8f6c\u6362 \u5982\u679c\u7528\u6237\u662f\u4eceOpenDataLab\u4e0a\u4e0b\u8f7d\u5230\u7684\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\uff0c\u53ef\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884cprepare.py\uff0c\u8bf7\u5c06\u8def\u5f84\u4fee\u6539\u4e3a\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u6240\u5728\u7684\u6587\u4ef6\u5939\u8def\u5f84\u3002 python tools/prepare.py <path_to_the_compressed_dataset_folder> \u8fd0\u884c\u8be5\u4ee3\u7801\u540e\uff0c\u5c06\u4f1a\u5bf9\u7528\u6237\u63d0\u4f9b\u7684\u6570\u636e\u96c6\u538b\u7f29\u5305\u8fdb\u884c\u89e3\u538b\uff0c\u751f\u6210prepared\u6587\u4ef6\u5939\uff0c\u7136\u540e\u76f4\u63a5\u5bf9prepared\u6587\u4ef6\u5939\u8fdb\u884cDSDL\u6807\u51c6\u5316\u64cd\u4f5c\uff0c\u5e76\u751f\u6210DSDL\u6807\u6ce8\u3002\u6267\u884c\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 <dataset_root> # \u6570\u636e\u96c6\u6839\u76ee\u5f55 \u251c\u2500\u2500 <compressed_dataset_folder> # OpenDataLab\u4e0a\u4e0b\u8f7d\u5230\u7684\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u6240\u5728\u7684\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 <dsdl_folder> # OpenDataLab\u4e0a\u4e0b\u8f7d\u540e\u81ea\u884c\u89e3\u538b\u540e\u7684dsdl\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 prepared # \u5bf9\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u89e3\u538b\u5e76\u6267\u884cDSDL\u6807\u51c6\u5316\u540e\u7684\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... 2.2.2 \u6267\u884c\u89e3\u538b\uff0c\u590d\u5236\u4e00\u4efd\u539f\u59cb\u6570\u636e\u96c6\u540e\u8f6c\u6362 \u5982\u679c\u7528\u6237\u5e0c\u671b\u4fdd\u7559\u4e00\u4efd\u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6\uff0c\u53ef\u589e\u52a0-c\u53c2\u6570\u6765\u6307\u5b9a\uff1a python tools/prepare.py -c <path_to_the_compressed_dataset_folder> \u8fd0\u884c\u8be5\u4ee3\u7801\u540e\uff0c\u5c06\u4f1a\u5bf9\u7528\u6237\u63d0\u4f9b\u7684\u6570\u636e\u96c6\u538b\u7f29\u5305\u8fdb\u884c\u89e3\u538b\uff0c\u5e76\u4fdd\u5b58\u5230original\u6587\u4ef6\u5939\u4e0b\uff0c\u540c\u65f6\u4f1a\u5c06original\u590d\u5236\u4e00\u4efd\u5e76\u547d\u540d\u4e3aprepared\u6587\u4ef6\u5939\uff0c\u7136\u540e\u518d\u5bf9prepared\u6587\u4ef6\u5939\u7684\u5185\u5bb9\u8fdb\u884cDSDL\u6807\u51c6\u5316\u64cd\u4f5c\uff0c\u5e76\u751f\u6210DSDL\u6807\u6ce8\u3002\u6267\u884c\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 <dataset_root> # \u6570\u636e\u96c6\u6839\u76ee\u5f55 \u251c\u2500\u2500 <compressed_dataset_folder> # OpenDataLab\u4e0a\u4e0b\u8f7d\u5230\u7684\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u6240\u5728\u7684\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 <dsdl_folder> # OpenDataLab\u4e0a\u4e0b\u8f7d\u540e\u81ea\u884c\u89e3\u538b\u540e\u7684dsdl\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 original # \u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 prepared # \u590d\u5236original\u5e76\u6267\u884cDSDL\u6807\u51c6\u5316\u540e\u7684\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... 2.2.3 \u8df3\u8fc7\u89e3\u538b\uff0c\u590d\u5236\u4e00\u4efd\u539f\u59cb\u6570\u636e\u96c6\u540e\u6267\u884c\u8f6c\u6362 \u5982\u679c\u7528\u6237\u662f\u4ece\u522b\u7684\u9014\u5f84\u4e0b\u8f7d\u7684\u539f\u59cb\u6570\u636e\u96c6\u6216\u662f\u5df2\u89e3\u538b\u8fc7\u7684\u6570\u636e\u96c6\uff0c\u5e76\u4e14\u5e0c\u671b\u8f6c\u6362\u540e\u751f\u6210\u4e00\u4e2a\u65b0\u7684DSDL\u6807\u51c6\u6570\u636e\u96c6\u6587\u4ef6\u5939\uff0c\u8bf7\u7528\u6237\u81ea\u884c\u89e3\u538b\u6570\u636e\u96c6\u540e\uff0c\u786e\u4fdd\u5176\u76ee\u5f55\u7ed3\u6784\u4e0eREADME\u4e2d\u5c55\u793a\u7684\u201c\u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u201d\u4e00\u81f4\uff0c\u7136\u540e\u5229\u7528-d\u53c2\u6570\u8df3\u8fc7\u89e3\u538b\u64cd\u4f5c\uff0c\u76f4\u63a5\u6267\u884c\u6570\u636e\u96c6\u8f6c\u6362\uff0c\u8def\u5f84\u4e3a\u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939\uff1a python tools/prepare.py -d -c <path_to_the_decompressed_dataset_folder> \u8fd0\u884c\u8be5\u4ee3\u7801\u540e\uff0c\u5c06\u4f1a\u590d\u5236\u4e00\u4efd\u7528\u6237\u63d0\u4f9b\u7684\u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6\u5230\u540c\u76ee\u5f55\u4e0b\uff0c\u6587\u4ef6\u5939\u540d\u4e3aprepared\uff0c\u7136\u540e\u518d\u5bf9prepared\u6587\u4ef6\u5939\u7684\u5185\u5bb9\u8fdb\u884cDSDL\u6807\u51c6\u5316\u64cd\u4f5c\uff0c\u5e76\u751f\u6210DSDL\u6807\u6ce8\u3002\u7528\u6237\u63d0\u4f9b\u7684\u539f\u59cb\u6570\u636e\u96c6\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u90fd\u5c06\u4f1a\u4fdd\u7559\u3002\u6267\u884c\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 <dataset_root> # \u6570\u636e\u96c6\u6839\u76ee\u5f55 \u251c\u2500\u2500 <decompressed_dataset_folder> # \u7528\u6237\u81ea\u884c\u89e3\u538b\u5f97\u5230\u7684\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 <dsdl_folder> # OpenDataLab\u4e0a\u4e0b\u8f7d\u540e\u81ea\u884c\u89e3\u538b\u540e\u7684dsdl\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 prepared # \u590d\u5236<decompressed_dataset_folder>\u5e76\u6267\u884cDSDL\u6807\u51c6\u5316\u540e\u7684\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... 2.2.4 \u8df3\u8fc7\u89e3\u538b\uff0c\u6267\u884c\u8f6c\u6362\uff08\u76f4\u63a5\u8986\u76d6\u539f\u59cb\u6570\u636e\u96c6\uff09 \u5982\u679c\u7528\u6237\u662f\u4ece\u522b\u7684\u9014\u5f84\u4e0b\u8f7d\u7684\u539f\u59cb\u6570\u636e\u96c6\u6216\u662f\u5df2\u89e3\u538b\u8fc7\u7684\u6570\u636e\u96c6\uff0c\u5e76\u4e14\u5e0c\u671b\u8f6c\u6362\u540e\u4ec5\u4fdd\u7559DSDL\u6807\u51c6\u7684\u6570\u636e\u96c6\uff0c\u8bf7\u7528\u6237\u81ea\u884c\u89e3\u538b\u6570\u636e\u96c6\u540e\uff0c\u786e\u4fdd\u5176\u76ee\u5f55\u7ed3\u6784\u4e0eREADME\u4e2d\u5c55\u793a\u7684\u201c\u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u201d\u4e00\u81f4\uff0c\u7136\u540e\u5229\u7528-d\u53c2\u6570\u8df3\u8fc7\u89e3\u538b\u64cd\u4f5c\uff0c\u76f4\u63a5\u6267\u884c\u6570\u636e\u96c6\u8f6c\u6362\uff0c\u5176\u4e2d\u8def\u5f84\u4e3a\u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939\uff1a python tools/prepare.py -d <path_to_the_decompressed_dataset_folder> \u8fd0\u884c\u8be5\u4ee3\u7801\u540e\uff0c\u5c06\u4f1a\u5bf9\u7528\u6237\u63d0\u4f9b\u7684\u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939\u91cc\u7684\u5185\u5bb9\u8fdb\u884cDSDL\u6807\u51c6\u5316\u64cd\u4f5c\uff0c\u5e76\u751f\u6210DSDL\u6807\u6ce8\u3002\u8bf7\u6ce8\u610f\uff0c\u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u7528\u6237\u63d0\u4f9b\u7684\u539f\u59cb\u6570\u636e\u96c6\u7684\u90e8\u5206\u5a92\u4f53\u6587\u4ef6\u6216\u6807\u6ce8\u6587\u4ef6\u88ab\u8986\u76d6\uff0c\u5982\u679c\u4e0d\u60f3\u6539\u53d8\u539f\u59cb\u6570\u636e\u96c6\u7684\u6587\u4ef6\uff0c\u8bf7\u6267\u884c\u4e0a\u6587\u4e2d\u7684 \u8df3\u8fc7\u89e3\u538b\uff0c\u590d\u5236\u4e00\u4efd\u539f\u59cb\u6570\u636e\u96c6\u540e\u6267\u884c\u8f6c\u6362 \u3002\u6267\u884c\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 <dataset_root> # \u6570\u636e\u96c6\u6839\u76ee\u5f55 \u251c\u2500\u2500 <decompressed_dataset_folder> # \u7528\u6237\u81ea\u884c\u89e3\u538b\u5f97\u5230\u7684\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939\uff08\u5176\u4e2d\u90e8\u5206\u6587\u4ef6\u5728\u6807\u51c6\u5316\u8fc7\u7a0b\u4e2d\u5df2\u88ab\u8986\u76d6\uff09 \u251c\u2500\u2500 ... \u251c\u2500\u2500 <dsdl_folder> # OpenDataLab\u4e0a\u4e0b\u8f7d\u540e\u81ea\u884c\u89e3\u538b\u540e\u7684dsdl\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... 3. \u6570\u636e\u96c6\u914d\u7f6e \u4e3a\u4e86\u6570\u636e\u96c6\u65b9\u4fbf\u5206\u53d1\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u3010\u5a92\u4f53\u6570\u636e\u3011\u548c\u3010\u6807\u6ce8\u6587\u4ef6\u3011\u5206\u79bb\u8fd9\u4e00\u8bbe\u8ba1\u7406\u5ff5\uff0c\u8fd9\u6837\u5373\u4fbf\u7528\u6237\u628a\u4e0d\u540c\u6570\u636e\u4fdd\u5b58\u5728\u4e0d\u540c\u7684\u5b58\u50a8\u4e0a\uff0c\u4e5f\u65e0\u9700\u79fb\u52a8\u6587\u4ef6\uff0c\u4ec5\u9700\u4fee\u6539\u5bf9\u5e94\u7684config\u6587\u4ef6\u4e2d\u5a92\u4f53\u6587\u4ef6\u7684\u5b58\u50a8\u6839\u76ee\u5f55\u5373\u53ef\uff0c\u8fd9\u91cc\u7684\u6570\u636e\u96c6\u914d\u7f6e\u4e5f\u4e3b\u8981\u662f\u6307\u5bf9config\u6587\u4ef6\u7684\u9002\u914d\uff0c\u7528\u6237\u9700\u8981\u4fee\u6539\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\u548c\u8bfb\u53d6\u7684\u6839\u76ee\u5f55\u3002 \u5728 config.py \u4e2d\uff0c\u5217\u4e3e\u4e86\u6240\u652f\u6301\u7684\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5e76\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u7b49\u4fe1\u606f\uff1a \u672c\u5730\u8bfb\u53d6\uff1a local \u4e2d\u7684\u53c2\u6570 working_dir \uff08\u672c\u5730\u6570\u636e\u6240\u5728\u7684\u76ee\u5f55\uff09 \u963f\u91cc\u4e91OSS\u8bfb\u53d6\uff1a ali_oss \u4e2d\u7684\u53c2\u6570\uff08\u963f\u91cc\u4e91OSS\u7684\u914d\u7f6e access_key_secret , endpoint , access_key_id \uff1b\u6876\u540d\u79f0 bucket_name \uff0c\u6570\u636e\u5728\u6876\u4e2d\u7684\u76ee\u5f55 working_dir \u3002\u5173\u4e8e\u963f\u91cc\u4e91OSS\u53c2\u6570\u914d\u7f6e\u4e2d\u76f8\u5173\u5b57\u6bb5\u7684\u8be6\u7ec6\u542b\u4e49\u548c\u914d\u7f6e\u65b9\u6cd5\uff0c\u8bf7\u53c2\u8003\u5176\u5b98\u65b9\u6587\u6863\uff1a \u914d\u7f6e\u6559\u7a0b \uff09 \u5b8c\u6574\u7684config.py\u6587\u4ef6\u793a\u4f8b\u5982\u4e0b\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"the root path of the prepared dataset\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the prefix of the prepared dataset within the bucket\" )","title":"\u6570\u636e\u96c6\u51c6\u5907"},{"location":"tutorials/dataset_download/#_1","text":"OpenDataLab\u5b98\u7f51\u6536\u96c6\u4e86\u6d77\u91cf\u516c\u5f00\u6570\u636e\u96c6\uff0c\u5bf9\u4e8e\u5927\u90e8\u5206\u6570\u636e\u96c6\u7528\u6237\u53ef\u4ee5\u5728\u8be5\u7f51\u7ad9\u76f4\u63a5\u4e0b\u8f7d\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u9488\u5bf9\u4e3b\u6d41CV\u6570\u636e\u96c6\u90fd\u63d0\u4f9b\u4e86DSDL\u89c4\u8303\u6807\u6ce8\uff0c\u57fa\u4e8e\u539f\u59cb\u516c\u5f00\u6570\u636e\u96c6 \u5a92\u4f53\u6587\u4ef6 \u548c DSDL\u6807\u6ce8\u6587\u4ef6 \uff0c\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u5730\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u3001\u63a8\u7406\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u914d\u5957\u7684\u5de5\u5177\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u6790\u3001\u5904\u7406\u3002 \u6570\u636e\u96c6\u51c6\u5907\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u6570\u636e\u96c6\u4e0b\u8f7d\uff1a\u53ef\u4ee5\u5728OpenDataLab\u5b98\u7f51\u8fdb\u884c\u4e0b\u8f7d\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528odl\u547d\u4ee4\u8fdb\u884c\u4e0b\u8f7d\u3002\u5177\u4f53\u8bf7\u53c2\u8003 \u6570\u636e\u96c6\u4e0b\u8f7d \u90e8\u5206\u3002 \u6570\u636e\u96c6\u7ec4\u7ec7\uff1a\u6570\u636e\u96c6\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u8bf7\u7528\u6237\u81ea\u884c\u9605\u8bfbREADME.md\uff0c\u53c2\u9605README\u4e2d\u7684\u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u786e\u8ba4\u539f\u59cb\u6570\u636e\u96c6\u4e0b\u8f7d\u5b8c\u6574\u3002\u53e6\u5916\uff0c\u6709\u90e8\u5206\u6570\u636e\u96c6\u5728dsdl\u76ee\u5f55\u4e0b\u6709tools\u6587\u4ef6\u5939\uff08\u5305\u542bprepare.py\uff09\uff0c\u8bf7\u6309\u7167README\u6307\u793a\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u8f6c\u6362\uff0c\u4ee5\u4fdd\u8bc1DSDL\u6b63\u5e38\u4f7f\u7528\u3002\u5177\u4f53\u4f7f\u7528\u8bf7\u53c2\u8003 \u6570\u636e\u96c6\u7ec4\u7ec7 \u90e8\u5206\u3002 \u6570\u636e\u96c6\u914d\u7f6e\uff1a\u7528\u6237\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\uff0c\u6307\u5b9aconfig.py\u6587\u4ef6\u4e2d\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\u548c\u6839\u76ee\u5f55\u3002\u5177\u4f53\u4f7f\u7528\u8bf7\u53c2\u8003 \u6570\u636e\u96c6\u914d\u7f6e \u90e8\u5206\u3002","title":"\u6570\u636e\u96c6\u51c6\u5907"},{"location":"tutorials/dataset_download/#1","text":"\u6839\u636e\uff081\uff09\u662f\u5426\u63d0\u4f9b\u539f\u59cb\u6570\u636e\u96c6\u4e0b\u8f7d\uff1b\uff082\uff09\u662f\u5426\u63d0\u4f9bDSDL\u6807\u6ce8\u4e0b\u8f7d\uff0c\u6211\u4eec\u5c06\u6570\u636e\u96c6\u4e0b\u8f7d\u5206\u4e3a\u56db\u7c7b\u60c5\u5f62\u8fdb\u884c\u8ba8\u8bba\u3002","title":"1. \u6570\u636e\u96c6\u4e0b\u8f7d"},{"location":"tutorials/dataset_download/#11-dsdl","text":"\u5728\u539f\u59cb\u6570\u636e\u96c6\u5141\u8bb8\u5206\u53d1\uff0c\u4e14DSDL\u6807\u6ce8\u6587\u4ef6\u5df2\u652f\u6301\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u53ef\u4ee5\u540c\u65f6\u4e0b\u8f7d\u5230\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\u548cDSDL\u6807\u6ce8\u6587\u4ef6\u3002 CLI\u547d\u4ee4\u5982\u4e0b\uff1a odl get <dataset_name> \u6ce8\u610f\u8fd9\u91cc\u7684 <dataset_name> \u9700\u8981\u4e0e OpenDataLab\u5b98\u7f51 \u4e0a\u7684\u540d\u5b57\u5bf9\u5e94\u3002\u7528\u6237\u53ef\u5728\u5b98\u7f51\u641c\u7d22\u76f8\u5173\u6570\u636e\u96c6\uff0c\u5e76\u5728\u6570\u636e\u96c6\u8be6\u60c5\u9875\u9762\u7684CLI\u90e8\u5206\u83b7\u53d6\u5230\u6570\u636e\u96c6\u540d\u79f0\uff0c\u6bd4\u5982\uff1a odl get CIFAR-10 \u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u8bf7\u7528\u6237\u81ea\u884c\u89e3\u538bdsdl\u538b\u7f29\u5305\uff0c\u7ec4\u7ec7\u540e\u7684\u6570\u636e\u96c6\u76ee\u5f55\u5982\u4e0b\uff1a <root-path> \u251c\u2500\u2500 compressed # \u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u7684\u6587\u4ef6\u5939 \u2502 \u2514\u2500\u2500 ... # \u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305 \u2514\u2500\u2500 dsdl # \u89e3\u538b\u540e\u7684DSDL\u6807\u6ce8\u6587\u4ef6\u5939 \u251c\u2500\u2500 defs \u2502 \u251c\u2500\u2500 task-def.yaml # \u4efb\u52a1\u7c7b\u578b\u7684struct\u5b9a\u4e49\u6587\u4ef6 \u2502 \u2514\u2500\u2500 class-dom.yaml # \u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 set-train # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 set-val # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u251c\u2500\u2500 set-test # \u6d4b\u8bd5\u96c6 \u2502 \u251c\u2500\u2500 test.yaml \u2502 \u2514\u2500\u2500 test_samples.json \u251c\u2500\u2500 tools # \u5982\u679c\u6570\u636e\u96c6\u4e0d\u9700\u8981\u989d\u5916\u7684\u811a\u672c\u652f\u6301\uff0c\u5219\u4e0d\u5b58\u5728tools\u6587\u4ef6\u5939 \u2502 \u2514\u2500\u2500 prepare.py # \u5305\u62ec\u89e3\u538b\u3001\u8f6c\u4e2d\u95f4\u683c\u5f0f\uff08\u5982\u679c\u9700\u8981\u7684\u8bdd\uff09\u548c\u751f\u6210dsdl\u76ee\u5f55 \u251c\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6 \u2514\u2500\u2500 README.md # \u5173\u4e8e\u6570\u636e\u96c6\u4e0b\u8f7d\u3001\u4f7f\u7528\u3001\u914d\u7f6e\u7684\u6559\u7a0b \u5176\u4e2d\uff1a defs\u6587\u4ef6\u5939\u548cset-xxx\u6587\u4ef6\u5939\u4e3b\u8981\u5305\u542bDSDL\u6570\u636e\u96c6\u7684\u5b9a\u4e49\u6587\u4ef6\u3001\u7c7b\u522b\u57df\u6587\u4ef6\u548c\u6570\u636e\u6587\u4ef6\u7b49\uff08\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u53c2\u9605 \u81ea\u5b9a\u4e49DSDL\u6570\u636e\u96c6 \uff09\uff1b config.py\u9700\u8981\u4fee\u6539\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\u548c\u8def\u5f84\uff0c\u5177\u4f53\u8bf7\u67e5\u770b \u6570\u636e\u96c6\u914d\u7f6e \u90e8\u5206\u3002 \u90e8\u5206\u6570\u636e\u96c6\u5b58\u5728tools\u6587\u4ef6\u5939\uff0c\u63d0\u4f9b\u4e86prepare.py\u5de5\u5177\uff0c\u80fd\u591f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u89e3\u538b\u548c\u6807\u51c6\u5316\u64cd\u4f5c\uff0c\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u8bf7\u67e5\u770b\u6570\u636e\u96c6\u7ec4\u7ec7\u4e2d\u7684 \u6267\u884c\u89e3\u538b\u5e76\u8f6c\u6362 \u90e8\u5206\u7684\u547d\u4ee4\u3002 \u6ce8\u610f\uff1a\u5982\u679cdsdl\u4e0b\u5b58\u5728tools\u6587\u4ef6\u5939\uff0c\u8bf7\u7528\u6237\u53c2\u8003 \u6570\u636e\u96c6\u7ec4\u7ec7 \u90e8\u5206\u5bf9\u539f\u59cb\u6570\u636e\u96c6\u6267\u884c\u89e3\u538b\u548c\u6807\u51c6\u5316\u64cd\u4f5c\u3002","title":"1.1 \u540c\u65f6\u63d0\u4f9b\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\u548cDSDL\u6807\u6ce8\u6587\u4ef6"},{"location":"tutorials/dataset_download/#12-dsdl","text":"\u5982\u679c\u539f\u59cb\u6570\u636e\u96c6\u4e0d\u5141\u8bb8\u5206\u53d1\uff0c\u800cDSDL\u5df2\u652f\u6301\uff0c\u7528\u6237\u9700\u8981\u81ea\u884c\u4e0b\u8f7d\u539f\u59cb\u6570\u636e\u96c6\u3002 \u547d\u4ee4\u5982\u4e0b\uff1a odl get <dataset_name> \u4e0b\u8f7d\u5230\u7684\u6570\u636e\u96c6\u5c06\u53ea\u6709dsdl\u6587\u4ef6\u5939\uff0c\u800c\u4e0d\u5305\u542b\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\u3002\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u4e0b\u8f7d\u6570\u636e\u96c6\u5e76\u89e3\u538b\uff0c\u8bf7\u4fdd\u8bc1\u539f\u59cb\u6570\u636e\u96c6\u7684\u76ee\u5f55\u683c\u5f0f\u4e0eREADME\u4e2d\u5c55\u793a\u7684\u539f\u59cb\u6570\u636e\u96c6\u76ee\u5f55\u683c\u5f0f\u4e00\u81f4\u3002\u901a\u8fc7\u4fee\u6539config.py\u4e2d\u7684\u8def\u5f84\uff0c\u6765\u6307\u5b9a\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\u7684\u5b58\u653e\u4f4d\u7f6e\u3002\u6ce8\u610f\uff0c\u5982\u679cdsdl\u76ee\u5f55\u4e0b\u5b58\u5728tools\u6587\u4ef6\u5939\uff0c\u8bf7\u53c2\u8003\u6570\u636e\u96c6\u7ec4\u7ec7\u4e2d \u8df3\u8fc7\u89e3\u538b \u7684\u4e24\u4e2a\u547d\u4ee4\u6765\u6267\u884c\u5bf9\u539f\u59cb\u6570\u636e\u96c6\u7684\u6807\u51c6\u5316\u64cd\u4f5c\u3002","title":"1.2 \u4ec5\u63d0\u4f9bDSDL\u6807\u6ce8\u6587\u4ef6"},{"location":"tutorials/dataset_download/#13","text":"OpenDataLab\u5b98\u7f51 \u4e0a\u5141\u8bb8\u5206\u53d1\u7684\u6570\u636e\u96c6\uff0c\u76ee\u524d\u5c1a\u6709\u90e8\u5206\u6682\u672a\u652f\u6301DSDL\u6807\u51c6\u5316\u6807\u6ce8\uff0c\u4f46\u662f\u7528\u6237\u4ecd\u7136\u53ef\u4ee5\u4e0b\u8f7d\u5230\u539f\u59cb\u6570\u636e\u96c6\u7684\u5a92\u4f53\u548c\u6807\u6ce8\u6587\u4ef6\u3002 \u547d\u4ee4\u5982\u4e0b\uff1a odl get <dataset_name> \u4e0b\u8f7d\u5230\u7684\u6570\u636e\u96c6\u5c06\u53ea\u6709\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\uff0c\u800c\u4e0d\u5305\u542bdsdl\u6587\u4ef6\u5939\u3002 \u7528\u6237\u5982\u679c\u9700\u8981\u81ea\u884c\u5c06\u5176\u5b9a\u4e49\u4e3aDSDL\u6570\u636e\u96c6\uff0c\u4ee5\u4fbf\u4f7f\u7528ODL\u5de5\u5177\u94fe\u76f8\u5173\u529f\u80fd\u548cOpenMMLab\u8bad\u7ec3\uff0c\u8bf7\u53c2\u9605 \u81ea\u5b9a\u4e49DSDL\u6570\u636e\u96c6 \u3002","title":"1.3 \u4ec5\u63d0\u4f9b\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u548c\u6807\u6ce8\u6587\u4ef6"},{"location":"tutorials/dataset_download/#14-dsdl","text":"\u5982\u679c\u5f53\u524d\u6570\u636e\u96c6\u5728 OpenDataLab\u5b98\u7f51 \u4e0a\u6682\u4e0d\u63d0\u4f9b\u4e0b\u8f7d\uff0c\u4e14\u5c1a\u672a\u652f\u6301DSDL\u6807\u51c6\u5316\u6807\u6ce8\uff0c\u7528\u6237\u9700\u81ea\u884c\u5230\u6570\u636e\u96c6\u5b98\u7f51\u8fdb\u884c\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\u548c\u6807\u6ce8\u6587\u4ef6\u4e0b\u8f7d\u3002 \u53e6\u5916\uff0c\u7528\u6237\u5982\u679c\u9700\u8981\u81ea\u884c\u5c06\u5176\u5b9a\u4e49\u4e3aDSDL\u6570\u636e\u96c6\uff0c\u4ee5\u4fbf\u4f7f\u7528ODL\u5de5\u5177\u94fe\u76f8\u5173\u529f\u80fd\u548cOpenMMLab\u8bad\u7ec3\uff0c\u8bf7\u53c2\u9605 \u81ea\u5b9a\u4e49DSDL\u6570\u636e\u96c6 \u3002","title":"1.4 \u4e0d\u63d0\u4f9b\u539f\u59cb\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\u548cDSDL\u6807\u6ce8\u6587\u4ef6"},{"location":"tutorials/dataset_download/#2","text":"\u7528\u6237\u4e0b\u8f7d\u597d\u6570\u636e\u96c6\u540e\uff0c\u8bf7\u81ea\u884c\u89e3\u538bdsdl\u538b\u7f29\u5305\uff0c\u5e76\u9605\u8bfbREADME\uff0c\u6839\u636e\u662f\u5426\u9700\u8981\u7528\u6237\u8fd0\u884ctools/prepare.py\uff0c\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a DSDL\u4e0e\u539f\u59cb\u6570\u636e\u96c6\u53ef\u4ee5\u76f4\u63a5\u5339\u914d \uff1adsdl\u76ee\u5f55\u4e0b\u4e0d\u5305\u542btools\u6587\u4ef6\u5939\uff0cREADME\u4e2d\u4e0d\u5305\u542b\u201cprepare the dataset\u201d\u6a21\u5757\u5185\u5bb9\uff0c\u8bf7\u7528\u6237\u81ea\u884c\u89e3\u538b\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\uff0c\u5373\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528DSDL\u6570\u636e\u96c6 \u9700\u8981\u8fd0\u884cprepare.py\u5bf9\u6570\u636e\u96c6\u505a\u9884\u5904\u7406 \uff1adsdl\u76ee\u5f55\u4e0b\u5305\u542btools\u6587\u4ef6\u5939\uff0cREADME\u4e2d\u5305\u542b\u201cprepare the dataset\u201d\u6a21\u5757\u5185\u5bb9\uff0c\u8bf7\u53c2\u9605 2.2\u5c0f\u8282 \u9009\u62e9\u9002\u5408\u7684CLI\u547d\u4ee4\u8fd0\u884cprepare.py","title":"2. \u6570\u636e\u96c6\u7ec4\u7ec7"},{"location":"tutorials/dataset_download/#21-dsdl","text":"\u8fd9\u7c7b\u6570\u636e\u96c6\u7684dsdl\u76ee\u5f55\u4e0b\u4e0d\u5305\u542btools\u6587\u4ef6\u5939\uff0c\u5e76\u4e14\u5176README\u4e2d\u4e0d\u5305\u542b\u201cprepare the dataset\u201d\u6a21\u5757\u3002\u8bf7\u7528\u6237\u81ea\u884c\u89e3\u538b\u539f\u59cb\u6570\u636e\u96c6\u548cDSDL\u6587\u4ef6\u5939\uff0c\u5e76\u4fdd\u8bc1\u5176\u76ee\u5f55\u7ed3\u6784\u4e0eREADME\u4e2d\u5c55\u793a\u7684\u201c\u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u201d\u4e00\u81f4\uff0c\u5373\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528DSDL\u6807\u51c6\u5316\u6570\u636e\u96c6\u3002README\u5185\u5bb9\u5982\u4e0b\uff1a \u4e0d\u5305\u542b\u201cprepare the dataset\u201d\u6a21\u5757\u7684README # Data Set Description Language(DSDL) for [dataset_name] dataset ## Data Structure Please make sure the folder structure of prepared dataset is organized as followed: <dataset_root> \u251c\u2500\u2500 ... # \u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784 The folder structure of dsdl annotation is organized as followed: <dataset_root> \u251c\u2500\u2500 ... # dsdl\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784 ## config.py You can load your dataset from local or oss. From local: local = dict( type=\"LocalFileReader\", working_dir=\"the root path of the prepared dataset\", ) Please change the 'working_dir' to the path of your prepared dataset where media data can be found, for example: \"`<root>`/dataset_name/prepared\". From oss: ali_oss = dict( type=\"AliOSSFileReader\", access_key_secret=\"your secret key of aliyun oss\", endpoint=\"your endpoint of aliyun oss\", access_key_id=\"your access key of aliyun oss\", bucket_name=\"your bucket name of aliyun oss\", working_dir=\"the prefix of the prepared dataset within the bucket\") Please change the 'access_key_secret', 'endpoint', 'access_key_id', 'bucket_name' and 'working_dir', e.g. if the full path of your prepared dataset is \"oss://bucket_name/dataset_name/prepared\", then the working_dir should be \"dataset_name/prepared\". ## Related source: 1. Get more information about DSDL: [dsdl-docs](https://opendatalab.github.io/dsdl-docs/) 2. DSDL-SDK official repo: [dsdl-sdk](https://github.com/opendatalab/dsdl-sdk/) 3. Get more dataset: [opendatalab](https://opendatalab.com/)","title":"2.1 DSDL\u4e0e\u539f\u59cb\u6570\u636e\u96c6\u53ef\u4ee5\u76f4\u63a5\u5339\u914d"},{"location":"tutorials/dataset_download/#22-preparepy","text":"\u8fd9\u7c7b\u6570\u636e\u96c6\u7684dsdl\u76ee\u5f55\u4e0b\u5305\u542btools\u6587\u4ef6\u5939\uff0c\u9700\u8981\u8fd0\u884ctools/prepare.py\u5c06\u6570\u636e\u96c6\u8f6c\u6362\u4e3aDSDL\u6807\u51c6\u540e\uff08\u540e\u6587\u5c06\u4f1a\u8be6\u8ff0\u5982\u4f55\u8fd0\u884c\u8be5\u4ee3\u7801\uff09\uff0c\u624d\u80fd\u6b63\u5e38\u4f7f\u7528DSDL\u6807\u51c6\u5316\u6570\u636e\u96c6\u3002 \u6ce8\u610f\uff1a\u5728\u8fd0\u884ctools/prepare.py\u4e4b\u524d\uff0c\u7528\u6237\u9700\u8981 \u90e8\u7f72dsdl-sdk \u3002\u53e6\u5916\uff0c\u90e8\u5206\u6570\u636e\u96c6\u7684tools/prepare.py\u53ef\u80fd\u8fd8\u9700\u8981\u5b89\u88c5\u4e00\u4e9b\u5176\u4ed6\u7684python\u4f9d\u8d56\u5305\u3002 \u8fd9\u7c7b\u6570\u636e\u96c6\u7684README\u5185\u5bb9\u5982\u4e0b\uff1a \u5305\u542b\u201cprepare the dataset\u201d\u6a21\u5757\u7684README # Data Set Description Language(DSDL) for [dataset_name] dataset ## prepare the dataset To make sure the DSDL dataset for [task_name] run successfully, the tools/prepare.py should be executed. For this dataset, the following step will be selected to execute: - decompress - prepare dataset and generate DSDL annotation There are four usage scenarios: ### decompress, convert python tools/prepare.py <path_to_the_compressed_dataset_folder> ### decompress, copy and convert python tools/prepare.py -c <path_to_the_compressed_dataset_folder> ### (already decompressed) copy and convert python tools/prepare.py -d -c <path_to_the_decompressed_dataset_folder> ### (already decompressed) convert, directly overwrite python tools/prepare.py -d <path_to_the_decompressed_dataset_folder> For more messages, see [Dataset Prepare Section](https://opendatalab.github.io/dsdl-docs/tutorials/dataset_download/) in DSDL DOC, or use the help option: python tools/prepare.py --help ## Data Structure Please make sure the folder structure of prepared dataset is organized as followed: <dataset_root> \u251c\u2500\u2500 ... # \u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784 The folder structure of dsdl annotation for [task_name] is organized as followed: <dataset_root> \u251c\u2500\u2500 ... # dsdl\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784 ## config.py You can load your dataset from local or oss. From local: local = dict( type=\"LocalFileReader\", working_dir=\"the root path of the prepared dataset\", ) Please change the 'working_dir' to the path of your prepared dataset where media data can be found, for example: \"`<root>`/dataset_name/prepared\". From oss: ali_oss = dict( type=\"AliOSSFileReader\", access_key_secret=\"your secret key of aliyun oss\", endpoint=\"your endpoint of aliyun oss\", access_key_id=\"your access key of aliyun oss\", bucket_name=\"your bucket name of aliyun oss\", working_dir=\"the prefix of the prepared dataset within the bucket\") Please change the 'access_key_secret', 'endpoint', 'access_key_id', 'bucket_name' and 'working_dir', e.g. if the full path of your prepared dataset is \"oss://bucket_name/dataset_name/prepared\", then the working_dir should be \"dataset_name/prepared\". ## Related source: 1. Get more information about DSDL: [dsdl-docs](https://opendatalab.github.io/dsdl-docs/) 2. DSDL-SDK official repo: [dsdl-sdk](https://github.com/opendatalab/dsdl-sdk/) 3. Get more dataset: [opendatalab](https://opendatalab.com/) \u4e3a\u4e86\u6ee1\u8db3\u539f\u59cb\u6570\u636e\u96c6\u6765\u6e90\u4e0d\u540c\u7684\u7528\u6237\uff0cprepare.py\u8bbe\u5b9a\u4e86\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u6307\u793a\u662f\u5426\u8df3\u8fc7\u89e3\u538b (-d) \u4ee5\u53ca\u662f\u5426\u4fdd\u7559\u4e00\u4efd\u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6 (-c)\uff0c\u5206\u4e3a\u4ee5\u4e0b\u56db\u79cd\u4f7f\u7528\u573a\u666f\uff1a ### \u6267\u884c\u89e3\u538b\u5e76\u8f6c\u6362 python tools/prepare.py <path_to_the_compressed_dataset_folder> ### \u6267\u884c\u89e3\u538b\uff0c\u590d\u5236\u4e00\u4efd\u539f\u59cb\u6570\u636e\u96c6\u540e\u8f6c\u6362 python tools/prepare.py -c <path_to_the_compressed_dataset_folder> ### \u8df3\u8fc7\u89e3\u538b\uff0c\u590d\u5236\u4e00\u4efd\u539f\u59cb\u6570\u636e\u96c6\u540e\u6267\u884c\u8f6c\u6362 python tools/prepare.py -d -c <path_to_the_decompressed_dataset_folder> ### \u8df3\u8fc7\u89e3\u538b\uff0c\u6267\u884c\u8f6c\u6362\uff08\u76f4\u63a5\u8986\u76d6\u539f\u59cb\u6570\u636e\u96c6\uff09 python tools/prepare.py -d <path_to_the_decompressed_dataset_folder> \u5177\u4f53\u7684\u4ee3\u7801\u8fd0\u884c\u573a\u666f\u548c\u7ec6\u8282\u8bf7\u67e5\u770b2.2.1-2.2.4\u5c0f\u8282\u3002","title":"2.2 \u9700\u8981\u8fd0\u884cprepare.py\u5bf9\u6570\u636e\u96c6\u505a\u9884\u5904\u7406"},{"location":"tutorials/dataset_download/#221","text":"\u5982\u679c\u7528\u6237\u662f\u4eceOpenDataLab\u4e0a\u4e0b\u8f7d\u5230\u7684\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\uff0c\u53ef\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884cprepare.py\uff0c\u8bf7\u5c06\u8def\u5f84\u4fee\u6539\u4e3a\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u6240\u5728\u7684\u6587\u4ef6\u5939\u8def\u5f84\u3002 python tools/prepare.py <path_to_the_compressed_dataset_folder> \u8fd0\u884c\u8be5\u4ee3\u7801\u540e\uff0c\u5c06\u4f1a\u5bf9\u7528\u6237\u63d0\u4f9b\u7684\u6570\u636e\u96c6\u538b\u7f29\u5305\u8fdb\u884c\u89e3\u538b\uff0c\u751f\u6210prepared\u6587\u4ef6\u5939\uff0c\u7136\u540e\u76f4\u63a5\u5bf9prepared\u6587\u4ef6\u5939\u8fdb\u884cDSDL\u6807\u51c6\u5316\u64cd\u4f5c\uff0c\u5e76\u751f\u6210DSDL\u6807\u6ce8\u3002\u6267\u884c\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 <dataset_root> # \u6570\u636e\u96c6\u6839\u76ee\u5f55 \u251c\u2500\u2500 <compressed_dataset_folder> # OpenDataLab\u4e0a\u4e0b\u8f7d\u5230\u7684\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u6240\u5728\u7684\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 <dsdl_folder> # OpenDataLab\u4e0a\u4e0b\u8f7d\u540e\u81ea\u884c\u89e3\u538b\u540e\u7684dsdl\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 prepared # \u5bf9\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u89e3\u538b\u5e76\u6267\u884cDSDL\u6807\u51c6\u5316\u540e\u7684\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 ...","title":"2.2.1 \u6267\u884c\u89e3\u538b\u5e76\u8f6c\u6362"},{"location":"tutorials/dataset_download/#222","text":"\u5982\u679c\u7528\u6237\u5e0c\u671b\u4fdd\u7559\u4e00\u4efd\u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6\uff0c\u53ef\u589e\u52a0-c\u53c2\u6570\u6765\u6307\u5b9a\uff1a python tools/prepare.py -c <path_to_the_compressed_dataset_folder> \u8fd0\u884c\u8be5\u4ee3\u7801\u540e\uff0c\u5c06\u4f1a\u5bf9\u7528\u6237\u63d0\u4f9b\u7684\u6570\u636e\u96c6\u538b\u7f29\u5305\u8fdb\u884c\u89e3\u538b\uff0c\u5e76\u4fdd\u5b58\u5230original\u6587\u4ef6\u5939\u4e0b\uff0c\u540c\u65f6\u4f1a\u5c06original\u590d\u5236\u4e00\u4efd\u5e76\u547d\u540d\u4e3aprepared\u6587\u4ef6\u5939\uff0c\u7136\u540e\u518d\u5bf9prepared\u6587\u4ef6\u5939\u7684\u5185\u5bb9\u8fdb\u884cDSDL\u6807\u51c6\u5316\u64cd\u4f5c\uff0c\u5e76\u751f\u6210DSDL\u6807\u6ce8\u3002\u6267\u884c\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 <dataset_root> # \u6570\u636e\u96c6\u6839\u76ee\u5f55 \u251c\u2500\u2500 <compressed_dataset_folder> # OpenDataLab\u4e0a\u4e0b\u8f7d\u5230\u7684\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u6240\u5728\u7684\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 <dsdl_folder> # OpenDataLab\u4e0a\u4e0b\u8f7d\u540e\u81ea\u884c\u89e3\u538b\u540e\u7684dsdl\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 original # \u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 prepared # \u590d\u5236original\u5e76\u6267\u884cDSDL\u6807\u51c6\u5316\u540e\u7684\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 ...","title":"2.2.2 \u6267\u884c\u89e3\u538b\uff0c\u590d\u5236\u4e00\u4efd\u539f\u59cb\u6570\u636e\u96c6\u540e\u8f6c\u6362"},{"location":"tutorials/dataset_download/#223","text":"\u5982\u679c\u7528\u6237\u662f\u4ece\u522b\u7684\u9014\u5f84\u4e0b\u8f7d\u7684\u539f\u59cb\u6570\u636e\u96c6\u6216\u662f\u5df2\u89e3\u538b\u8fc7\u7684\u6570\u636e\u96c6\uff0c\u5e76\u4e14\u5e0c\u671b\u8f6c\u6362\u540e\u751f\u6210\u4e00\u4e2a\u65b0\u7684DSDL\u6807\u51c6\u6570\u636e\u96c6\u6587\u4ef6\u5939\uff0c\u8bf7\u7528\u6237\u81ea\u884c\u89e3\u538b\u6570\u636e\u96c6\u540e\uff0c\u786e\u4fdd\u5176\u76ee\u5f55\u7ed3\u6784\u4e0eREADME\u4e2d\u5c55\u793a\u7684\u201c\u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u201d\u4e00\u81f4\uff0c\u7136\u540e\u5229\u7528-d\u53c2\u6570\u8df3\u8fc7\u89e3\u538b\u64cd\u4f5c\uff0c\u76f4\u63a5\u6267\u884c\u6570\u636e\u96c6\u8f6c\u6362\uff0c\u8def\u5f84\u4e3a\u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939\uff1a python tools/prepare.py -d -c <path_to_the_decompressed_dataset_folder> \u8fd0\u884c\u8be5\u4ee3\u7801\u540e\uff0c\u5c06\u4f1a\u590d\u5236\u4e00\u4efd\u7528\u6237\u63d0\u4f9b\u7684\u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6\u5230\u540c\u76ee\u5f55\u4e0b\uff0c\u6587\u4ef6\u5939\u540d\u4e3aprepared\uff0c\u7136\u540e\u518d\u5bf9prepared\u6587\u4ef6\u5939\u7684\u5185\u5bb9\u8fdb\u884cDSDL\u6807\u51c6\u5316\u64cd\u4f5c\uff0c\u5e76\u751f\u6210DSDL\u6807\u6ce8\u3002\u7528\u6237\u63d0\u4f9b\u7684\u539f\u59cb\u6570\u636e\u96c6\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u90fd\u5c06\u4f1a\u4fdd\u7559\u3002\u6267\u884c\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 <dataset_root> # \u6570\u636e\u96c6\u6839\u76ee\u5f55 \u251c\u2500\u2500 <decompressed_dataset_folder> # \u7528\u6237\u81ea\u884c\u89e3\u538b\u5f97\u5230\u7684\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 <dsdl_folder> # OpenDataLab\u4e0a\u4e0b\u8f7d\u540e\u81ea\u884c\u89e3\u538b\u540e\u7684dsdl\u6587\u4ef6\u5939 \u251c\u2500\u2500 ... \u251c\u2500\u2500 prepared # \u590d\u5236<decompressed_dataset_folder>\u5e76\u6267\u884cDSDL\u6807\u51c6\u5316\u540e\u7684\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 ...","title":"2.2.3 \u8df3\u8fc7\u89e3\u538b\uff0c\u590d\u5236\u4e00\u4efd\u539f\u59cb\u6570\u636e\u96c6\u540e\u6267\u884c\u8f6c\u6362"},{"location":"tutorials/dataset_download/#224","text":"\u5982\u679c\u7528\u6237\u662f\u4ece\u522b\u7684\u9014\u5f84\u4e0b\u8f7d\u7684\u539f\u59cb\u6570\u636e\u96c6\u6216\u662f\u5df2\u89e3\u538b\u8fc7\u7684\u6570\u636e\u96c6\uff0c\u5e76\u4e14\u5e0c\u671b\u8f6c\u6362\u540e\u4ec5\u4fdd\u7559DSDL\u6807\u51c6\u7684\u6570\u636e\u96c6\uff0c\u8bf7\u7528\u6237\u81ea\u884c\u89e3\u538b\u6570\u636e\u96c6\u540e\uff0c\u786e\u4fdd\u5176\u76ee\u5f55\u7ed3\u6784\u4e0eREADME\u4e2d\u5c55\u793a\u7684\u201c\u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u201d\u4e00\u81f4\uff0c\u7136\u540e\u5229\u7528-d\u53c2\u6570\u8df3\u8fc7\u89e3\u538b\u64cd\u4f5c\uff0c\u76f4\u63a5\u6267\u884c\u6570\u636e\u96c6\u8f6c\u6362\uff0c\u5176\u4e2d\u8def\u5f84\u4e3a\u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939\uff1a python tools/prepare.py -d <path_to_the_decompressed_dataset_folder> \u8fd0\u884c\u8be5\u4ee3\u7801\u540e\uff0c\u5c06\u4f1a\u5bf9\u7528\u6237\u63d0\u4f9b\u7684\u89e3\u538b\u540e\u7684\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939\u91cc\u7684\u5185\u5bb9\u8fdb\u884cDSDL\u6807\u51c6\u5316\u64cd\u4f5c\uff0c\u5e76\u751f\u6210DSDL\u6807\u6ce8\u3002\u8bf7\u6ce8\u610f\uff0c\u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u7528\u6237\u63d0\u4f9b\u7684\u539f\u59cb\u6570\u636e\u96c6\u7684\u90e8\u5206\u5a92\u4f53\u6587\u4ef6\u6216\u6807\u6ce8\u6587\u4ef6\u88ab\u8986\u76d6\uff0c\u5982\u679c\u4e0d\u60f3\u6539\u53d8\u539f\u59cb\u6570\u636e\u96c6\u7684\u6587\u4ef6\uff0c\u8bf7\u6267\u884c\u4e0a\u6587\u4e2d\u7684 \u8df3\u8fc7\u89e3\u538b\uff0c\u590d\u5236\u4e00\u4efd\u539f\u59cb\u6570\u636e\u96c6\u540e\u6267\u884c\u8f6c\u6362 \u3002\u6267\u884c\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 <dataset_root> # \u6570\u636e\u96c6\u6839\u76ee\u5f55 \u251c\u2500\u2500 <decompressed_dataset_folder> # \u7528\u6237\u81ea\u884c\u89e3\u538b\u5f97\u5230\u7684\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939\uff08\u5176\u4e2d\u90e8\u5206\u6587\u4ef6\u5728\u6807\u51c6\u5316\u8fc7\u7a0b\u4e2d\u5df2\u88ab\u8986\u76d6\uff09 \u251c\u2500\u2500 ... \u251c\u2500\u2500 <dsdl_folder> # OpenDataLab\u4e0a\u4e0b\u8f7d\u540e\u81ea\u884c\u89e3\u538b\u540e\u7684dsdl\u6587\u4ef6\u5939 \u251c\u2500\u2500 ...","title":"2.2.4 \u8df3\u8fc7\u89e3\u538b\uff0c\u6267\u884c\u8f6c\u6362\uff08\u76f4\u63a5\u8986\u76d6\u539f\u59cb\u6570\u636e\u96c6\uff09"},{"location":"tutorials/dataset_download/#3","text":"\u4e3a\u4e86\u6570\u636e\u96c6\u65b9\u4fbf\u5206\u53d1\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u3010\u5a92\u4f53\u6570\u636e\u3011\u548c\u3010\u6807\u6ce8\u6587\u4ef6\u3011\u5206\u79bb\u8fd9\u4e00\u8bbe\u8ba1\u7406\u5ff5\uff0c\u8fd9\u6837\u5373\u4fbf\u7528\u6237\u628a\u4e0d\u540c\u6570\u636e\u4fdd\u5b58\u5728\u4e0d\u540c\u7684\u5b58\u50a8\u4e0a\uff0c\u4e5f\u65e0\u9700\u79fb\u52a8\u6587\u4ef6\uff0c\u4ec5\u9700\u4fee\u6539\u5bf9\u5e94\u7684config\u6587\u4ef6\u4e2d\u5a92\u4f53\u6587\u4ef6\u7684\u5b58\u50a8\u6839\u76ee\u5f55\u5373\u53ef\uff0c\u8fd9\u91cc\u7684\u6570\u636e\u96c6\u914d\u7f6e\u4e5f\u4e3b\u8981\u662f\u6307\u5bf9config\u6587\u4ef6\u7684\u9002\u914d\uff0c\u7528\u6237\u9700\u8981\u4fee\u6539\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\u548c\u8bfb\u53d6\u7684\u6839\u76ee\u5f55\u3002 \u5728 config.py \u4e2d\uff0c\u5217\u4e3e\u4e86\u6240\u652f\u6301\u7684\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5e76\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u7b49\u4fe1\u606f\uff1a \u672c\u5730\u8bfb\u53d6\uff1a local \u4e2d\u7684\u53c2\u6570 working_dir \uff08\u672c\u5730\u6570\u636e\u6240\u5728\u7684\u76ee\u5f55\uff09 \u963f\u91cc\u4e91OSS\u8bfb\u53d6\uff1a ali_oss \u4e2d\u7684\u53c2\u6570\uff08\u963f\u91cc\u4e91OSS\u7684\u914d\u7f6e access_key_secret , endpoint , access_key_id \uff1b\u6876\u540d\u79f0 bucket_name \uff0c\u6570\u636e\u5728\u6876\u4e2d\u7684\u76ee\u5f55 working_dir \u3002\u5173\u4e8e\u963f\u91cc\u4e91OSS\u53c2\u6570\u914d\u7f6e\u4e2d\u76f8\u5173\u5b57\u6bb5\u7684\u8be6\u7ec6\u542b\u4e49\u548c\u914d\u7f6e\u65b9\u6cd5\uff0c\u8bf7\u53c2\u8003\u5176\u5b98\u65b9\u6587\u6863\uff1a \u914d\u7f6e\u6559\u7a0b \uff09 \u5b8c\u6574\u7684config.py\u6587\u4ef6\u793a\u4f8b\u5982\u4e0b\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"the root path of the prepared dataset\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the prefix of the prepared dataset within the bucket\" )","title":"3. \u6570\u636e\u96c6\u914d\u7f6e"},{"location":"tutorials/overview/","text":"\u5728\u6b63\u5f0f\u8fdb\u5165\u5b66\u4e60\u524d\uff0c\u6211\u4eec\u5c06\u7b80\u5355\u4ecb\u7ecd\u6570\u636e\u96c6\u4f7f\u7528\u73b0\u72b6\u53ca\u95ee\u9898\uff0c\u7531\u6b64\u63d0\u51fa\u5bf9\u5e94\u7684\u89e3\u51b3\u601d\u8def\u548c\u65b9\u6848\uff0c\u65e8\u5728\u8ba9\u7528\u6237\u64cd\u4f5c\u6570\u636e\u66f4\u52a0\u5f97\u5fc3\u5e94\u624b\u3002 \u6570\u636e\u96c6\u73b0\u72b6 \u5bf9\u4e8e\u6570\u636e\u96c6\u53d1\u5e03\u65b9\uff0c\u7531\u4e8e\u6ca1\u6709\u7edf\u4e00\u7684\u89c4\u8303\u548c\u6807\u51c6\u7ea6\u675f\u6570\u636e\u96c6\u63cf\u8ff0\u65b9\u5f0f\u53ca\u53d1\u5e03\u9014\u5f84\uff0c\u4f7f\u5f97\uff1a \u4e0d\u540c\u7684\u6570\u636e\u96c6\u6709\u4e0d\u540c\u7684\u7ec4\u7ec7\u7ed3\u6784\uff0c\u6807\u6ce8\u683c\u5f0f\uff1b \u4e0d\u540c\u7684\u6570\u636e\u96c6\u53d1\u5e03\u65b9\u5f0f\u4e0d\u540c\uff1a\u5b98\u7f51\u3001Github\u3001\u7f51\u76d8\u3001\u90ae\u7bb1\u7533\u8bf7\u7b49\u7b49\uff1b \u4e0a\u8ff0\u73b0\u8c61\u4f7f\u5f97\u6570\u636e\u96c6\u4f7f\u7528\u8005\u5728\u6570\u636e\u83b7\u53d6\u548c\u4f7f\u7528\u65f6\u5b58\u5728\u4e00\u7cfb\u5217\u95ee\u9898\uff1a \u83b7\u53d6\u6570\u636e\u96c6\u9700\u8981\u57fa\u4e8e\u641c\u7d22\u5f15\u64ce\u67e5\u770b\u3001\u5bf9\u6bd4\uff0c\u624d\u80fd\u627e\u5230\u60f3\u7528\u7684\u6570\u636e\u96c6\uff1b \u7f51\u7edc\u4e0d\u7a33\u5b9a\u65f6\u65e0\u6cd5\u786e\u5b9a\u4e0b\u8f7d\u6570\u636e\u96c6\u5b8c\u6574\u6027\uff1b \u5bf9\u6570\u636e\u96c6\u5206\u6790\u3001\u67e5\u770b\u901a\u5e38\u9700\u8981\u81ea\u5df1\u5199\u811a\u672c\u5904\u7406\uff1b \u5bf9\u6570\u636e\u96c6\u8bad\u7ec3\u3001\u63a8\u7406\u901a\u5e38\u9700\u8981\u683c\u5f0f\u8f6c\u6362\u6216\u8005\u91cd\u5199DataLoader\uff1b \u540c\u4e00\u4efb\u52a1\u7684\u4e0d\u540c\u6570\u636e\u96c6\uff0c\u9700\u7edf\u4e00\u683c\u5f0f\u8f6c\u6362\u540e\u624d\u80fd\u7edf\u4e00\u4f7f\u7528\uff1b \u4e3a\u4e86\u89e3\u51b3\u6570\u636e\u68c0\u7d22\u548c\u4e0b\u8f7d\u95ee\u9898\uff0c\u6211\u4eec\u642d\u5efa OpenDataLab\u516c\u5f00\u6570\u636e\u96c6\u5e73\u53f0 \uff0c\u6536\u96c6\u4e86\u5927\u91cfAI\u6570\u636e\u96c6\uff0c\u5e76\u5bf9LICENSE\u3001\u5143\u4fe1\u606f\u7b49\u8fdb\u884c\u6574\u7406\uff0c\u63d0\u4f9b\u9ad8\u6548\u68c0\u7d22\u548c\u9ad8\u901f\u4e0b\u8f7d\u80fd\u529b\u3002 \u4e3a\u4e86\u89e3\u51b3\u6570\u636e\u96c6\u65e0\u7edf\u4e00\u89c4\u8303\u800c\u5bfc\u81f4\u7684\u6570\u636e\u96c6\u4f7f\u7528\u7e41\u6742\u95ee\u9898\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u65b0\u4e00\u4ee3AI\u6570\u636e\u96c6\u63cf\u8ff0\u8bed\u8a00 DSDL \uff08Data Set Description Language\uff09\uff0cDSDL\u53ef\u4ee5\u8ba9\u4e0d\u540c\u4efb\u52a1\u3001\u751a\u81f3\u4e0d\u540c\u6a21\u6001\u7684\u6570\u636e\u6807\u6ce8\u4ee5\u76f8\u5bf9\u7edf\u4e00\u7684\u89c4\u8303\u8fdb\u884c\u63cf\u8ff0\uff0c\u7528\u6237\u65e0\u9700\u518d\u4e3a\u683c\u5f0f\u7edf\u4e00\u95ee\u9898\u800c\u5728\u6570\u636e\u4f7f\u7528\u7684\u5404\u4e2a\u73af\u8282\u8017\u8d39\u65f6\u95f4\u3002 \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u5feb\u901f\u7684\u5bf9\u6570\u636e\u8fdb\u884c\u68c0\u7d22\u3001\u4e0b\u8f7d\u3001\u7ba1\u7406\u3001\u7edf\u8ba1\u5206\u6790\u3001\u53ef\u89c6\u5316\u7b49\u64cd\u4f5c\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u6574\u5957\u7684\u6570\u636e\u5de5\u5177\u94fe ODL (Open Dataset Library)\uff0c\u53ef\u5927\u5e45\u63d0\u5347\u7528\u6237\u4f7f\u7528\u6570\u636e\u6548\u7387\u3002 \u7528\u6237\u6559\u7a0b\u5c06\u5bf9AI\u6a21\u578b\u5f00\u53d1\u5168\u6d41\u7a0b\u4e2d\u7684\u6570\u636e\u64cd\u4f5c\u8fdb\u884c\u5c55\u5f00\uff1a 1.\u6570\u636e\u96c6\u51c6\u5907 1.1 \u6570\u636e\u96c6\u4e0b\u8f7d 1.2 \u6570\u636e\u96c6\u7ec4\u7ec7 1.3 \u6570\u636e\u96c6\u914d\u7f6e 2.\u6570\u636e\u96c6\u53ef\u89c6\u5316 2.1 Python\u53ef\u89c6\u5316 2.2 CLI\u53ef\u89c6\u5316 3.\u6a21\u578b\u8bad\u7ec3&\u63a8\u7406 3.1 OpenMMLab 3.2 Pytorch 4. \u9ad8\u9636\u6559\u7a0b 4.1 DSDL\u6570\u636e\u96c6\u6807\u51c6\u5316 4.2 \u81ea\u5b9a\u4e49DSDL Field","title":"\u6559\u7a0b\u4ecb\u7ecd"},{"location":"tutorials/overview/#_1","text":"\u5bf9\u4e8e\u6570\u636e\u96c6\u53d1\u5e03\u65b9\uff0c\u7531\u4e8e\u6ca1\u6709\u7edf\u4e00\u7684\u89c4\u8303\u548c\u6807\u51c6\u7ea6\u675f\u6570\u636e\u96c6\u63cf\u8ff0\u65b9\u5f0f\u53ca\u53d1\u5e03\u9014\u5f84\uff0c\u4f7f\u5f97\uff1a \u4e0d\u540c\u7684\u6570\u636e\u96c6\u6709\u4e0d\u540c\u7684\u7ec4\u7ec7\u7ed3\u6784\uff0c\u6807\u6ce8\u683c\u5f0f\uff1b \u4e0d\u540c\u7684\u6570\u636e\u96c6\u53d1\u5e03\u65b9\u5f0f\u4e0d\u540c\uff1a\u5b98\u7f51\u3001Github\u3001\u7f51\u76d8\u3001\u90ae\u7bb1\u7533\u8bf7\u7b49\u7b49\uff1b \u4e0a\u8ff0\u73b0\u8c61\u4f7f\u5f97\u6570\u636e\u96c6\u4f7f\u7528\u8005\u5728\u6570\u636e\u83b7\u53d6\u548c\u4f7f\u7528\u65f6\u5b58\u5728\u4e00\u7cfb\u5217\u95ee\u9898\uff1a \u83b7\u53d6\u6570\u636e\u96c6\u9700\u8981\u57fa\u4e8e\u641c\u7d22\u5f15\u64ce\u67e5\u770b\u3001\u5bf9\u6bd4\uff0c\u624d\u80fd\u627e\u5230\u60f3\u7528\u7684\u6570\u636e\u96c6\uff1b \u7f51\u7edc\u4e0d\u7a33\u5b9a\u65f6\u65e0\u6cd5\u786e\u5b9a\u4e0b\u8f7d\u6570\u636e\u96c6\u5b8c\u6574\u6027\uff1b \u5bf9\u6570\u636e\u96c6\u5206\u6790\u3001\u67e5\u770b\u901a\u5e38\u9700\u8981\u81ea\u5df1\u5199\u811a\u672c\u5904\u7406\uff1b \u5bf9\u6570\u636e\u96c6\u8bad\u7ec3\u3001\u63a8\u7406\u901a\u5e38\u9700\u8981\u683c\u5f0f\u8f6c\u6362\u6216\u8005\u91cd\u5199DataLoader\uff1b \u540c\u4e00\u4efb\u52a1\u7684\u4e0d\u540c\u6570\u636e\u96c6\uff0c\u9700\u7edf\u4e00\u683c\u5f0f\u8f6c\u6362\u540e\u624d\u80fd\u7edf\u4e00\u4f7f\u7528\uff1b \u4e3a\u4e86\u89e3\u51b3\u6570\u636e\u68c0\u7d22\u548c\u4e0b\u8f7d\u95ee\u9898\uff0c\u6211\u4eec\u642d\u5efa OpenDataLab\u516c\u5f00\u6570\u636e\u96c6\u5e73\u53f0 \uff0c\u6536\u96c6\u4e86\u5927\u91cfAI\u6570\u636e\u96c6\uff0c\u5e76\u5bf9LICENSE\u3001\u5143\u4fe1\u606f\u7b49\u8fdb\u884c\u6574\u7406\uff0c\u63d0\u4f9b\u9ad8\u6548\u68c0\u7d22\u548c\u9ad8\u901f\u4e0b\u8f7d\u80fd\u529b\u3002 \u4e3a\u4e86\u89e3\u51b3\u6570\u636e\u96c6\u65e0\u7edf\u4e00\u89c4\u8303\u800c\u5bfc\u81f4\u7684\u6570\u636e\u96c6\u4f7f\u7528\u7e41\u6742\u95ee\u9898\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u65b0\u4e00\u4ee3AI\u6570\u636e\u96c6\u63cf\u8ff0\u8bed\u8a00 DSDL \uff08Data Set Description Language\uff09\uff0cDSDL\u53ef\u4ee5\u8ba9\u4e0d\u540c\u4efb\u52a1\u3001\u751a\u81f3\u4e0d\u540c\u6a21\u6001\u7684\u6570\u636e\u6807\u6ce8\u4ee5\u76f8\u5bf9\u7edf\u4e00\u7684\u89c4\u8303\u8fdb\u884c\u63cf\u8ff0\uff0c\u7528\u6237\u65e0\u9700\u518d\u4e3a\u683c\u5f0f\u7edf\u4e00\u95ee\u9898\u800c\u5728\u6570\u636e\u4f7f\u7528\u7684\u5404\u4e2a\u73af\u8282\u8017\u8d39\u65f6\u95f4\u3002 \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u5feb\u901f\u7684\u5bf9\u6570\u636e\u8fdb\u884c\u68c0\u7d22\u3001\u4e0b\u8f7d\u3001\u7ba1\u7406\u3001\u7edf\u8ba1\u5206\u6790\u3001\u53ef\u89c6\u5316\u7b49\u64cd\u4f5c\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u6574\u5957\u7684\u6570\u636e\u5de5\u5177\u94fe ODL (Open Dataset Library)\uff0c\u53ef\u5927\u5e45\u63d0\u5347\u7528\u6237\u4f7f\u7528\u6570\u636e\u6548\u7387\u3002 \u7528\u6237\u6559\u7a0b\u5c06\u5bf9AI\u6a21\u578b\u5f00\u53d1\u5168\u6d41\u7a0b\u4e2d\u7684\u6570\u636e\u64cd\u4f5c\u8fdb\u884c\u5c55\u5f00\uff1a 1.\u6570\u636e\u96c6\u51c6\u5907 1.1 \u6570\u636e\u96c6\u4e0b\u8f7d 1.2 \u6570\u636e\u96c6\u7ec4\u7ec7 1.3 \u6570\u636e\u96c6\u914d\u7f6e 2.\u6570\u636e\u96c6\u53ef\u89c6\u5316 2.1 Python\u53ef\u89c6\u5316 2.2 CLI\u53ef\u89c6\u5316 3.\u6a21\u578b\u8bad\u7ec3&\u63a8\u7406 3.1 OpenMMLab 3.2 Pytorch 4. \u9ad8\u9636\u6559\u7a0b 4.1 DSDL\u6570\u636e\u96c6\u6807\u51c6\u5316 4.2 \u81ea\u5b9a\u4e49DSDL Field","title":"\u6570\u636e\u96c6\u73b0\u72b6"},{"location":"tutorials/visualization/","text":"\u6570\u636e\u96c6\u53ef\u89c6\u5316 \u8fd9\u91cc\u63d0\u4f9b\u4e24\u79cd\u53ef\u89c6\u5316\u65b9\u6cd5\uff0c\u4e00\u79cd\u662fpython\u4ee3\u7801\uff0c\u4e00\u79cd\u662f\u547d\u4ee4\u884c\u5de5\u5177\u3002 Python \u4f7f\u7528PIL\u5e93\uff0c\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u7684\u5bf9\u56fe\u7247\u8fdb\u884c\u53ef\u89c6\u5316\uff0c\u8fd9\u91cc\u7ed9\u51fa\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u53ef\u89c6\u5316\u7684\u5b9e\u4f8b\u4ee3\u7801\uff1a import random from dsdl.dataset import DSDLDataset from PIL import Image , ImageDraw val_yaml = \"~/data/PASCAL_VOC2007/dsdl/set-val/val.yaml\" loc_config = dict ( type = \"LocalFileReader\" , working_dir = \"~/data/PASCAL_VOC2007/original\" ) # \u521d\u59cb\u5316Dataset ds_val = DSDLDataset ( dsdl_yaml = val_yaml , location_config = loc_config ) # \u83b7\u53d6\u7d22\u5f15\u4e3a0\u7684\u6837\u672c example = ds_val [ 0 ] # print(example) # \u63d0\u53d6\u56fe\u7247 img = example . Image [ 0 ] . to_image () . convert ( mode = 'RGB' ) # \u5b9a\u4e49Draw\u65b9\u6cd5 draw = ImageDraw . Draw ( img ) # \u8fed\u4ee3\u7ed8\u5236\u6807\u6ce8\u6846\u53ca\u5176\u7c7b\u522b\u540d\u79f0 for i in range ( len ( example . Bbox )): color = ( random . randint ( 0 , 250 ), random . randint ( 0 , 250 ), random . randint ( 0 , 250 )) draw . rectangle ( example . Bbox [ i ] . xyxy , width = 2 , outline = color ) x , y , w , h = example . Bbox [ i ] . xywh draw . text (( x , y ), example . Label [ i ] . name ) # \u5c55\u793a\u7ed8\u56fe\u7ed3\u679c img CLI \u53ef\u89c6\u5316samples dsdl view -y <yaml-name>.yaml -c <config.py> -l ali-oss -n 10 -r -v -f Label BBox Attributes \u6bcf\u4e2a\u53c2\u6570\u7684\u63cf\u8ff0\u5982\u4e0b\uff1a \u7f29\u5199 \u53c2\u6570 \u63cf\u8ff0 -y --yaml dsdl yaml \u6587\u4ef6\u7684\u8def\u5f84 -c --config config\u6587\u4ef6\u7684\u8def\u5f84 -l --location \u53ef\u53d6 local \u6216 ali-oss \uff0c\u5206\u522b\u4ee3\u8868\u4ece\u672c\u5730\u6216\u963f\u91cc\u4e91oss\u8bfb\u53d6\u5a92\u4f53\u6587\u4ef6 -n --num \u53ef\u89c6\u5316\u7684\u6837\u672c\u6570\u91cf -r --random \u662f\u5426\u4ee5\u968f\u673a\u7684\u65b9\u5f0f\u4ece\u6570\u636e\u96c6\u4e2d\u8bfb\u53d6\u4e00\u6279\u6837\u672c -v --visualize \u52a0\u4e0a\u8be5\u53c2\u6570\u4f1a\u5b9e\u9645\u5730\u6267\u884c\u53ef\u89c6\u5316\u64cd\u4f5c\uff0c\u5426\u5219\u4ec5\u5c06\u6837\u672c\u4fe1\u606f\u6253\u5370\u5230\u63a7\u5236\u53f0 -t --task \u6307\u5b9a\u5f53\u524dyaml\u7684\u4efb\u52a1\u7c7b\u522b\uff0c\u5f53\u524d\u652f\u6301\u7684\u4efb\u52a1\u7c7b\u522b\u53ca\u53ef\u89c6\u5316\u7684\u7c7b\u578b\u5c06\u4f1a\u5728\u540e\u6587\u5c55\u793a -f --field \u6307\u5b9a\u53ef\u89c6\u5316\u7684\u7c7b\u578b\uff0c\u5982\u679c\u4e0d\u6307\u5b9a-t, \u4e5f\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a-f\u6765\u9009\u62e9\u5e0c\u671b\u53ef\u89c6\u5316\u7684\u7c7b\u578b\uff0c\u5f53\u524d\u652f\u6301\u7684\u53ef\u89c6\u5316\u7c7b\u578b\u5c06\u4f1a\u5728\u540e\u6587\u5c55\u793a \u5f53\u524d\u652f\u6301\u7684\u53ef\u89c6\u5316\u7c7b\u578b\u89c1FIELDS\u5b57\u6bb5\uff0c\u4efb\u52a1\u7c7b\u522b\u53ca\u5176\u5bf9\u5e94\u7684Field\u79cd\u7c7b\u89c1TASK_FIELDS\u5b57\u6bb5\uff1a FIELDS = [ \"image\" , \"label\" , \"bbox\" , \"polygon\" , \"keypoint\" , \"rotatedbbox\" , \"labelmap\" , \"instancemap\" , \"text\" ] TASK_FIELDS = { \"detection\" : [ \"image\" , \"label\" , \"bbox\" , \"polygon\" , \"keypoint\" , \"rotatedbbox\" ], \"classification\" : [ \"image\" , \"label\" ], \"semantic-seg\" : [ \"image\" , \"labelmap\" ], \"panoptic-seg\" : [ \"image\" , \"labelmap\" , \"instancemap\" ], \"ocr\" : [ \"image\" , \"rotatedbbox\" , \"text\" , \"polygon\" ] } \u53ef\u89c6\u5316\u7684\u7ed3\u679c\u5982\u4e0b\uff1a","title":"\u6570\u636e\u96c6\u53ef\u89c6\u5316"},{"location":"tutorials/visualization/#_1","text":"\u8fd9\u91cc\u63d0\u4f9b\u4e24\u79cd\u53ef\u89c6\u5316\u65b9\u6cd5\uff0c\u4e00\u79cd\u662fpython\u4ee3\u7801\uff0c\u4e00\u79cd\u662f\u547d\u4ee4\u884c\u5de5\u5177\u3002","title":"\u6570\u636e\u96c6\u53ef\u89c6\u5316"},{"location":"tutorials/visualization/#python","text":"\u4f7f\u7528PIL\u5e93\uff0c\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u7684\u5bf9\u56fe\u7247\u8fdb\u884c\u53ef\u89c6\u5316\uff0c\u8fd9\u91cc\u7ed9\u51fa\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u53ef\u89c6\u5316\u7684\u5b9e\u4f8b\u4ee3\u7801\uff1a import random from dsdl.dataset import DSDLDataset from PIL import Image , ImageDraw val_yaml = \"~/data/PASCAL_VOC2007/dsdl/set-val/val.yaml\" loc_config = dict ( type = \"LocalFileReader\" , working_dir = \"~/data/PASCAL_VOC2007/original\" ) # \u521d\u59cb\u5316Dataset ds_val = DSDLDataset ( dsdl_yaml = val_yaml , location_config = loc_config ) # \u83b7\u53d6\u7d22\u5f15\u4e3a0\u7684\u6837\u672c example = ds_val [ 0 ] # print(example) # \u63d0\u53d6\u56fe\u7247 img = example . Image [ 0 ] . to_image () . convert ( mode = 'RGB' ) # \u5b9a\u4e49Draw\u65b9\u6cd5 draw = ImageDraw . Draw ( img ) # \u8fed\u4ee3\u7ed8\u5236\u6807\u6ce8\u6846\u53ca\u5176\u7c7b\u522b\u540d\u79f0 for i in range ( len ( example . Bbox )): color = ( random . randint ( 0 , 250 ), random . randint ( 0 , 250 ), random . randint ( 0 , 250 )) draw . rectangle ( example . Bbox [ i ] . xyxy , width = 2 , outline = color ) x , y , w , h = example . Bbox [ i ] . xywh draw . text (( x , y ), example . Label [ i ] . name ) # \u5c55\u793a\u7ed8\u56fe\u7ed3\u679c img","title":"Python"},{"location":"tutorials/visualization/#cli","text":"","title":"CLI"},{"location":"tutorials/visualization/#samples","text":"dsdl view -y <yaml-name>.yaml -c <config.py> -l ali-oss -n 10 -r -v -f Label BBox Attributes \u6bcf\u4e2a\u53c2\u6570\u7684\u63cf\u8ff0\u5982\u4e0b\uff1a \u7f29\u5199 \u53c2\u6570 \u63cf\u8ff0 -y --yaml dsdl yaml \u6587\u4ef6\u7684\u8def\u5f84 -c --config config\u6587\u4ef6\u7684\u8def\u5f84 -l --location \u53ef\u53d6 local \u6216 ali-oss \uff0c\u5206\u522b\u4ee3\u8868\u4ece\u672c\u5730\u6216\u963f\u91cc\u4e91oss\u8bfb\u53d6\u5a92\u4f53\u6587\u4ef6 -n --num \u53ef\u89c6\u5316\u7684\u6837\u672c\u6570\u91cf -r --random \u662f\u5426\u4ee5\u968f\u673a\u7684\u65b9\u5f0f\u4ece\u6570\u636e\u96c6\u4e2d\u8bfb\u53d6\u4e00\u6279\u6837\u672c -v --visualize \u52a0\u4e0a\u8be5\u53c2\u6570\u4f1a\u5b9e\u9645\u5730\u6267\u884c\u53ef\u89c6\u5316\u64cd\u4f5c\uff0c\u5426\u5219\u4ec5\u5c06\u6837\u672c\u4fe1\u606f\u6253\u5370\u5230\u63a7\u5236\u53f0 -t --task \u6307\u5b9a\u5f53\u524dyaml\u7684\u4efb\u52a1\u7c7b\u522b\uff0c\u5f53\u524d\u652f\u6301\u7684\u4efb\u52a1\u7c7b\u522b\u53ca\u53ef\u89c6\u5316\u7684\u7c7b\u578b\u5c06\u4f1a\u5728\u540e\u6587\u5c55\u793a -f --field \u6307\u5b9a\u53ef\u89c6\u5316\u7684\u7c7b\u578b\uff0c\u5982\u679c\u4e0d\u6307\u5b9a-t, \u4e5f\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a-f\u6765\u9009\u62e9\u5e0c\u671b\u53ef\u89c6\u5316\u7684\u7c7b\u578b\uff0c\u5f53\u524d\u652f\u6301\u7684\u53ef\u89c6\u5316\u7c7b\u578b\u5c06\u4f1a\u5728\u540e\u6587\u5c55\u793a \u5f53\u524d\u652f\u6301\u7684\u53ef\u89c6\u5316\u7c7b\u578b\u89c1FIELDS\u5b57\u6bb5\uff0c\u4efb\u52a1\u7c7b\u522b\u53ca\u5176\u5bf9\u5e94\u7684Field\u79cd\u7c7b\u89c1TASK_FIELDS\u5b57\u6bb5\uff1a FIELDS = [ \"image\" , \"label\" , \"bbox\" , \"polygon\" , \"keypoint\" , \"rotatedbbox\" , \"labelmap\" , \"instancemap\" , \"text\" ] TASK_FIELDS = { \"detection\" : [ \"image\" , \"label\" , \"bbox\" , \"polygon\" , \"keypoint\" , \"rotatedbbox\" ], \"classification\" : [ \"image\" , \"label\" ], \"semantic-seg\" : [ \"image\" , \"labelmap\" ], \"panoptic-seg\" : [ \"image\" , \"labelmap\" , \"instancemap\" ], \"ocr\" : [ \"image\" , \"rotatedbbox\" , \"text\" , \"polygon\" ] } \u53ef\u89c6\u5316\u7684\u7ed3\u679c\u5982\u4e0b\uff1a","title":"\u53ef\u89c6\u5316samples"},{"location":"tutorials/advanced/dsdl_check/","text":"DSDL\u6570\u636e\u96c6\u9a8c\u8bc1 DSDL\u652f\u6301\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u7b80\u5355\u7684check\uff0c\u5e76\u751f\u6210\u68c0\u6d4b\u62a5\u544a\u3002DSDL check\u5c06\u68c0\u67e5\u6a21\u677f\u5b9a\u4e49\u7684\u89c4\u8303\u6027\uff0c\u5e76\u5bf9\u6a21\u677f\u4e0e\u5b9e\u9645\u6807\u6ce8\u6570\u636e\u7684\u5339\u914d\u5173\u7cfb\u8fdb\u884c\u68c0\u67e5\uff0c\u540c\u65f6\u53ef\u5bf9\u5a92\u4f53\u6587\u4ef6\u548c\u6807\u6ce8\u8fdb\u884c\u53ef\u89c6\u5316\uff0c\u4f9b\u7528\u6237\u68c0\u67e5\u53ef\u89c6\u5316\u7ed3\u679c\u3002\u901a\u8fc7DSDL check\u540e\u7684DSDL\u6570\u636e\u96c6\u624d\u53ef\u4fdd\u8bc1\u4f7f\u7528\u4e0b\u6e38\u7684\u5de5\u5177\u94fe\u3002 check \u547d\u4ee4\u5982\u4e0b\u6240\u793a\uff1a dsdl check -y { path_to_yaml_file } -c { path_to_config.py } -l { local/ali-oss } -p { path_to_defs } -t { task } -f { Field } -o ./ \u90e8\u5206\u53c2\u6570\u7684\u542b\u4e49\u5982\u4e0b\uff1a -y \u4e3a\u9700\u68c0\u67e5\u7684\u6a21\u677f\u5b9a\u4e49\u6587\u4ef6 -c \u4e3aconfig\u6587\u4ef6\u7684\u8def\u5f84 -l \u4e3a\u6307\u5b9a\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u9014\u5f84\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 ali-oss \u6216 local\uff0c\u4f1a\u5bf9\u5e94\u8c03\u7528config\u6587\u4ef6\u91cc\u7684ali-oss\u6216local\u91cc\u586b\u5199\u7684\u8def\u5f84\u6765\u8bfb\u53d6\u5a92\u4f53\u6587\u4ef6 -p \u5982\u679c\u5728\u6a21\u677f\u5b9a\u4e49\u6587\u4ef6\u5185\u90e8\u7684import\u6ca1\u6709\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\uff0c\u9700\u8981\u6307\u5b9aimport\u7684\u6839\u76ee\u5f55 -t \u4e3a\u6307\u5b9a\u5f53\u524dyaml\u7684\u4efb\u52a1\u7c7b\u522b\uff0c\u5f53\u524d\u652f\u6301\u7684\u4efb\u52a1\u7c7b\u522b\u53ca\u53ef\u89c6\u5316\u7684\u7c7b\u578b\u5c06\u4f1a\u5728\u540e\u6587\u5c55\u793a -f \u4e3a\u6307\u5b9a\u53ef\u89c6\u5316\u7684\u7c7b\u578b\uff0c\u5982\u679c\u4e0d\u6307\u5b9a-t, \u4e5f\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a-f\u6765\u9009\u62e9\u5e0c\u671b\u53ef\u89c6\u5316\u7684\u7c7b\u578b\uff0c\u5f53\u524d\u652f\u6301\u7684\u53ef\u89c6\u5316\u7c7b\u578b\u5c06\u4f1a\u5728\u540e\u6587\u5c55\u793a -o \u4e3a\u6307\u5b9a\u8f93\u51fa\u7684\u6587\u4ef6\u5939\uff0c\u5305\u542b\u56fe\u7247\u548cmd\u6587\u6863\uff0ccheck\u7684\u7ed3\u679c\u4fdd\u5b58\u5728\u8f93\u51fa\u6587\u4ef6\u5939\u4e0b\u7684log/output.md\u4e2d \u5f53\u524d\u652f\u6301\u7684\u53ef\u89c6\u5316\u7c7b\u578b\u89c1FIELDS\u5b57\u6bb5\uff0c\u4efb\u52a1\u7c7b\u522b\u53ca\u5176\u5bf9\u5e94\u7684Field\u79cd\u7c7b\u89c1TASK_FIELDS\u5b57\u6bb5\uff1a FIELDS = [ \"image\" , \"label\" , \"bbox\" , \"polygon\" , \"keypoint\" , \"rotatedbbox\" , \"labelmap\" , \"instancemap\" , \"text\" ] TASK_FIELDS = { \"detection\" : [ \"image\" , \"label\" , \"bbox\" , \"polygon\" , \"keypoint\" , \"rotatedbbox\" ], \"classification\" : [ \"image\" , \"label\" ], \"semantic-seg\" : [ \"image\" , \"labelmap\" ], \"panoptic-seg\" : [ \"image\" , \"labelmap\" , \"instancemap\" ], \"ocr\" : [ \"image\" , \"rotatedbbox\" , \"text\" , \"polygon\" ] } 1. \u5b9e\u9645\u6848\u4f8b \u5047\u8bbeDSDL\u6570\u636e\u96c6\u548c\u539f\u59cb\u6570\u636e\u96c6\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff0c\u7528\u6237\u9700\u8981\u5206\u522b\u5bf9train.yaml\u3001val.yaml\u548ctest.yaml\u8fdb\u884c\u9a8c\u8bc1\uff1a root-path/ \u251c\u2500\u2500 original-dataset/ # \u539f\u59cb\u6570\u636e\u96c6\u7684\u8def\u5f84 \u2502 \u251c\u2500\u2500 ... \u2514\u2500\u2500 dsdl-dataset/ \u251c\u2500\u2500 defs/ \u2502 \u251c\u2500\u2500 detction-def.yaml # \u4efb\u52a1\u7c7b\u578b\u7684struct\u5b9a\u4e49\u6587\u4ef6,task\u4e3a\u68c0\u6d4b\u4efb\u52a1 \u2502 \u2514\u2500\u2500 class-dom.yaml # \u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 set-train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 set-val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u251c\u2500\u2500 set-test/ # \u6d4b\u8bd5\u96c6 \u2502 \u251c\u2500\u2500 test.yaml \u2502 \u2514\u2500\u2500 test_samples.json \u2514\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6 \u5047\u8bbe\u5a92\u4f53\u6587\u4ef6\u4ece\u672c\u5730\u8bfb\u53d6\uff0c\u90a3\u4e48config.py\u6587\u4ef6\u7684\u5185\u5bb9\u4e3a\uff1a local = dict( type=\"LocalFileReader\", working_dir=\"root-path/original-dataset\", ) \u5047\u8bbe\u662f\u4e00\u4e2a\u68c0\u6d4b\u7684\u6570\u636e\u96c6\uff0c\u53ef\u6307\u5b9a-t\u4e3adetection\uff0ccheck\u547d\u4ee4\u5982\u4e0b\uff1a dsdl check -y set-train/train.yaml -c config.py -l local -t detection -p defs/ -o ./ \u6216\u8005\u4e5f\u53ef\u4ee5\u7528-f\u6765\u76f4\u63a5\u6307\u5b9a\u53ef\u89c6\u5316\u7684\u7c7b\u578b\uff1a dsdl check -y set-train/train.yaml -c config.py -l local -f image label bbox -p defs/ -o ./ \u5176\u4e2d\uff0c\u5982\u679ctrain.yaml\u4e2d\u7684import\u90e8\u5206\u5199\u4e86\u76f8\u5bf9\u8def\u5f84\u7684\u8bdd\uff08\u5982\u4e0b\uff09\uff0c\u53ef\u4ee5\u7701\u7565-p\u53c2\u6570\uff1a $dsdl-version : \"0.5.0\" $import : - ../defs/class-domain - ../defs/object-detection-def meta : dataset_name : \"VOC2007\" sub_dataset_name : \"train\" task_type : \"SemanticSementation\" dataset_homepage : \"http://host.robots.ox.ac.uk/pascal/VOC/voc2007/index.html\" dataset_publisher : \"University of Leeds | ETHZ, Zurich | University of Edinburgh |Microsoft Research Cambridge | University of Oxford\" OpenDataLab_address : \"https://opendatalab.com/PASCAL_VOC2007/download\" data : sample-type : ObjectDetectionSample[cdom=VOCClassDom] sample-path : train_samples.json 2. DSDL check\u6a21\u5757 \u76ee\u524d\u89e3\u6790\u5668\u7684\u68c0\u67e5\u5206\u4e09\u4e2a\u6a21\u5757\uff1a class_dom\u7684\u68c0\u67e5 strcut\u7684\u68c0\u67e5 \u53c2\u6570\u7684\u68c0\u67e5 2.1 class_dom\u7684\u68c0\u67e5 \u9996\u5148\u660e\u786eclass_dom\u7684\u6837\u5f0f\uff1a AnnotationDom : $def:class_domain classes : - person - ... KeyointDom : $def:class_domain classes : - lefteye.person# \u4f1a\u62a5DefineSyntaxWarning - ... skeleton : - [ 14 , 16 ] - [ 5 , 6 ] - [ 10 , 12 ] - ... \u5305\u62ec\uff1a class_dom\u4e2d\u7684categories\u540d\u548csuper_categories\u540d\u5b57\u68c0\u67e5\uff0c\u9700\u8981\u4fdd\u8bc1category[super_category]\u4e2dsuper_category\u5728FatherClassDom\u4e2d\u5b58\u5728 \u4fdd\u8bc1ClassificationClassDom[ClassificationFatherDom]\u4e2dClassificationFatherDom\u662f\u5df2\u7ecf\u5b9a\u4e49\u7684\u7236\u7c7b \u4fdd\u8bc1\u7236\u7c7b\u540d\u683c\u5f0f\u548c classes \u91cc\u9762\u7684\u7c7b\u522b\u540d\u683c\u5f0f\u5bf9\u5e94\uff1a \u6bd4\u5982 COCO2017ClassDom[COCO2017ClassFatherDom1,COCO2017ClassFatherDom2]: \u8bf4\u660e\u6709\u4e24\u4e2a\u7c7b\u522b\u540d\uff0c\u90a3\u4e48classes\u4e2d\u7684\u7c7b\u522b\u5b9a\u4e49\u683c\u5f0f\u5c31\u8981\u662f\uff1a classes: - airplane[tool][sports tool] \u4fdd\u8bc1skeleton\u4e2d\u7684\u5b57\u6bb5\u662flist of int 2.2 strcut\u7684\u68c0\u67e5 LocalObjectEntry : $def:struct $params : [ 'cdom' ] $fields : label : Label[dom=$cdom] bbox : BBox polygon : Polygon rlepolygon : RlePolygon #\u4e0epolygon\u4e8c\u9009\u4e00 InstanceSegmentationSample : $def:struct $params : [ 'scenedom' , 'objectdom' ] $fields : image : Image sclabel : List[Label[dom=$scenedom]] semantic_seg : SegMap[dom=$cdom] objects : List[etype=LocalObjectEntry[cdom=$objectdom,optional=True],optional=True] $optional : [ 'semantic_seg' ] \u5305\u62ec\uff1a struct\u7684\u540d\u5b57\u4e0d\u80fd\u662fdsdl\u7684\u5185\u7f6e\u7c7b\u578b\u540d\uff08\u53c2\u89c1\u4e0b\u8868\uff09 $def\u4e2d\u5b9a\u4e49\u7684\u5fc5\u987b\u662fstrcut\u6216class_dom $params \u53c2\u6570\u9a8c\u8bc1\u53c2\u89c1\u5355\u72ec\u7684\u53c2\u6570\u9a8c\u8bc1\u6a21\u5757 $fields\u4e2d\u68c0\u67e5 \u662f\u5426\u6709\u5b57\u6bb5\uff0c\u6ca1\u6709\u62a5\u9519 \u5b57\u6bb5\u540d\u5b57\u662f\u5426\u7b26\u5408\u89c4\u8303\uff1a \u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u4e0d\u80fd\u5305\u542b\u7a7a\u683c\uff0c\u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf \u5b57\u6bb5\u7c7b\u578b\u662f\u5426\u662fDSDL\u4e2d\u5b9a\u4e49\u7684 \u57fa\u672c\u6570\u636e\u7c7b\u578b \uff0c\u5982\u679c\u662fstruct\u7c7b\u578b\uff0c\u5982 objects: LocalObjectEntry[cdom=$cdom] \u9700\u8981\u68c0\u67e5\u8be5struct\u7c7b\u578b\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\uff08\u53ef\u4ee5\u5728\u540e\u9762\u518d\u5b9a\u4e49\uff0c\u987a\u5e8f\u4e0d\u8981\u7d27\uff0c\u4f46\u662f\u8981\u6709\uff09\u3002 \u5b57\u6bb5\u7c7b\u578b\u4e2d\u7684\u53c2\u6570\u662f\u5426\u7b26\u5408\u89c4\u8303\uff1a\u5305\u62ec\u53c2\u6570\u540d\u5b57\u548c\u53c2\u6570\u503c $optional\u4e2d\u68c0\u67e5\uff1aoptional list \u4e2d\u7684\u5b57\u6bb5\u662f\u5426\u662f\u5df2\u7ecf\u6ce8\u518c\u7684\uff0c\u6ca1\u6709\u5c31\u62a5\u9519 strcut\u4e2d\u7684\u5faa\u73af\u5f15\u7528\u68c0\u67e5 2.3 \u53c2\u6570\u68c0\u67e5 \u5305\u62ec\uff1a $params \u4e2d\u5305\u542b\u7684\u53c2\u6570\u540d\u5b57\u548c\u4e0b\u9762 $field \u5b57\u6bb5\u4e2d\u7684\u4e00\u4e00\u5bf9\u5e94 $params \u4e2d\u7ed9\u7684\u53c2\u6570\u662f\u5426\u4e0e data section \u4e2d sample-type \u5bf9\u5e94\uff0c eg. SceneAndObjectSample[scenedom=COCO2017ClassFatherDom,objectdom=COCO2017ClassDom] \u5224\u65ad\u5e26\u53c2\u6570\u7684\uff0c\u4e14\u7528\u5230\u522b\u7684struct\u7684 $field \u5b57\u6bb5\uff08\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 objects \uff09 \u8be5\u5f15\u7528\u7684struct\u662f\u5426\u5b58\u5728\uff08 LocalObjectEntry \u662f\u5426\u5b58\u5728\uff09 \u662f\u5426\u5b58\u5728\u5faa\u73af\u5f15\u7528\uff0c\u5982\u679c\u5b58\u5728\u5c31\u62a5\u9519 \u8be5\u5f15\u7528\u7684struct\u4e2d\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u662f\u5426\u90fd\u5df2\u7ecf\u88ab\u5b9a\u4e49\uff0c\u662f\u5426\u5b58\u5728\u672a\u8d4b\u503c\u7684\u53c2\u6570\uff0c\u6709\u5c31\u62a5\u9519 \u76ee\u524d\u4e0d\u540c\u5b57\u6bb5\u5f15\u7528\u540c\u4e00\u4e2astrcut\u4e5f\u4f1a\u62a5\u9519 3. \u9a8c\u8bc1\u7ed3\u679c \u62a5\u544a\u5206\u4e3a 3\u4e2a\u90e8\u5206 \uff1a parser\u68c0\u67e5\u7ed3\u679c\uff1a\u7ed3\u679c\u5305\u62ec\u4e86parse\u7ed3\u679c\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u5219\u53ef\u4ee5\u67e5\u770b\u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f samples\u5b9e\u4f8b\u5316\u68c0\u67e5\u7ed3\u679c\uff1a\u5176\u4e2d\u62a5\u544a\u8bf4\u660e\u4e86\u5f53\u524d\u6570\u636e\u96c6\u5171\u6709\u6837\u672c\u4e2a\u6570\uff0c\u6b63\u5e38\u6837\u672c\u4e2a\u6570\uff0c\u8b66\u544a\u6837\u672c\u4e2a\u6570\uff0c\u9519\u8bef\u6837\u672c\u4e2a\u6570\uff0c\u5e76\u63d0\u4f9b\u4e86\u5f02\u5e38\u6837\u672c\u7684\u5177\u4f53\u4fe1\u606f\u65e5\u5fd7\u3002 \u53ef\u89c6\u5316\u7ed3\u679c\uff1a\u9700\u8981\u8089\u773c\u89c2\u5bdf\u53ef\u89c6\u5316\u7ed3\u679c\u662f\u5426\u6b63\u786e\uff0c\u6bd4\u5982bbox\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\uff0c\u6807\u7b7e\u5185\u5bb9\u662f\u5426\u6b63\u786e\u7b49\uff0c\u5728\u56fe\u7247\u4e0b\u9762\u5c55\u793a\u4e86\u53ef\u89c6\u5316\u8fc7\u7a0b\u4e2d\u7684\u65e5\u5fd7\u5185\u5bb9\uff0c\u6bd4\u5982\u662f\u53ef\u89c6\u5316\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u4ee5\u53ca\u5931\u8d25\u65e5\u5fd7\u7b49\u3002 3.1 Parser\u90e8\u5206 3.1.1 Class doamin\u90e8\u5206 ValidationError\uff1a Error with class-dom name, {class_dom_name} must be a valid identifier. [1. Struct name 2. Class domain name 3.name of $field in Struct ] is considered a valid identifier if it only contains alphanumeric letters (a-z) and (0-9), or underscores (_). A valid identifier cannot start with a number, or contain any spaces. ValidationError\uff1aError in {struct_name} , {filed_name} must be a valid identifier. [1. Struct name 2. Class domain name 3.name of $field in Struct ] is considered a valid identifier if it only contains alphanumeric letters (a-z) and (0-9), or underscores (_). A valid identifier cannot start with a number, or contain any spaces. \u542b\u4e49\uff1astruct\u3001class domain \u7684\u540d\u5b57\uff08\u5982\u4e0a\u9762\u4f8b\u5b50\u91cc\u9762\u7684 **AnnotationDom** \u7b49\uff09\u548cstrcut\u4e2d$filed\u91cc\u9762\u7684\u540d\u5b57\u90fd\u8981\u662f\u4e00\u4e2aa valid identifier\uff1a\u5373\u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\uff08\u4e14\u4e0d\u4ee5\u5b57\u6bcd\u5f00\u5934\uff09\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u7a7a\u683c\u3002 ValidationError\uff1a Error with class-dom name, {varstr} can't be a Python keyword. check https://docs.python.org/3/reference/lexical_analysis.html#keywords for more information. \u542b\u4e49\uff1aclass domain \u7684\u540d\u5b57\uff08\u5982\u4e0a\u9762\u4f8b\u5b50\u91cc\u9762\u7684 **AnnotationDom** \u7b49\uff09\u4e0d\u80fd\u662f\u4e00\u4e2apython\u7684\u4fdd\u7559\u5b57\u7b26\u4e32\uff08\u5982\uff1adef, del, if, or....., \u4fdd\u7559\u5b57\u7b26\u4e32\u5217\u8868\u8be6\u89c1\uff1ahttps://docs.python.org/3/reference/lexical_analysis.html#keywords\uff09\u3002 ValidationError\uff1a { self.name } is dsdl build-in value name, please rename it. Build-in value names are: Bool, Num, Int, Str, Coord, Coord3D, Interval, BBox, Polygon, Image, InstanceMap, Video, Dict, Text, InstanceID, Date, Time, Label, LabelMap, Keypoint, List, ImageShape, RotatedBBox, UniqueID. \u542b\u4e49\uff1a\u5f53struct\u3001class domain \u7684\u540d\u5b57\uff08\u5982\u4e0a\u9762\u4f8b\u5b50\u91cc\u9762\u7684 **AnnotationDom** \u7b49\uff09\u662fdsdl\u91cc\u9762\u7684\u5185\u7f6e\u7c7b\u540d\u7684\u65f6\u5019\u4f1a\u62a5\u9519\uff0cdsdl\u5185\u7f6e\u7c7b\u522b\u540d\u5305\u62ec\uff1aBool, Num, Int, Str, Coord, Coord3D, Interval, BBox, Polygon, Image, InstanceMap, Video, Dict, Text, InstanceID, Date, Time, Label, LabelMap, Keypoint, List, ImageShape, RotatedBBox, UniqueID DefineSyntaxError\uff1aError in skeleton of { self.class_name } : skeleton must be list of list of int. \u542b\u4e49\uff1a\u9700\u8981\u4fdd\u8bc1skeleton\u4e2d\u7684\u5b57\u6bb5\u662flist of int DefineSyntaxError\uff1a { label_name } is not allowed. Label in class-dom can't start with dot . \u542b\u4e49\uff1aclass domain\u4e2d\u7684label\u662f\u4e0d\u80fd\u4ee5 . \u6765\u5f00\u59cb\u7684 DefineSyntaxWarning\uff1a {label_name} is not recommended. We recommend using alphanumeric letters (a-z, A-Z and 0-9), and underscores (_) for label in class-dom (with hierarchical structure). \u542b\u4e49\uff1a\u5bf9\u4e8e\u6709\u5c42\u7ea7\u7ed3\u6784\u7684class domain\u7684label\u6765\u8bf4\u4f1a\u62a5\u8fd9\u4e2a\u9519\u8bef\uff0c\u8868\u793a\uff1a\u5bf9\u4e8e\u6709\u5c42\u7ea7\u7ed3\u6784\u7684class domain\u7684label\uff0c\u6211\u4eec\u63a8\u8350\u4f7f\u7528\u5b57\u6bcd\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u6765\u4f5c\u4e3alabel\u540d\uff0c\u5e76\u4ee5 . \u6765\u5212\u5206\u7236\u5b50\u7c7b\u3002\uff08\u5e26\u7a7a\u683c\u4f1a\u62a5warning\uff09 DefineSyntaxWarning\uff1a {label_name} is not recommended. We recommend using space, alphanumeric letters (a-z, A-Z and 0-9), and underscores (_) \"\u3001 for label in class-dom (without hierarchical structure). \u542b\u4e49\uff1a\u5bf9\u4e8e\u975e\u5c42\u7ea7\u7ed3\u6784\u7684class domain\u7684label\u6765\u8bf4\u4f1a\u62a5\u8fd9\u4e2a\u9519\u8bef\uff0c\u8868\u793a\uff1a\u5bf9\u4e8e\u975e\u5c42\u7ea7\u7ed3\u6784\u7684class domain\u7684label\uff0c\u6211\u4eec\u63a8\u8350\u4f7f\u7528\u7a7a\u683c\u5b57\u6bcd\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u6765\u4f5c\u4e3alabel\u540d\u3002 3.1.2 Data section\u90e8\u5206 DefineSyntaxError\uff1adata yaml must contain meta section. \u542b\u4e49\uff1a\u6570\u636eyaml\u6587\u4ef6\u4e2d\u5fc5\u987b\u5305\u542b meta \u90e8\u5206 (\u4e0d\u7ba1\u51e0\u4e2ayaml\u6587\u4ef6\uff0c\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u5305\u542b\uff0cstrcut\u3001class domain\u7b49yaml\u6587\u4ef6\u53ef\u4ee5\u6ca1\u6709)\uff0ceg. $ dsdl - version : \"0.5.2\" $ import : - ../ defs / image - generation - facade - ../ defs / style - dom meta : dataset - name : \"facade_pix2pix\" home - page : \"http://efrosgans.eecs.berkeley.edu/pix2pix/datasets/\" creator : \"Berkeley AI Research (BAIR) Laboratory, UC Berkeley\" opendatalab - page : \"\" subset - name : \"train\" task - type : \"Image Generation\" data : sample - type : FacadeImageSample [ cdom = FacadeStyleDomain ] sample - path : train_samples . json DefineSyntaxError: data yaml must contain data section and data section must have sample-type . \u542b\u4e49\uff1a\u6570\u636eyaml\u6587\u4ef6\u4e2d\u5fc5\u987b\u5305\u542b data \u90e8\u5206 (\u4e0d\u7ba1\u51e0\u4e2ayaml\u6587\u4ef6\uff0c\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u5305\u542b\uff0cstrcut\u3001class domain\u7b49yaml\u6587\u4ef6\u53ef\u4ee5\u6ca1\u6709)\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u3002\u540c\u65f6\uff0c data \u90e8\u5206\u5fc5\u987b\u5305\u542b sample-type \u3002 DefineSyntaxWarning: global-info-type is not defined. \u542b\u4e49\uff1a global-info-type \u6ca1\u6709\u88ab\u5b9a\u4e49\uff0c\u8fd9\u662f\u4e00\u4e2awarning\uff0c\u53ef\u4ee5\u4e0d\u7ba1. DefineSyntaxError: { struct_name/class_dom_name } section must contain \"$def\" sub-section. \u542b\u4e49\uff1astrcut\u548cclass_dom\u4e2d\u5fc5\u987b\u5305\u542b$def\u5b57\u6bb5\u6765\u5b9a\u4e49\u5b83\u7684\u7c7b\u578b\u3002 DefineSyntaxError: error type { define_type } in yaml, type must be class_domain or struct. \u542b\u4e49\uff1a$def\u5b57\u6bb5\u53ea\u80fd\u662fstrcut\u548cclass_domain\u4e2d\u7684\u4e00\u4e2a\u3002 DuplicateDefineWarning: { struct_name/class_dom_name } has defined. \u542b\u4e49\uff1a\u67d0\u4e2astrcut/class_domain\u5df2\u7ecf\u88ab\u5b9a\u4e49\u4e86\uff0c\u8fd9\u662f\u4e00\u4e2awarning\uff0c\u53ef\u4ee5\u4e0d\u7ba1\u3002\u5982\u679c\u4e0d\u7ba1\uff0c\u90a3\u540e\u9762\u5b9a\u4e49\u7684\u4f1a\u8986\u76d6\u524d\u9762\u5b9a\u4e49\u7684\u5185\u5bb9\u3002 DSDLImportError: import_path does not exist in given_path , please give the right path using -p . \u542b\u4e49\uff1a\u5f53\u7528 -p \u6307\u5b9a\u6570\u636eyaml\u6587\u4ef6\u4e2d$import\u8def\u5f84\u7684\u65f6\u5019\uff0c\u5982\u679c\u6ca1\u627e\u5230\u9700\u8981import\u7684\u6587\u4ef6\u4f1a\u62a5\u8fd9\u4e2a\u95ee\u9898\u3002 DSDLImportError: import_path does not exist in neither { current_path } nor dsdl/dsdl_library , please check the path or give the right path using -p . \u542b\u4e49\uff1a\u5f53\u4e0d\u7528 -p \u6307\u5b9a\u6570\u636eyaml\u6587\u4ef6\u4e2d$import\u8def\u5f84\u7684\u65f6\u5019\uff0c\u5982\u679c\u5728\u5f53\u524d\u6587\u4ef6\u5939\u548cdsdl\u5e93\u6587\u4ef6\uff08dsdl/dsdl_library\uff09\u4e2d\u90fd\u6ca1\u627e\u5230\u9700\u8981import\u7684\u6587\u4ef6\u4f1a\u62a5\u8fd9\u4e2a\u95ee\u9898\u3002 3.1.3 struct\u90e8\u5206\u548c\u53c2\u6570\u90e8\u5206 DefineSyntaxError: Error in field with value of { field_type } . check the { k_v} part. \u542b\u4e49\uff1astruct\u4e2d\u7684\u67d0\u4e2a\u7c7b\u578b\u4e3a{ field_type } \u7684filed\u51fa\u4e86\u95ee\u9898\u3002(\u53ef\u80fd\u8fd8\u4f1a\u63d0\u793a\u662f { field_type } \u4e2d\u7684 k_v\u90e8\u5206\u51fa\u4e86\u95ee\u9898) DefineSyntaxError: definition error of {field_type} has {param_list} , please check field \u542b\u4e49\uff1afield_type\u4e0d\u5728field list\u548cstruct list\u4e2d\uff0c\u89c6\u4e3a\u53c2\u6570\uff0c\u53c2\u6570\u4e0d\u53ef\u4ee5\u6709\u5d4c\u5957\u7684\u53c2\u6570\u5217\u8868\u3002 [cdom\u7684\u62a5\u9519] DefineSyntaxError\uff1adefinition error of dom {cdom_name} not in $params {self.struct_params} \uff0ccheck cdom is defined correctly. \u542b\u4e49\uff1a\u8c03\u7528\u7684cdom_name\u6ca1\u6709\u5728\u8be5struct\u5b9a\u4e49\u7684params\u4e2d\u3002 DefineSyntaxError\uff1a {k_v} is dom params, should have '=' \u542b\u4e49\uff1a\u8c03\u7528\u7684cdom\u53c2\u6570\uff0c\u4f46\u662f\u6ca1\u6709\u8d4b\u503c\uff0c\u5fc5\u987b\u542b\u2018=\u2019 [List\u7c7b\u578b\u7684\u62a5\u9519]\uff1a DefineSyntaxError\uff1a {param} is list etype params, should have '=' \u542b\u4e49\uff1aList\u4e2d\u6709etype\u5f00\u5934\u7684\u53c2\u6570\uff0c\u4f46\u662f\u6ca1\u6709\u8d4b\u503c\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u8d4b\u503c\u3002 3.2 Samples\u5b9e\u4f8b\u5316\u90e8\u5206 3.2.1 \u662f\u5426\u5b58\u5728\u6837\u672c DSDL Check\u4f1a\u5c06\u6240\u6709\u6837\u672c\u8bfb\u53d6\u5230\u5185\u5b58\u4e2d\uff0c\u5982\u679c\u68c0\u6d4b\u5230\u7684\u6837\u672c\u6570\u76ee\u4e3a0\uff0c\u8be5\u60c5\u51b5\u5f02\u5e38\uff0c\u4f1a\u5728\u62a5\u544a\u4e2d\u663e\u793a\uff1a { \"flag\" : 0 , \"msg\" : \"No samples found, please check the path of json file.\" } \u6b64\u65f6\u7528\u6237\u9700\u8981\u68c0\u67e5Yaml\u6587\u4ef6\u4e2d\u6307\u5b9a\u7684json\u6587\u4ef6\u8def\u5f84\u662f\u5426\u6b63\u786e\u3002 \u5982\u679c\u5b9e\u4f8b\u5316\u6837\u672c\u6570\u76ee\u5927\u4e8e0\uff0c\u5219\u8be5\u5b57\u6bb5\u4f1a\u663e\u793a\uff1a { \"flag\" : 1 , \"msg\" : f \"Totally { sample_nums } samples found.\" } \u6b64\u65f6\u9700\u8981\u7528\u6237\u68c0\u67e5\u6837\u672c\u6570\u76ee\u662f\u5426\u6b63\u786e 3.2.2 \u662f\u5426\u6210\u529f\u5b9e\u4f8b\u5316\u6570\u636e\u96c6\u5bf9\u8c61 DSDL Check\u4f1a\u5c06\u6240\u6709\u7684\u6837\u672c\u5b58\u50a8\u5230\u4e00\u4e2a dsdl.dataset.CheckDataset \u5bf9\u8c61\u5f53\u4e2d\uff0c\u5982\u679c\u5b9e\u4f8b\u5316 dsdl.dataset.CheckDataset \u5bf9\u8c61\u7684\u8fc7\u7a0b\u4e2d\u6210\u529f\uff0c\u4f1a\u5728\u62a5\u544a\u4e2d\u663e\u793a\uff1a { \"flag\" : 1 , \"msg\" : \"Dataset init successfully!\" } \u53cd\u4e4b\uff0c\u5982\u679c\u6570\u636e\u96c6\u5bf9\u8c61\u5b9e\u4f8b\u5316\u5931\u8d25\uff0c\u5219\u4f1a\u5728\u62a5\u544a\u4e2d\u663e\u793a\uff1a { \"flag\" : 0 , \"msg\" : f \"Dataset init error: { e } \" } \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u96c6\u5b9e\u4f8b\u5316\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u662f\u5728yaml\u6587\u4ef6\u4e2d\u58f0\u660e\u7684sample_type\u4e0d\u5b58\u5728\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff1a data : sample-type : KeyPointSample[cdom0=KeyPoint_person_ClassDom] sample-path : samples.json \u5728\u4e0a\u9762\u7684yaml\u4e2d\u7684\u5982\u679c KeyPointSample \u672a\u5b9a\u4e49\uff0c\u6216\u8005 KeyPoint_person_ClassDom \u672a\u5b9a\u4e49\uff0c\u6216\u8005 KeyPointSample \u7684\u53c2\u6570\u540d\u4e0d\u53eb cdom0 \uff0c\u90fd\u4f1a\u5f15\u8d77\u6570\u636e\u96c6\u5b9e\u4f8b\u5316\u62a5\u9519\uff0c\u7528\u6237\u9700\u8981\u68c0\u67e5\u662f\u5426\u4e0a\u8ff0\u8fd9\u4e9b\u5185\u5bb9\u5199\u9519\u4e86\u3002 3.2.3 \u5bf9\u6837\u672c\u8fdb\u884c\u5b9e\u4f8b\u5316 DSDL Check\u4f1a\u5c06\u6240\u6709\u7684\u6837\u672c\u5b9e\u4f8b\u5316\u4e3a Struct \u5bf9\u8c61\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u6709\u6837\u672c\u751f\u6210\u5931\u8d25\uff0cDSDL\u4f1a\u5c06\u9519\u8bef\u4fe1\u606f\u8bb0\u5f55\u5230\u6587\u6863\u4e2d\uff0c\u65b9\u4fbf\u7528\u6237\u6eaf\u6e90\u3002 \u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f\u4e3a\uff1a \u6570\u636e\u4e0d\u7b26\u5408schema \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5982\u679cStruct\u4e2d\u67d0\u4e00\u4e2aField\u4e3aInt\uff0c\u4f46\u662f\u7ed9\u5b9a\u6570\u636e\u5374\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5219\u4f1a\u62a5\u4ee5\u4e0b\u9519\u8bef\uff1a ValidationError in { Field_Type } field : Schema is { schema } . Data is { data } . \u4e0a\u8ff0\u7684\u62a5\u9519\u4fe1\u606f\u4e2d\uff0c\u544a\u8bc9\u4e86\u7528\u6237\u662f\u54ea\u4e00\u4e2aField\u62a5\u9519\uff0c\u8fd9\u4e2aField\u7684schema\uff0c\u4ee5\u53ca\u5f53\u524d\u62a5\u9519\u6837\u672c\u7684\u5177\u4f53\u6570\u636e\uff0c\u901a\u8fc7\u5bf9\u6bd4\u5177\u4f53\u6570\u636e\u548cschema\uff0c\u7528\u6237\u53ef\u4ee5\u77e5\u9053\u662f\u54ea\u91cc\u51fa\u4e86\u9519\u3002 \u5b57\u6bb5\u4e0d\u5339\u914d\u9519\u8bef \u4e3e\u4f8b\u6765\u8bf4\uff0c\u6709\u4ee5\u4e0b\u7684yaml\uff1a KeyPointLocalObject : $def : struct $params : [ \"cdom0\" ] $fields : num_keypoints : Int keypoints : Keypoint[dom=$cdom0] $optional : [ \"num_keypoints\" ] \u5982\u679c\u5177\u4f53\u7684\u6570\u636e\u4e2d\uff0c\u4e0d\u5b58\u5728 keypoints \u5b57\u6bb5\uff0c\u4f46\u662f\u7531\u4e8e keypoints \u5b57\u6bb5\u4e0d\u5728 $optional \u5217\u8868\u5f53\u4e2d\uff0c\u5219\u4f1a\u62a5\u4ee5\u4e0b\u7684\u9519\u8bef\uff1a Required struct instance { key } is missing . \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u9700\u8981\u5728\u6570\u636e\u4e2d\u6dfb\u52a0 keypoints \u5b57\u6bb5\u4fe1\u606f\uff0c\u6216\u8005\u5c06 keypoints \u5b57\u6bb5\u6dfb\u52a0\u5230 $optional \u5217\u8868\u5f53\u4e2d\u3002 \u53e6\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u5177\u4f53\u7684\u6570\u636e\u4e2d\u51fa\u73b0\u4e86yaml\u5b9a\u4e49\u4ee5\u5916\u7684\u5b57\u6bb5\uff0c\u5219\u4f1a\u62a5\u4ee5\u4e0b\u7684\u9519\u8bef\uff1a Not defined keys { keys } found in sample , which is not permitted in strict init mode . \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u9700\u8981\u5c06\u6570\u636e\u4e2d\u7684\u591a\u4f59\u5b57\u6bb5\u53bb\u9664\uff0c\u6216\u8005\u5c06\u8be5\u5b57\u6bb5\u5728yaml\u4e2d\u58f0\u660e\u3002 DSDL\u4f1a\u5c06\u603b\u6570\u636e\u91cf\uff0c\u6210\u529f\u5b9e\u4f8b\u5316\u7684\u6570\u636e\u91cf\uff0c\u5b9e\u4f8b\u5316\u5931\u8d25\u7684\u6570\u636e\u91cf\u5199\u5728\u62a5\u544a\u4e2d\u3002 3.3 \u53ef\u89c6\u5316 DSDL\u4e3a\u4e86\u68c0\u6d4b\u6807\u6ce8\u4fe1\u606f\u662f\u5426\u6b63\u786e\uff0c\u4f1a\u968f\u673a\u4ece\u6570\u636e\u96c6\u4e2d\u9009\u62e9\u51e0\u4e2a\u6837\u672c\u8fdb\u884c\u53ef\u89c6\u5316\uff0c\u5728\u8fd9\u4e2a\u6b65\u9aa4\u4e2d\uff0c\u53ef\u80fd\u9047\u5230\u4ee5\u4e0b\u95ee\u9898\uff1a \u56fe\u50cf\u8def\u5f84\u9519\u8bef \u56fe\u50cf\u6587\u4ef6\u635f\u574f \u56fe\u50cf\u683c\u5f0f\u4e0d\u652f\u6301 \u5177\u4f53\u539f\u56e0\u9700\u8981\u6839\u636e\u62a5\u9519\u4fe1\u606f\u786e\u5b9a\u3002","title":"DSDL\u6570\u636e\u96c6\u9a8c\u8bc1"},{"location":"tutorials/advanced/dsdl_check/#dsdl","text":"DSDL\u652f\u6301\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u7b80\u5355\u7684check\uff0c\u5e76\u751f\u6210\u68c0\u6d4b\u62a5\u544a\u3002DSDL check\u5c06\u68c0\u67e5\u6a21\u677f\u5b9a\u4e49\u7684\u89c4\u8303\u6027\uff0c\u5e76\u5bf9\u6a21\u677f\u4e0e\u5b9e\u9645\u6807\u6ce8\u6570\u636e\u7684\u5339\u914d\u5173\u7cfb\u8fdb\u884c\u68c0\u67e5\uff0c\u540c\u65f6\u53ef\u5bf9\u5a92\u4f53\u6587\u4ef6\u548c\u6807\u6ce8\u8fdb\u884c\u53ef\u89c6\u5316\uff0c\u4f9b\u7528\u6237\u68c0\u67e5\u53ef\u89c6\u5316\u7ed3\u679c\u3002\u901a\u8fc7DSDL check\u540e\u7684DSDL\u6570\u636e\u96c6\u624d\u53ef\u4fdd\u8bc1\u4f7f\u7528\u4e0b\u6e38\u7684\u5de5\u5177\u94fe\u3002 check \u547d\u4ee4\u5982\u4e0b\u6240\u793a\uff1a dsdl check -y { path_to_yaml_file } -c { path_to_config.py } -l { local/ali-oss } -p { path_to_defs } -t { task } -f { Field } -o ./ \u90e8\u5206\u53c2\u6570\u7684\u542b\u4e49\u5982\u4e0b\uff1a -y \u4e3a\u9700\u68c0\u67e5\u7684\u6a21\u677f\u5b9a\u4e49\u6587\u4ef6 -c \u4e3aconfig\u6587\u4ef6\u7684\u8def\u5f84 -l \u4e3a\u6307\u5b9a\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u9014\u5f84\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 ali-oss \u6216 local\uff0c\u4f1a\u5bf9\u5e94\u8c03\u7528config\u6587\u4ef6\u91cc\u7684ali-oss\u6216local\u91cc\u586b\u5199\u7684\u8def\u5f84\u6765\u8bfb\u53d6\u5a92\u4f53\u6587\u4ef6 -p \u5982\u679c\u5728\u6a21\u677f\u5b9a\u4e49\u6587\u4ef6\u5185\u90e8\u7684import\u6ca1\u6709\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\uff0c\u9700\u8981\u6307\u5b9aimport\u7684\u6839\u76ee\u5f55 -t \u4e3a\u6307\u5b9a\u5f53\u524dyaml\u7684\u4efb\u52a1\u7c7b\u522b\uff0c\u5f53\u524d\u652f\u6301\u7684\u4efb\u52a1\u7c7b\u522b\u53ca\u53ef\u89c6\u5316\u7684\u7c7b\u578b\u5c06\u4f1a\u5728\u540e\u6587\u5c55\u793a -f \u4e3a\u6307\u5b9a\u53ef\u89c6\u5316\u7684\u7c7b\u578b\uff0c\u5982\u679c\u4e0d\u6307\u5b9a-t, \u4e5f\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a-f\u6765\u9009\u62e9\u5e0c\u671b\u53ef\u89c6\u5316\u7684\u7c7b\u578b\uff0c\u5f53\u524d\u652f\u6301\u7684\u53ef\u89c6\u5316\u7c7b\u578b\u5c06\u4f1a\u5728\u540e\u6587\u5c55\u793a -o \u4e3a\u6307\u5b9a\u8f93\u51fa\u7684\u6587\u4ef6\u5939\uff0c\u5305\u542b\u56fe\u7247\u548cmd\u6587\u6863\uff0ccheck\u7684\u7ed3\u679c\u4fdd\u5b58\u5728\u8f93\u51fa\u6587\u4ef6\u5939\u4e0b\u7684log/output.md\u4e2d \u5f53\u524d\u652f\u6301\u7684\u53ef\u89c6\u5316\u7c7b\u578b\u89c1FIELDS\u5b57\u6bb5\uff0c\u4efb\u52a1\u7c7b\u522b\u53ca\u5176\u5bf9\u5e94\u7684Field\u79cd\u7c7b\u89c1TASK_FIELDS\u5b57\u6bb5\uff1a FIELDS = [ \"image\" , \"label\" , \"bbox\" , \"polygon\" , \"keypoint\" , \"rotatedbbox\" , \"labelmap\" , \"instancemap\" , \"text\" ] TASK_FIELDS = { \"detection\" : [ \"image\" , \"label\" , \"bbox\" , \"polygon\" , \"keypoint\" , \"rotatedbbox\" ], \"classification\" : [ \"image\" , \"label\" ], \"semantic-seg\" : [ \"image\" , \"labelmap\" ], \"panoptic-seg\" : [ \"image\" , \"labelmap\" , \"instancemap\" ], \"ocr\" : [ \"image\" , \"rotatedbbox\" , \"text\" , \"polygon\" ] }","title":"DSDL\u6570\u636e\u96c6\u9a8c\u8bc1"},{"location":"tutorials/advanced/dsdl_check/#1","text":"\u5047\u8bbeDSDL\u6570\u636e\u96c6\u548c\u539f\u59cb\u6570\u636e\u96c6\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff0c\u7528\u6237\u9700\u8981\u5206\u522b\u5bf9train.yaml\u3001val.yaml\u548ctest.yaml\u8fdb\u884c\u9a8c\u8bc1\uff1a root-path/ \u251c\u2500\u2500 original-dataset/ # \u539f\u59cb\u6570\u636e\u96c6\u7684\u8def\u5f84 \u2502 \u251c\u2500\u2500 ... \u2514\u2500\u2500 dsdl-dataset/ \u251c\u2500\u2500 defs/ \u2502 \u251c\u2500\u2500 detction-def.yaml # \u4efb\u52a1\u7c7b\u578b\u7684struct\u5b9a\u4e49\u6587\u4ef6,task\u4e3a\u68c0\u6d4b\u4efb\u52a1 \u2502 \u2514\u2500\u2500 class-dom.yaml # \u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 set-train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 set-val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u251c\u2500\u2500 set-test/ # \u6d4b\u8bd5\u96c6 \u2502 \u251c\u2500\u2500 test.yaml \u2502 \u2514\u2500\u2500 test_samples.json \u2514\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6 \u5047\u8bbe\u5a92\u4f53\u6587\u4ef6\u4ece\u672c\u5730\u8bfb\u53d6\uff0c\u90a3\u4e48config.py\u6587\u4ef6\u7684\u5185\u5bb9\u4e3a\uff1a local = dict( type=\"LocalFileReader\", working_dir=\"root-path/original-dataset\", ) \u5047\u8bbe\u662f\u4e00\u4e2a\u68c0\u6d4b\u7684\u6570\u636e\u96c6\uff0c\u53ef\u6307\u5b9a-t\u4e3adetection\uff0ccheck\u547d\u4ee4\u5982\u4e0b\uff1a dsdl check -y set-train/train.yaml -c config.py -l local -t detection -p defs/ -o ./ \u6216\u8005\u4e5f\u53ef\u4ee5\u7528-f\u6765\u76f4\u63a5\u6307\u5b9a\u53ef\u89c6\u5316\u7684\u7c7b\u578b\uff1a dsdl check -y set-train/train.yaml -c config.py -l local -f image label bbox -p defs/ -o ./ \u5176\u4e2d\uff0c\u5982\u679ctrain.yaml\u4e2d\u7684import\u90e8\u5206\u5199\u4e86\u76f8\u5bf9\u8def\u5f84\u7684\u8bdd\uff08\u5982\u4e0b\uff09\uff0c\u53ef\u4ee5\u7701\u7565-p\u53c2\u6570\uff1a $dsdl-version : \"0.5.0\" $import : - ../defs/class-domain - ../defs/object-detection-def meta : dataset_name : \"VOC2007\" sub_dataset_name : \"train\" task_type : \"SemanticSementation\" dataset_homepage : \"http://host.robots.ox.ac.uk/pascal/VOC/voc2007/index.html\" dataset_publisher : \"University of Leeds | ETHZ, Zurich | University of Edinburgh |Microsoft Research Cambridge | University of Oxford\" OpenDataLab_address : \"https://opendatalab.com/PASCAL_VOC2007/download\" data : sample-type : ObjectDetectionSample[cdom=VOCClassDom] sample-path : train_samples.json","title":"1. \u5b9e\u9645\u6848\u4f8b"},{"location":"tutorials/advanced/dsdl_check/#2-dsdl-check","text":"\u76ee\u524d\u89e3\u6790\u5668\u7684\u68c0\u67e5\u5206\u4e09\u4e2a\u6a21\u5757\uff1a class_dom\u7684\u68c0\u67e5 strcut\u7684\u68c0\u67e5 \u53c2\u6570\u7684\u68c0\u67e5","title":"2. DSDL check\u6a21\u5757"},{"location":"tutorials/advanced/dsdl_check/#21-class_dom","text":"\u9996\u5148\u660e\u786eclass_dom\u7684\u6837\u5f0f\uff1a AnnotationDom : $def:class_domain classes : - person - ... KeyointDom : $def:class_domain classes : - lefteye.person# \u4f1a\u62a5DefineSyntaxWarning - ... skeleton : - [ 14 , 16 ] - [ 5 , 6 ] - [ 10 , 12 ] - ... \u5305\u62ec\uff1a class_dom\u4e2d\u7684categories\u540d\u548csuper_categories\u540d\u5b57\u68c0\u67e5\uff0c\u9700\u8981\u4fdd\u8bc1category[super_category]\u4e2dsuper_category\u5728FatherClassDom\u4e2d\u5b58\u5728 \u4fdd\u8bc1ClassificationClassDom[ClassificationFatherDom]\u4e2dClassificationFatherDom\u662f\u5df2\u7ecf\u5b9a\u4e49\u7684\u7236\u7c7b \u4fdd\u8bc1\u7236\u7c7b\u540d\u683c\u5f0f\u548c classes \u91cc\u9762\u7684\u7c7b\u522b\u540d\u683c\u5f0f\u5bf9\u5e94\uff1a \u6bd4\u5982 COCO2017ClassDom[COCO2017ClassFatherDom1,COCO2017ClassFatherDom2]: \u8bf4\u660e\u6709\u4e24\u4e2a\u7c7b\u522b\u540d\uff0c\u90a3\u4e48classes\u4e2d\u7684\u7c7b\u522b\u5b9a\u4e49\u683c\u5f0f\u5c31\u8981\u662f\uff1a classes: - airplane[tool][sports tool] \u4fdd\u8bc1skeleton\u4e2d\u7684\u5b57\u6bb5\u662flist of int","title":"2.1 class_dom\u7684\u68c0\u67e5"},{"location":"tutorials/advanced/dsdl_check/#22-strcut","text":"LocalObjectEntry : $def:struct $params : [ 'cdom' ] $fields : label : Label[dom=$cdom] bbox : BBox polygon : Polygon rlepolygon : RlePolygon #\u4e0epolygon\u4e8c\u9009\u4e00 InstanceSegmentationSample : $def:struct $params : [ 'scenedom' , 'objectdom' ] $fields : image : Image sclabel : List[Label[dom=$scenedom]] semantic_seg : SegMap[dom=$cdom] objects : List[etype=LocalObjectEntry[cdom=$objectdom,optional=True],optional=True] $optional : [ 'semantic_seg' ] \u5305\u62ec\uff1a struct\u7684\u540d\u5b57\u4e0d\u80fd\u662fdsdl\u7684\u5185\u7f6e\u7c7b\u578b\u540d\uff08\u53c2\u89c1\u4e0b\u8868\uff09 $def\u4e2d\u5b9a\u4e49\u7684\u5fc5\u987b\u662fstrcut\u6216class_dom $params \u53c2\u6570\u9a8c\u8bc1\u53c2\u89c1\u5355\u72ec\u7684\u53c2\u6570\u9a8c\u8bc1\u6a21\u5757 $fields\u4e2d\u68c0\u67e5 \u662f\u5426\u6709\u5b57\u6bb5\uff0c\u6ca1\u6709\u62a5\u9519 \u5b57\u6bb5\u540d\u5b57\u662f\u5426\u7b26\u5408\u89c4\u8303\uff1a \u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u4e0d\u80fd\u5305\u542b\u7a7a\u683c\uff0c\u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf \u5b57\u6bb5\u7c7b\u578b\u662f\u5426\u662fDSDL\u4e2d\u5b9a\u4e49\u7684 \u57fa\u672c\u6570\u636e\u7c7b\u578b \uff0c\u5982\u679c\u662fstruct\u7c7b\u578b\uff0c\u5982 objects: LocalObjectEntry[cdom=$cdom] \u9700\u8981\u68c0\u67e5\u8be5struct\u7c7b\u578b\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\uff08\u53ef\u4ee5\u5728\u540e\u9762\u518d\u5b9a\u4e49\uff0c\u987a\u5e8f\u4e0d\u8981\u7d27\uff0c\u4f46\u662f\u8981\u6709\uff09\u3002 \u5b57\u6bb5\u7c7b\u578b\u4e2d\u7684\u53c2\u6570\u662f\u5426\u7b26\u5408\u89c4\u8303\uff1a\u5305\u62ec\u53c2\u6570\u540d\u5b57\u548c\u53c2\u6570\u503c $optional\u4e2d\u68c0\u67e5\uff1aoptional list \u4e2d\u7684\u5b57\u6bb5\u662f\u5426\u662f\u5df2\u7ecf\u6ce8\u518c\u7684\uff0c\u6ca1\u6709\u5c31\u62a5\u9519 strcut\u4e2d\u7684\u5faa\u73af\u5f15\u7528\u68c0\u67e5","title":"2.2 strcut\u7684\u68c0\u67e5"},{"location":"tutorials/advanced/dsdl_check/#23","text":"\u5305\u62ec\uff1a $params \u4e2d\u5305\u542b\u7684\u53c2\u6570\u540d\u5b57\u548c\u4e0b\u9762 $field \u5b57\u6bb5\u4e2d\u7684\u4e00\u4e00\u5bf9\u5e94 $params \u4e2d\u7ed9\u7684\u53c2\u6570\u662f\u5426\u4e0e data section \u4e2d sample-type \u5bf9\u5e94\uff0c eg. SceneAndObjectSample[scenedom=COCO2017ClassFatherDom,objectdom=COCO2017ClassDom] \u5224\u65ad\u5e26\u53c2\u6570\u7684\uff0c\u4e14\u7528\u5230\u522b\u7684struct\u7684 $field \u5b57\u6bb5\uff08\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 objects \uff09 \u8be5\u5f15\u7528\u7684struct\u662f\u5426\u5b58\u5728\uff08 LocalObjectEntry \u662f\u5426\u5b58\u5728\uff09 \u662f\u5426\u5b58\u5728\u5faa\u73af\u5f15\u7528\uff0c\u5982\u679c\u5b58\u5728\u5c31\u62a5\u9519 \u8be5\u5f15\u7528\u7684struct\u4e2d\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u662f\u5426\u90fd\u5df2\u7ecf\u88ab\u5b9a\u4e49\uff0c\u662f\u5426\u5b58\u5728\u672a\u8d4b\u503c\u7684\u53c2\u6570\uff0c\u6709\u5c31\u62a5\u9519 \u76ee\u524d\u4e0d\u540c\u5b57\u6bb5\u5f15\u7528\u540c\u4e00\u4e2astrcut\u4e5f\u4f1a\u62a5\u9519","title":"2.3 \u53c2\u6570\u68c0\u67e5"},{"location":"tutorials/advanced/dsdl_check/#3","text":"\u62a5\u544a\u5206\u4e3a 3\u4e2a\u90e8\u5206 \uff1a parser\u68c0\u67e5\u7ed3\u679c\uff1a\u7ed3\u679c\u5305\u62ec\u4e86parse\u7ed3\u679c\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u5219\u53ef\u4ee5\u67e5\u770b\u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f samples\u5b9e\u4f8b\u5316\u68c0\u67e5\u7ed3\u679c\uff1a\u5176\u4e2d\u62a5\u544a\u8bf4\u660e\u4e86\u5f53\u524d\u6570\u636e\u96c6\u5171\u6709\u6837\u672c\u4e2a\u6570\uff0c\u6b63\u5e38\u6837\u672c\u4e2a\u6570\uff0c\u8b66\u544a\u6837\u672c\u4e2a\u6570\uff0c\u9519\u8bef\u6837\u672c\u4e2a\u6570\uff0c\u5e76\u63d0\u4f9b\u4e86\u5f02\u5e38\u6837\u672c\u7684\u5177\u4f53\u4fe1\u606f\u65e5\u5fd7\u3002 \u53ef\u89c6\u5316\u7ed3\u679c\uff1a\u9700\u8981\u8089\u773c\u89c2\u5bdf\u53ef\u89c6\u5316\u7ed3\u679c\u662f\u5426\u6b63\u786e\uff0c\u6bd4\u5982bbox\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\uff0c\u6807\u7b7e\u5185\u5bb9\u662f\u5426\u6b63\u786e\u7b49\uff0c\u5728\u56fe\u7247\u4e0b\u9762\u5c55\u793a\u4e86\u53ef\u89c6\u5316\u8fc7\u7a0b\u4e2d\u7684\u65e5\u5fd7\u5185\u5bb9\uff0c\u6bd4\u5982\u662f\u53ef\u89c6\u5316\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u4ee5\u53ca\u5931\u8d25\u65e5\u5fd7\u7b49\u3002","title":"3. \u9a8c\u8bc1\u7ed3\u679c"},{"location":"tutorials/advanced/dsdl_check/#31-parser","text":"","title":"3.1 Parser\u90e8\u5206"},{"location":"tutorials/advanced/dsdl_check/#311-class-doamin","text":"ValidationError\uff1a Error with class-dom name, {class_dom_name} must be a valid identifier. [1. Struct name 2. Class domain name 3.name of $field in Struct ] is considered a valid identifier if it only contains alphanumeric letters (a-z) and (0-9), or underscores (_). A valid identifier cannot start with a number, or contain any spaces. ValidationError\uff1aError in {struct_name} , {filed_name} must be a valid identifier. [1. Struct name 2. Class domain name 3.name of $field in Struct ] is considered a valid identifier if it only contains alphanumeric letters (a-z) and (0-9), or underscores (_). A valid identifier cannot start with a number, or contain any spaces. \u542b\u4e49\uff1astruct\u3001class domain \u7684\u540d\u5b57\uff08\u5982\u4e0a\u9762\u4f8b\u5b50\u91cc\u9762\u7684 **AnnotationDom** \u7b49\uff09\u548cstrcut\u4e2d$filed\u91cc\u9762\u7684\u540d\u5b57\u90fd\u8981\u662f\u4e00\u4e2aa valid identifier\uff1a\u5373\u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\uff08\u4e14\u4e0d\u4ee5\u5b57\u6bcd\u5f00\u5934\uff09\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u7a7a\u683c\u3002 ValidationError\uff1a Error with class-dom name, {varstr} can't be a Python keyword. check https://docs.python.org/3/reference/lexical_analysis.html#keywords for more information. \u542b\u4e49\uff1aclass domain \u7684\u540d\u5b57\uff08\u5982\u4e0a\u9762\u4f8b\u5b50\u91cc\u9762\u7684 **AnnotationDom** \u7b49\uff09\u4e0d\u80fd\u662f\u4e00\u4e2apython\u7684\u4fdd\u7559\u5b57\u7b26\u4e32\uff08\u5982\uff1adef, del, if, or....., \u4fdd\u7559\u5b57\u7b26\u4e32\u5217\u8868\u8be6\u89c1\uff1ahttps://docs.python.org/3/reference/lexical_analysis.html#keywords\uff09\u3002 ValidationError\uff1a { self.name } is dsdl build-in value name, please rename it. Build-in value names are: Bool, Num, Int, Str, Coord, Coord3D, Interval, BBox, Polygon, Image, InstanceMap, Video, Dict, Text, InstanceID, Date, Time, Label, LabelMap, Keypoint, List, ImageShape, RotatedBBox, UniqueID. \u542b\u4e49\uff1a\u5f53struct\u3001class domain \u7684\u540d\u5b57\uff08\u5982\u4e0a\u9762\u4f8b\u5b50\u91cc\u9762\u7684 **AnnotationDom** \u7b49\uff09\u662fdsdl\u91cc\u9762\u7684\u5185\u7f6e\u7c7b\u540d\u7684\u65f6\u5019\u4f1a\u62a5\u9519\uff0cdsdl\u5185\u7f6e\u7c7b\u522b\u540d\u5305\u62ec\uff1aBool, Num, Int, Str, Coord, Coord3D, Interval, BBox, Polygon, Image, InstanceMap, Video, Dict, Text, InstanceID, Date, Time, Label, LabelMap, Keypoint, List, ImageShape, RotatedBBox, UniqueID DefineSyntaxError\uff1aError in skeleton of { self.class_name } : skeleton must be list of list of int. \u542b\u4e49\uff1a\u9700\u8981\u4fdd\u8bc1skeleton\u4e2d\u7684\u5b57\u6bb5\u662flist of int DefineSyntaxError\uff1a { label_name } is not allowed. Label in class-dom can't start with dot . \u542b\u4e49\uff1aclass domain\u4e2d\u7684label\u662f\u4e0d\u80fd\u4ee5 . \u6765\u5f00\u59cb\u7684 DefineSyntaxWarning\uff1a {label_name} is not recommended. We recommend using alphanumeric letters (a-z, A-Z and 0-9), and underscores (_) for label in class-dom (with hierarchical structure). \u542b\u4e49\uff1a\u5bf9\u4e8e\u6709\u5c42\u7ea7\u7ed3\u6784\u7684class domain\u7684label\u6765\u8bf4\u4f1a\u62a5\u8fd9\u4e2a\u9519\u8bef\uff0c\u8868\u793a\uff1a\u5bf9\u4e8e\u6709\u5c42\u7ea7\u7ed3\u6784\u7684class domain\u7684label\uff0c\u6211\u4eec\u63a8\u8350\u4f7f\u7528\u5b57\u6bcd\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u6765\u4f5c\u4e3alabel\u540d\uff0c\u5e76\u4ee5 . \u6765\u5212\u5206\u7236\u5b50\u7c7b\u3002\uff08\u5e26\u7a7a\u683c\u4f1a\u62a5warning\uff09 DefineSyntaxWarning\uff1a {label_name} is not recommended. We recommend using space, alphanumeric letters (a-z, A-Z and 0-9), and underscores (_) \"\u3001 for label in class-dom (without hierarchical structure). \u542b\u4e49\uff1a\u5bf9\u4e8e\u975e\u5c42\u7ea7\u7ed3\u6784\u7684class domain\u7684label\u6765\u8bf4\u4f1a\u62a5\u8fd9\u4e2a\u9519\u8bef\uff0c\u8868\u793a\uff1a\u5bf9\u4e8e\u975e\u5c42\u7ea7\u7ed3\u6784\u7684class domain\u7684label\uff0c\u6211\u4eec\u63a8\u8350\u4f7f\u7528\u7a7a\u683c\u5b57\u6bcd\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u6765\u4f5c\u4e3alabel\u540d\u3002","title":"3.1.1 Class  doamin\u90e8\u5206"},{"location":"tutorials/advanced/dsdl_check/#312-data-section","text":"DefineSyntaxError\uff1adata yaml must contain meta section. \u542b\u4e49\uff1a\u6570\u636eyaml\u6587\u4ef6\u4e2d\u5fc5\u987b\u5305\u542b meta \u90e8\u5206 (\u4e0d\u7ba1\u51e0\u4e2ayaml\u6587\u4ef6\uff0c\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u5305\u542b\uff0cstrcut\u3001class domain\u7b49yaml\u6587\u4ef6\u53ef\u4ee5\u6ca1\u6709)\uff0ceg. $ dsdl - version : \"0.5.2\" $ import : - ../ defs / image - generation - facade - ../ defs / style - dom meta : dataset - name : \"facade_pix2pix\" home - page : \"http://efrosgans.eecs.berkeley.edu/pix2pix/datasets/\" creator : \"Berkeley AI Research (BAIR) Laboratory, UC Berkeley\" opendatalab - page : \"\" subset - name : \"train\" task - type : \"Image Generation\" data : sample - type : FacadeImageSample [ cdom = FacadeStyleDomain ] sample - path : train_samples . json DefineSyntaxError: data yaml must contain data section and data section must have sample-type . \u542b\u4e49\uff1a\u6570\u636eyaml\u6587\u4ef6\u4e2d\u5fc5\u987b\u5305\u542b data \u90e8\u5206 (\u4e0d\u7ba1\u51e0\u4e2ayaml\u6587\u4ef6\uff0c\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u5305\u542b\uff0cstrcut\u3001class domain\u7b49yaml\u6587\u4ef6\u53ef\u4ee5\u6ca1\u6709)\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u3002\u540c\u65f6\uff0c data \u90e8\u5206\u5fc5\u987b\u5305\u542b sample-type \u3002 DefineSyntaxWarning: global-info-type is not defined. \u542b\u4e49\uff1a global-info-type \u6ca1\u6709\u88ab\u5b9a\u4e49\uff0c\u8fd9\u662f\u4e00\u4e2awarning\uff0c\u53ef\u4ee5\u4e0d\u7ba1. DefineSyntaxError: { struct_name/class_dom_name } section must contain \"$def\" sub-section. \u542b\u4e49\uff1astrcut\u548cclass_dom\u4e2d\u5fc5\u987b\u5305\u542b$def\u5b57\u6bb5\u6765\u5b9a\u4e49\u5b83\u7684\u7c7b\u578b\u3002 DefineSyntaxError: error type { define_type } in yaml, type must be class_domain or struct. \u542b\u4e49\uff1a$def\u5b57\u6bb5\u53ea\u80fd\u662fstrcut\u548cclass_domain\u4e2d\u7684\u4e00\u4e2a\u3002 DuplicateDefineWarning: { struct_name/class_dom_name } has defined. \u542b\u4e49\uff1a\u67d0\u4e2astrcut/class_domain\u5df2\u7ecf\u88ab\u5b9a\u4e49\u4e86\uff0c\u8fd9\u662f\u4e00\u4e2awarning\uff0c\u53ef\u4ee5\u4e0d\u7ba1\u3002\u5982\u679c\u4e0d\u7ba1\uff0c\u90a3\u540e\u9762\u5b9a\u4e49\u7684\u4f1a\u8986\u76d6\u524d\u9762\u5b9a\u4e49\u7684\u5185\u5bb9\u3002 DSDLImportError: import_path does not exist in given_path , please give the right path using -p . \u542b\u4e49\uff1a\u5f53\u7528 -p \u6307\u5b9a\u6570\u636eyaml\u6587\u4ef6\u4e2d$import\u8def\u5f84\u7684\u65f6\u5019\uff0c\u5982\u679c\u6ca1\u627e\u5230\u9700\u8981import\u7684\u6587\u4ef6\u4f1a\u62a5\u8fd9\u4e2a\u95ee\u9898\u3002 DSDLImportError: import_path does not exist in neither { current_path } nor dsdl/dsdl_library , please check the path or give the right path using -p . \u542b\u4e49\uff1a\u5f53\u4e0d\u7528 -p \u6307\u5b9a\u6570\u636eyaml\u6587\u4ef6\u4e2d$import\u8def\u5f84\u7684\u65f6\u5019\uff0c\u5982\u679c\u5728\u5f53\u524d\u6587\u4ef6\u5939\u548cdsdl\u5e93\u6587\u4ef6\uff08dsdl/dsdl_library\uff09\u4e2d\u90fd\u6ca1\u627e\u5230\u9700\u8981import\u7684\u6587\u4ef6\u4f1a\u62a5\u8fd9\u4e2a\u95ee\u9898\u3002","title":"3.1.2 Data section\u90e8\u5206"},{"location":"tutorials/advanced/dsdl_check/#313-struct","text":"DefineSyntaxError: Error in field with value of { field_type } . check the { k_v} part. \u542b\u4e49\uff1astruct\u4e2d\u7684\u67d0\u4e2a\u7c7b\u578b\u4e3a{ field_type } \u7684filed\u51fa\u4e86\u95ee\u9898\u3002(\u53ef\u80fd\u8fd8\u4f1a\u63d0\u793a\u662f { field_type } \u4e2d\u7684 k_v\u90e8\u5206\u51fa\u4e86\u95ee\u9898) DefineSyntaxError: definition error of {field_type} has {param_list} , please check field \u542b\u4e49\uff1afield_type\u4e0d\u5728field list\u548cstruct list\u4e2d\uff0c\u89c6\u4e3a\u53c2\u6570\uff0c\u53c2\u6570\u4e0d\u53ef\u4ee5\u6709\u5d4c\u5957\u7684\u53c2\u6570\u5217\u8868\u3002 [cdom\u7684\u62a5\u9519] DefineSyntaxError\uff1adefinition error of dom {cdom_name} not in $params {self.struct_params} \uff0ccheck cdom is defined correctly. \u542b\u4e49\uff1a\u8c03\u7528\u7684cdom_name\u6ca1\u6709\u5728\u8be5struct\u5b9a\u4e49\u7684params\u4e2d\u3002 DefineSyntaxError\uff1a {k_v} is dom params, should have '=' \u542b\u4e49\uff1a\u8c03\u7528\u7684cdom\u53c2\u6570\uff0c\u4f46\u662f\u6ca1\u6709\u8d4b\u503c\uff0c\u5fc5\u987b\u542b\u2018=\u2019 [List\u7c7b\u578b\u7684\u62a5\u9519]\uff1a DefineSyntaxError\uff1a {param} is list etype params, should have '=' \u542b\u4e49\uff1aList\u4e2d\u6709etype\u5f00\u5934\u7684\u53c2\u6570\uff0c\u4f46\u662f\u6ca1\u6709\u8d4b\u503c\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u8d4b\u503c\u3002","title":"3.1.3 struct\u90e8\u5206\u548c\u53c2\u6570\u90e8\u5206"},{"location":"tutorials/advanced/dsdl_check/#32-samples","text":"","title":"3.2 Samples\u5b9e\u4f8b\u5316\u90e8\u5206"},{"location":"tutorials/advanced/dsdl_check/#321","text":"DSDL Check\u4f1a\u5c06\u6240\u6709\u6837\u672c\u8bfb\u53d6\u5230\u5185\u5b58\u4e2d\uff0c\u5982\u679c\u68c0\u6d4b\u5230\u7684\u6837\u672c\u6570\u76ee\u4e3a0\uff0c\u8be5\u60c5\u51b5\u5f02\u5e38\uff0c\u4f1a\u5728\u62a5\u544a\u4e2d\u663e\u793a\uff1a { \"flag\" : 0 , \"msg\" : \"No samples found, please check the path of json file.\" } \u6b64\u65f6\u7528\u6237\u9700\u8981\u68c0\u67e5Yaml\u6587\u4ef6\u4e2d\u6307\u5b9a\u7684json\u6587\u4ef6\u8def\u5f84\u662f\u5426\u6b63\u786e\u3002 \u5982\u679c\u5b9e\u4f8b\u5316\u6837\u672c\u6570\u76ee\u5927\u4e8e0\uff0c\u5219\u8be5\u5b57\u6bb5\u4f1a\u663e\u793a\uff1a { \"flag\" : 1 , \"msg\" : f \"Totally { sample_nums } samples found.\" } \u6b64\u65f6\u9700\u8981\u7528\u6237\u68c0\u67e5\u6837\u672c\u6570\u76ee\u662f\u5426\u6b63\u786e","title":"3.2.1 \u662f\u5426\u5b58\u5728\u6837\u672c"},{"location":"tutorials/advanced/dsdl_check/#322","text":"DSDL Check\u4f1a\u5c06\u6240\u6709\u7684\u6837\u672c\u5b58\u50a8\u5230\u4e00\u4e2a dsdl.dataset.CheckDataset \u5bf9\u8c61\u5f53\u4e2d\uff0c\u5982\u679c\u5b9e\u4f8b\u5316 dsdl.dataset.CheckDataset \u5bf9\u8c61\u7684\u8fc7\u7a0b\u4e2d\u6210\u529f\uff0c\u4f1a\u5728\u62a5\u544a\u4e2d\u663e\u793a\uff1a { \"flag\" : 1 , \"msg\" : \"Dataset init successfully!\" } \u53cd\u4e4b\uff0c\u5982\u679c\u6570\u636e\u96c6\u5bf9\u8c61\u5b9e\u4f8b\u5316\u5931\u8d25\uff0c\u5219\u4f1a\u5728\u62a5\u544a\u4e2d\u663e\u793a\uff1a { \"flag\" : 0 , \"msg\" : f \"Dataset init error: { e } \" } \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u96c6\u5b9e\u4f8b\u5316\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u662f\u5728yaml\u6587\u4ef6\u4e2d\u58f0\u660e\u7684sample_type\u4e0d\u5b58\u5728\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff1a data : sample-type : KeyPointSample[cdom0=KeyPoint_person_ClassDom] sample-path : samples.json \u5728\u4e0a\u9762\u7684yaml\u4e2d\u7684\u5982\u679c KeyPointSample \u672a\u5b9a\u4e49\uff0c\u6216\u8005 KeyPoint_person_ClassDom \u672a\u5b9a\u4e49\uff0c\u6216\u8005 KeyPointSample \u7684\u53c2\u6570\u540d\u4e0d\u53eb cdom0 \uff0c\u90fd\u4f1a\u5f15\u8d77\u6570\u636e\u96c6\u5b9e\u4f8b\u5316\u62a5\u9519\uff0c\u7528\u6237\u9700\u8981\u68c0\u67e5\u662f\u5426\u4e0a\u8ff0\u8fd9\u4e9b\u5185\u5bb9\u5199\u9519\u4e86\u3002","title":"3.2.2 \u662f\u5426\u6210\u529f\u5b9e\u4f8b\u5316\u6570\u636e\u96c6\u5bf9\u8c61"},{"location":"tutorials/advanced/dsdl_check/#323","text":"DSDL Check\u4f1a\u5c06\u6240\u6709\u7684\u6837\u672c\u5b9e\u4f8b\u5316\u4e3a Struct \u5bf9\u8c61\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u6709\u6837\u672c\u751f\u6210\u5931\u8d25\uff0cDSDL\u4f1a\u5c06\u9519\u8bef\u4fe1\u606f\u8bb0\u5f55\u5230\u6587\u6863\u4e2d\uff0c\u65b9\u4fbf\u7528\u6237\u6eaf\u6e90\u3002 \u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f\u4e3a\uff1a \u6570\u636e\u4e0d\u7b26\u5408schema \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5982\u679cStruct\u4e2d\u67d0\u4e00\u4e2aField\u4e3aInt\uff0c\u4f46\u662f\u7ed9\u5b9a\u6570\u636e\u5374\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5219\u4f1a\u62a5\u4ee5\u4e0b\u9519\u8bef\uff1a ValidationError in { Field_Type } field : Schema is { schema } . Data is { data } . \u4e0a\u8ff0\u7684\u62a5\u9519\u4fe1\u606f\u4e2d\uff0c\u544a\u8bc9\u4e86\u7528\u6237\u662f\u54ea\u4e00\u4e2aField\u62a5\u9519\uff0c\u8fd9\u4e2aField\u7684schema\uff0c\u4ee5\u53ca\u5f53\u524d\u62a5\u9519\u6837\u672c\u7684\u5177\u4f53\u6570\u636e\uff0c\u901a\u8fc7\u5bf9\u6bd4\u5177\u4f53\u6570\u636e\u548cschema\uff0c\u7528\u6237\u53ef\u4ee5\u77e5\u9053\u662f\u54ea\u91cc\u51fa\u4e86\u9519\u3002 \u5b57\u6bb5\u4e0d\u5339\u914d\u9519\u8bef \u4e3e\u4f8b\u6765\u8bf4\uff0c\u6709\u4ee5\u4e0b\u7684yaml\uff1a KeyPointLocalObject : $def : struct $params : [ \"cdom0\" ] $fields : num_keypoints : Int keypoints : Keypoint[dom=$cdom0] $optional : [ \"num_keypoints\" ] \u5982\u679c\u5177\u4f53\u7684\u6570\u636e\u4e2d\uff0c\u4e0d\u5b58\u5728 keypoints \u5b57\u6bb5\uff0c\u4f46\u662f\u7531\u4e8e keypoints \u5b57\u6bb5\u4e0d\u5728 $optional \u5217\u8868\u5f53\u4e2d\uff0c\u5219\u4f1a\u62a5\u4ee5\u4e0b\u7684\u9519\u8bef\uff1a Required struct instance { key } is missing . \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u9700\u8981\u5728\u6570\u636e\u4e2d\u6dfb\u52a0 keypoints \u5b57\u6bb5\u4fe1\u606f\uff0c\u6216\u8005\u5c06 keypoints \u5b57\u6bb5\u6dfb\u52a0\u5230 $optional \u5217\u8868\u5f53\u4e2d\u3002 \u53e6\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u5177\u4f53\u7684\u6570\u636e\u4e2d\u51fa\u73b0\u4e86yaml\u5b9a\u4e49\u4ee5\u5916\u7684\u5b57\u6bb5\uff0c\u5219\u4f1a\u62a5\u4ee5\u4e0b\u7684\u9519\u8bef\uff1a Not defined keys { keys } found in sample , which is not permitted in strict init mode . \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u9700\u8981\u5c06\u6570\u636e\u4e2d\u7684\u591a\u4f59\u5b57\u6bb5\u53bb\u9664\uff0c\u6216\u8005\u5c06\u8be5\u5b57\u6bb5\u5728yaml\u4e2d\u58f0\u660e\u3002 DSDL\u4f1a\u5c06\u603b\u6570\u636e\u91cf\uff0c\u6210\u529f\u5b9e\u4f8b\u5316\u7684\u6570\u636e\u91cf\uff0c\u5b9e\u4f8b\u5316\u5931\u8d25\u7684\u6570\u636e\u91cf\u5199\u5728\u62a5\u544a\u4e2d\u3002","title":"3.2.3 \u5bf9\u6837\u672c\u8fdb\u884c\u5b9e\u4f8b\u5316"},{"location":"tutorials/advanced/dsdl_check/#33","text":"DSDL\u4e3a\u4e86\u68c0\u6d4b\u6807\u6ce8\u4fe1\u606f\u662f\u5426\u6b63\u786e\uff0c\u4f1a\u968f\u673a\u4ece\u6570\u636e\u96c6\u4e2d\u9009\u62e9\u51e0\u4e2a\u6837\u672c\u8fdb\u884c\u53ef\u89c6\u5316\uff0c\u5728\u8fd9\u4e2a\u6b65\u9aa4\u4e2d\uff0c\u53ef\u80fd\u9047\u5230\u4ee5\u4e0b\u95ee\u9898\uff1a \u56fe\u50cf\u8def\u5f84\u9519\u8bef \u56fe\u50cf\u6587\u4ef6\u635f\u574f \u56fe\u50cf\u683c\u5f0f\u4e0d\u652f\u6301 \u5177\u4f53\u539f\u56e0\u9700\u8981\u6839\u636e\u62a5\u9519\u4fe1\u606f\u786e\u5b9a\u3002","title":"3.3 \u53ef\u89c6\u5316"},{"location":"tutorials/advanced/dsdl_convert/","text":"\u6570\u636e\u96c6\u8f6c\u6362 \u7528\u6237\u5728\u5b8c\u6210\u4e86 \u6570\u636e\u96c6\u6a21\u677f\u7684\u5236\u5b9a \u540e\uff0c\u5373\u53ef\u8fdb\u884c\u6570\u636e\u96c6\u8f6c\u6362\u9636\u6bb5\u3002\u6211\u4eec\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86 DSDL SDK \u5de5\u5177\uff0c\u8f85\u52a9\u6570\u636e\u96c6\u8f6c\u6362\u7684\u6d41\u7a0b\uff0c\u8bf7\u5148 \u5b89\u88c5SDK \u3002 \u672c\u6559\u7a0b\u5305\u542b\u4e24\u4e2a\u6a21\u677f\uff1a \u6570\u636e\u96c6\u8f6c\u6362\u6d41\u7a0b\u53ca\u811a\u672c\u6a21\u677f \uff1a\u8f6c\u6362\u8005\u4ec5\u9700\u8981\u5b9e\u73b0\u51e0\u4e2a\u7279\u5b9a\u51fd\u6570\uff0c\u5373\u53ef\u76f4\u63a5\u751f\u6210DSDL\u6570\u636e\u96c6\u76ee\u5f55\u3002 \u5b9e\u9645\u793a\u4f8b \uff1aVOC\u8f6cDSDL\u7684\u5b9e\u9645\u6848\u4f8b\uff0c\u4f9b\u7528\u6237\u53c2\u8003\u3002 1. \u6570\u636e\u96c6\u8f6c\u6362\u6d41\u7a0b\u53ca\u811a\u672c\u6a21\u677f \u8f6c\u6362\u8005\u9700\u8981\u51c6\u5907\u597d\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u6587\u4ef6\u5939\u548cDSDL\u6587\u4ef6\u5939\uff0c\u63a8\u8350\u6309\u7167\u4ee5\u4e0b\u7684\u76ee\u5f55\u7ed3\u6784\u6765\u6574\u7406\uff1a \u251c\u2500\u2500 <dataset_name> \u251c\u2500\u2500 compressed \u2514\u2500\u2500 ... # \u539f\u59cb\u6570\u636e\u96c6\u7684\u538b\u7f29\u5305 \u251c\u2500\u2500 dsdl # \u5b58\u653eDSDL\u6807\u6ce8\u7684\u6587\u4ef6\u5939 \u251c\u2500\u2500 defs/ \u251c\u2500\u2500 template.yaml # \u4efb\u52a1\u6a21\u677f\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ece\u6a21\u677f\u5e93\u8c03\u7528 \u251c\u2500\u2500 tools/ \u2514\u2500\u2500 prepare.py # \u6570\u636e\u96c6\u51c6\u5907\u811a\u672c\uff0c\u53ef\u53c2\u8003\u672c\u5c0f\u8282\u63d0\u4f9b\u7684\u6a21\u677f \u4ee5\u4e0a\u7684\u76ee\u5f55\u4e2d\u7684template.yaml\u4e3a DSDL\u6570\u636e\u96c6\u6a21\u677f\u5236\u5b9a \u5c0f\u8282\u4e2d\u5236\u5b9a\u7684\u6a21\u677f\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6a21\u677f\uff0c\u4e5f\u53ef\u4ee5\u5728DSDL SDK\u4e2d\u76f4\u63a5\u8c03\u7528\u4efb\u52a1\u6a21\u677f\uff08\u540e\u6587\u7684\u8f6c\u6362\u811a\u672c\u6a21\u677f\u4e2d\u4f1a\u6807\u660e\u7528\u6cd5\uff09\u3002 \u6211\u4eec\u4e3a\u7528\u6237\u51c6\u5907\u4e86prepare.py\u7684\u6a21\u677f\uff0c\u7528\u6237\u53ea\u9700\u8981\u6309\u7167\u5b9e\u9645\u60c5\u51b5\u5b9e\u73b0\u90e8\u5206\u51fd\u6570\u5373\u53ef\u3002 prepare.py\u4e2d\u5305\u542b\u7684\u6a21\u5757\u5982\u4e0b \uff1a prepare\u51fd\u6570\uff1a\u8be5\u811a\u672c\u4e3b\u8981\u662f\u7528\u4e8e\u89e3\u538b\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u3002\u8be5\u811a\u672c\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u4e3a\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u7684\u6587\u4ef6\u5939\u8def\u5f84\uff0c\u5373 <dataset_name>/compressed/ \u3002\u6211\u4eec\u5df2\u63d0\u4f9b\u4e86\u6a21\u677f\uff0c\u5185\u7f6ezip\u548ctar.gz\u683c\u5f0f\uff0c\u5982\u9700\u8981\u652f\u6301\u5176\u4ed6\u683c\u5f0f\uff0c\u53ea\u9700\u8981\u4fee\u6539\u89e3\u538b\u90e8\u5206\u7684\u547d\u4ee4\u5373\u53ef\uff08\u5728\u4ee3\u7801\u6a21\u677f\u4e2d\u6709\u6807\u660e\uff09\u3002 get_subset_samples_list\u51fd\u6570\uff1a\u4e3b\u8981\u662f\u7528\u4e8e\u751f\u6210 class-dom.yaml \u548c set-<segment>.yaml / set-<segment>_samples.json \uff0c\u8bf7\u81ea\u884c\u4fee\u6539\u4ee5\u9002\u5e94\u4e0d\u540c\u6570\u636e\u96c6\u7684\u6807\u6ce8\u5185\u5bb9\u63d0\u53d6\u3002\u53e6\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e3a\u4e86\u9632\u6b62class-dom\u4e2d\u51fa\u73b0\u4e0d\u5408\u89c4\u7684\u547d\u540d\uff0c\u9700\u8981\u5bf9\u6240\u6709\u7c7b\u522b\u540d\u505a\u8f6c\u6362\uff08\u7531replace_special_characters\u51fd\u6570\u5b9e\u73b0\uff09\u3002 \uff08\u53ef\u9009\uff09dataset_converter\u51fd\u6570\uff1a\u4e2d\u95f4\u683c\u5f0f\u8f6c\u6362\uff0c\u7528\u4e8e\u5bf9\u6570\u636e\u96c6\u7684\u5a92\u4f53\u6587\u4ef6\u6216\u6807\u6ce8\u6587\u4ef6\u8fdb\u884c\u5fc5\u8981\u7684\u4e2d\u95f4\u683c\u5f0f\u8f6c\u6362\uff0c\u5728\u6b64\u4e3e\u4e24\u4e2a\u5b9e\u4f8b\uff1a \u6bd4\u5982\u50cf\u5728\u5206\u5272\u6570\u636e\u96c6\u4e2d\uff0c\u7531\u4e8e\u76ee\u524dDSDL\u6807\u51c6\u91cc\u8981\u6c42\u5206\u5272\u6570\u636e\u96c6\u4ee5\u5355\u901a\u9053Int\u503c\u56fe\u5b58\u50a8mask\uff0c\u9700\u8981\u628a\u4e09\u6ce2\u6bb5\u7684label map\u6620\u5c04\u4e3a\u5355\u901a\u9053\u7684Int\u503c\u56fe\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u6570\u636e\u96c6\u7684\u6807\u6ce8\u6587\u4ef6\u505a\u8f6c\u6362\u7684\u66ff\u6362\u3002 \u6bd4\u5982CIFAR10\u5b58\u50a8\u7684\u56fe\u7247\u683c\u5f0f\u662fTFrecord\uff0c\u591a\u4e2a\u56fe\u7247\u5b58\u5728\u540c\u4e00\u4e2aTFrecord\u91cc\uff0c\u800cDSDL\u7684Image path\u9700\u8981\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u6bcf\u4e2a\u56fe\u7247\u63d0\u53d6\u51fa\u6765\u8f6c\u6210PNG\u3002 main\u51fd\u6570\u4e2d\u5fc5\u586b\u7684\u53c2\u6570\uff1a meta_info\uff1a\u5305\u62ec\u6570\u636e\u96c6\u540d\u79f0(Dataset Name)\u3001\u5b98\u7f51(HomePage)\u3001\u5a92\u4f53\u6587\u4ef6\u7684\u6a21\u6001(Modality)\u3001\u4efb\u52a1\u540d\u79f0(Task)\uff0c\u6ce8\u610f\uff0c\u5982\u679c\u5e0c\u671b\u76f4\u63a5\u8c03\u7528\u5df2\u6709\u7684\u4efb\u52a1\u6a21\u677f\uff0cTask Name\u9700\u8981\u7b26\u5408\u89c4\u8303\uff0c\u53ef\u8c03\u7528\u7684Task Name\u8bf7\u53c2\u8003 \u4efb\u52a1\u6a21\u677f\u4ecb\u7ecd \u9875\u9762\u4e2d\u7684 \u4efb\u52a1\u82f1\u6587\u5168\u79f0 \u3002 flag_middle_format\uff1a\u5982\u679c\u5b9e\u73b0\u4e86dataset_converter\u51fd\u6570\uff0c\u5219\u9700\u8981\u5c06flag_middle_format\u6539\u4e3aTrue\uff0c\u4ee5\u751f\u6210\u66f4\u52a0\u89c4\u8303\u7684README class_dom_names_original\uff1a\u4ee5list\u7684\u5f62\u5f0f\uff0c\u5c06\u6570\u636e\u96c6\u7684\u7c7b\u522b\u5b58\u50a8\u5728\u8be5\u5b57\u6bb5\u4e2d\uff0c\u6ce8\u610f\uff0c\u5176\u6392\u5217\u987a\u5e8f\u51b3\u5b9a\u4e86class_id\u7684\u751f\u6210\uff0c\u5176\u4e2d\u6392\u5728\u9996\u4f4d\u7684class_id\u4e3a1\uff0c\u7b2c\u4e8c\u4f4d\u4e3a2\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 subset_name_list\uff1a\u6570\u636e\u96c6\u5b50\u96c6\u7684\u5217\u8868\uff0c\u6bd4\u5982['train', 'val']\uff0c\u6839\u636e\u6570\u636e\u96c6\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\u3002 \u8f6c\u6362\u548c\u751f\u6210\u7684\u6b65\u9aa4\uff1a\u8fd9\u90e8\u5206\u7684DSDL SDK\u4e2d\u5df2\u5b9e\u73b0\u4e86\u5927\u90e8\u5206\u7684\u51fd\u6570\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u8f6c\u6362\u8005\u65e0\u9700\u4fee\u6539\uff0c\u5982\u679c\u60f3\u8981\u4e86\u89e3\u5404\u4e2a\u51fd\u6570\u7684\u529f\u80fd\uff0c\u8bf7\u53c2\u8003 DSDL SDK \u3002 \u5177\u4f53\u7684prepare.py\u7684\u6a21\u677f\u5982\u4e0b\uff1a import argparse import os import re import shutil import sys import tarfile import zipfile from itertools import chain from multiprocessing import Pool , cpu_count from pathlib import Path import numpy as np from PIL import Image from dsdl.converter.mllm import generate_config_file from dsdl.converter.mllm import generate_readme_with_middle_format from dsdl.converter.mllm import generate_readme_without_middle_format from dsdl.converter.mllm import generate_tree_string from dsdl.converter.utils import check_dsdl_meta_info from dsdl.converter.utils import check_task_template_file from dsdl.converter.utils import generate_class_dom from dsdl.converter.utils import generate_subset_yaml_and_json from dsdl.converter.utils import replace_special_characters from dsdl.converter.utils import get_dsdl_template_from_lib from tqdm import tqdm #############\u751f\u6210DSDL\u6807\u6ce8\uff0c\u7528\u6237\u9700\u8981\u5b9e\u73b0\u8be5\u51fd\u6570############################# def get_subset_samples_list ( * args , ** kwargs ): samples_list = [] ## \u8fd4\u56de\u7684\u5217\u8868\u793a\u4f8b\u5982\u4e0b\uff1a ## \u6ce8\u610f\u6bcf\u4e2a\u5b57\u6bb5\u540d\u79f0\u8981\u4e0etemplate.yaml\u4e2d\u5b9a\u4e49\u7684\u5b57\u6bb5\u548c\u7ed3\u6784\u5b8c\u5168\u76f8\u540c\uff0c\u6bd4\u5982\uff1a # [{ # \"media\": { # \"image\": \"images/train/1.jpg\", # \"image_shape\": [405,720] # }, # \"objects\": [ # { # \"bbox\": [220,183,154,104], # \"label\": \"holothurian\", # \"iscrowd\": false, # \"segmentation\": [[ # [220,183], # [374,183], # [374,287], # [220,287]]] # }, # ..., # }, # ... # ] return samples_list ###########\u6570\u636e\u96c6\u4e2d\u95f4\u683c\u5f0f\u8f6c\u6362\uff0c\u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u7528\u6237\u9700\u8981\u5b9e\u73b0\u8be5\u51fd\u6570############################# def dataset_to_middle_format ( * args , ** kwargs ): # \u6709\u4e9b\u6570\u636e\u96c6\u9700\u8981\u8f6c\u6362\u6210\u4e2d\u95f4\u683c\u5f0f\uff0c # \u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u7f16\u5199\u8f6c\u6362\u4ee3\u7801\uff0c\u5e76\u8bb0\u5f55\u4e2d\u95f4\u683c\u5f0f\u7684\u6587\u4ef6\u5939\u6811\u5f62\u7ed3\u6784\u548c\u8f6c\u6362\u7ed3\u679c\u63cf\u8ff0\u3002 ## 1. \u786e\u5b9a\u4e2d\u95f4\u683c\u5f0f\u6570\u636e\u4fdd\u5b58\u8def\u5f84 middle_data_path = args [ 0 ] ## 2. \u628a\u6570\u636e\u96c6\u8f6c\u6362\u6210\u4e2d\u95f4\u683c\u5f0f ## \u5b9e\u73b0\u4ee3\u7801\u8fd9\u91cc\u7f16\u5199 pass ##########################\u7528\u6237\u4e0d\u9700\u8981\u4fee\u6539########################## def parse_args (): \"\"\"\u547d\u4ee4\u884c\u53c2\u6570\u89e3\u6790\"\"\" parse = argparse . ArgumentParser ( description = 'Prepare the dsdl_SemSeg_full dataset from original dataset.' ) parse . add_argument ( '--decompressed' , '-d' , action = 'store_true' , help = 'This argument decides whether the dataset files are decompressed. ' 'Add \"-d\" argument to skip decompress process, ' 'and directly pass the decompressed dataset. ' 'The default is need decompress process.' ) parse . add_argument ( '--copy' , '-c' , action = 'store_true' , help = 'This argument decides whether the decompressed dataset files will be copied as a backup and then run the converter. ' 'Add \"-c\" argument to create a copy, and then run the converter. ' 'The default is not to create a copy and directly overwrite the original data.' ) parse . add_argument ( 'path' , type = str , help = 'The original dataset path, a folder with compressed files if \"-d\" doesn \\' t exist, ' 'or decompressed folder when \"-d\" exists.' ) args = parse . parse_args () args . path = Path ( args . path ) . absolute () . resolve () . as_posix () return args ###########\u9700\u8981\u4fee\u6539prepare\u51fd\u6570\u4e2d\u7684\u89e3\u538b\u64cd\u4f5c########### def prepare ( args ): \"\"\"\u6839\u636e\u4e0d\u540c\u7684\u547d\u4ee4\u884c\u53c2\u6570\u6267\u884c\u89e3\u538b\u3001\u590d\u5236\u64cd\u4f5c,\u5e76\u8c03\u7528\u6570\u636e\u96c6\u6587\u4ef6\u8f6c\u6362\u548cdsdl\u6807\u6ce8\u751f\u6210\u3002\"\"\" SCRIPT_PATH = Path ( __file__ ) . absolute () . resolve () . parent DSDL_PATH = SCRIPT_PATH . parent if args . decompressed : ORIGINAL_PATH = Path ( args . path ) if args . copy : PREPARED_PATH = ORIGINAL_PATH . parent / \"prepared\" if PREPARED_PATH . exists (): raise Exception ( f \"Path { PREPARED_PATH . as_posix () } already exists.\" ) shutil . copytree ( ORIGINAL_PATH , PREPARED_PATH ) else : if flag_middle_format : print ( \"The operation will directly overwrite the dataset files with no backup.\" ) while True : confirm = input ( \"Input [yes] to continue, or [quit] to exit. \" ) if confirm . lower () == \"quit\" : sys . exit ( 0 ) elif confirm . lower () == \"yes\" : break PREPARED_PATH = ORIGINAL_PATH else : COMPRESSED_PATH = Path ( args . path ) PREPARED_PATH = COMPRESSED_PATH . parent / \"prepared\" if PREPARED_PATH . exists (): raise Exception ( f \"Path { PREPARED_PATH . as_posix () } already exists.\" ) PREPARED_PATH . mkdir () found_compressed = False #######\u9700\u8981\u4fee\u6539:\u89e3\u538b\u64cd\u4f5c\uff0c\u5185\u7f6ezip\u548ctar.gz\u683c\u5f0f\uff0c\u5176\u4ed6\u683c\u5f0f\u9700\u8981\u4fee\u6539############# for file in COMPRESSED_PATH . rglob ( \"*.zip\" ): found_compressed = True zf = zipfile . ZipFile ( file ) zf . extractall ( PREPARED_PATH ) for file in chain ( COMPRESSED_PATH . rglob ( \"*.tar.gz\" ), COMPRESSED_PATH . rglob ( \"*.tgz\" ), COMPRESSED_PATH . rglob ( \"*.tar\" ) ): found_compressed = True tf = tarfile . open ( file ) tf . extractall ( PREPARED_PATH ) if not found_compressed : raise Exception ( 'Compressed file not found. Check the file path.' ) # \u5982\u679c\u89e3\u538b\u540e\u53d1\u73b0prepared\u6587\u4ef6\u5939\u4e2d\u4ecd\u6709\u4e00\u5c42\u6570\u636e\u96c6\u540d\u79f0\u7684\u5d4c\u5957\u6587\u4ef6\u5939\uff0c # \u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u5220\u9664\u8fd9\u5c42\u5d4c\u5957\uff0c\u5c06\u6570\u636e\u96c6\u6587\u4ef6\u76f4\u63a5\u653e\u5728prepared\u6587\u4ef6\u5939\u4e2d\u3002 # for file in (PREPARED_PATH / \"foldername\").iterdir(): # file.rename(file.parent.parent / file.name) # (PREPARED_PATH / \"foldername\").rmdir() ############################################################################# if args . copy : ORIGINAL_PATH = COMPRESSED_PATH . parent / \"original\" if ORIGINAL_PATH . exists (): raise Exception ( f \"Path { ORIGINAL_PATH . as_posix () } already exists.\" ) shutil . copytree ( PREPARED_PATH , ORIGINAL_PATH ) return PREPARED_PATH . as_posix (), DSDL_PATH . as_posix () if __name__ == \"__main__\" : #########################\u5fc5\u586b\u7684\u53c2\u6570########################## meta_info = { \"Dataset Name\" : \"\" , # e.g., VOC2012 \"HomePage\" : \"\" , # e.g., http://host.robots.ox.ac.uk/pascal/VOC/voc2012/index.html \"Modality\" : \"\" , # e.g., Images \"Task\" : \"\" } # e.g., Object Detection flag_middle_format = False # \u6570\u636e\u96c6\u662f\u5426\u9700\u8981\u8f6c\u6362\u6210\u4e2d\u95f4\u683c\u5f0f(\u662f\u7684\u8bdd\uff0c\u4fee\u6539\u4e3aTrue) class_dom_names_original = [] # \u9700\u8981\u4fee\u6539, e.g., ['dog','cat']\uff0c\u53ef\u4ee5\u81ea\u884c\u5b9e\u73b0\u51fd\u6570\u63d0\u53d6 subset_name_list = [] # \u6570\u636e\u96c6\u7684\u5b50\u96c6\u540d\u79f0\u5217\u8868\uff0ce.g., ['train', 'val'] args = parse_args () root_path , save_path = prepare ( args ) ## \u8bf4\u660e\uff1a ## \u56e0\u4e3a\u6a21\u677f\u6587\u4ef6template.yaml\u662fdsdl\u4e2d\u5b9a\u4e49\u6570\u636e\u96c6\u7ed3\u6784\u548c\u5b57\u6bb5\u7684\u6587\u4ef6\u3002 ## \u6240\u4ee5\u5fc5\u987b\u5148\u751f\u6210template.yaml\u624d\u80fd\u8fdb\u884c\u540e\u7eed\u8f6c\u6362\u3002 ## template.yaml\u7684\u4f4d\u7f6e\u4f4d\u4e8e: save_path/defs/template.yaml ## \u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u5df2\u6709\u7684\u6a21\u677f\uff0c\u6216\u624b\u52a8\u521b\u5efatemplate.yaml\uff0c\u5e76\u62f7\u8d1d\u5230save_path/defs/\u76ee\u5f55\u4e0b\u3002 ## \u4ee5\u4e0b\u793a\u4f8b\u662f\u8c03\u7528\u5df2\u6709\u7684\u4efb\u52a1\u6a21\u677f\uff1a get_dsdl_template_from_lib ( meta_info [ \"Task\" ], save_path ) ## \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684meta_info[\"Task\"]\u9700\u8981\u6ee1\u8db3DSDL\u4efb\u52a1\u6a21\u677f\u9875\u9762\u7684\u201c\u4efb\u52a1\u82f1\u6587\u5168\u79f0\u201d ###########\u4ee5\u4e0b\u662f\u8f6c\u6362\u548c\u751f\u6210\u7684\u6b65\u9aa4\uff0c\u53ef\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539############# ###########\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981\u4fee\u6539get_subset_samples_list\u6240\u9700\u7684\u53c2\u6570########### check_dsdl_meta_info ( meta_info ) # \u68c0\u9a8cmeta\u4fe1\u606f\u662f\u5426\u5b58\u5728\u9519\u8bef check_task_template_file ( save_path ) # \u68c0\u9a8c\u4fdd\u5b58\u8def\u5f84\u4e2d\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u6a21\u677f\u6587\u4ef6 # 1. \u751f\u6210\u539f\u59cb\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784\u6811\u5f62\u5b57\u7b26\u4e32 original_tree_str = generate_tree_string ( root_path ) # 2. \u6570\u636e\u96c6\u4e2d\u95f4\u683c\u5f0f\u8f6c\u6362\uff0c\u8c03\u7528dataset_to_middle_format\uff08\u5982\u6709\u9700\u8981\u8bf7\u5b9e\u73b0\u8be5\u51fd\u6570\uff09 if flag_middle_format : ## \u5148\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u628a\u6570\u636e\u96c6\u8f6c\u6362\u6210\u4e2d\u95f4\u683c\u5f0f ## \u53ef\u53c2\u8003dataset_to_middle_format()\u4e2d\u6ce8\u91ca ## \u9700\u8981\u5bf9middle_format_tree_str\u548cconverter_description\u8d4b\u503c dataset_to_middle_format ( root_path ) # \u9700\u8981\u81ea\u884c\u4fee\u6539\u6240\u9700\u7684\u53c2\u6570 # 3. \u751f\u6210class-dom class_dom_names = [] for name in class_dom_names_original : class_dom_names . append ( replace_special_characters ( name )) # \u5c06\u4e0d\u5408\u89c4\u7684label\u540d\u5b57\u505a\u8f6c\u6362 generate_class_dom ( save_path , class_dom_names ) # \u751f\u6210class-dom.yaml\u6587\u4ef6 # 4. \u751f\u6210<segment>_samples.json,\u8c03\u7528get_subset_samples_list\uff08\u5fc5\u987b\u5b9e\u73b0\u8be5\u51fd\u6570\uff09 for subset_name in subset_name_list : meta_info [ \"Subset Name\" ] = subset_name print ( f \"processing data in { subset_name } .\" ) subset_samples_list = get_subset_samples_list ( root_path , subset_name ) # \u9700\u8981\u81ea\u884c\u4fee\u6539\u6240\u9700\u7684\u53c2\u6570 if len ( subset_samples_list ) == 0 : raise ResourceWarning ( \"No samples found. Check if the file path is correct. \" \"If the dataset is not decompressed, remove -d option and try again.\" ) # \u793a\u4f8b\uff1asubset_samples_list = get_subset_samples_list(root_path, subset_name) generate_subset_yaml_and_json ( meta_info , save_path , subset_samples_list ) print ( f \"Sample list for { subset_name } is generated.\" ) dsdl_tree_str = generate_tree_string ( save_path , display_num = 100 ) # \u751f\u6210\u8f6c\u540e\u7684dsdl\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784\u6811\u5f62\u5b57\u7b26\u4e32 generate_config_file ( save_path ) # \u751f\u6210config.py # 5. \u751f\u6210README.md if flag_middle_format : generate_readme_with_middle_format ( save_path , meta_info [ \"Dataset Name\" ], meta_info [ \"Task\" ], original_tree_str , dsdl_tree_str , ) else : generate_readme_without_middle_format ( save_path , meta_info [ \"Dataset Name\" ], meta_info [ \"Task\" ], original_tree_str , dsdl_tree_str ) \u8f6c\u6362\u8005\u5b8c\u5584\u4e86\u5fc5\u8981\u7684\u51fd\u6570\u7684\u548c\u5fc5\u586b\u7684\u5b57\u6bb5\u540e\uff0c\u53ef\u4ee5\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\uff1a python tools/prepare.py <path_to_compressed_dataset_folder> \u8fd0\u884c\u8be5\u4ee3\u7801\u540e\uff0c\u5c06\u4f1a\u5bf9\u7528\u6237\u63d0\u4f9b\u7684\u6570\u636e\u96c6\u538b\u7f29\u5305\u8fdb\u884c\u89e3\u538b\uff0c\u751f\u6210prepared\u6587\u4ef6\u5939\uff0c\u7136\u540e\u76f4\u63a5\u5bf9prepared\u6587\u4ef6\u5939\u8fdb\u884cDSDL\u6807\u51c6\u5316\u64cd\u4f5c\uff0c\u5e76\u751f\u6210DSDL\u6807\u6ce8\u3002\u6267\u884c\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 <dataset_name> \u251c\u2500\u2500 compressed \u2514\u2500\u2500 ... # \u539f\u59cb\u6570\u636e\u96c6\u7684\u538b\u7f29\u5305(\u771f\u6b63\u7684\u539f\u59cb\u6570\u636e\u96c6\uff09,\u540e\u9762\u63d0\u4f9b\u7ed9OSS \u251c\u2500\u2500 prepared # \u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u6240\u6709\u6587\u4ef6 \u251c\u2500\u2500 ... # \u7531prepare.sh\u8fd0\u884c\u540e\u751f\u6210 \u2514\u2500\u2500 ... \u251c\u2500\u2500 dsdl # \u5b58\u653eDSDL\u6807\u6ce8\u7684\u6587\u4ef6\u5939 \u251c\u2500\u2500 defs/ \u251c\u2500\u2500 template.yaml # \u4efb\u52a1\u6a21\u677f \u251c\u2500\u2500 class-dom.yaml # \u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 set-train/ # \u8bad\u7ec3\u96c6 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u96c6\u7684\u5b9a\u4e49\u6587\u4ef6 \u251c\u2500\u2500 train_samples.json # \u5b9e\u9645\u6807\u6ce8\u6587\u4ef6 \u251c\u2500\u2500 tools/ \u2514\u2500\u2500 prepare.py # \u5305\u62ec\u89e3\u538b\u3001\u8f6c\u4e2d\u95f4\u683c\u5f0f\uff08\u5982\u679c\u9700\u8981\u7684\u8bdd\uff09\u548c\u751f\u6210dsdl\u76ee\u5f55 \u251c\u2500\u2500 README.md \u2514\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6 2. \u5b9e\u9645\u793a\u4f8b \u8be5\u793a\u4f8b\u4e2d\uff0c\u5c06\u76f4\u63a5\u5229\u7528 \u76ee\u6807\u68c0\u6d4b\u6a21\u677f \u6765\u5bf9VOC\u8fdb\u884c \u7cbe\u7b80\u7248DSDL\u8f6c\u6362 \u3002 \u4e3b\u8981\u6b65\u9aa4\u5982\u4e0b: \u539f\u59cb\u6570\u636e\u96c6\u8c03\u7814\uff1a\u5305\u62ec\u76ee\u5f55\u7ed3\u6784\u3001\u6807\u6ce8\u6587\u4ef6\u7b49 \u6570\u636e\u96c6\u8f6c\u6362\u811a\u672c\u5b9e\u73b0\uff1a\u901a\u8fc7\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u548c\u6570\u636e\u96c6\u8f6c\u6362\u811a\u672c\u6a21\u677f\uff0c\u5b9e\u73b0VOC\u8f6cDSDL 2.1 \u539f\u59cb\u6570\u636e\u96c6\u8c03\u7814 \u9996\u5148\u9700\u8981\u8c03\u7814\u539f\u59cb\u6570\u636e\u96c6\u7684\u6587\u4ef6\u7ed3\u6784\uff1a VOC2007/ \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001.xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001.jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ... \u8fd9\u91cc\u53ea\u4ee5\u68c0\u6d4b\u4efb\u52a1\u4e3a\u4f8b\u751f\u6210\u6a21\u677f\uff0c\u56e0\u6b64\u53ea\u9700\u8981Annotations/\u3001JPEGImages/\u8fd9\u4e24\u4e2a\u6587\u4ef6\u5939\uff0c\u53e6\u5916\uff0c\u8bad\u7ec3\u6d4b\u8bd5\u96c6\u5212\u5206\uff0c\u9700\u8981\u7528ImageSets/Main/train.txt\u3001val.txt\u3001test.txt\u8fd9\u4e09\u4e2a\u6587\u4ef6\u3002 \u6807\u6ce8\u7c7b\u578b\u5982\u4e0b\uff08\u4ee5Annotations/000001.xml\u4e3a\u4f8b\uff09\uff1a <annotation> <folder> VOC2007 </folder> # \u6587\u4ef6\u5939 <filename> 000001.jpg </filename> # \u56fe\u7247\u6587\u4ef6\u540d <source> # \u56fe\u50cf\u5143\u4fe1\u606f <database> The VOC2007 Database </database> # \u6570\u636e\u96c6\u540d\u79f0 <annotation> PASCAL VOC2007 </annotation> # \u6807\u6ce8\u7c7b\u578b <image> flickr </image> # \u6765\u6e90 <flickrid> 341012865 </flickrid> # \u6765\u6e90ID </source> <owner> # \u6e90\u4fe1\u606f <flickrid> Fried Camels </flickrid> <name> Jinky the Fruit Bat </name> </owner> <size> <width> 353 </width> # \u56fe\u7247\u5bbd <height> 500 </height> # \u56fe\u7247\u9ad8 <depth> 3 </depth> # \u56fe\u7247\u901a\u9053\u6570 </size> <segmented> 0 </segmented> # \u662f\u5426\u7528\u4e8e\u5206\u5272 <object> # \u6807\u6ce8\u90e8\u5206 <name> dog </name> # \u6807\u7b7e <pose> Left </pose> # \u59ff\u6001 <truncated> 1 </truncated> # \u7269\u4f53\u662f\u5426\u88ab\u90e8\u5206\u906e\u6321\uff08>15%\uff09 <difficult> 0 </difficult> # \u662f\u5426\u4e3a\u96be\u4ee5\u8fa8\u8bc6\u7684\u7269\u4f53 <bndbox> <xmin> 48 </xmin> # \u5de6\u4e0a\u89d2\u70b9\u7684x <ymin> 240 </ymin> # \u5de6\u4e0a\u89d2\u70b9\u7684y <xmax> 195 </xmax> # \u53f3\u4e0b\u89d2\u70b9\u7684x <ymax> 371 </ymax> # \u53f3\u4e0b\u89d2\u70b9\u7684y </bndbox> </object> ... </annotation> \u8fd9\u91cc\u4ee5ImageSets/Main/train.txt\u4e3a\u4f8b\u5c55\u793a\u4e00\u4e0b\u6570\u636e\u96c6segment\u5212\u5206\u7684\u6587\u4ef6\u5185\u5bb9\uff1a 000012 # \u56fe\u7247\u540d\u524d\u7f00 000017 000023 000026 ... 2.2 \u6570\u636e\u96c6\u8f6c\u6362\u811a\u672c\u5b9e\u73b0 \u6839\u636e\u8be5\u6570\u636e\u96c6\u7684\u76ee\u5f55\u7ed3\u6784\u548c\u6807\u6ce8\u7c7b\u578b\uff0cprepare.py\u811a\u672c\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a import argparse import os import shutil import sys from pathlib import Path import tarfile import zipfile from itertools import chain from dsdl.converter.mllm import generate_config_file from dsdl.converter.mllm import generate_readme_with_middle_format from dsdl.converter.mllm import generate_readme_without_middle_format from dsdl.converter.mllm import generate_tree_string from dsdl.converter.utils import check_dsdl_meta_info from dsdl.converter.utils import check_task_template_file from dsdl.converter.utils import generate_class_dom from dsdl.converter.utils import generate_subset_yaml_and_json from dsdl.converter.utils import replace_special_characters from dsdl.converter.utils import get_dsdl_template_from_lib #!/usr/bin/env python3 \"\"\" This file implements the generator of the VOC2007 DSDL format dataset. \"\"\" import itertools from xml.etree import ElementTree import json #############\u63d0\u53d6\u539f\u59cb\u6570\u636e\u96c6\u5b57\u6bb5\uff0c\u751f\u6210sample list############################# def get_subset_samples_list ( root_path , seg , category_list ): samples_list = [] anno_paths = os . path . join ( root_path , \"Annotations\" ) ann_id_gen = itertools . count () _VOC_CATEGORY_DICT = { _name : ( _ind + 1 ) for _ind , _name in enumerate ( category_list )} seg_path = os . path . join ( root_path , 'ImageSets' , 'Main' , seg + '.txt' ) try : with open ( seg_path , 'r' ) as f : seg_list = f . readlines () except : print ( 'The segmentation file {} cannot be open, it will be skipped.' . format ( seg_path )) for anno_id in seg_list : anno_path = os . path . join ( root_path , 'Annotations' , anno_id . strip () + '.xml' ) try : with open ( anno_path , 'r' ) as f : anno_tree = ElementTree . parse ( f ) except : print ( 'The annotation file {} cannot read, it will be skipped.' . format ( anno_path )) continue sample = { 'image' : os . path . join ( 'JPEGImages' , anno_tree . find ( 'filename' ) . text ), 'objects' : []} for obj in anno_tree . iter ( 'object' ): xmin , ymin , xmax , ymax = [ float ( obj . find ( 'bndbox' ) . find ( boxes ) . text ) for boxes in [ 'xmin' , 'ymin' , 'xmax' , 'ymax' ]] sample [ 'objects' ] . append ({ 'bbox' : [ xmin , ymin , xmax - xmin , ymax - ymin ], 'label' : _VOC_CATEGORY_DICT [ obj . find ( 'name' ) . text ] }) samples_list . append ( sample ) return samples_list def parse_args (): \"\"\"\u547d\u4ee4\u884c\u53c2\u6570\u89e3\u6790\"\"\" parse = argparse . ArgumentParser ( description = 'Prepare the dsdl_SemSeg_full dataset from original dataset.' ) parse . add_argument ( '--decompressed' , '-d' , action = 'store_true' , help = 'This argument decides whether the dataset files are decompressed. ' 'Add \"-d\" argument to skip decompress process, ' 'and directly pass the decompressed dataset. ' 'The default is need decompress process.' ) parse . add_argument ( '--copy' , '-c' , action = 'store_true' , help = 'This argument decides whether the decompressed dataset files will be copied as a backup and then run the converter. ' 'Add \"-c\" argument to create a copy, and then run the converter. ' 'The default is not to create a copy and directly overwrite the original data.' ) parse . add_argument ( 'path' , type = str , help = 'The original dataset path, a folder with compressed files if \"-d\" doesn \\' t exist, ' 'or decompressed folder when \"-d\" exists.' ) args = parse . parse_args () return args def prepare ( args ): \"\"\"\u6839\u636e\u4e0d\u540c\u7684\u547d\u4ee4\u884c\u53c2\u6570\u6267\u884c\u89e3\u538b\u3001\u590d\u5236\u64cd\u4f5c,\u5e76\u8c03\u7528\u6570\u636e\u96c6\u6587\u4ef6\u8f6c\u6362\u548cdsdl\u6807\u6ce8\u751f\u6210\u3002\"\"\" SCRIPT_PATH = Path ( __file__ ) . resolve () . absolute () . parent DSDL_PATH = SCRIPT_PATH . parent if args . decompressed : ORIGINAL_PATH = Path ( args . path ) if args . copy : PREPARED_PATH = ORIGINAL_PATH . parent / \"prepared\" if PREPARED_PATH . exists (): raise Exception ( f \"Path { PREPARED_PATH . absolute () . as_posix () } already exists.\" ) shutil . copytree ( ORIGINAL_PATH , PREPARED_PATH ) else : if flag_middle_format : print ( \"The operation will directly overwrite the dataset files with no backup.\" ) while True : confirm = input ( \"Input [yes] to continue, or [quit] to exit. \" ) if confirm . lower () == \"quit\" : sys . exit ( 0 ) elif confirm . lower () == \"yes\" : break PREPARED_PATH = ORIGINAL_PATH else : COMPRESSED_PATH = Path ( args . path ) PREPARED_PATH = COMPRESSED_PATH . parent / \"prepared\" if PREPARED_PATH . exists (): raise Exception ( f \"Path { PREPARED_PATH . absolute () . as_posix () } already exists.\" ) PREPARED_PATH . mkdir () found_compressed = False #######\u9700\u8981\u4fee\u6539:\u89e3\u538b\u64cd\u4f5c\uff0c\u5185\u7f6ezip\u548ctar.gz\u683c\u5f0f\uff0c\u5176\u4ed6\u683c\u5f0f\u9700\u8981\u4fee\u6539############# for file in COMPRESSED_PATH . rglob ( \"*.zip\" ): found_compressed = True zf = zipfile . ZipFile ( file ) zf . extractall ( PREPARED_PATH ) for file in chain ( COMPRESSED_PATH . rglob ( \"*.tar.gz\" ), COMPRESSED_PATH . rglob ( \"*.tgz\" ), COMPRESSED_PATH . rglob ( \"*.tar\" ) ): found_compressed = True tf = tarfile . open ( file ) tf . extractall ( PREPARED_PATH ) if not found_compressed : raise Exception ( 'Compressed file not found. Check the file path.' ) for file in ( PREPARED_PATH / \"VOCdevkit\" / \"VOC2007\" ) . iterdir (): file . rename ( file . parent . parent . parent / file . name ) shutil . rmtree ( PREPARED_PATH / \"VOCdevkit\" ) ############################################################################# if args . copy : ORIGINAL_PATH = COMPRESSED_PATH . parent / \"original\" if ORIGINAL_PATH . exists (): raise Exception ( f \"Path { ORIGINAL_PATH . absolute () . as_posix () } already exists.\" ) shutil . copytree ( PREPARED_PATH , ORIGINAL_PATH ) return PREPARED_PATH . absolute () . as_posix (), DSDL_PATH . absolute () . as_posix () if __name__ == \"__main__\" : meta_info = { \"Dataset Name\" : \"VOC2007\" , \"HomePage\" : \"http://host.robots.ox.ac.uk/pascal/VOC/voc2007/index.html\" , \"Modality\" : \"Images\" , \"Task\" : \"Object Detection\" } flag_middle_format = False class_dom_names_original = [ \"aeroplane\" , \"bicycle\" , \"bird\" , \"boat\" , \"bottle\" , \"bus\" , \"car\" , \"cat\" , \"chair\" , \"cow\" , \"diningtable\" , \"dog\" , \"horse\" , \"motorbike\" , \"person\" , \"pottedplant\" , \"sheep\" , \"sofa\" , \"train\" , \"tvmonitor\" ] subset_name_list = [ 'train' , 'val' , 'test' ] args = parse_args () root_path , save_path = prepare ( args ) ## \u8bf4\u660e\uff1a ## \u56e0\u4e3a\u6a21\u677f\u6587\u4ef6template.yaml\u662fdsdl\u4e2d\u5b9a\u4e49\u6570\u636e\u96c6\u7ed3\u6784\u548c\u5b57\u6bb5\u7684\u6587\u4ef6\u3002 ## \u6240\u4ee5\u5fc5\u987b\u5148\u751f\u6210template.yaml\u624d\u80fd\u8fdb\u884c\u540e\u7eed\u8f6c\u6362\u3002 ## template.yaml\u7684\u4f4d\u7f6e\u4f4d\u4e8e: save_path/defs/template.yaml ## \u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u5df2\u6709\u7684\u6a21\u677f\uff0c\u6216\u624b\u52a8\u521b\u5efatemplate.yaml\uff0c\u5e76\u62f7\u8d1d\u5230save_path/defs/\u76ee\u5f55\u4e0b\u3002 ## \u4ee5\u4e0b\u793a\u4f8b\u662f\u8c03\u7528\u5df2\u6709\u7684\u6a21\u677f\uff1a get_dsdl_template_from_lib ( meta_info [ \"Task\" ], save_path ) ## \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684task_name\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u6a21\u677f\u4ecb\u7ecd\u9875\u9762\u7684\u8868\u683c\u4e2d\u7684\u201c\u4efb\u52a1\u82f1\u6587\u5168\u79f0\u201d\u83b7\u53d6 ###########\u4ee5\u4e0b\u662f\u8f6c\u6362\u548c\u751f\u6210\u7684\u6b65\u9aa4\uff0c\u53ef\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539############# ###########\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981\u4fee\u6539get_subset_samples_list\u6240\u9700\u7684\u53c2\u6570########### check_dsdl_meta_info ( meta_info ) # \u68c0\u9a8cmeta\u4fe1\u606f\u662f\u5426\u5b58\u5728\u9519\u8bef check_task_template_file ( save_path ) # \u68c0\u9a8c\u4fdd\u5b58\u8def\u5f84\u4e2d\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u6a21\u677f\u6587\u4ef6 # 1. \u751f\u6210\u539f\u59cb\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784\u6811\u5f62\u5b57\u7b26\u4e32 original_tree_str = generate_tree_string ( root_path ) # 2. \u6570\u636e\u96c6\u4e2d\u95f4\u683c\u5f0f\u8f6c\u6362\uff0c\u8c03\u7528dataset_to_middle_format\uff08\u5982\u6709\u9700\u8981\u8bf7\u5b9e\u73b0\u8be5\u51fd\u6570\uff09 if flag_middle_format : ## \u5148\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u628a\u6570\u636e\u96c6\u8f6c\u6362\u6210\u4e2d\u95f4\u683c\u5f0f ## \u53ef\u53c2\u8003dataset_to_middle_format()\u4e2d\u6ce8\u91ca ## \u9700\u8981\u5bf9middle_format_tree_str\u548cconverter_description\u8d4b\u503c dataset_to_middle_format ( root_path ) # \u9700\u8981\u81ea\u884c\u4fee\u6539\u6240\u9700\u7684\u53c2\u6570 # 3. \u751f\u6210class-dom class_dom_names = [] for name in class_dom_names_original : class_dom_names . append ( replace_special_characters ( name )) # \u5c06\u4e0d\u5408\u89c4\u7684label\u540d\u5b57\u505a\u8f6c\u6362 generate_class_dom ( save_path , class_dom_names ) # \u751f\u6210class-dom.yaml\u6587\u4ef6 # 4. \u751f\u6210<segment>_samples.json,\u8c03\u7528get_subset_samples_list\uff08\u5fc5\u987b\u5b9e\u73b0\u8be5\u51fd\u6570\uff09 for subset_name in subset_name_list : meta_info [ \"Subset Name\" ] = subset_name print ( f \"processing data in { subset_name } .\" ) subset_samples_list = get_subset_samples_list ( root_path , subset_name , class_dom_names_original ) # \u9700\u8981\u81ea\u884c\u4fee\u6539\u6240\u9700\u7684\u53c2\u6570 # \u793a\u4f8b\uff1asubset_samples_list = get_subset_samples_list(root_path, subset_name) generate_subset_yaml_and_json ( meta_info , save_path , subset_samples_list ) print ( f \"Sample list for { subset_name } is generated.\" ) dsdl_tree_str = generate_tree_string ( save_path , display_num = 100 ) # \u751f\u6210\u8f6c\u540e\u7684dsdl\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784\u6811\u5f62\u5b57\u7b26\u4e32 generate_config_file ( save_path ) # \u751f\u6210config.py # 5. \u751f\u6210README.md if flag_middle_format : generate_readme_with_middle_format ( save_path , meta_info [ \"Dataset Name\" ], meta_info [ \"Task\" ], original_tree_str , dsdl_tree_str , ) else : generate_readme_without_middle_format ( save_path , meta_info [ \"Dataset Name\" ], meta_info [ \"Task\" ], original_tree_str , dsdl_tree_str ) \u8fd0\u884c\u4e86tools/prepare.py\u540e\uff0c\u5f97\u5230\u7684DSDL\u6570\u76ee\u5f55\u5982\u4e0b\uff1a dsdl-voc2007/ \u251c\u2500\u2500 defs/ \u2502 \u251c\u2500\u2500 template.yaml # \u68c0\u6d4b\u4efb\u52a1\u6a21\u677f \u2502 \u2514\u2500\u2500 class-dom.yaml # \u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 set-train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 set-val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u251c\u2500\u2500 set-test/ # \u6d4b\u8bd5\u96c6 \u2502 \u251c\u2500\u2500 test.yaml \u2502 \u2514\u2500\u2500 test_samples.json \u251c\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6 \u2514\u2500\u2500 README.md # \u6570\u636e\u96c6\u7b80\u4ecb \u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u91cd\u8981\u7684\u6587\u4ef6\uff1a struct\u7684\u5b9a\u4e49\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u6587\u4ef6\u540d\u4e3atemplate.yaml\uff09\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5bf9struct\u505a\u4e00\u4e2a\u660e\u786e\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u6709sample\u7684\u7ed3\u6784\u4f53\u548c\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u7b49\uff0c\u9700\u6307\u660e\u5305\u542b\u4e86\u54ea\u4e9bfield\uff0c\u6bcf\u4e2afield\u7684\u7c7b\u578b\u3002 \u7c7b\u522b\u57df\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e3aclass-dom.yaml\uff09\uff1a\u91cc\u9762\u5305\u542b\u4e86\u7c7b\u522b\u5217\u8868\uff0c\u5bf9\u5e94category\u7684\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\u6392\u5e8f\uff09 samples\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5206\u522b\u5206\u4e3atrain.yaml\u548ctrain_samples.json) train.yaml\u4e3b\u8981\u662f\u6307\u660e\u5f15\u7528\u54ea\u4e2astruct\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6587\u4ef6\uff0c\u5e76\u4e14\u6307\u660e\u6570\u636e\u7c7b\u578b\u548c\u5b58\u653e\u8def\u5f84\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9bmeta\u4fe1\u606f train_samples.json\u91cc\u4fdd\u5b58\u4e86\u5b9e\u9645\u7684samples\u4fe1\u606f\uff0c\u5176\u7ec4\u7ec7\u7ed3\u6784\u5fc5\u987b\u548c\u4e4b\u524d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u5339\u914d 2.2.1 \u7c7b\u522b\u57df class-dom.yaml\uff1a\u8fd9\u662f\u4e00\u4e2a\u7c7b\u522b\u5b9a\u4e49\u7684Dom\u6587\u6863 $dsdl-version : \"0.5.0\" ClassDom : $def : class_domain classes : - aeroplane # \u5bf9\u5e94_category\u4e3a1 - bicycle # \u5bf9\u5e94_category\u4e3a2\uff0c\u4ee5\u6b64\u7c7b\u63a8 - bird - boat - bottle - bus - car - cat - chair - cow - diningtable - dog - horse - motorbike - person - pottedplant - sheep - sofa - train - tvmonitor 2.2.2 set-train\u6587\u4ef6\u5939 train.yaml\uff1a\u8fd9\u4e2a\u6587\u6863\u5f15\u7528\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u4e24\u4e2a\u6587\u6863\uff0c\u5e76\u4e14\u6307\u5f15\u4e86\u5177\u4f53\u7684sample\u8def\u5f84\uff08test.yaml\u548cval.yaml\u7c7b\u4f3c\uff0c\u53ea\u662f\u4fee\u6539\u5bf9\u5e94sample-path\u548csub_dataset_name\u5b57\u6bb5\uff09 $dsdl-version : \"0.5.0\" $import : - ../defs/class-domain - ../defs/object-detection-def meta : Dataset Name : \"VOC2007\" , HomePage : \"http://host.robots.ox.ac.uk/pascal/VOC/voc2007/index.html\" , Modality : \"Images\" , Task : \"Object Detection\" data : sample-type : ObjectDetectionSample[cdom=VOCClassDom] sample-path : train_samples.json train_samples.json\u9700\u8981\u6211\u4eec\u5199\u811a\u672c\u4ece\u539f\u59cb\u6570\u636e\u96c6\u8f6c\u6362\u6765\uff08\u8f6c\u6362\u811a\u672c\u5c06\u5728\u4e0b\u4e00\u5c0f\u8282\u201c\u6570\u636e\u96c6\u8f6c\u6362\u201d\u4e2d\u8be6\u8ff0\uff09\u3002\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684struct\u5bf9\u5e94\u3002\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"image\" : \"JPEGImages/000001.jpg\" , \"objects\" : [ { \"bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"label\" : 1 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002 2.2.3 config config.py\u7684\u5185\u5bb9\u5982\u4e0b\uff1a local = dict( type=\"LocalFileReader\", working_dir=\"the root path of the prepared dataset\", ) ali_oss = dict( type=\"AliOSSFileReader\", access_key_secret=\"your secret key of aliyun oss\", endpoint=\"your endpoint of aliyun oss\", access_key_id=\"your access key of aliyun oss\", bucket_name=\"your bucket name of aliyun oss\", working_dir=\"the prefix of the prepared dataset within the bucket\") \u8bf7\u6839\u636e\u5b9e\u9645\u60c5\u51b5\uff0c\u4fee\u6539\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\u548c\u8def\u5f84\u3002 2.2.4 README.md \u8be5\u6570\u636e\u96c6\u6700\u7ec8\u5c06\u5b57\u6bb5\u751f\u6210README\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a # Data Set Description Language(DSDL) for VOC2007 dataset ## Data Structure Please make sure the folder structure of prepared dataset is organized as followed: <dataset_root> \u251c\u2500\u2500 Annotations \u2502 \u251c\u2500\u2500 000001.xml \u2502 \u251c\u2500\u2500 000002.xml \u2502 \u251c\u2500\u2500 000003.xml \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets \u2502 \u251c\u2500\u2500 Layout \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u251c\u2500\u2500 Main \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 aeroplane_trainval.txt \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 Segmentation \u2502 \u251c\u2500\u2500 test.txt \u2502 \u251c\u2500\u2500 train.txt \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 JPEGImages \u2502 \u251c\u2500\u2500 000001.jpg \u2502 \u251c\u2500\u2500 000002.jpg \u2502 \u251c\u2500\u2500 000003.jpg \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 ... The folder structure of dsdl annotation for Object Detection is organized as followed: <dsdl_root> \u251c\u2500\u2500 defs \u2502 \u251c\u2500\u2500 class-dom.yaml \u2502 \u2514\u2500\u2500 template.yaml \u251c\u2500\u2500 tools \u2502 \u2514\u2500\u2500 prepare.py \u251c\u2500\u2500 set-train \u2502 \u251c\u2500\u2500 train.yaml \u2502 \u2514\u2500\u2500 train_samples.json \u251c\u2500\u2500 set-val \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u2514\u2500\u2500 set-test \u251c\u2500\u2500 test.yaml \u2514\u2500\u2500 test_samples.json ## config.py You can load your dataset from local or oss. From local: local = dict( type=\"LocalFileReader\", working_dir=\"the root path of the prepared dataset\", ) Please change the 'working_dir' to the path of your prepared dataset where media data can be found, for example: \"<root>/dataset_name/prepared\". From oss: ali_oss = dict( type=\"AliOSSFileReader\", access_key_secret=\"your secret key of aliyun oss\", endpoint=\"your endpoint of aliyun oss\", access_key_id=\"your access key of aliyun oss\", bucket_name=\"your bucket name of aliyun oss\", working_dir=\"the prefix of the prepared dataset within the bucket\") Please change the 'access_key_secret', 'endpoint', 'access_key_id', 'bucket_name' and 'working_dir', e.g. if the full path of your prepared dataset is \"oss://bucket_name/dataset_name/prepared\", then the working_dir should be \"dataset_name/prepared\". ## Related source: 1. Get more information about DSDL: [dsdl-docs](https://opendatalab.github.io/dsdl-docs/) 2. DSDL-SDK official repo: [dsdl-sdk](https://github.com/opendatalab/dsdl-sdk/) 3. Get more dataset: [OpenDataLab](https://opendatalab.com/) \u6570\u636e\u96c6\u8f6c\u6362\u5b8c\u6210\u540e\uff0c\u5efa\u8bae\u8fd0\u884c \u6570\u636e\u96c6\u9a8c\u8bc1 \uff0c\u4ee5\u4fdd\u8bc1DSDL\u6570\u636e\u96c6\u53ef\u6b63\u5e38\u4f7f\u7528\u3002","title":"DSDL\u6570\u636e\u96c6\u683c\u5f0f\u8f6c\u6362"},{"location":"tutorials/advanced/dsdl_convert/#_1","text":"\u7528\u6237\u5728\u5b8c\u6210\u4e86 \u6570\u636e\u96c6\u6a21\u677f\u7684\u5236\u5b9a \u540e\uff0c\u5373\u53ef\u8fdb\u884c\u6570\u636e\u96c6\u8f6c\u6362\u9636\u6bb5\u3002\u6211\u4eec\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86 DSDL SDK \u5de5\u5177\uff0c\u8f85\u52a9\u6570\u636e\u96c6\u8f6c\u6362\u7684\u6d41\u7a0b\uff0c\u8bf7\u5148 \u5b89\u88c5SDK \u3002 \u672c\u6559\u7a0b\u5305\u542b\u4e24\u4e2a\u6a21\u677f\uff1a \u6570\u636e\u96c6\u8f6c\u6362\u6d41\u7a0b\u53ca\u811a\u672c\u6a21\u677f \uff1a\u8f6c\u6362\u8005\u4ec5\u9700\u8981\u5b9e\u73b0\u51e0\u4e2a\u7279\u5b9a\u51fd\u6570\uff0c\u5373\u53ef\u76f4\u63a5\u751f\u6210DSDL\u6570\u636e\u96c6\u76ee\u5f55\u3002 \u5b9e\u9645\u793a\u4f8b \uff1aVOC\u8f6cDSDL\u7684\u5b9e\u9645\u6848\u4f8b\uff0c\u4f9b\u7528\u6237\u53c2\u8003\u3002","title":"\u6570\u636e\u96c6\u8f6c\u6362"},{"location":"tutorials/advanced/dsdl_convert/#1","text":"\u8f6c\u6362\u8005\u9700\u8981\u51c6\u5907\u597d\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u6587\u4ef6\u5939\u548cDSDL\u6587\u4ef6\u5939\uff0c\u63a8\u8350\u6309\u7167\u4ee5\u4e0b\u7684\u76ee\u5f55\u7ed3\u6784\u6765\u6574\u7406\uff1a \u251c\u2500\u2500 <dataset_name> \u251c\u2500\u2500 compressed \u2514\u2500\u2500 ... # \u539f\u59cb\u6570\u636e\u96c6\u7684\u538b\u7f29\u5305 \u251c\u2500\u2500 dsdl # \u5b58\u653eDSDL\u6807\u6ce8\u7684\u6587\u4ef6\u5939 \u251c\u2500\u2500 defs/ \u251c\u2500\u2500 template.yaml # \u4efb\u52a1\u6a21\u677f\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ece\u6a21\u677f\u5e93\u8c03\u7528 \u251c\u2500\u2500 tools/ \u2514\u2500\u2500 prepare.py # \u6570\u636e\u96c6\u51c6\u5907\u811a\u672c\uff0c\u53ef\u53c2\u8003\u672c\u5c0f\u8282\u63d0\u4f9b\u7684\u6a21\u677f \u4ee5\u4e0a\u7684\u76ee\u5f55\u4e2d\u7684template.yaml\u4e3a DSDL\u6570\u636e\u96c6\u6a21\u677f\u5236\u5b9a \u5c0f\u8282\u4e2d\u5236\u5b9a\u7684\u6a21\u677f\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6a21\u677f\uff0c\u4e5f\u53ef\u4ee5\u5728DSDL SDK\u4e2d\u76f4\u63a5\u8c03\u7528\u4efb\u52a1\u6a21\u677f\uff08\u540e\u6587\u7684\u8f6c\u6362\u811a\u672c\u6a21\u677f\u4e2d\u4f1a\u6807\u660e\u7528\u6cd5\uff09\u3002 \u6211\u4eec\u4e3a\u7528\u6237\u51c6\u5907\u4e86prepare.py\u7684\u6a21\u677f\uff0c\u7528\u6237\u53ea\u9700\u8981\u6309\u7167\u5b9e\u9645\u60c5\u51b5\u5b9e\u73b0\u90e8\u5206\u51fd\u6570\u5373\u53ef\u3002 prepare.py\u4e2d\u5305\u542b\u7684\u6a21\u5757\u5982\u4e0b \uff1a prepare\u51fd\u6570\uff1a\u8be5\u811a\u672c\u4e3b\u8981\u662f\u7528\u4e8e\u89e3\u538b\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u3002\u8be5\u811a\u672c\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u4e3a\u539f\u59cb\u6570\u636e\u96c6\u538b\u7f29\u5305\u7684\u6587\u4ef6\u5939\u8def\u5f84\uff0c\u5373 <dataset_name>/compressed/ \u3002\u6211\u4eec\u5df2\u63d0\u4f9b\u4e86\u6a21\u677f\uff0c\u5185\u7f6ezip\u548ctar.gz\u683c\u5f0f\uff0c\u5982\u9700\u8981\u652f\u6301\u5176\u4ed6\u683c\u5f0f\uff0c\u53ea\u9700\u8981\u4fee\u6539\u89e3\u538b\u90e8\u5206\u7684\u547d\u4ee4\u5373\u53ef\uff08\u5728\u4ee3\u7801\u6a21\u677f\u4e2d\u6709\u6807\u660e\uff09\u3002 get_subset_samples_list\u51fd\u6570\uff1a\u4e3b\u8981\u662f\u7528\u4e8e\u751f\u6210 class-dom.yaml \u548c set-<segment>.yaml / set-<segment>_samples.json \uff0c\u8bf7\u81ea\u884c\u4fee\u6539\u4ee5\u9002\u5e94\u4e0d\u540c\u6570\u636e\u96c6\u7684\u6807\u6ce8\u5185\u5bb9\u63d0\u53d6\u3002\u53e6\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e3a\u4e86\u9632\u6b62class-dom\u4e2d\u51fa\u73b0\u4e0d\u5408\u89c4\u7684\u547d\u540d\uff0c\u9700\u8981\u5bf9\u6240\u6709\u7c7b\u522b\u540d\u505a\u8f6c\u6362\uff08\u7531replace_special_characters\u51fd\u6570\u5b9e\u73b0\uff09\u3002 \uff08\u53ef\u9009\uff09dataset_converter\u51fd\u6570\uff1a\u4e2d\u95f4\u683c\u5f0f\u8f6c\u6362\uff0c\u7528\u4e8e\u5bf9\u6570\u636e\u96c6\u7684\u5a92\u4f53\u6587\u4ef6\u6216\u6807\u6ce8\u6587\u4ef6\u8fdb\u884c\u5fc5\u8981\u7684\u4e2d\u95f4\u683c\u5f0f\u8f6c\u6362\uff0c\u5728\u6b64\u4e3e\u4e24\u4e2a\u5b9e\u4f8b\uff1a \u6bd4\u5982\u50cf\u5728\u5206\u5272\u6570\u636e\u96c6\u4e2d\uff0c\u7531\u4e8e\u76ee\u524dDSDL\u6807\u51c6\u91cc\u8981\u6c42\u5206\u5272\u6570\u636e\u96c6\u4ee5\u5355\u901a\u9053Int\u503c\u56fe\u5b58\u50a8mask\uff0c\u9700\u8981\u628a\u4e09\u6ce2\u6bb5\u7684label map\u6620\u5c04\u4e3a\u5355\u901a\u9053\u7684Int\u503c\u56fe\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u6570\u636e\u96c6\u7684\u6807\u6ce8\u6587\u4ef6\u505a\u8f6c\u6362\u7684\u66ff\u6362\u3002 \u6bd4\u5982CIFAR10\u5b58\u50a8\u7684\u56fe\u7247\u683c\u5f0f\u662fTFrecord\uff0c\u591a\u4e2a\u56fe\u7247\u5b58\u5728\u540c\u4e00\u4e2aTFrecord\u91cc\uff0c\u800cDSDL\u7684Image path\u9700\u8981\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u6bcf\u4e2a\u56fe\u7247\u63d0\u53d6\u51fa\u6765\u8f6c\u6210PNG\u3002 main\u51fd\u6570\u4e2d\u5fc5\u586b\u7684\u53c2\u6570\uff1a meta_info\uff1a\u5305\u62ec\u6570\u636e\u96c6\u540d\u79f0(Dataset Name)\u3001\u5b98\u7f51(HomePage)\u3001\u5a92\u4f53\u6587\u4ef6\u7684\u6a21\u6001(Modality)\u3001\u4efb\u52a1\u540d\u79f0(Task)\uff0c\u6ce8\u610f\uff0c\u5982\u679c\u5e0c\u671b\u76f4\u63a5\u8c03\u7528\u5df2\u6709\u7684\u4efb\u52a1\u6a21\u677f\uff0cTask Name\u9700\u8981\u7b26\u5408\u89c4\u8303\uff0c\u53ef\u8c03\u7528\u7684Task Name\u8bf7\u53c2\u8003 \u4efb\u52a1\u6a21\u677f\u4ecb\u7ecd \u9875\u9762\u4e2d\u7684 \u4efb\u52a1\u82f1\u6587\u5168\u79f0 \u3002 flag_middle_format\uff1a\u5982\u679c\u5b9e\u73b0\u4e86dataset_converter\u51fd\u6570\uff0c\u5219\u9700\u8981\u5c06flag_middle_format\u6539\u4e3aTrue\uff0c\u4ee5\u751f\u6210\u66f4\u52a0\u89c4\u8303\u7684README class_dom_names_original\uff1a\u4ee5list\u7684\u5f62\u5f0f\uff0c\u5c06\u6570\u636e\u96c6\u7684\u7c7b\u522b\u5b58\u50a8\u5728\u8be5\u5b57\u6bb5\u4e2d\uff0c\u6ce8\u610f\uff0c\u5176\u6392\u5217\u987a\u5e8f\u51b3\u5b9a\u4e86class_id\u7684\u751f\u6210\uff0c\u5176\u4e2d\u6392\u5728\u9996\u4f4d\u7684class_id\u4e3a1\uff0c\u7b2c\u4e8c\u4f4d\u4e3a2\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 subset_name_list\uff1a\u6570\u636e\u96c6\u5b50\u96c6\u7684\u5217\u8868\uff0c\u6bd4\u5982['train', 'val']\uff0c\u6839\u636e\u6570\u636e\u96c6\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\u3002 \u8f6c\u6362\u548c\u751f\u6210\u7684\u6b65\u9aa4\uff1a\u8fd9\u90e8\u5206\u7684DSDL SDK\u4e2d\u5df2\u5b9e\u73b0\u4e86\u5927\u90e8\u5206\u7684\u51fd\u6570\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u8f6c\u6362\u8005\u65e0\u9700\u4fee\u6539\uff0c\u5982\u679c\u60f3\u8981\u4e86\u89e3\u5404\u4e2a\u51fd\u6570\u7684\u529f\u80fd\uff0c\u8bf7\u53c2\u8003 DSDL SDK \u3002 \u5177\u4f53\u7684prepare.py\u7684\u6a21\u677f\u5982\u4e0b\uff1a import argparse import os import re import shutil import sys import tarfile import zipfile from itertools import chain from multiprocessing import Pool , cpu_count from pathlib import Path import numpy as np from PIL import Image from dsdl.converter.mllm import generate_config_file from dsdl.converter.mllm import generate_readme_with_middle_format from dsdl.converter.mllm import generate_readme_without_middle_format from dsdl.converter.mllm import generate_tree_string from dsdl.converter.utils import check_dsdl_meta_info from dsdl.converter.utils import check_task_template_file from dsdl.converter.utils import generate_class_dom from dsdl.converter.utils import generate_subset_yaml_and_json from dsdl.converter.utils import replace_special_characters from dsdl.converter.utils import get_dsdl_template_from_lib from tqdm import tqdm #############\u751f\u6210DSDL\u6807\u6ce8\uff0c\u7528\u6237\u9700\u8981\u5b9e\u73b0\u8be5\u51fd\u6570############################# def get_subset_samples_list ( * args , ** kwargs ): samples_list = [] ## \u8fd4\u56de\u7684\u5217\u8868\u793a\u4f8b\u5982\u4e0b\uff1a ## \u6ce8\u610f\u6bcf\u4e2a\u5b57\u6bb5\u540d\u79f0\u8981\u4e0etemplate.yaml\u4e2d\u5b9a\u4e49\u7684\u5b57\u6bb5\u548c\u7ed3\u6784\u5b8c\u5168\u76f8\u540c\uff0c\u6bd4\u5982\uff1a # [{ # \"media\": { # \"image\": \"images/train/1.jpg\", # \"image_shape\": [405,720] # }, # \"objects\": [ # { # \"bbox\": [220,183,154,104], # \"label\": \"holothurian\", # \"iscrowd\": false, # \"segmentation\": [[ # [220,183], # [374,183], # [374,287], # [220,287]]] # }, # ..., # }, # ... # ] return samples_list ###########\u6570\u636e\u96c6\u4e2d\u95f4\u683c\u5f0f\u8f6c\u6362\uff0c\u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u7528\u6237\u9700\u8981\u5b9e\u73b0\u8be5\u51fd\u6570############################# def dataset_to_middle_format ( * args , ** kwargs ): # \u6709\u4e9b\u6570\u636e\u96c6\u9700\u8981\u8f6c\u6362\u6210\u4e2d\u95f4\u683c\u5f0f\uff0c # \u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u7f16\u5199\u8f6c\u6362\u4ee3\u7801\uff0c\u5e76\u8bb0\u5f55\u4e2d\u95f4\u683c\u5f0f\u7684\u6587\u4ef6\u5939\u6811\u5f62\u7ed3\u6784\u548c\u8f6c\u6362\u7ed3\u679c\u63cf\u8ff0\u3002 ## 1. \u786e\u5b9a\u4e2d\u95f4\u683c\u5f0f\u6570\u636e\u4fdd\u5b58\u8def\u5f84 middle_data_path = args [ 0 ] ## 2. \u628a\u6570\u636e\u96c6\u8f6c\u6362\u6210\u4e2d\u95f4\u683c\u5f0f ## \u5b9e\u73b0\u4ee3\u7801\u8fd9\u91cc\u7f16\u5199 pass ##########################\u7528\u6237\u4e0d\u9700\u8981\u4fee\u6539########################## def parse_args (): \"\"\"\u547d\u4ee4\u884c\u53c2\u6570\u89e3\u6790\"\"\" parse = argparse . ArgumentParser ( description = 'Prepare the dsdl_SemSeg_full dataset from original dataset.' ) parse . add_argument ( '--decompressed' , '-d' , action = 'store_true' , help = 'This argument decides whether the dataset files are decompressed. ' 'Add \"-d\" argument to skip decompress process, ' 'and directly pass the decompressed dataset. ' 'The default is need decompress process.' ) parse . add_argument ( '--copy' , '-c' , action = 'store_true' , help = 'This argument decides whether the decompressed dataset files will be copied as a backup and then run the converter. ' 'Add \"-c\" argument to create a copy, and then run the converter. ' 'The default is not to create a copy and directly overwrite the original data.' ) parse . add_argument ( 'path' , type = str , help = 'The original dataset path, a folder with compressed files if \"-d\" doesn \\' t exist, ' 'or decompressed folder when \"-d\" exists.' ) args = parse . parse_args () args . path = Path ( args . path ) . absolute () . resolve () . as_posix () return args ###########\u9700\u8981\u4fee\u6539prepare\u51fd\u6570\u4e2d\u7684\u89e3\u538b\u64cd\u4f5c########### def prepare ( args ): \"\"\"\u6839\u636e\u4e0d\u540c\u7684\u547d\u4ee4\u884c\u53c2\u6570\u6267\u884c\u89e3\u538b\u3001\u590d\u5236\u64cd\u4f5c,\u5e76\u8c03\u7528\u6570\u636e\u96c6\u6587\u4ef6\u8f6c\u6362\u548cdsdl\u6807\u6ce8\u751f\u6210\u3002\"\"\" SCRIPT_PATH = Path ( __file__ ) . absolute () . resolve () . parent DSDL_PATH = SCRIPT_PATH . parent if args . decompressed : ORIGINAL_PATH = Path ( args . path ) if args . copy : PREPARED_PATH = ORIGINAL_PATH . parent / \"prepared\" if PREPARED_PATH . exists (): raise Exception ( f \"Path { PREPARED_PATH . as_posix () } already exists.\" ) shutil . copytree ( ORIGINAL_PATH , PREPARED_PATH ) else : if flag_middle_format : print ( \"The operation will directly overwrite the dataset files with no backup.\" ) while True : confirm = input ( \"Input [yes] to continue, or [quit] to exit. \" ) if confirm . lower () == \"quit\" : sys . exit ( 0 ) elif confirm . lower () == \"yes\" : break PREPARED_PATH = ORIGINAL_PATH else : COMPRESSED_PATH = Path ( args . path ) PREPARED_PATH = COMPRESSED_PATH . parent / \"prepared\" if PREPARED_PATH . exists (): raise Exception ( f \"Path { PREPARED_PATH . as_posix () } already exists.\" ) PREPARED_PATH . mkdir () found_compressed = False #######\u9700\u8981\u4fee\u6539:\u89e3\u538b\u64cd\u4f5c\uff0c\u5185\u7f6ezip\u548ctar.gz\u683c\u5f0f\uff0c\u5176\u4ed6\u683c\u5f0f\u9700\u8981\u4fee\u6539############# for file in COMPRESSED_PATH . rglob ( \"*.zip\" ): found_compressed = True zf = zipfile . ZipFile ( file ) zf . extractall ( PREPARED_PATH ) for file in chain ( COMPRESSED_PATH . rglob ( \"*.tar.gz\" ), COMPRESSED_PATH . rglob ( \"*.tgz\" ), COMPRESSED_PATH . rglob ( \"*.tar\" ) ): found_compressed = True tf = tarfile . open ( file ) tf . extractall ( PREPARED_PATH ) if not found_compressed : raise Exception ( 'Compressed file not found. Check the file path.' ) # \u5982\u679c\u89e3\u538b\u540e\u53d1\u73b0prepared\u6587\u4ef6\u5939\u4e2d\u4ecd\u6709\u4e00\u5c42\u6570\u636e\u96c6\u540d\u79f0\u7684\u5d4c\u5957\u6587\u4ef6\u5939\uff0c # \u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u5220\u9664\u8fd9\u5c42\u5d4c\u5957\uff0c\u5c06\u6570\u636e\u96c6\u6587\u4ef6\u76f4\u63a5\u653e\u5728prepared\u6587\u4ef6\u5939\u4e2d\u3002 # for file in (PREPARED_PATH / \"foldername\").iterdir(): # file.rename(file.parent.parent / file.name) # (PREPARED_PATH / \"foldername\").rmdir() ############################################################################# if args . copy : ORIGINAL_PATH = COMPRESSED_PATH . parent / \"original\" if ORIGINAL_PATH . exists (): raise Exception ( f \"Path { ORIGINAL_PATH . as_posix () } already exists.\" ) shutil . copytree ( PREPARED_PATH , ORIGINAL_PATH ) return PREPARED_PATH . as_posix (), DSDL_PATH . as_posix () if __name__ == \"__main__\" : #########################\u5fc5\u586b\u7684\u53c2\u6570########################## meta_info = { \"Dataset Name\" : \"\" , # e.g., VOC2012 \"HomePage\" : \"\" , # e.g., http://host.robots.ox.ac.uk/pascal/VOC/voc2012/index.html \"Modality\" : \"\" , # e.g., Images \"Task\" : \"\" } # e.g., Object Detection flag_middle_format = False # \u6570\u636e\u96c6\u662f\u5426\u9700\u8981\u8f6c\u6362\u6210\u4e2d\u95f4\u683c\u5f0f(\u662f\u7684\u8bdd\uff0c\u4fee\u6539\u4e3aTrue) class_dom_names_original = [] # \u9700\u8981\u4fee\u6539, e.g., ['dog','cat']\uff0c\u53ef\u4ee5\u81ea\u884c\u5b9e\u73b0\u51fd\u6570\u63d0\u53d6 subset_name_list = [] # \u6570\u636e\u96c6\u7684\u5b50\u96c6\u540d\u79f0\u5217\u8868\uff0ce.g., ['train', 'val'] args = parse_args () root_path , save_path = prepare ( args ) ## \u8bf4\u660e\uff1a ## \u56e0\u4e3a\u6a21\u677f\u6587\u4ef6template.yaml\u662fdsdl\u4e2d\u5b9a\u4e49\u6570\u636e\u96c6\u7ed3\u6784\u548c\u5b57\u6bb5\u7684\u6587\u4ef6\u3002 ## \u6240\u4ee5\u5fc5\u987b\u5148\u751f\u6210template.yaml\u624d\u80fd\u8fdb\u884c\u540e\u7eed\u8f6c\u6362\u3002 ## template.yaml\u7684\u4f4d\u7f6e\u4f4d\u4e8e: save_path/defs/template.yaml ## \u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u5df2\u6709\u7684\u6a21\u677f\uff0c\u6216\u624b\u52a8\u521b\u5efatemplate.yaml\uff0c\u5e76\u62f7\u8d1d\u5230save_path/defs/\u76ee\u5f55\u4e0b\u3002 ## \u4ee5\u4e0b\u793a\u4f8b\u662f\u8c03\u7528\u5df2\u6709\u7684\u4efb\u52a1\u6a21\u677f\uff1a get_dsdl_template_from_lib ( meta_info [ \"Task\" ], save_path ) ## \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684meta_info[\"Task\"]\u9700\u8981\u6ee1\u8db3DSDL\u4efb\u52a1\u6a21\u677f\u9875\u9762\u7684\u201c\u4efb\u52a1\u82f1\u6587\u5168\u79f0\u201d ###########\u4ee5\u4e0b\u662f\u8f6c\u6362\u548c\u751f\u6210\u7684\u6b65\u9aa4\uff0c\u53ef\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539############# ###########\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981\u4fee\u6539get_subset_samples_list\u6240\u9700\u7684\u53c2\u6570########### check_dsdl_meta_info ( meta_info ) # \u68c0\u9a8cmeta\u4fe1\u606f\u662f\u5426\u5b58\u5728\u9519\u8bef check_task_template_file ( save_path ) # \u68c0\u9a8c\u4fdd\u5b58\u8def\u5f84\u4e2d\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u6a21\u677f\u6587\u4ef6 # 1. \u751f\u6210\u539f\u59cb\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784\u6811\u5f62\u5b57\u7b26\u4e32 original_tree_str = generate_tree_string ( root_path ) # 2. \u6570\u636e\u96c6\u4e2d\u95f4\u683c\u5f0f\u8f6c\u6362\uff0c\u8c03\u7528dataset_to_middle_format\uff08\u5982\u6709\u9700\u8981\u8bf7\u5b9e\u73b0\u8be5\u51fd\u6570\uff09 if flag_middle_format : ## \u5148\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u628a\u6570\u636e\u96c6\u8f6c\u6362\u6210\u4e2d\u95f4\u683c\u5f0f ## \u53ef\u53c2\u8003dataset_to_middle_format()\u4e2d\u6ce8\u91ca ## \u9700\u8981\u5bf9middle_format_tree_str\u548cconverter_description\u8d4b\u503c dataset_to_middle_format ( root_path ) # \u9700\u8981\u81ea\u884c\u4fee\u6539\u6240\u9700\u7684\u53c2\u6570 # 3. \u751f\u6210class-dom class_dom_names = [] for name in class_dom_names_original : class_dom_names . append ( replace_special_characters ( name )) # \u5c06\u4e0d\u5408\u89c4\u7684label\u540d\u5b57\u505a\u8f6c\u6362 generate_class_dom ( save_path , class_dom_names ) # \u751f\u6210class-dom.yaml\u6587\u4ef6 # 4. \u751f\u6210<segment>_samples.json,\u8c03\u7528get_subset_samples_list\uff08\u5fc5\u987b\u5b9e\u73b0\u8be5\u51fd\u6570\uff09 for subset_name in subset_name_list : meta_info [ \"Subset Name\" ] = subset_name print ( f \"processing data in { subset_name } .\" ) subset_samples_list = get_subset_samples_list ( root_path , subset_name ) # \u9700\u8981\u81ea\u884c\u4fee\u6539\u6240\u9700\u7684\u53c2\u6570 if len ( subset_samples_list ) == 0 : raise ResourceWarning ( \"No samples found. Check if the file path is correct. \" \"If the dataset is not decompressed, remove -d option and try again.\" ) # \u793a\u4f8b\uff1asubset_samples_list = get_subset_samples_list(root_path, subset_name) generate_subset_yaml_and_json ( meta_info , save_path , subset_samples_list ) print ( f \"Sample list for { subset_name } is generated.\" ) dsdl_tree_str = generate_tree_string ( save_path , display_num = 100 ) # \u751f\u6210\u8f6c\u540e\u7684dsdl\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784\u6811\u5f62\u5b57\u7b26\u4e32 generate_config_file ( save_path ) # \u751f\u6210config.py # 5. \u751f\u6210README.md if flag_middle_format : generate_readme_with_middle_format ( save_path , meta_info [ \"Dataset Name\" ], meta_info [ \"Task\" ], original_tree_str , dsdl_tree_str , ) else : generate_readme_without_middle_format ( save_path , meta_info [ \"Dataset Name\" ], meta_info [ \"Task\" ], original_tree_str , dsdl_tree_str ) \u8f6c\u6362\u8005\u5b8c\u5584\u4e86\u5fc5\u8981\u7684\u51fd\u6570\u7684\u548c\u5fc5\u586b\u7684\u5b57\u6bb5\u540e\uff0c\u53ef\u4ee5\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\uff1a python tools/prepare.py <path_to_compressed_dataset_folder> \u8fd0\u884c\u8be5\u4ee3\u7801\u540e\uff0c\u5c06\u4f1a\u5bf9\u7528\u6237\u63d0\u4f9b\u7684\u6570\u636e\u96c6\u538b\u7f29\u5305\u8fdb\u884c\u89e3\u538b\uff0c\u751f\u6210prepared\u6587\u4ef6\u5939\uff0c\u7136\u540e\u76f4\u63a5\u5bf9prepared\u6587\u4ef6\u5939\u8fdb\u884cDSDL\u6807\u51c6\u5316\u64cd\u4f5c\uff0c\u5e76\u751f\u6210DSDL\u6807\u6ce8\u3002\u6267\u884c\u540e\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 <dataset_name> \u251c\u2500\u2500 compressed \u2514\u2500\u2500 ... # \u539f\u59cb\u6570\u636e\u96c6\u7684\u538b\u7f29\u5305(\u771f\u6b63\u7684\u539f\u59cb\u6570\u636e\u96c6\uff09,\u540e\u9762\u63d0\u4f9b\u7ed9OSS \u251c\u2500\u2500 prepared # \u539f\u59cb\u6570\u636e\u96c6\u89e3\u538b\u540e\u7684\u6240\u6709\u6587\u4ef6 \u251c\u2500\u2500 ... # \u7531prepare.sh\u8fd0\u884c\u540e\u751f\u6210 \u2514\u2500\u2500 ... \u251c\u2500\u2500 dsdl # \u5b58\u653eDSDL\u6807\u6ce8\u7684\u6587\u4ef6\u5939 \u251c\u2500\u2500 defs/ \u251c\u2500\u2500 template.yaml # \u4efb\u52a1\u6a21\u677f \u251c\u2500\u2500 class-dom.yaml # \u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 set-train/ # \u8bad\u7ec3\u96c6 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u96c6\u7684\u5b9a\u4e49\u6587\u4ef6 \u251c\u2500\u2500 train_samples.json # \u5b9e\u9645\u6807\u6ce8\u6587\u4ef6 \u251c\u2500\u2500 tools/ \u2514\u2500\u2500 prepare.py # \u5305\u62ec\u89e3\u538b\u3001\u8f6c\u4e2d\u95f4\u683c\u5f0f\uff08\u5982\u679c\u9700\u8981\u7684\u8bdd\uff09\u548c\u751f\u6210dsdl\u76ee\u5f55 \u251c\u2500\u2500 README.md \u2514\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6","title":"1. \u6570\u636e\u96c6\u8f6c\u6362\u6d41\u7a0b\u53ca\u811a\u672c\u6a21\u677f"},{"location":"tutorials/advanced/dsdl_convert/#2","text":"\u8be5\u793a\u4f8b\u4e2d\uff0c\u5c06\u76f4\u63a5\u5229\u7528 \u76ee\u6807\u68c0\u6d4b\u6a21\u677f \u6765\u5bf9VOC\u8fdb\u884c \u7cbe\u7b80\u7248DSDL\u8f6c\u6362 \u3002 \u4e3b\u8981\u6b65\u9aa4\u5982\u4e0b: \u539f\u59cb\u6570\u636e\u96c6\u8c03\u7814\uff1a\u5305\u62ec\u76ee\u5f55\u7ed3\u6784\u3001\u6807\u6ce8\u6587\u4ef6\u7b49 \u6570\u636e\u96c6\u8f6c\u6362\u811a\u672c\u5b9e\u73b0\uff1a\u901a\u8fc7\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u548c\u6570\u636e\u96c6\u8f6c\u6362\u811a\u672c\u6a21\u677f\uff0c\u5b9e\u73b0VOC\u8f6cDSDL","title":"2. \u5b9e\u9645\u793a\u4f8b"},{"location":"tutorials/advanced/dsdl_convert/#21","text":"\u9996\u5148\u9700\u8981\u8c03\u7814\u539f\u59cb\u6570\u636e\u96c6\u7684\u6587\u4ef6\u7ed3\u6784\uff1a VOC2007/ \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001.xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001.jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ... \u8fd9\u91cc\u53ea\u4ee5\u68c0\u6d4b\u4efb\u52a1\u4e3a\u4f8b\u751f\u6210\u6a21\u677f\uff0c\u56e0\u6b64\u53ea\u9700\u8981Annotations/\u3001JPEGImages/\u8fd9\u4e24\u4e2a\u6587\u4ef6\u5939\uff0c\u53e6\u5916\uff0c\u8bad\u7ec3\u6d4b\u8bd5\u96c6\u5212\u5206\uff0c\u9700\u8981\u7528ImageSets/Main/train.txt\u3001val.txt\u3001test.txt\u8fd9\u4e09\u4e2a\u6587\u4ef6\u3002 \u6807\u6ce8\u7c7b\u578b\u5982\u4e0b\uff08\u4ee5Annotations/000001.xml\u4e3a\u4f8b\uff09\uff1a <annotation> <folder> VOC2007 </folder> # \u6587\u4ef6\u5939 <filename> 000001.jpg </filename> # \u56fe\u7247\u6587\u4ef6\u540d <source> # \u56fe\u50cf\u5143\u4fe1\u606f <database> The VOC2007 Database </database> # \u6570\u636e\u96c6\u540d\u79f0 <annotation> PASCAL VOC2007 </annotation> # \u6807\u6ce8\u7c7b\u578b <image> flickr </image> # \u6765\u6e90 <flickrid> 341012865 </flickrid> # \u6765\u6e90ID </source> <owner> # \u6e90\u4fe1\u606f <flickrid> Fried Camels </flickrid> <name> Jinky the Fruit Bat </name> </owner> <size> <width> 353 </width> # \u56fe\u7247\u5bbd <height> 500 </height> # \u56fe\u7247\u9ad8 <depth> 3 </depth> # \u56fe\u7247\u901a\u9053\u6570 </size> <segmented> 0 </segmented> # \u662f\u5426\u7528\u4e8e\u5206\u5272 <object> # \u6807\u6ce8\u90e8\u5206 <name> dog </name> # \u6807\u7b7e <pose> Left </pose> # \u59ff\u6001 <truncated> 1 </truncated> # \u7269\u4f53\u662f\u5426\u88ab\u90e8\u5206\u906e\u6321\uff08>15%\uff09 <difficult> 0 </difficult> # \u662f\u5426\u4e3a\u96be\u4ee5\u8fa8\u8bc6\u7684\u7269\u4f53 <bndbox> <xmin> 48 </xmin> # \u5de6\u4e0a\u89d2\u70b9\u7684x <ymin> 240 </ymin> # \u5de6\u4e0a\u89d2\u70b9\u7684y <xmax> 195 </xmax> # \u53f3\u4e0b\u89d2\u70b9\u7684x <ymax> 371 </ymax> # \u53f3\u4e0b\u89d2\u70b9\u7684y </bndbox> </object> ... </annotation> \u8fd9\u91cc\u4ee5ImageSets/Main/train.txt\u4e3a\u4f8b\u5c55\u793a\u4e00\u4e0b\u6570\u636e\u96c6segment\u5212\u5206\u7684\u6587\u4ef6\u5185\u5bb9\uff1a 000012 # \u56fe\u7247\u540d\u524d\u7f00 000017 000023 000026 ...","title":"2.1 \u539f\u59cb\u6570\u636e\u96c6\u8c03\u7814"},{"location":"tutorials/advanced/dsdl_convert/#22","text":"\u6839\u636e\u8be5\u6570\u636e\u96c6\u7684\u76ee\u5f55\u7ed3\u6784\u548c\u6807\u6ce8\u7c7b\u578b\uff0cprepare.py\u811a\u672c\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a import argparse import os import shutil import sys from pathlib import Path import tarfile import zipfile from itertools import chain from dsdl.converter.mllm import generate_config_file from dsdl.converter.mllm import generate_readme_with_middle_format from dsdl.converter.mllm import generate_readme_without_middle_format from dsdl.converter.mllm import generate_tree_string from dsdl.converter.utils import check_dsdl_meta_info from dsdl.converter.utils import check_task_template_file from dsdl.converter.utils import generate_class_dom from dsdl.converter.utils import generate_subset_yaml_and_json from dsdl.converter.utils import replace_special_characters from dsdl.converter.utils import get_dsdl_template_from_lib #!/usr/bin/env python3 \"\"\" This file implements the generator of the VOC2007 DSDL format dataset. \"\"\" import itertools from xml.etree import ElementTree import json #############\u63d0\u53d6\u539f\u59cb\u6570\u636e\u96c6\u5b57\u6bb5\uff0c\u751f\u6210sample list############################# def get_subset_samples_list ( root_path , seg , category_list ): samples_list = [] anno_paths = os . path . join ( root_path , \"Annotations\" ) ann_id_gen = itertools . count () _VOC_CATEGORY_DICT = { _name : ( _ind + 1 ) for _ind , _name in enumerate ( category_list )} seg_path = os . path . join ( root_path , 'ImageSets' , 'Main' , seg + '.txt' ) try : with open ( seg_path , 'r' ) as f : seg_list = f . readlines () except : print ( 'The segmentation file {} cannot be open, it will be skipped.' . format ( seg_path )) for anno_id in seg_list : anno_path = os . path . join ( root_path , 'Annotations' , anno_id . strip () + '.xml' ) try : with open ( anno_path , 'r' ) as f : anno_tree = ElementTree . parse ( f ) except : print ( 'The annotation file {} cannot read, it will be skipped.' . format ( anno_path )) continue sample = { 'image' : os . path . join ( 'JPEGImages' , anno_tree . find ( 'filename' ) . text ), 'objects' : []} for obj in anno_tree . iter ( 'object' ): xmin , ymin , xmax , ymax = [ float ( obj . find ( 'bndbox' ) . find ( boxes ) . text ) for boxes in [ 'xmin' , 'ymin' , 'xmax' , 'ymax' ]] sample [ 'objects' ] . append ({ 'bbox' : [ xmin , ymin , xmax - xmin , ymax - ymin ], 'label' : _VOC_CATEGORY_DICT [ obj . find ( 'name' ) . text ] }) samples_list . append ( sample ) return samples_list def parse_args (): \"\"\"\u547d\u4ee4\u884c\u53c2\u6570\u89e3\u6790\"\"\" parse = argparse . ArgumentParser ( description = 'Prepare the dsdl_SemSeg_full dataset from original dataset.' ) parse . add_argument ( '--decompressed' , '-d' , action = 'store_true' , help = 'This argument decides whether the dataset files are decompressed. ' 'Add \"-d\" argument to skip decompress process, ' 'and directly pass the decompressed dataset. ' 'The default is need decompress process.' ) parse . add_argument ( '--copy' , '-c' , action = 'store_true' , help = 'This argument decides whether the decompressed dataset files will be copied as a backup and then run the converter. ' 'Add \"-c\" argument to create a copy, and then run the converter. ' 'The default is not to create a copy and directly overwrite the original data.' ) parse . add_argument ( 'path' , type = str , help = 'The original dataset path, a folder with compressed files if \"-d\" doesn \\' t exist, ' 'or decompressed folder when \"-d\" exists.' ) args = parse . parse_args () return args def prepare ( args ): \"\"\"\u6839\u636e\u4e0d\u540c\u7684\u547d\u4ee4\u884c\u53c2\u6570\u6267\u884c\u89e3\u538b\u3001\u590d\u5236\u64cd\u4f5c,\u5e76\u8c03\u7528\u6570\u636e\u96c6\u6587\u4ef6\u8f6c\u6362\u548cdsdl\u6807\u6ce8\u751f\u6210\u3002\"\"\" SCRIPT_PATH = Path ( __file__ ) . resolve () . absolute () . parent DSDL_PATH = SCRIPT_PATH . parent if args . decompressed : ORIGINAL_PATH = Path ( args . path ) if args . copy : PREPARED_PATH = ORIGINAL_PATH . parent / \"prepared\" if PREPARED_PATH . exists (): raise Exception ( f \"Path { PREPARED_PATH . absolute () . as_posix () } already exists.\" ) shutil . copytree ( ORIGINAL_PATH , PREPARED_PATH ) else : if flag_middle_format : print ( \"The operation will directly overwrite the dataset files with no backup.\" ) while True : confirm = input ( \"Input [yes] to continue, or [quit] to exit. \" ) if confirm . lower () == \"quit\" : sys . exit ( 0 ) elif confirm . lower () == \"yes\" : break PREPARED_PATH = ORIGINAL_PATH else : COMPRESSED_PATH = Path ( args . path ) PREPARED_PATH = COMPRESSED_PATH . parent / \"prepared\" if PREPARED_PATH . exists (): raise Exception ( f \"Path { PREPARED_PATH . absolute () . as_posix () } already exists.\" ) PREPARED_PATH . mkdir () found_compressed = False #######\u9700\u8981\u4fee\u6539:\u89e3\u538b\u64cd\u4f5c\uff0c\u5185\u7f6ezip\u548ctar.gz\u683c\u5f0f\uff0c\u5176\u4ed6\u683c\u5f0f\u9700\u8981\u4fee\u6539############# for file in COMPRESSED_PATH . rglob ( \"*.zip\" ): found_compressed = True zf = zipfile . ZipFile ( file ) zf . extractall ( PREPARED_PATH ) for file in chain ( COMPRESSED_PATH . rglob ( \"*.tar.gz\" ), COMPRESSED_PATH . rglob ( \"*.tgz\" ), COMPRESSED_PATH . rglob ( \"*.tar\" ) ): found_compressed = True tf = tarfile . open ( file ) tf . extractall ( PREPARED_PATH ) if not found_compressed : raise Exception ( 'Compressed file not found. Check the file path.' ) for file in ( PREPARED_PATH / \"VOCdevkit\" / \"VOC2007\" ) . iterdir (): file . rename ( file . parent . parent . parent / file . name ) shutil . rmtree ( PREPARED_PATH / \"VOCdevkit\" ) ############################################################################# if args . copy : ORIGINAL_PATH = COMPRESSED_PATH . parent / \"original\" if ORIGINAL_PATH . exists (): raise Exception ( f \"Path { ORIGINAL_PATH . absolute () . as_posix () } already exists.\" ) shutil . copytree ( PREPARED_PATH , ORIGINAL_PATH ) return PREPARED_PATH . absolute () . as_posix (), DSDL_PATH . absolute () . as_posix () if __name__ == \"__main__\" : meta_info = { \"Dataset Name\" : \"VOC2007\" , \"HomePage\" : \"http://host.robots.ox.ac.uk/pascal/VOC/voc2007/index.html\" , \"Modality\" : \"Images\" , \"Task\" : \"Object Detection\" } flag_middle_format = False class_dom_names_original = [ \"aeroplane\" , \"bicycle\" , \"bird\" , \"boat\" , \"bottle\" , \"bus\" , \"car\" , \"cat\" , \"chair\" , \"cow\" , \"diningtable\" , \"dog\" , \"horse\" , \"motorbike\" , \"person\" , \"pottedplant\" , \"sheep\" , \"sofa\" , \"train\" , \"tvmonitor\" ] subset_name_list = [ 'train' , 'val' , 'test' ] args = parse_args () root_path , save_path = prepare ( args ) ## \u8bf4\u660e\uff1a ## \u56e0\u4e3a\u6a21\u677f\u6587\u4ef6template.yaml\u662fdsdl\u4e2d\u5b9a\u4e49\u6570\u636e\u96c6\u7ed3\u6784\u548c\u5b57\u6bb5\u7684\u6587\u4ef6\u3002 ## \u6240\u4ee5\u5fc5\u987b\u5148\u751f\u6210template.yaml\u624d\u80fd\u8fdb\u884c\u540e\u7eed\u8f6c\u6362\u3002 ## template.yaml\u7684\u4f4d\u7f6e\u4f4d\u4e8e: save_path/defs/template.yaml ## \u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u5df2\u6709\u7684\u6a21\u677f\uff0c\u6216\u624b\u52a8\u521b\u5efatemplate.yaml\uff0c\u5e76\u62f7\u8d1d\u5230save_path/defs/\u76ee\u5f55\u4e0b\u3002 ## \u4ee5\u4e0b\u793a\u4f8b\u662f\u8c03\u7528\u5df2\u6709\u7684\u6a21\u677f\uff1a get_dsdl_template_from_lib ( meta_info [ \"Task\" ], save_path ) ## \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684task_name\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u6a21\u677f\u4ecb\u7ecd\u9875\u9762\u7684\u8868\u683c\u4e2d\u7684\u201c\u4efb\u52a1\u82f1\u6587\u5168\u79f0\u201d\u83b7\u53d6 ###########\u4ee5\u4e0b\u662f\u8f6c\u6362\u548c\u751f\u6210\u7684\u6b65\u9aa4\uff0c\u53ef\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539############# ###########\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981\u4fee\u6539get_subset_samples_list\u6240\u9700\u7684\u53c2\u6570########### check_dsdl_meta_info ( meta_info ) # \u68c0\u9a8cmeta\u4fe1\u606f\u662f\u5426\u5b58\u5728\u9519\u8bef check_task_template_file ( save_path ) # \u68c0\u9a8c\u4fdd\u5b58\u8def\u5f84\u4e2d\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u6a21\u677f\u6587\u4ef6 # 1. \u751f\u6210\u539f\u59cb\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784\u6811\u5f62\u5b57\u7b26\u4e32 original_tree_str = generate_tree_string ( root_path ) # 2. \u6570\u636e\u96c6\u4e2d\u95f4\u683c\u5f0f\u8f6c\u6362\uff0c\u8c03\u7528dataset_to_middle_format\uff08\u5982\u6709\u9700\u8981\u8bf7\u5b9e\u73b0\u8be5\u51fd\u6570\uff09 if flag_middle_format : ## \u5148\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u628a\u6570\u636e\u96c6\u8f6c\u6362\u6210\u4e2d\u95f4\u683c\u5f0f ## \u53ef\u53c2\u8003dataset_to_middle_format()\u4e2d\u6ce8\u91ca ## \u9700\u8981\u5bf9middle_format_tree_str\u548cconverter_description\u8d4b\u503c dataset_to_middle_format ( root_path ) # \u9700\u8981\u81ea\u884c\u4fee\u6539\u6240\u9700\u7684\u53c2\u6570 # 3. \u751f\u6210class-dom class_dom_names = [] for name in class_dom_names_original : class_dom_names . append ( replace_special_characters ( name )) # \u5c06\u4e0d\u5408\u89c4\u7684label\u540d\u5b57\u505a\u8f6c\u6362 generate_class_dom ( save_path , class_dom_names ) # \u751f\u6210class-dom.yaml\u6587\u4ef6 # 4. \u751f\u6210<segment>_samples.json,\u8c03\u7528get_subset_samples_list\uff08\u5fc5\u987b\u5b9e\u73b0\u8be5\u51fd\u6570\uff09 for subset_name in subset_name_list : meta_info [ \"Subset Name\" ] = subset_name print ( f \"processing data in { subset_name } .\" ) subset_samples_list = get_subset_samples_list ( root_path , subset_name , class_dom_names_original ) # \u9700\u8981\u81ea\u884c\u4fee\u6539\u6240\u9700\u7684\u53c2\u6570 # \u793a\u4f8b\uff1asubset_samples_list = get_subset_samples_list(root_path, subset_name) generate_subset_yaml_and_json ( meta_info , save_path , subset_samples_list ) print ( f \"Sample list for { subset_name } is generated.\" ) dsdl_tree_str = generate_tree_string ( save_path , display_num = 100 ) # \u751f\u6210\u8f6c\u540e\u7684dsdl\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784\u6811\u5f62\u5b57\u7b26\u4e32 generate_config_file ( save_path ) # \u751f\u6210config.py # 5. \u751f\u6210README.md if flag_middle_format : generate_readme_with_middle_format ( save_path , meta_info [ \"Dataset Name\" ], meta_info [ \"Task\" ], original_tree_str , dsdl_tree_str , ) else : generate_readme_without_middle_format ( save_path , meta_info [ \"Dataset Name\" ], meta_info [ \"Task\" ], original_tree_str , dsdl_tree_str ) \u8fd0\u884c\u4e86tools/prepare.py\u540e\uff0c\u5f97\u5230\u7684DSDL\u6570\u76ee\u5f55\u5982\u4e0b\uff1a dsdl-voc2007/ \u251c\u2500\u2500 defs/ \u2502 \u251c\u2500\u2500 template.yaml # \u68c0\u6d4b\u4efb\u52a1\u6a21\u677f \u2502 \u2514\u2500\u2500 class-dom.yaml # \u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 set-train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 set-val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u251c\u2500\u2500 set-test/ # \u6d4b\u8bd5\u96c6 \u2502 \u251c\u2500\u2500 test.yaml \u2502 \u2514\u2500\u2500 test_samples.json \u251c\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6 \u2514\u2500\u2500 README.md # \u6570\u636e\u96c6\u7b80\u4ecb \u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u91cd\u8981\u7684\u6587\u4ef6\uff1a struct\u7684\u5b9a\u4e49\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u6587\u4ef6\u540d\u4e3atemplate.yaml\uff09\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5bf9struct\u505a\u4e00\u4e2a\u660e\u786e\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u6709sample\u7684\u7ed3\u6784\u4f53\u548c\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u7b49\uff0c\u9700\u6307\u660e\u5305\u542b\u4e86\u54ea\u4e9bfield\uff0c\u6bcf\u4e2afield\u7684\u7c7b\u578b\u3002 \u7c7b\u522b\u57df\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e3aclass-dom.yaml\uff09\uff1a\u91cc\u9762\u5305\u542b\u4e86\u7c7b\u522b\u5217\u8868\uff0c\u5bf9\u5e94category\u7684\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\u6392\u5e8f\uff09 samples\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5206\u522b\u5206\u4e3atrain.yaml\u548ctrain_samples.json) train.yaml\u4e3b\u8981\u662f\u6307\u660e\u5f15\u7528\u54ea\u4e2astruct\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6587\u4ef6\uff0c\u5e76\u4e14\u6307\u660e\u6570\u636e\u7c7b\u578b\u548c\u5b58\u653e\u8def\u5f84\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9bmeta\u4fe1\u606f train_samples.json\u91cc\u4fdd\u5b58\u4e86\u5b9e\u9645\u7684samples\u4fe1\u606f\uff0c\u5176\u7ec4\u7ec7\u7ed3\u6784\u5fc5\u987b\u548c\u4e4b\u524d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u5339\u914d","title":"2.2 \u6570\u636e\u96c6\u8f6c\u6362\u811a\u672c\u5b9e\u73b0"},{"location":"tutorials/advanced/dsdl_convert/#221","text":"class-dom.yaml\uff1a\u8fd9\u662f\u4e00\u4e2a\u7c7b\u522b\u5b9a\u4e49\u7684Dom\u6587\u6863 $dsdl-version : \"0.5.0\" ClassDom : $def : class_domain classes : - aeroplane # \u5bf9\u5e94_category\u4e3a1 - bicycle # \u5bf9\u5e94_category\u4e3a2\uff0c\u4ee5\u6b64\u7c7b\u63a8 - bird - boat - bottle - bus - car - cat - chair - cow - diningtable - dog - horse - motorbike - person - pottedplant - sheep - sofa - train - tvmonitor","title":"2.2.1 \u7c7b\u522b\u57df"},{"location":"tutorials/advanced/dsdl_convert/#222-set-train","text":"train.yaml\uff1a\u8fd9\u4e2a\u6587\u6863\u5f15\u7528\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u4e24\u4e2a\u6587\u6863\uff0c\u5e76\u4e14\u6307\u5f15\u4e86\u5177\u4f53\u7684sample\u8def\u5f84\uff08test.yaml\u548cval.yaml\u7c7b\u4f3c\uff0c\u53ea\u662f\u4fee\u6539\u5bf9\u5e94sample-path\u548csub_dataset_name\u5b57\u6bb5\uff09 $dsdl-version : \"0.5.0\" $import : - ../defs/class-domain - ../defs/object-detection-def meta : Dataset Name : \"VOC2007\" , HomePage : \"http://host.robots.ox.ac.uk/pascal/VOC/voc2007/index.html\" , Modality : \"Images\" , Task : \"Object Detection\" data : sample-type : ObjectDetectionSample[cdom=VOCClassDom] sample-path : train_samples.json train_samples.json\u9700\u8981\u6211\u4eec\u5199\u811a\u672c\u4ece\u539f\u59cb\u6570\u636e\u96c6\u8f6c\u6362\u6765\uff08\u8f6c\u6362\u811a\u672c\u5c06\u5728\u4e0b\u4e00\u5c0f\u8282\u201c\u6570\u636e\u96c6\u8f6c\u6362\u201d\u4e2d\u8be6\u8ff0\uff09\u3002\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684struct\u5bf9\u5e94\u3002\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"image\" : \"JPEGImages/000001.jpg\" , \"objects\" : [ { \"bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"label\" : 1 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002","title":"2.2.2 set-train\u6587\u4ef6\u5939"},{"location":"tutorials/advanced/dsdl_convert/#223-config","text":"config.py\u7684\u5185\u5bb9\u5982\u4e0b\uff1a local = dict( type=\"LocalFileReader\", working_dir=\"the root path of the prepared dataset\", ) ali_oss = dict( type=\"AliOSSFileReader\", access_key_secret=\"your secret key of aliyun oss\", endpoint=\"your endpoint of aliyun oss\", access_key_id=\"your access key of aliyun oss\", bucket_name=\"your bucket name of aliyun oss\", working_dir=\"the prefix of the prepared dataset within the bucket\") \u8bf7\u6839\u636e\u5b9e\u9645\u60c5\u51b5\uff0c\u4fee\u6539\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\u548c\u8def\u5f84\u3002","title":"2.2.3 config"},{"location":"tutorials/advanced/dsdl_convert/#224-readmemd","text":"\u8be5\u6570\u636e\u96c6\u6700\u7ec8\u5c06\u5b57\u6bb5\u751f\u6210README\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a # Data Set Description Language(DSDL) for VOC2007 dataset ## Data Structure Please make sure the folder structure of prepared dataset is organized as followed: <dataset_root> \u251c\u2500\u2500 Annotations \u2502 \u251c\u2500\u2500 000001.xml \u2502 \u251c\u2500\u2500 000002.xml \u2502 \u251c\u2500\u2500 000003.xml \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets \u2502 \u251c\u2500\u2500 Layout \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u251c\u2500\u2500 Main \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 aeroplane_trainval.txt \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 Segmentation \u2502 \u251c\u2500\u2500 test.txt \u2502 \u251c\u2500\u2500 train.txt \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 JPEGImages \u2502 \u251c\u2500\u2500 000001.jpg \u2502 \u251c\u2500\u2500 000002.jpg \u2502 \u251c\u2500\u2500 000003.jpg \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 ... The folder structure of dsdl annotation for Object Detection is organized as followed: <dsdl_root> \u251c\u2500\u2500 defs \u2502 \u251c\u2500\u2500 class-dom.yaml \u2502 \u2514\u2500\u2500 template.yaml \u251c\u2500\u2500 tools \u2502 \u2514\u2500\u2500 prepare.py \u251c\u2500\u2500 set-train \u2502 \u251c\u2500\u2500 train.yaml \u2502 \u2514\u2500\u2500 train_samples.json \u251c\u2500\u2500 set-val \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u2514\u2500\u2500 set-test \u251c\u2500\u2500 test.yaml \u2514\u2500\u2500 test_samples.json ## config.py You can load your dataset from local or oss. From local: local = dict( type=\"LocalFileReader\", working_dir=\"the root path of the prepared dataset\", ) Please change the 'working_dir' to the path of your prepared dataset where media data can be found, for example: \"<root>/dataset_name/prepared\". From oss: ali_oss = dict( type=\"AliOSSFileReader\", access_key_secret=\"your secret key of aliyun oss\", endpoint=\"your endpoint of aliyun oss\", access_key_id=\"your access key of aliyun oss\", bucket_name=\"your bucket name of aliyun oss\", working_dir=\"the prefix of the prepared dataset within the bucket\") Please change the 'access_key_secret', 'endpoint', 'access_key_id', 'bucket_name' and 'working_dir', e.g. if the full path of your prepared dataset is \"oss://bucket_name/dataset_name/prepared\", then the working_dir should be \"dataset_name/prepared\". ## Related source: 1. Get more information about DSDL: [dsdl-docs](https://opendatalab.github.io/dsdl-docs/) 2. DSDL-SDK official repo: [dsdl-sdk](https://github.com/opendatalab/dsdl-sdk/) 3. Get more dataset: [OpenDataLab](https://opendatalab.com/) \u6570\u636e\u96c6\u8f6c\u6362\u5b8c\u6210\u540e\uff0c\u5efa\u8bae\u8fd0\u884c \u6570\u636e\u96c6\u9a8c\u8bc1 \uff0c\u4ee5\u4fdd\u8bc1DSDL\u6570\u636e\u96c6\u53ef\u6b63\u5e38\u4f7f\u7528\u3002","title":"2.2.4 README.md"},{"location":"tutorials/advanced/dsdl_dataloader/","text":"\u5185\u5bb9\u5f85\u66f4\u65b0\u3002","title":"Dsdl dataloader"},{"location":"tutorials/advanced/dsdl_define/","text":"DSDL\u6570\u636e\u96c6\u6a21\u677f\u5236\u5b9a \u5b9a\u4e49\u4e00\u4e2aDSDL\u6570\u636e\u96c6\uff0c\u9996\u5148\u9700\u8981\u4e86\u89e3DSDL\u5982\u4f55\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u8be6\u7ec6\u7684\u5185\u5bb9\u53ef\u4ee5\u9605\u8bfb DSDL\u8bed\u8a00\u6559\u7a0b \u7ae0\u8282\u3002 \u672c\u7ae0\u7528\u4e24\u4e2a\u6848\u4f8b\u89e3\u91caDSDL\u6570\u636e\u96c6\u7684\u5b9a\u4e49\uff1a1. \u7528DSDL\u63cf\u8ff0\u5df2\u6709\u7684\u6570\u636e\u96c6\uff08VOC\u4e3a\u4f8b\uff09\uff1b2. \u5229\u7528\u4efb\u52a1\u6a21\u677f\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u96c6\u3002 \u8be5\u6559\u7a0b\u5c06\u5728 \u6570\u636e\u96c6\u8f6c\u6362 \u5c0f\u8282\u8be6\u8ff0\u5982\u4f55\u901a\u8fc7\u8be5\u7ae0\u5b9a\u4e49\u7684\u6a21\u677f\u8fdb\u884c\u6570\u636e\u96c6\u7684DSDL\u6807\u51c6\u5316\u8f6c\u6362\u3002 1. \u7528DSDL\u63cf\u8ff0\u5df2\u6709\u7684\u6570\u636e\u96c6 \u672c\u5c0f\u8282\u4e3b\u8981\u7528\u4e00\u4e2a\u5177\u4f53\u6848\u4f8b\uff08VOC2007\uff0c\u76ee\u6807\u68c0\u6d4b)\uff0c\u8bb2\u89e3DSDL\u6570\u636e\u96c6\u7684\u5b9a\u4e49\u3002 \u5c06\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u539f\u6570\u636e\u96c6\u8c03\u7814 \uff1a\u6807\u6ce8\u5b57\u6bb5\u53ca\u542b\u4e49 DSDL\u6a21\u677f\u5236\u5b9a\uff1a\u5206\u4e3a \u8be6\u7ec6\u7248 \u548c \u7cbe\u7b80\u7248 1.1 \u539f\u59cb\u6570\u636e\u96c6\u8c03\u7814 \u6807\u6ce8\u7c7b\u578b\u5982\u4e0b\uff08\u4ee5Annotations/000001.xml\u4e3a\u4f8b\uff09\uff1a <annotation> <folder> VOC2007 </folder> # \u6587\u4ef6\u5939 <filename> 000001.jpg </filename> # \u56fe\u7247\u6587\u4ef6\u540d <source> # \u56fe\u50cf\u5143\u4fe1\u606f <database> The VOC2007 Database </database> # \u6570\u636e\u96c6\u540d\u79f0 <annotation> PASCAL VOC2007 </annotation> # \u6807\u6ce8\u7c7b\u578b <image> flickr </image> # \u6765\u6e90 <flickrid> 341012865 </flickrid> # \u6765\u6e90ID </source> <owner> # \u6e90\u4fe1\u606f <flickrid> Fried Camels </flickrid> <name> Jinky the Fruit Bat </name> </owner> <size> <width> 353 </width> # \u56fe\u7247\u5bbd <height> 500 </height> # \u56fe\u7247\u9ad8 <depth> 3 </depth> # \u56fe\u7247\u901a\u9053\u6570 </size> <segmented> 0 </segmented> # \u662f\u5426\u7528\u4e8e\u5206\u5272 <object> # \u6807\u6ce8\u90e8\u5206 <name> dog </name> # \u6807\u7b7e <pose> Left </pose> # \u59ff\u6001 <truncated> 1 </truncated> # \u7269\u4f53\u662f\u5426\u88ab\u90e8\u5206\u906e\u6321\uff08>15%\uff09 <difficult> 0 </difficult> # \u662f\u5426\u4e3a\u96be\u4ee5\u8fa8\u8bc6\u7684\u7269\u4f53 <bndbox> <xmin> 48 </xmin> # \u5de6\u4e0a\u89d2\u70b9\u7684x <ymin> 240 </ymin> # \u5de6\u4e0a\u89d2\u70b9\u7684y <xmax> 195 </xmax> # \u53f3\u4e0b\u89d2\u70b9\u7684x <ymax> 371 </ymax> # \u53f3\u4e0b\u89d2\u70b9\u7684y </bndbox> </object> ... </annotation> 1.2 DSDL\u6a21\u677f\u5236\u5b9a\uff08\u8be6\u7ec6\u7248DSDL\uff09 1.2.1 struct\u7684\u5b9a\u4e49\u6587\u4ef6 \u6839\u636e\u539f\u59cb\u6570\u636e\u96c6\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5236\u5b9a\u5982\u4e0b\u7684\u6570\u636e\u96c6\u6a21\u677f\uff08\u8be5\u6a21\u677f\u4e2d\u4fdd\u7559\u4e86\u539f\u59cb\u6570\u636e\u96c6\u6240\u6709\u7684\u5b57\u6bb5\u540d\u79f0\u548c\u7ed3\u6784\uff09\uff0c\u6ce8\u610f\uff0c\u5b57\u6bb5\u7c7b\u578b\u4e00\u5b9a\u8981\u4f7f\u7528\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 Field\u6587\u6863 \u3002 $dsdl-version : \"0.5.0\" ImageMedia : $def : struct $fields : image : Image image_shape : ImageShape depth : Int folder : Str source : Dict owner : Dict segmented : Bool LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : bbox : BBox category : Label[dom=$cdom] pose : Str truncated : Bool difficult : Bool ObjectDetectionSample : $def : struct $params : [ \"cdom\" ] $fields : media : ImageMedia objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\u53ca\u5bf9\u5e94\u5173\u7cfb\uff1a \u5728ObjectDetectionSample\u4e2d\uff1a media\uff1a\u8be5\u5b57\u6bb5\u4e3a\u4fdd\u5b58\u7684\u5a92\u4f53\u6587\u4ef6\u7684\u4fe1\u606f\uff0c\u7c7b\u578b\u4e3a\u5b9a\u4e49\u7684struct\uff1aImageMedia objects\uff1a\u8be5\u5b57\u6bb5\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684object\u5b57\u6bb5\uff0c\u4ee5List\u7684\u5f62\u5f0f\u5b58\u50a8\u5177\u4f53bounding box\u7684\u6807\u6ce8\u4fe1\u606f \u5728ImageMedia\u4e2d\uff1a image\uff1a\u7528\u4e8e\u50a8\u5b58\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u4e3b\u8981\u4ece\u539f\u59cb\u6570\u636e\u96c6\u7684filename\u5b57\u6bb5\u8f6c\u5316\u800c\u6765 source\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684source\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684source\u5b57\u6bb5\u4e0b\u7684database\u3001annotation\u3001image\u3001flickerid\u5b57\u6bb5\u3002 owner\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684owner\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684owner\u5b57\u6bb5\u4e0b\u7684flickerid\u548cname\u5b57\u6bb5\u3002 image_shape\u3001depth\uff1a\u662f\u539f\u59cb\u6570\u636e\u96c6\u7684size\u5b57\u6bb5\u4e0b\u7684\u540c\u540d\u5b57\u6bb5 \u5728LocalObjectEntry\u4e2d\uff1a bbox\uff1a\u5bf9\u5e94\u539f\u6570\u636e\u96c6\u7684bndbox\u5b57\u6bb5\uff0c\u4f46\u8f6c\u5316\u4e3abbox\u6807\u51c6\uff0c\u5373[x,y,w,h] category\uff1a\u662f\u8be5\u76ee\u6807\u7684\u7c7b\u522b\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u53f7\uff0c\u5bf9\u5e94\u7684\u662f\u539f\u6570\u636e\u96c6\u7684name\u5b57\u6bb5\uff0c\u7c7b\u522b\u6807\u53f7\u53ef\u4ee5\u53c2\u89c1\u6570\u636e\u96c6\u8f6c\u6362\u9875\u9762\u7684 VOC2007ClassDom.yaml pose\uff0ctruncated\uff0cdifficult\uff1a\u6807\u6ce8\u6846\u7684\u5c5e\u6027\uff0c\u6765\u81ea\u4e8e\u539f\u6570\u636e\u96c6\u540c\u540d\u5b57\u6bb5 1.2.3 samples\u6587\u4ef6 \u6839\u636e\u4e0a\u4e00\u5c0f\u8282\u5236\u5b9a\u7684\u6a21\u677f\uff0c\u6700\u7ec8\u7684samples.json\u7684\u7ed3\u6784\u5c06\u4e0e\u5176\u5b8c\u5168\u5bf9\u5e94\uff0c\u5177\u4f53\u7ec4\u7ec7\u5f62\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"media\" : { \"image\" : \"JPEGImages/000001.jpg\" , \"image_shape\" : [ 640 , 480 ], \"depth\" : 3 , \"folder\" : \"VOC2007\" , \"source\" : { \"database\" : \"The VOC2007 Database\" , \"annotation\" : \"PASCAL VOC2007\" , \"flickrid\" : \"341012865\" }, \"owner\" :{ \"flickrid\" : \"Fried Camels\" , \"name\" : \"Jinky the Fruit Bat\" }, \"segmented\" : 0 , }, \"objects\" : [ { \"bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"category\" : 1 , \"pose\" : \"Left\" , \"truncated\" : 1 , \"difficult\" : 0 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002 1.3 DSDL\u6a21\u677f\u5236\u5b9a\uff08\u7cbe\u7b80\u7248DSDL\uff09 \u9664\u4e861.2\u5c0f\u8282\u4e2d\u4fdd\u7559\u539f\u59cb\u6570\u636e\u96c6\u6240\u6709\u539f\u59cb\u5b57\u6bb5\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5229\u7528\u5df2\u6709\u7684 \u4efb\u52a1\u6a21\u677f \u4f5c\u4e3a\u6570\u636e\u96c6\u6a21\u677f\uff08\u8be5\u6a21\u677f\u4e2d\u4ec5\u4fdd\u7559\u4e86\u8be5\u4efb\u52a1\u7684\u5fc5\u9700\u5b57\u6bb5\uff09\u3002 \u5728 \u4efb\u52a1\u6a21\u677f \u9875\u9762\uff0c\u5c55\u793a\u4e86\u76ee\u524dDSDL\u9884\u5148\u5236\u5b9a\u7684\u4e00\u4e9b\u4e3b\u6d41\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u7528\u6237\u53ef\u6839\u636e\u9700\u8981\u4f7f\u7528\u3002 1.3.1 struct\u7684\u5b9a\u4e49\u6587\u4ef6 \u5728\u6b64\u6848\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u7528 \u76ee\u6807\u68c0\u6d4b\u6a21\u677f \uff1a $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] \u5728\u68c0\u6d4b\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff08\u8be6\u7ec6\u5b66\u4e60\u8bf7\u53c2\u8003 DSDL\u8bed\u8a00\u6559\u7a0b \uff09 $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalObjectEntry: \u5b9a\u4e49\u4e86\u8fb9\u754c\u6846\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: bbox \u8fb9\u754c\u6846\u7684\u4f4d\u7f6e label \u8fb9\u754c\u6846\u7684\u7c7b\u522b ObjectDetectionSample: \u5b9a\u4e49\u4e86\u68c0\u6d4b\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 objects \u6807\u6ce8\u4fe1\u606f\uff0c\u68c0\u6d4b\u4efb\u52a1\u4e2d\uff0c\u4e3a\u524d\u9762\u7684LocalObjectEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 1.3.2 samples\u6587\u4ef6 \u6839\u636e\u4e0a\u4e00\u5c0f\u8282\u5236\u5b9a\u7684\u6a21\u677f\uff0c\u6700\u7ec8\u7684samples.json\u7684\u7ed3\u6784\u5c06\u4e0e\u5176\u5b8c\u5168\u5bf9\u5e94\uff0c\u5177\u4f53\u7ec4\u7ec7\u5f62\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"image\" : \"JPEGImages/000001.jpg\" , \"objects\" : [ { \"bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"label\" : 1 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002 2. \u5229\u7528\u4efb\u52a1\u6a21\u677f\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684DSDL\u6570\u636e\u96c6 \u6211\u4eec\u5728 \u4efb\u52a1\u6a21\u677f \u677f\u5757\uff0c\u4ecb\u7ecd\u4e86\u76ee\u524d\u6211\u4eec\u5df2\u7ecf\u5236\u5b9a\u7684\u4e00\u4e9b\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u7528\u6237\u53ef\u4ee5\u6839\u636e\u9700\u8981\u9009\u62e9\u6240\u9700\u7684\u6a21\u677f\u8fdb\u884c\u4f7f\u7528\u3002 \u672c\u5c0f\u8282\u4ee5\u76ee\u6807\u8ddf\u8e2a\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u89e3\u91ca\u5982\u4f55\u76f4\u63a5\u5bfc\u5165 \u76ee\u6807\u8ddf\u8e2a\u6a21\u677f \u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\u3002 train.yaml $dsdl-version : \"0.5.2\" $import : - object-tracking - class-dom meta : dataset_name : \"New_dataset\" sub_dataset_name : \"train\" task_name : \"single-object tracking\" data : sample-type : VideoFrame[cdom=New_dataset_classdom] sample-path : $local samples : - video_name : \"example_video_1\" videoframes : - frame_id : \"1\" media_path : \"train/example_video_1/00001.jpg\" objects : - instance_id : \"0\" bbox : [ 25 , 36 , 103 , 122 ] category : \"dog\" - instance_id : \"1\" ... - frame_id : \"2\" ... - video_name : \"example_video_2\" ... \u4e0a\u9762\u7684\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff0c\u9996\u5148\u5b9a\u4e49\u4e86dsdl\u7684\u7248\u672c\u4fe1\u606f\uff0c\u7136\u540eimport\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u6570\u636e\u96c6\u6a21\u677f\u6587\u4ef6\uff0c\u5305\u62ec\u4efb\u52a1\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6a21\u677f\u3002\u63a5\u7740\u7528meta\u548cdata\u5b57\u6bb5\u6765\u63cf\u8ff0\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: dsdl\u7248\u672c\u4fe1\u606f $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165 \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f \u548c\u6570\u636e\u96c6\u7684class domain meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u4efb\u52a1\u7c7b\u578b\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: data\u7684\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f \u4e2d\u5bfc\u5165\u7684VideoFrame\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aNew_dataset_classdom sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u5982\u679c\u5b9e\u9645\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219samples\u7684\u5185\u5bb9\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6\uff0c\u5982\u679c\u662f$local\uff0c\u5219\u4ece\u672c\u6587\u4ef6\u7684data.samples\u5b57\u6bb5\u4e2d\u76f4\u63a5\u8bfb\u53d6 samples\uff1a\u4fdd\u5b58\u6570\u636e\u96c6\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5176\u7ec4\u7ec7\u7ed3\u6784\u4e0e \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f \u4e2d\u5b9a\u4e49\u7684struct\u7ed3\u6784\u4e00\u81f4\uff0c\u6ce8\u610f\u53ea\u6709\u5728sample-path\u662f$local\u7684\u65f6\u5019\u8be5\u5b57\u6bb5\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219samples\u4f1a\u4f18\u5148\u4ecesample-path\u4e2d\u7684\u8def\u5f84\u53bb\u8bfb\u53d6 class-dom.yaml $dsdl-version : 0.5.2 New_dataset_classdom : $def : class_domain classes : - dog - cat \u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7c7b\u522b\u57df\u4e2d\u5305\u542b\u7684\u7c7b\u578b\uff0c\u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6570\u636e\u96c6\u5305\u542b\"dog\"\u548c\"cat\"\u4e24\u4e2a\u7c7b\u522b\uff0c\u5176\u6807\u53f7\u5206\u522b\u662f1\u548c2\u3002 \u53e6\u5916\uff0c\u7528\u6237\u4e5f\u53ef\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\uff0c\u81ea\u884c\u4fee\u6539 \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f \uff0c\u6dfb\u52a0\u76f8\u5e94\u5b57\u6bb5\u3002\u53ef\u4ee5\u53c2\u8003 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814 \u4e2d\u7684\u4e00\u4e9b\u5e38\u7528\u7684\u72ec\u7acb\u5b57\u6bb5\uff08\u6bd4\u5982absence\u3001visilibility\u7b49\uff09\u3002","title":"DSDL\u6570\u636e\u96c6\u6a21\u677f\u5236\u5b9a"},{"location":"tutorials/advanced/dsdl_define/#dsdl","text":"\u5b9a\u4e49\u4e00\u4e2aDSDL\u6570\u636e\u96c6\uff0c\u9996\u5148\u9700\u8981\u4e86\u89e3DSDL\u5982\u4f55\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u8be6\u7ec6\u7684\u5185\u5bb9\u53ef\u4ee5\u9605\u8bfb DSDL\u8bed\u8a00\u6559\u7a0b \u7ae0\u8282\u3002 \u672c\u7ae0\u7528\u4e24\u4e2a\u6848\u4f8b\u89e3\u91caDSDL\u6570\u636e\u96c6\u7684\u5b9a\u4e49\uff1a1. \u7528DSDL\u63cf\u8ff0\u5df2\u6709\u7684\u6570\u636e\u96c6\uff08VOC\u4e3a\u4f8b\uff09\uff1b2. \u5229\u7528\u4efb\u52a1\u6a21\u677f\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u96c6\u3002 \u8be5\u6559\u7a0b\u5c06\u5728 \u6570\u636e\u96c6\u8f6c\u6362 \u5c0f\u8282\u8be6\u8ff0\u5982\u4f55\u901a\u8fc7\u8be5\u7ae0\u5b9a\u4e49\u7684\u6a21\u677f\u8fdb\u884c\u6570\u636e\u96c6\u7684DSDL\u6807\u51c6\u5316\u8f6c\u6362\u3002","title":"DSDL\u6570\u636e\u96c6\u6a21\u677f\u5236\u5b9a"},{"location":"tutorials/advanced/dsdl_define/#1-dsdl","text":"\u672c\u5c0f\u8282\u4e3b\u8981\u7528\u4e00\u4e2a\u5177\u4f53\u6848\u4f8b\uff08VOC2007\uff0c\u76ee\u6807\u68c0\u6d4b)\uff0c\u8bb2\u89e3DSDL\u6570\u636e\u96c6\u7684\u5b9a\u4e49\u3002 \u5c06\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u539f\u6570\u636e\u96c6\u8c03\u7814 \uff1a\u6807\u6ce8\u5b57\u6bb5\u53ca\u542b\u4e49 DSDL\u6a21\u677f\u5236\u5b9a\uff1a\u5206\u4e3a \u8be6\u7ec6\u7248 \u548c \u7cbe\u7b80\u7248","title":"1. \u7528DSDL\u63cf\u8ff0\u5df2\u6709\u7684\u6570\u636e\u96c6"},{"location":"tutorials/advanced/dsdl_define/#11","text":"\u6807\u6ce8\u7c7b\u578b\u5982\u4e0b\uff08\u4ee5Annotations/000001.xml\u4e3a\u4f8b\uff09\uff1a <annotation> <folder> VOC2007 </folder> # \u6587\u4ef6\u5939 <filename> 000001.jpg </filename> # \u56fe\u7247\u6587\u4ef6\u540d <source> # \u56fe\u50cf\u5143\u4fe1\u606f <database> The VOC2007 Database </database> # \u6570\u636e\u96c6\u540d\u79f0 <annotation> PASCAL VOC2007 </annotation> # \u6807\u6ce8\u7c7b\u578b <image> flickr </image> # \u6765\u6e90 <flickrid> 341012865 </flickrid> # \u6765\u6e90ID </source> <owner> # \u6e90\u4fe1\u606f <flickrid> Fried Camels </flickrid> <name> Jinky the Fruit Bat </name> </owner> <size> <width> 353 </width> # \u56fe\u7247\u5bbd <height> 500 </height> # \u56fe\u7247\u9ad8 <depth> 3 </depth> # \u56fe\u7247\u901a\u9053\u6570 </size> <segmented> 0 </segmented> # \u662f\u5426\u7528\u4e8e\u5206\u5272 <object> # \u6807\u6ce8\u90e8\u5206 <name> dog </name> # \u6807\u7b7e <pose> Left </pose> # \u59ff\u6001 <truncated> 1 </truncated> # \u7269\u4f53\u662f\u5426\u88ab\u90e8\u5206\u906e\u6321\uff08>15%\uff09 <difficult> 0 </difficult> # \u662f\u5426\u4e3a\u96be\u4ee5\u8fa8\u8bc6\u7684\u7269\u4f53 <bndbox> <xmin> 48 </xmin> # \u5de6\u4e0a\u89d2\u70b9\u7684x <ymin> 240 </ymin> # \u5de6\u4e0a\u89d2\u70b9\u7684y <xmax> 195 </xmax> # \u53f3\u4e0b\u89d2\u70b9\u7684x <ymax> 371 </ymax> # \u53f3\u4e0b\u89d2\u70b9\u7684y </bndbox> </object> ... </annotation>","title":"1.1 \u539f\u59cb\u6570\u636e\u96c6\u8c03\u7814"},{"location":"tutorials/advanced/dsdl_define/#12-dsdldsdl","text":"","title":"1.2 DSDL\u6a21\u677f\u5236\u5b9a\uff08\u8be6\u7ec6\u7248DSDL\uff09"},{"location":"tutorials/advanced/dsdl_define/#121-struct","text":"\u6839\u636e\u539f\u59cb\u6570\u636e\u96c6\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5236\u5b9a\u5982\u4e0b\u7684\u6570\u636e\u96c6\u6a21\u677f\uff08\u8be5\u6a21\u677f\u4e2d\u4fdd\u7559\u4e86\u539f\u59cb\u6570\u636e\u96c6\u6240\u6709\u7684\u5b57\u6bb5\u540d\u79f0\u548c\u7ed3\u6784\uff09\uff0c\u6ce8\u610f\uff0c\u5b57\u6bb5\u7c7b\u578b\u4e00\u5b9a\u8981\u4f7f\u7528\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 Field\u6587\u6863 \u3002 $dsdl-version : \"0.5.0\" ImageMedia : $def : struct $fields : image : Image image_shape : ImageShape depth : Int folder : Str source : Dict owner : Dict segmented : Bool LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : bbox : BBox category : Label[dom=$cdom] pose : Str truncated : Bool difficult : Bool ObjectDetectionSample : $def : struct $params : [ \"cdom\" ] $fields : media : ImageMedia objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\u53ca\u5bf9\u5e94\u5173\u7cfb\uff1a \u5728ObjectDetectionSample\u4e2d\uff1a media\uff1a\u8be5\u5b57\u6bb5\u4e3a\u4fdd\u5b58\u7684\u5a92\u4f53\u6587\u4ef6\u7684\u4fe1\u606f\uff0c\u7c7b\u578b\u4e3a\u5b9a\u4e49\u7684struct\uff1aImageMedia objects\uff1a\u8be5\u5b57\u6bb5\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684object\u5b57\u6bb5\uff0c\u4ee5List\u7684\u5f62\u5f0f\u5b58\u50a8\u5177\u4f53bounding box\u7684\u6807\u6ce8\u4fe1\u606f \u5728ImageMedia\u4e2d\uff1a image\uff1a\u7528\u4e8e\u50a8\u5b58\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u4e3b\u8981\u4ece\u539f\u59cb\u6570\u636e\u96c6\u7684filename\u5b57\u6bb5\u8f6c\u5316\u800c\u6765 source\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684source\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684source\u5b57\u6bb5\u4e0b\u7684database\u3001annotation\u3001image\u3001flickerid\u5b57\u6bb5\u3002 owner\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684owner\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684owner\u5b57\u6bb5\u4e0b\u7684flickerid\u548cname\u5b57\u6bb5\u3002 image_shape\u3001depth\uff1a\u662f\u539f\u59cb\u6570\u636e\u96c6\u7684size\u5b57\u6bb5\u4e0b\u7684\u540c\u540d\u5b57\u6bb5 \u5728LocalObjectEntry\u4e2d\uff1a bbox\uff1a\u5bf9\u5e94\u539f\u6570\u636e\u96c6\u7684bndbox\u5b57\u6bb5\uff0c\u4f46\u8f6c\u5316\u4e3abbox\u6807\u51c6\uff0c\u5373[x,y,w,h] category\uff1a\u662f\u8be5\u76ee\u6807\u7684\u7c7b\u522b\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u53f7\uff0c\u5bf9\u5e94\u7684\u662f\u539f\u6570\u636e\u96c6\u7684name\u5b57\u6bb5\uff0c\u7c7b\u522b\u6807\u53f7\u53ef\u4ee5\u53c2\u89c1\u6570\u636e\u96c6\u8f6c\u6362\u9875\u9762\u7684 VOC2007ClassDom.yaml pose\uff0ctruncated\uff0cdifficult\uff1a\u6807\u6ce8\u6846\u7684\u5c5e\u6027\uff0c\u6765\u81ea\u4e8e\u539f\u6570\u636e\u96c6\u540c\u540d\u5b57\u6bb5","title":"1.2.1 struct\u7684\u5b9a\u4e49\u6587\u4ef6"},{"location":"tutorials/advanced/dsdl_define/#123-samples","text":"\u6839\u636e\u4e0a\u4e00\u5c0f\u8282\u5236\u5b9a\u7684\u6a21\u677f\uff0c\u6700\u7ec8\u7684samples.json\u7684\u7ed3\u6784\u5c06\u4e0e\u5176\u5b8c\u5168\u5bf9\u5e94\uff0c\u5177\u4f53\u7ec4\u7ec7\u5f62\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"media\" : { \"image\" : \"JPEGImages/000001.jpg\" , \"image_shape\" : [ 640 , 480 ], \"depth\" : 3 , \"folder\" : \"VOC2007\" , \"source\" : { \"database\" : \"The VOC2007 Database\" , \"annotation\" : \"PASCAL VOC2007\" , \"flickrid\" : \"341012865\" }, \"owner\" :{ \"flickrid\" : \"Fried Camels\" , \"name\" : \"Jinky the Fruit Bat\" }, \"segmented\" : 0 , }, \"objects\" : [ { \"bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"category\" : 1 , \"pose\" : \"Left\" , \"truncated\" : 1 , \"difficult\" : 0 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002","title":"1.2.3 samples\u6587\u4ef6"},{"location":"tutorials/advanced/dsdl_define/#13-dsdldsdl","text":"\u9664\u4e861.2\u5c0f\u8282\u4e2d\u4fdd\u7559\u539f\u59cb\u6570\u636e\u96c6\u6240\u6709\u539f\u59cb\u5b57\u6bb5\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5229\u7528\u5df2\u6709\u7684 \u4efb\u52a1\u6a21\u677f \u4f5c\u4e3a\u6570\u636e\u96c6\u6a21\u677f\uff08\u8be5\u6a21\u677f\u4e2d\u4ec5\u4fdd\u7559\u4e86\u8be5\u4efb\u52a1\u7684\u5fc5\u9700\u5b57\u6bb5\uff09\u3002 \u5728 \u4efb\u52a1\u6a21\u677f \u9875\u9762\uff0c\u5c55\u793a\u4e86\u76ee\u524dDSDL\u9884\u5148\u5236\u5b9a\u7684\u4e00\u4e9b\u4e3b\u6d41\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u7528\u6237\u53ef\u6839\u636e\u9700\u8981\u4f7f\u7528\u3002","title":"1.3 DSDL\u6a21\u677f\u5236\u5b9a\uff08\u7cbe\u7b80\u7248DSDL\uff09"},{"location":"tutorials/advanced/dsdl_define/#131-struct","text":"\u5728\u6b64\u6848\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u7528 \u76ee\u6807\u68c0\u6d4b\u6a21\u677f \uff1a $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] \u5728\u68c0\u6d4b\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff08\u8be6\u7ec6\u5b66\u4e60\u8bf7\u53c2\u8003 DSDL\u8bed\u8a00\u6559\u7a0b \uff09 $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalObjectEntry: \u5b9a\u4e49\u4e86\u8fb9\u754c\u6846\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: bbox \u8fb9\u754c\u6846\u7684\u4f4d\u7f6e label \u8fb9\u754c\u6846\u7684\u7c7b\u522b ObjectDetectionSample: \u5b9a\u4e49\u4e86\u68c0\u6d4b\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 objects \u6807\u6ce8\u4fe1\u606f\uff0c\u68c0\u6d4b\u4efb\u52a1\u4e2d\uff0c\u4e3a\u524d\u9762\u7684LocalObjectEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868","title":"1.3.1 struct\u7684\u5b9a\u4e49\u6587\u4ef6"},{"location":"tutorials/advanced/dsdl_define/#132-samples","text":"\u6839\u636e\u4e0a\u4e00\u5c0f\u8282\u5236\u5b9a\u7684\u6a21\u677f\uff0c\u6700\u7ec8\u7684samples.json\u7684\u7ed3\u6784\u5c06\u4e0e\u5176\u5b8c\u5168\u5bf9\u5e94\uff0c\u5177\u4f53\u7ec4\u7ec7\u5f62\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"image\" : \"JPEGImages/000001.jpg\" , \"objects\" : [ { \"bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"label\" : 1 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002","title":"1.3.2 samples\u6587\u4ef6"},{"location":"tutorials/advanced/dsdl_define/#2-dsdl","text":"\u6211\u4eec\u5728 \u4efb\u52a1\u6a21\u677f \u677f\u5757\uff0c\u4ecb\u7ecd\u4e86\u76ee\u524d\u6211\u4eec\u5df2\u7ecf\u5236\u5b9a\u7684\u4e00\u4e9b\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u7528\u6237\u53ef\u4ee5\u6839\u636e\u9700\u8981\u9009\u62e9\u6240\u9700\u7684\u6a21\u677f\u8fdb\u884c\u4f7f\u7528\u3002 \u672c\u5c0f\u8282\u4ee5\u76ee\u6807\u8ddf\u8e2a\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u89e3\u91ca\u5982\u4f55\u76f4\u63a5\u5bfc\u5165 \u76ee\u6807\u8ddf\u8e2a\u6a21\u677f \u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\u3002 train.yaml $dsdl-version : \"0.5.2\" $import : - object-tracking - class-dom meta : dataset_name : \"New_dataset\" sub_dataset_name : \"train\" task_name : \"single-object tracking\" data : sample-type : VideoFrame[cdom=New_dataset_classdom] sample-path : $local samples : - video_name : \"example_video_1\" videoframes : - frame_id : \"1\" media_path : \"train/example_video_1/00001.jpg\" objects : - instance_id : \"0\" bbox : [ 25 , 36 , 103 , 122 ] category : \"dog\" - instance_id : \"1\" ... - frame_id : \"2\" ... - video_name : \"example_video_2\" ... \u4e0a\u9762\u7684\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff0c\u9996\u5148\u5b9a\u4e49\u4e86dsdl\u7684\u7248\u672c\u4fe1\u606f\uff0c\u7136\u540eimport\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u6570\u636e\u96c6\u6a21\u677f\u6587\u4ef6\uff0c\u5305\u62ec\u4efb\u52a1\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6a21\u677f\u3002\u63a5\u7740\u7528meta\u548cdata\u5b57\u6bb5\u6765\u63cf\u8ff0\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: dsdl\u7248\u672c\u4fe1\u606f $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165 \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f \u548c\u6570\u636e\u96c6\u7684class domain meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u4efb\u52a1\u7c7b\u578b\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: data\u7684\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f \u4e2d\u5bfc\u5165\u7684VideoFrame\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aNew_dataset_classdom sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u5982\u679c\u5b9e\u9645\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219samples\u7684\u5185\u5bb9\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6\uff0c\u5982\u679c\u662f$local\uff0c\u5219\u4ece\u672c\u6587\u4ef6\u7684data.samples\u5b57\u6bb5\u4e2d\u76f4\u63a5\u8bfb\u53d6 samples\uff1a\u4fdd\u5b58\u6570\u636e\u96c6\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5176\u7ec4\u7ec7\u7ed3\u6784\u4e0e \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f \u4e2d\u5b9a\u4e49\u7684struct\u7ed3\u6784\u4e00\u81f4\uff0c\u6ce8\u610f\u53ea\u6709\u5728sample-path\u662f$local\u7684\u65f6\u5019\u8be5\u5b57\u6bb5\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219samples\u4f1a\u4f18\u5148\u4ecesample-path\u4e2d\u7684\u8def\u5f84\u53bb\u8bfb\u53d6 class-dom.yaml $dsdl-version : 0.5.2 New_dataset_classdom : $def : class_domain classes : - dog - cat \u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7c7b\u522b\u57df\u4e2d\u5305\u542b\u7684\u7c7b\u578b\uff0c\u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6570\u636e\u96c6\u5305\u542b\"dog\"\u548c\"cat\"\u4e24\u4e2a\u7c7b\u522b\uff0c\u5176\u6807\u53f7\u5206\u522b\u662f1\u548c2\u3002 \u53e6\u5916\uff0c\u7528\u6237\u4e5f\u53ef\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\uff0c\u81ea\u884c\u4fee\u6539 \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f \uff0c\u6dfb\u52a0\u76f8\u5e94\u5b57\u6bb5\u3002\u53ef\u4ee5\u53c2\u8003 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814 \u4e2d\u7684\u4e00\u4e9b\u5e38\u7528\u7684\u72ec\u7acb\u5b57\u6bb5\uff08\u6bd4\u5982absence\u3001visilibility\u7b49\uff09\u3002","title":"2. \u5229\u7528\u4efb\u52a1\u6a21\u677f\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684DSDL\u6570\u636e\u96c6"},{"location":"tutorials/advanced/dsdl_extend/","text":"DSDL\u7c7b\u578b\u6269\u5c55 DSDL\u5df2\u7ecf\u652f\u6301\u5f88\u591a\u57fa\u7840\u7c7b\u578bField\uff08Bool\u3001Int\u3001Num\u3001Str\u3001Dict\u3001Date\u3001Time\uff09\uff0c\u6807\u6ce8\u7c7b\u578bField\uff08Coord\u3001Coord3D\u3001Interval\u3001BBox\u3001RotatedBBox\u3001Polygon\u3001Label\u3001Keypoint\u3001Text\u3001ImageShape\u3001UniqueID\u3001InstanceID\uff09\u4ee5\u53ca\u5a92\u4f53\u7c7b\u578bField\uff08Image\u3001LabelMap\u3001InstanceMap\uff09\u3002\u4f46\u5728\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u9884\u8bbe\u7684Field\u65e0\u6cd5\u6ee1\u8db3\u7528\u6237\u7684\u5f00\u53d1\u9700\u6c42\uff0c\u56e0\u6b64\u672c\u7ae0\u8282\u4f1a\u8be6\u89e3\u5728DSDL\u4e2dField\u662f\u5982\u4f55\u5b9a\u4e49\u7684\uff0c\u4ece\u800c\u65b9\u4fbf\u7528\u6237\u81ea\u5df1\u62d3\u5c55DSDL Field\u3002 \u6269\u5c55DSDL Field\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4 \u8bbe\u8ba1Field\u7684\u58f0\u660e\u53c2\u6570\u7684jsonschema\uff1b \u8bbe\u8ba1\u8be5Field\u7684\u4f20\u5165\u503c\u7684jsonschema\uff1b \u5982\u6709\u5fc5\u8981\uff0c\u8fd8\u9700\u8981\u8bbe\u8ba1 \u53c2\u6570+\u503c \u7684\u8054\u5408jsonschema \u7528\u6237\u5b9a\u4e49\u8be5Field\u5bf9\u5e94\u7684geometry\u7c7b \u4e0b\u9762\u672c\u6587\u5c06\u4ee5 RotatedBBoxField \u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u5982\u4f55\u81ea\u5b9a\u4e49\u4e00\u4e2aDSDL Field\u3002 1. \u4efb\u52a1\u4ecb\u7ecd \u7528\u6237\u5728\u5b9a\u4e49\u4e00\u4e2aField\u4e4b\u524d\uff0c\u9700\u8981\u4e86\u89e3\u8be5Field\u7684\u4efb\u52a1\u7279\u70b9\uff0c\u4ee5\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4e3a\u4f8b\uff0c\u5b83\u7684\u6807\u6ce8\u5e94\u8be5\u662f\u4e00\u4e2a\u65cb\u8f6c\u7684\u77e9\u5f62\u6846\uff0c\u5728\u5927\u591a\u6570\u4efb\u52a1\u4e2d\uff0c\u8be5\u77e9\u5f62\u6846\u4ee5 [x, y, w, h, theta] \u7684\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5176\u4e2dx,y\u5206\u522b\u4e3a\u77e9\u5f62\u6846\u4e2d\u5fc3\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\uff0c w,h \u5206\u522b\u4e3a\u4e3e\u884c\u6846\u7684\u5bbd\u548c\u9ad8\uff0c theta \u5219\u4e3a\u77e9\u5f62\u6846\u7684\u65cb\u8f6c\u89d2\u5ea6\uff0c\u5355\u4f4d\u4e3a\u89d2\u5ea6\u6216\u5f27\u5ea6\u3002\u800c\u4e5f\u6709\u5f88\u5927\u4e00\u90e8\u5206\u6570\u636e\u96c6\u5c06\u65cb\u8f6c\u77e9\u5f62\u6846\u4ee5polygon\u7684\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5373\u5c06\u5176\u6807\u6ce8\u4e3a\u77e9\u5f62\u68464\u4e2a\u9876\u70b9\u7684xy\u5750\u6807\uff0c\u8868\u793a\u4e3a [x1, y1, x2, y2, x3, y3, x4, y4] \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u81ea\u5b9a\u4e49\u4e00\u4e2a\u6bd4\u8f83\u901a\u7528\u7684RotatedBBox Field\uff0c\u9700\u8981\u8003\u8651\u503c\u662f\u4ee5 xywht\u5f62\u5f0f\u8fd8\u662fxyxy\u5f62\u5f0f\u7ed9\u51fa\uff0c\u4ee5\u53caxywht\u5f62\u5f0f\u4e0b\u7684\u89d2\u5ea6\u7684\u5355\u4f4d\u662f\u5ea6\u8fd8\u662f\u5f27\u5ea6\u3002 \u5e78\u8fd0\u7684\u662f\uff0cdsdl\u652f\u6301\u5728\u58f0\u660eField\u7684\u540c\u65f6\u4f20\u5165\u4e00\u4e9b\u53c2\u6570\u6765\u89c4\u5b9a\u8be5Field\u5728\u4e0d\u540c\u6a21\u5f0f\u4e0b\u5de5\u4f5c\uff0c\u4ee5 RotatedBBox Field\u4e3a\u4f8b\uff0c\u6211\u4eec\u4e00\u5171\u8981\u4e3aRotatedBBox Field\u5b9a\u4e493\u79cd\u6a21\u5f0f\uff1a LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox[mode=xywht, measure=radian] # \u4ee5xywht\u7684\u5f62\u5f0f\u7ed9\u503c\uff0c\u4e14\u89d2\u5ea6\u5355\u4f4d\u4e3a\u5f27\u5ea6 LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox[mode=xywht, measure=degree] # \u4ee5xywht\u7684\u5f62\u5f0f\u7ed9\u503c\uff0c\u4e14\u89d2\u5ea6\u5355\u4f4d\u4e3a\u5ea6 LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox[mode=xyxy] # \u4ee5xyxy\u7684\u5f62\u5f0f\u7ed9\u503c \u786e\u5b9a\u4e86RotatedBBox\u7684\u6837\u5f0f\uff0c\u6211\u4eec\u4e0b\u9762\u53ef\u4ee5\u5f00\u59cb\u5b9a\u4e49\u5b83\u7684\u53c2\u6570jsonschema 2. \u53c2\u6570schema\u5b9a\u4e49 \u5728RotatedBBox\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86 mode \u3001 measure \u4e24\u4e2a\u5f62\u53c2\uff0c\u5e76\u89c4\u5b9a\u4e86 mode \u7684\u5b9e\u53c2\u53ea\u80fd\u662f xywht \u6216 xyxy \uff0c measure \u7684\u5b9e\u53c2\u53ea\u80fd\u662f radian \u6216 degree \u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684jsonschema\u6765\u63cf\u8ff0\u8be5\u7ea6\u675f\uff1a args_schema = { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" , \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] } \u5728\u4e0a\u9762\u7684jsonschema\u4e2d\uff0c\u6211\u4eec\u7ea6\u675f\u4e86RotatedBBox\u7684\u5173\u952e\u5b57\u53c2\u6570\u5b57\u5178\u4e2d\u5fc5\u987b\u5305\u542b\u4e14\u53ea\u80fd\u5305\u542b\u4e24\u4e2a\u952e\uff1a measure \u548c mode \uff0c\u5e76\u4e14 measure \u952e\u5bf9\u5e94\u7684\u503c\u53ea\u80fd\u662f \"radian\" \u5b57\u7b26\u4e32\u6216\u662f \"xyxy\" \u5b57\u7b26\u4e32\uff1b mode \u952e\u5bf9\u5e94\u7684\u503c\u53ea\u80fd\u662f \"xywht\" \u5b57\u7b26\u4e32\u6216 \"xyxy\" \u5b57\u7b26\u4e32\u3002 \u6b64\u5916\u6709\u4e9b\u60c5\u51b5\u4e0b\u6211\u4eec\u5e0c\u671b\u5728\u4e3aField\u4f20\u5165\u53c2\u6570\u7684\u65f6\u5019\uff0cField\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u9ed8\u8ba4\u4f20\u53c2\u5b57\u5178\uff1a default_args = { \"mode\" : \"xywht\" , \"measure\" : \"radian\" } \u4e0a\u9762\u7684\u9ed8\u8ba4\u5b57\u5178\u89c4\u5b9a\u4e86\u5728\u4e0d\u4f20\u5165\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4 mode=\"xywht\" \uff0c measure=\"radian\" \u5b9a\u4e49\u5b8c\u53c2\u6570schema\u540e\uff0c\u6211\u4eec\u5219\u9700\u8981\u89c4\u5b9a\u5177\u4f53\u4f20\u5165\u7684\u503c\u7684jsonschema\u3002 3. \u503cschema\u5b9a\u4e49 \u5728RotatedBBox\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f20\u5165\u7684\u503c\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u5982\u679cRotatedBBox Field\u7684 mode \u662f \"xywht\" \uff0c\u5219\u4f20\u5165\u7684\u503c\u9700\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5143\u7d20\u6570\u76ee\u4e3a5\uff0c\u7c7b\u578b\u4e3a\u6570\u5b57\u7c7b\u578b\uff0c\u5206\u522b\u4ee3\u8868\u4e86\u65cb\u8f6c\u6846\u7684\u4e2d\u5fc3\u70b9xy\u5750\u6807\uff0c\u5bbd\u9ad8\uff0c\u4ee5\u53ca\u65cb\u8f6c\u89d2\u5ea6\u3002 \u5982\u679cRotatedBBox Field\u7684 mode \u662f xyxy \uff0c\u5219\u4f20\u5165\u7684\u503c\u9700\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5143\u7d20\u6570\u76ee\u4e3a8\uff0c\u7c7b\u578b\u4e3a\u6570\u5b57\u7c7b\u578b\uff0c\u5206\u522b\u4ee3\u8868\u4e86\u65cb\u8f6c\u6846\u7684\u56db\u4e2a\u9876\u70b9\u7684xy\u5750\u6807\uff1a [x1, y1, x2, y2, x3, y3, x4, y4] \u56e0\u6b64\uff0c\u503cjsonschema\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a data_schema = { \"$id\" : \"/special/rotatedbbox\" , \"title\" : \"RotatedBBoxField\" , \"description\" : \"Rotated bounding box field in dsdl.\" , \"type\" : \"array\" , \"oneOf\" : [ { \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }]}, { \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} ] } \u4e0a\u9762\u7684jsonschema\u505a\u51fa\u4e86\u5982\u4e0b\u7684\u7ea6\u675f\uff1a \u4f20\u5165RotatedBBox Field\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff1b \u5217\u8868\u7684\u5143\u7d20\u7ea6\u675f\u9700\u8981\u6ee1\u8db3\u4e0b\u9762\u4e24\u79cd\u60c5\u51b5\u4e4b\u4e00\uff1a \u5143\u7d20\u6570\u76ee\u4e3a5\uff0c\u7c7b\u578b\u90fd\u662fnumber\uff0c\u4e14\u8868\u793a\u5bbd\u9ad8\u7684\u7b2c3\u4e2a\u548c\u7b2c4\u4e2a\u5143\u7d20\u90fd\u5fc5\u987b\u8981\u662f\u5927\u4e8e0\u7684\u6570\uff1b \u5143\u7d20\u6570\u76ee\u4e3a8\uff0c\u7c7b\u578b\u90fd\u662fnumber \u6b64\u5916\uff0c\u5728RotatedBBox Field\u4e2d\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u786e\u5b9a\u53c2\u6570schema\u548c\u503cschema\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5f53 mode=\"xywht\" \u65f6\u4f20\u5165\u7684\u503c\u5fc5\u987b\u662f5\u5143\u7d20\u5217\u8868\uff1b\u5f53 mode=xyxy \u65f6\uff0c\u4f20\u5165\u7684\u503c\u5fc5\u987b\u662f8\u5143\u7d20\u5217\u8868\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u989d\u5916\u5b9a\u4e00\u4e2a\u53c2\u6570+\u503c\u7684\u6574\u4f53schema\uff1a whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } \u53ea\u6709\u5728\u53c2\u6570\u548c\u503c\u7684\u5f62\u5f0f\u4e00\u4e00\u5bf9\u5e94\u7684\u60c5\u51b5\u4e0b\u624d\u9700\u8981\u5b9a\u4e49\u4e0a\u9762\u7684 whole_schema \u4e3a\u4e86\u7406\u89e3 whole_schema \uff0c\u6211\u4eec\u7ed9\u51fa\u4e0b\u9762\u51e0\u4e2a\u4f8b\u5b50\uff1a data_args = { \"args\" : { \"mode\" : \"xywht\" , \"measure\" : \"radian\" }, \"value\" : [ 1 , 2 , 3 , 4 , 5 ] } # \u6b63\u786e\uff0c\u6ee1\u8db3whole_schema\u7684\u89c4\u5b9a data_args = { \"args\" : { \"mode\" : \"xywht\" , \"measure\" : \"radian\" }, \"value\" : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] } # \u9519\u8bef\uff0cvalue\u5fc5\u987b\u662f5\u5143\u7d20\u5217\u8868\uff0c\u56e0\u6b64mode\u662f\"xywht\" data_args = { \"args\" : { \"mode\" : \"xyxy\" , \"measure\" : \"radian\" }, \"value\" : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] } # \u6b63\u786e\uff0c\u6ee1\u8db3whole_schema\u7684\u89c4\u5b9a 4. \u6570\u636e\u7c7b\u7684\u5b9a\u4e49 \u5728dsdl\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528jsonschema\u6765\u68c0\u67e5\u7ed9\u5b9a\u7684\u6570\u636e\u662f\u5426\u5408\u89c4\uff0c\u4f46\u662f\u8fd9\u53ea\u662f\u5728\u57fa\u7840\u6570\u636e\u7c7b\u578b\u65b9\u9762\u7684\u68c0\u67e5\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u53ea\u80fd\u786e\u4fdd\u4f8b\u5982BBox\u7684\u6570\u636e\u5fc5\u987b\u4e3a\u4e00\u4e2a4\u5143\u7d20\u5217\u8868\uff0c\u6216\u662fpolygon\u5fc5\u987b\u662f\u4e00\u4e2a3\u5c42\u5d4c\u5957\u5217\u8868\u8fd9\u79cd\u7ea6\u675f\uff0c\u4e3a\u4e86\u80fd\u8fdb\u4e00\u6b65\u8868\u793a\u5404\u79cd\u4e0d\u540c\u7684\u6570\u636e\uff0c\u5c06\u8d4b\u4e88\u4ed6\u4eec\u8bed\u4e49\u4fe1\u606f\uff0c\u6211\u4eec\u8fd8\u4f1a\u5c06\u8fd9\u4e9b\u901a\u8fc7jsonschema\u9a8c\u8bc1\u7684\u6570\u636e\u5c01\u88c5\u5728\u4e00\u4e2adsdl\u6570\u636e\u7c7b\uff08 dsdl.geometry.BaseGeometry \uff09\u5f53\u4e2d\uff0c\u4ece\u800c\u65b9\u4fbf\u7528\u6237\u8c03\u7528\u5404\u79cd\u65b9\u6cd5\u6765\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u3002 \u5bf9\u4e8eRotatedBBox Field\u800c\u8a00\uff0c\u6211\u4eec\u5c06\u7b26\u5408data schema\u7684\u6570\u636e\u5c01\u88c5\u5728\u4e86 dsdl.geometry.RBBox \u7c7b\u5f53\u4e2d\u3002\u56e0\u6b64\u7528\u6237\u5728\u5b9e\u73b0\u81ea\u5b9a\u4e49Field\u65f6\uff0c\u5efa\u8bae\u4e5f\u53ef\u4ee5\u5728 dsdl.geometry \u5305\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u6570\u636e\u7c7b\u3002 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ee5 dsdl.geometry.RBBox \u4e3a\u4f8b\uff0c\u8bb2\u89e3\u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a\u6570\u636e\u7c7b\uff08\u5728dsdl\u4e2d\uff0c\u6211\u4eec\u5c06\u6570\u636e\u7c7b\u6210\u4e3a Geometry \u7c7b\uff09\u3002 \u5b9a\u4e49\u4e00\u4e2a Geometry \u7c7b\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u7ee7\u627f dsdl.geometry.BaseGeometry \u7236\u7c7b \u5b9a\u4e49\u521d\u59cb\u5316\u65b9\u6cd5 \u5b9a\u4e49\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5 \u5982\u679c\u5f53\u524dfield\u9700\u8981\u5728dsdl view\u547d\u4ee4\u4e2d\u88ab\u53ef\u89c6\u5316\u5c55\u793a\uff0c\u5219\u9700\u8981\u91cd\u5199\u7236\u7c7b\u65b9\u6cd5\u4e2d\u7684 visualize \u65b9\u6cd5\uff08\u8be5\u6b65\u9aa4\u4e0d\u4f1a\u5728\u672c\u6587\u4e2d\u6d89\u53ca\uff09 4.1 \u5b9a\u4e49\u521d\u59cb\u5316\u65b9\u6cd5 from .base_geometry import BaseGeometry class RBBox ( BaseGeometry ): def __init__ ( self , value , mode = \"xywht\" , measure = \"radian\" ): assert mode in ( \"xywht\" , \"xyxy\" ) and measure in ( \"radian\" , \"degree\" ) if mode == \"xywht\" : self . _polygon = None if measure == \"degree\" : value = value . copy () value [ - 1 ] = value [ - 1 ] / 180 * math . pi self . _rbbox = value else : self . _polygon = value self . _rbbox = None \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7528\u6237\u5b9a\u4e49\u7684Geometry\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u9700\u8981\u4f20\u5165\u7684\u503c\u9700\u8981\u5305\u542b\uff1a \u5177\u4f53\u7684\u6570\u636evalue \u8be5Geometry\u7c7b\u5bf9\u5e94\u7684Field\u7684\u58f0\u660e\u53c2\u6570 \u5177\u4f53\u6765\u8bf4\uff0c\u7531\u4e8eRotatedBBox Field\u7684\u58f0\u660e\u53c2\u6570\u5305\u542b mode \u548c measure \uff0c\u56e0\u6b64\u5b83\u5bf9\u5e94\u7684Geometry\u7c7bRBBox\u7684\u521d\u59cb\u5316\u53c2\u6570\u9664\u4e86\u5177\u4f53value\u6570\u636e\uff0c\u4e5f\u5fc5\u987b\u5305\u542b mode \u548c measure \u4e24\u4e2a\u53c2\u6570\uff0c\u4e14\u542b\u4e49\u4e0eRotatedBBox Field\u4e2d\u7684\u4e00\u81f4\u3002 \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u6839\u636e\u4f20\u5165\u7684 mode \u548c measure \u5bf9\u4f20\u5165\u7684\u6570\u636e value \u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\uff0c\u6bd4\u5982\uff1a \u5982\u679c measure \u4e3a degree \uff0c\u5219\u9700\u8981\u5c06 value \u4e2d\u7684\u89d2\u5ea6\u7684\u503c\u8f6c\u6362\u4e3a\u5f27\u5ea6\u5355\u4f4d\uff1b \u5982\u679c mode \u4e3a xywht \uff0c\u5219\u9700\u8981\u5c06value\u5b58\u50a8\u4e3a self._rbbox \u5c5e\u6027\uff0c\u5982\u679c mode \u4e3a xyxy \uff0c\u5219\u9700\u8981\u5c06value\u5b58\u50a8\u4e3a self._polygon 4.2 \u5b9a\u4e49\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5 \u6211\u4eec\u6709\u53ef\u80fd\u60f3\u5bf9\u5c01\u88c5\u7684\u6570\u636e\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5219\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u76f8\u5e94\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982\u5728RBBox\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\uff1a @staticmethod def rbbox2polygon ( value ): x , y , width , height , angle = value cosA , sinA = math . cos ( angle ), math . sin ( angle ) def _rotate ( p_ ): # clockwise x_ , y_ = p_ x_r = ( x_ - x ) * cosA - ( y_ - y ) * sinA + x y_r = ( x_ - x ) * sinA + ( y_ - y ) * cosA + y return [ x_r , y_r ] x_l , x_r , y_t , y_b = x - width / 2 , x + width / 2 , y - height / 2 , y + height / 2 p_lt , p_lb , p_rt , p_rb = [ x_l , y_t ], [ x_l , y_b ], [ x_r , y_t ], [ x_r , y_b ] return [ _rotate ( p_lt ), _rotate ( p_lb ), _rotate ( p_rb ), _rotate ( p_rt )] @staticmethod def polygon2rbbox ( value ): res = cv2 . minAreaRect ( np . array ( value ) . astype ( np . int32 )) x , y = res [ 0 ] width , height = res [ 1 ] # width is \"first edge\" angle = res [ 2 ] if width < height : width , height = height , width angle = angle + 90 angle = 1 - angle / 180 * math . pi return [ x , y , width , height , angle ] @property def polygon_value ( self ): if self . _polygon is None : self . _polygon = self . rbbox2polygon ( self . _rbbox ) return self . _polygon @property def rbbox_value ( self ): if self . _rbbox is None : self . _rbbox = self . polygon2rbbox ( self . _polygon ) return self . _rbbox \u4e0a\u9762\u7684\u65b9\u6cd5\u5b9e\u73b0\u4e86 mode \u4e3a xywht \u548c xyxy \u4e4b\u95f4\u6570\u636e\u7684\u76f8\u4e92\u8f6c\u6362 5. \u5b9a\u4e49Field\u7c7b \u5728\u5b8c\u6210\u4e86\u4e0a\u8ff0\u7684\u64cd\u4f5c\u540e\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u5c06\u4e0a\u9762\u5b9a\u4e49\u7684\u5185\u5bb9\u7ec4\u88c5\u5230\u4e00\u4e2aField\u7c7b\u4e2d\uff0c\u5373\u5b9a\u4e49Field\u7c7b\u672c\u8eab\u3002 \u4ee5RotatedBBox Field\u4e3a\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u5728 dsdl.fields \u5305\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u540c\u540d\u7684\u7c7b\uff0c\u5e76\u8ba9\u5b83\u7ee7\u627f dsdl.base_field.BaseField \u57fa\u7c7b\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5c06\u4e0a\u9762\u51e0\u5c0f\u8282\u5b9a\u4e49\u7684jsonschema\u8bbe\u7f6e\u4e3a\u5b83\u7684\u7c7b\u5c5e\u6027\uff0c\u5206\u522b\u4e3a\uff1a default_args \uff1aField\u58f0\u660e\u9ed8\u8ba4\u53c2\u6570 args_schema \uff1a\u58f0\u660eField\u65f6\u4f20\u5165\u53c2\u6570\u9700\u8981\u9075\u5b88\u7684 jsonschema data_schema \uff1a\u8be5Field\u7684\u5b9e\u4f8b\u6570\u636e\u9700\u8981\u9075\u5b88\u7684jsonschema whole_schema \uff1a\u8be5Field\u7684\u58f0\u660e\u53c2\u6570\u548c\u5b9e\u4f8b\u6570\u636e\u9700\u8981\u9075\u5b88\u7684\u6574\u4f53schema\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\uff09 geometry_class \uff1a\u8be5Field\u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u7684\u7c7b\u540d\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7c7b\u540d\u4e3a RBBox \u56e0\u6b64\uff0c\u6700\u7ec8\u5b9a\u4e49\u7684Field\u7c7b\u5982\u4e0b\u6240\u793a\uff1a class RotatedBBox ( BaseField ): default_args = { \"mode\" : \"xywht\" , \"measure\" : \"radian\" } data_schema = { \"$id\" : \"/special/rotatedbbox\" , \"title\" : \"RotatedBBoxField\" , \"description\" : \"Rotated bounding box field in dsdl.\" , \"type\" : \"array\" , \"oneOf\" : [ { \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }]}, { \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} ] } args_schema = { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" , \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] } whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } geometry_class = \"RBBox\" \u901a\u8fc7\u4e0a\u8ff0\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u5c31\u5b9a\u4e49\u4e86\u4e00\u4e2aRotatedBBox Field\uff0cpython\u4ee3\u7801\u7684\u4f7f\u7528\u5b9e\u4f8b\u5982\u4e0b\uff1a from dsdl.fields import RotatedBBox # import RotatedBBox field field = RotatedBBox ( mode = \"xywht\" , measure = \"radian\" ) # decare the RotatedBBox field data = [ 10 , 12 , 60 , 70 , 3.14 ] # define the data of a rotated bounding box rotated_bbox_obj = field . validate ( data ) # return a dsdl.geometry.RBBox object \u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u8c03\u7528\u5176\u65b9\u6cd5\uff1a rotated_bbox_obj . polygon_value # \u8f93\u51fa\u8be5rotated bounding box\u7684xyxy\u5f62\u5f0f rotated_bbox_obj . rbbox_value # \u8f93\u51fa\u8be5rotated bounding box\u7684xywht\u5f62\u5f0f ...","title":"\u81ea\u5b9a\u4e49DSDL Field"},{"location":"tutorials/advanced/dsdl_extend/#dsdl","text":"DSDL\u5df2\u7ecf\u652f\u6301\u5f88\u591a\u57fa\u7840\u7c7b\u578bField\uff08Bool\u3001Int\u3001Num\u3001Str\u3001Dict\u3001Date\u3001Time\uff09\uff0c\u6807\u6ce8\u7c7b\u578bField\uff08Coord\u3001Coord3D\u3001Interval\u3001BBox\u3001RotatedBBox\u3001Polygon\u3001Label\u3001Keypoint\u3001Text\u3001ImageShape\u3001UniqueID\u3001InstanceID\uff09\u4ee5\u53ca\u5a92\u4f53\u7c7b\u578bField\uff08Image\u3001LabelMap\u3001InstanceMap\uff09\u3002\u4f46\u5728\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u9884\u8bbe\u7684Field\u65e0\u6cd5\u6ee1\u8db3\u7528\u6237\u7684\u5f00\u53d1\u9700\u6c42\uff0c\u56e0\u6b64\u672c\u7ae0\u8282\u4f1a\u8be6\u89e3\u5728DSDL\u4e2dField\u662f\u5982\u4f55\u5b9a\u4e49\u7684\uff0c\u4ece\u800c\u65b9\u4fbf\u7528\u6237\u81ea\u5df1\u62d3\u5c55DSDL Field\u3002 \u6269\u5c55DSDL Field\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4 \u8bbe\u8ba1Field\u7684\u58f0\u660e\u53c2\u6570\u7684jsonschema\uff1b \u8bbe\u8ba1\u8be5Field\u7684\u4f20\u5165\u503c\u7684jsonschema\uff1b \u5982\u6709\u5fc5\u8981\uff0c\u8fd8\u9700\u8981\u8bbe\u8ba1 \u53c2\u6570+\u503c \u7684\u8054\u5408jsonschema \u7528\u6237\u5b9a\u4e49\u8be5Field\u5bf9\u5e94\u7684geometry\u7c7b \u4e0b\u9762\u672c\u6587\u5c06\u4ee5 RotatedBBoxField \u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u5982\u4f55\u81ea\u5b9a\u4e49\u4e00\u4e2aDSDL Field\u3002","title":"DSDL\u7c7b\u578b\u6269\u5c55"},{"location":"tutorials/advanced/dsdl_extend/#1","text":"\u7528\u6237\u5728\u5b9a\u4e49\u4e00\u4e2aField\u4e4b\u524d\uff0c\u9700\u8981\u4e86\u89e3\u8be5Field\u7684\u4efb\u52a1\u7279\u70b9\uff0c\u4ee5\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4e3a\u4f8b\uff0c\u5b83\u7684\u6807\u6ce8\u5e94\u8be5\u662f\u4e00\u4e2a\u65cb\u8f6c\u7684\u77e9\u5f62\u6846\uff0c\u5728\u5927\u591a\u6570\u4efb\u52a1\u4e2d\uff0c\u8be5\u77e9\u5f62\u6846\u4ee5 [x, y, w, h, theta] \u7684\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5176\u4e2dx,y\u5206\u522b\u4e3a\u77e9\u5f62\u6846\u4e2d\u5fc3\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\uff0c w,h \u5206\u522b\u4e3a\u4e3e\u884c\u6846\u7684\u5bbd\u548c\u9ad8\uff0c theta \u5219\u4e3a\u77e9\u5f62\u6846\u7684\u65cb\u8f6c\u89d2\u5ea6\uff0c\u5355\u4f4d\u4e3a\u89d2\u5ea6\u6216\u5f27\u5ea6\u3002\u800c\u4e5f\u6709\u5f88\u5927\u4e00\u90e8\u5206\u6570\u636e\u96c6\u5c06\u65cb\u8f6c\u77e9\u5f62\u6846\u4ee5polygon\u7684\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5373\u5c06\u5176\u6807\u6ce8\u4e3a\u77e9\u5f62\u68464\u4e2a\u9876\u70b9\u7684xy\u5750\u6807\uff0c\u8868\u793a\u4e3a [x1, y1, x2, y2, x3, y3, x4, y4] \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u81ea\u5b9a\u4e49\u4e00\u4e2a\u6bd4\u8f83\u901a\u7528\u7684RotatedBBox Field\uff0c\u9700\u8981\u8003\u8651\u503c\u662f\u4ee5 xywht\u5f62\u5f0f\u8fd8\u662fxyxy\u5f62\u5f0f\u7ed9\u51fa\uff0c\u4ee5\u53caxywht\u5f62\u5f0f\u4e0b\u7684\u89d2\u5ea6\u7684\u5355\u4f4d\u662f\u5ea6\u8fd8\u662f\u5f27\u5ea6\u3002 \u5e78\u8fd0\u7684\u662f\uff0cdsdl\u652f\u6301\u5728\u58f0\u660eField\u7684\u540c\u65f6\u4f20\u5165\u4e00\u4e9b\u53c2\u6570\u6765\u89c4\u5b9a\u8be5Field\u5728\u4e0d\u540c\u6a21\u5f0f\u4e0b\u5de5\u4f5c\uff0c\u4ee5 RotatedBBox Field\u4e3a\u4f8b\uff0c\u6211\u4eec\u4e00\u5171\u8981\u4e3aRotatedBBox Field\u5b9a\u4e493\u79cd\u6a21\u5f0f\uff1a LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox[mode=xywht, measure=radian] # \u4ee5xywht\u7684\u5f62\u5f0f\u7ed9\u503c\uff0c\u4e14\u89d2\u5ea6\u5355\u4f4d\u4e3a\u5f27\u5ea6 LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox[mode=xywht, measure=degree] # \u4ee5xywht\u7684\u5f62\u5f0f\u7ed9\u503c\uff0c\u4e14\u89d2\u5ea6\u5355\u4f4d\u4e3a\u5ea6 LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox[mode=xyxy] # \u4ee5xyxy\u7684\u5f62\u5f0f\u7ed9\u503c \u786e\u5b9a\u4e86RotatedBBox\u7684\u6837\u5f0f\uff0c\u6211\u4eec\u4e0b\u9762\u53ef\u4ee5\u5f00\u59cb\u5b9a\u4e49\u5b83\u7684\u53c2\u6570jsonschema","title":"1. \u4efb\u52a1\u4ecb\u7ecd"},{"location":"tutorials/advanced/dsdl_extend/#2-schema","text":"\u5728RotatedBBox\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86 mode \u3001 measure \u4e24\u4e2a\u5f62\u53c2\uff0c\u5e76\u89c4\u5b9a\u4e86 mode \u7684\u5b9e\u53c2\u53ea\u80fd\u662f xywht \u6216 xyxy \uff0c measure \u7684\u5b9e\u53c2\u53ea\u80fd\u662f radian \u6216 degree \u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684jsonschema\u6765\u63cf\u8ff0\u8be5\u7ea6\u675f\uff1a args_schema = { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" , \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] } \u5728\u4e0a\u9762\u7684jsonschema\u4e2d\uff0c\u6211\u4eec\u7ea6\u675f\u4e86RotatedBBox\u7684\u5173\u952e\u5b57\u53c2\u6570\u5b57\u5178\u4e2d\u5fc5\u987b\u5305\u542b\u4e14\u53ea\u80fd\u5305\u542b\u4e24\u4e2a\u952e\uff1a measure \u548c mode \uff0c\u5e76\u4e14 measure \u952e\u5bf9\u5e94\u7684\u503c\u53ea\u80fd\u662f \"radian\" \u5b57\u7b26\u4e32\u6216\u662f \"xyxy\" \u5b57\u7b26\u4e32\uff1b mode \u952e\u5bf9\u5e94\u7684\u503c\u53ea\u80fd\u662f \"xywht\" \u5b57\u7b26\u4e32\u6216 \"xyxy\" \u5b57\u7b26\u4e32\u3002 \u6b64\u5916\u6709\u4e9b\u60c5\u51b5\u4e0b\u6211\u4eec\u5e0c\u671b\u5728\u4e3aField\u4f20\u5165\u53c2\u6570\u7684\u65f6\u5019\uff0cField\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u9ed8\u8ba4\u4f20\u53c2\u5b57\u5178\uff1a default_args = { \"mode\" : \"xywht\" , \"measure\" : \"radian\" } \u4e0a\u9762\u7684\u9ed8\u8ba4\u5b57\u5178\u89c4\u5b9a\u4e86\u5728\u4e0d\u4f20\u5165\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4 mode=\"xywht\" \uff0c measure=\"radian\" \u5b9a\u4e49\u5b8c\u53c2\u6570schema\u540e\uff0c\u6211\u4eec\u5219\u9700\u8981\u89c4\u5b9a\u5177\u4f53\u4f20\u5165\u7684\u503c\u7684jsonschema\u3002","title":"2. \u53c2\u6570schema\u5b9a\u4e49"},{"location":"tutorials/advanced/dsdl_extend/#3-schema","text":"\u5728RotatedBBox\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f20\u5165\u7684\u503c\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u5982\u679cRotatedBBox Field\u7684 mode \u662f \"xywht\" \uff0c\u5219\u4f20\u5165\u7684\u503c\u9700\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5143\u7d20\u6570\u76ee\u4e3a5\uff0c\u7c7b\u578b\u4e3a\u6570\u5b57\u7c7b\u578b\uff0c\u5206\u522b\u4ee3\u8868\u4e86\u65cb\u8f6c\u6846\u7684\u4e2d\u5fc3\u70b9xy\u5750\u6807\uff0c\u5bbd\u9ad8\uff0c\u4ee5\u53ca\u65cb\u8f6c\u89d2\u5ea6\u3002 \u5982\u679cRotatedBBox Field\u7684 mode \u662f xyxy \uff0c\u5219\u4f20\u5165\u7684\u503c\u9700\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5143\u7d20\u6570\u76ee\u4e3a8\uff0c\u7c7b\u578b\u4e3a\u6570\u5b57\u7c7b\u578b\uff0c\u5206\u522b\u4ee3\u8868\u4e86\u65cb\u8f6c\u6846\u7684\u56db\u4e2a\u9876\u70b9\u7684xy\u5750\u6807\uff1a [x1, y1, x2, y2, x3, y3, x4, y4] \u56e0\u6b64\uff0c\u503cjsonschema\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a data_schema = { \"$id\" : \"/special/rotatedbbox\" , \"title\" : \"RotatedBBoxField\" , \"description\" : \"Rotated bounding box field in dsdl.\" , \"type\" : \"array\" , \"oneOf\" : [ { \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }]}, { \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} ] } \u4e0a\u9762\u7684jsonschema\u505a\u51fa\u4e86\u5982\u4e0b\u7684\u7ea6\u675f\uff1a \u4f20\u5165RotatedBBox Field\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff1b \u5217\u8868\u7684\u5143\u7d20\u7ea6\u675f\u9700\u8981\u6ee1\u8db3\u4e0b\u9762\u4e24\u79cd\u60c5\u51b5\u4e4b\u4e00\uff1a \u5143\u7d20\u6570\u76ee\u4e3a5\uff0c\u7c7b\u578b\u90fd\u662fnumber\uff0c\u4e14\u8868\u793a\u5bbd\u9ad8\u7684\u7b2c3\u4e2a\u548c\u7b2c4\u4e2a\u5143\u7d20\u90fd\u5fc5\u987b\u8981\u662f\u5927\u4e8e0\u7684\u6570\uff1b \u5143\u7d20\u6570\u76ee\u4e3a8\uff0c\u7c7b\u578b\u90fd\u662fnumber \u6b64\u5916\uff0c\u5728RotatedBBox Field\u4e2d\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u786e\u5b9a\u53c2\u6570schema\u548c\u503cschema\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5f53 mode=\"xywht\" \u65f6\u4f20\u5165\u7684\u503c\u5fc5\u987b\u662f5\u5143\u7d20\u5217\u8868\uff1b\u5f53 mode=xyxy \u65f6\uff0c\u4f20\u5165\u7684\u503c\u5fc5\u987b\u662f8\u5143\u7d20\u5217\u8868\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u989d\u5916\u5b9a\u4e00\u4e2a\u53c2\u6570+\u503c\u7684\u6574\u4f53schema\uff1a whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } \u53ea\u6709\u5728\u53c2\u6570\u548c\u503c\u7684\u5f62\u5f0f\u4e00\u4e00\u5bf9\u5e94\u7684\u60c5\u51b5\u4e0b\u624d\u9700\u8981\u5b9a\u4e49\u4e0a\u9762\u7684 whole_schema \u4e3a\u4e86\u7406\u89e3 whole_schema \uff0c\u6211\u4eec\u7ed9\u51fa\u4e0b\u9762\u51e0\u4e2a\u4f8b\u5b50\uff1a data_args = { \"args\" : { \"mode\" : \"xywht\" , \"measure\" : \"radian\" }, \"value\" : [ 1 , 2 , 3 , 4 , 5 ] } # \u6b63\u786e\uff0c\u6ee1\u8db3whole_schema\u7684\u89c4\u5b9a data_args = { \"args\" : { \"mode\" : \"xywht\" , \"measure\" : \"radian\" }, \"value\" : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] } # \u9519\u8bef\uff0cvalue\u5fc5\u987b\u662f5\u5143\u7d20\u5217\u8868\uff0c\u56e0\u6b64mode\u662f\"xywht\" data_args = { \"args\" : { \"mode\" : \"xyxy\" , \"measure\" : \"radian\" }, \"value\" : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] } # \u6b63\u786e\uff0c\u6ee1\u8db3whole_schema\u7684\u89c4\u5b9a","title":"3. \u503cschema\u5b9a\u4e49"},{"location":"tutorials/advanced/dsdl_extend/#4","text":"\u5728dsdl\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528jsonschema\u6765\u68c0\u67e5\u7ed9\u5b9a\u7684\u6570\u636e\u662f\u5426\u5408\u89c4\uff0c\u4f46\u662f\u8fd9\u53ea\u662f\u5728\u57fa\u7840\u6570\u636e\u7c7b\u578b\u65b9\u9762\u7684\u68c0\u67e5\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u53ea\u80fd\u786e\u4fdd\u4f8b\u5982BBox\u7684\u6570\u636e\u5fc5\u987b\u4e3a\u4e00\u4e2a4\u5143\u7d20\u5217\u8868\uff0c\u6216\u662fpolygon\u5fc5\u987b\u662f\u4e00\u4e2a3\u5c42\u5d4c\u5957\u5217\u8868\u8fd9\u79cd\u7ea6\u675f\uff0c\u4e3a\u4e86\u80fd\u8fdb\u4e00\u6b65\u8868\u793a\u5404\u79cd\u4e0d\u540c\u7684\u6570\u636e\uff0c\u5c06\u8d4b\u4e88\u4ed6\u4eec\u8bed\u4e49\u4fe1\u606f\uff0c\u6211\u4eec\u8fd8\u4f1a\u5c06\u8fd9\u4e9b\u901a\u8fc7jsonschema\u9a8c\u8bc1\u7684\u6570\u636e\u5c01\u88c5\u5728\u4e00\u4e2adsdl\u6570\u636e\u7c7b\uff08 dsdl.geometry.BaseGeometry \uff09\u5f53\u4e2d\uff0c\u4ece\u800c\u65b9\u4fbf\u7528\u6237\u8c03\u7528\u5404\u79cd\u65b9\u6cd5\u6765\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u3002 \u5bf9\u4e8eRotatedBBox Field\u800c\u8a00\uff0c\u6211\u4eec\u5c06\u7b26\u5408data schema\u7684\u6570\u636e\u5c01\u88c5\u5728\u4e86 dsdl.geometry.RBBox \u7c7b\u5f53\u4e2d\u3002\u56e0\u6b64\u7528\u6237\u5728\u5b9e\u73b0\u81ea\u5b9a\u4e49Field\u65f6\uff0c\u5efa\u8bae\u4e5f\u53ef\u4ee5\u5728 dsdl.geometry \u5305\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u6570\u636e\u7c7b\u3002 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ee5 dsdl.geometry.RBBox \u4e3a\u4f8b\uff0c\u8bb2\u89e3\u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a\u6570\u636e\u7c7b\uff08\u5728dsdl\u4e2d\uff0c\u6211\u4eec\u5c06\u6570\u636e\u7c7b\u6210\u4e3a Geometry \u7c7b\uff09\u3002 \u5b9a\u4e49\u4e00\u4e2a Geometry \u7c7b\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u7ee7\u627f dsdl.geometry.BaseGeometry \u7236\u7c7b \u5b9a\u4e49\u521d\u59cb\u5316\u65b9\u6cd5 \u5b9a\u4e49\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5 \u5982\u679c\u5f53\u524dfield\u9700\u8981\u5728dsdl view\u547d\u4ee4\u4e2d\u88ab\u53ef\u89c6\u5316\u5c55\u793a\uff0c\u5219\u9700\u8981\u91cd\u5199\u7236\u7c7b\u65b9\u6cd5\u4e2d\u7684 visualize \u65b9\u6cd5\uff08\u8be5\u6b65\u9aa4\u4e0d\u4f1a\u5728\u672c\u6587\u4e2d\u6d89\u53ca\uff09","title":"4. \u6570\u636e\u7c7b\u7684\u5b9a\u4e49"},{"location":"tutorials/advanced/dsdl_extend/#41","text":"from .base_geometry import BaseGeometry class RBBox ( BaseGeometry ): def __init__ ( self , value , mode = \"xywht\" , measure = \"radian\" ): assert mode in ( \"xywht\" , \"xyxy\" ) and measure in ( \"radian\" , \"degree\" ) if mode == \"xywht\" : self . _polygon = None if measure == \"degree\" : value = value . copy () value [ - 1 ] = value [ - 1 ] / 180 * math . pi self . _rbbox = value else : self . _polygon = value self . _rbbox = None \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7528\u6237\u5b9a\u4e49\u7684Geometry\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u9700\u8981\u4f20\u5165\u7684\u503c\u9700\u8981\u5305\u542b\uff1a \u5177\u4f53\u7684\u6570\u636evalue \u8be5Geometry\u7c7b\u5bf9\u5e94\u7684Field\u7684\u58f0\u660e\u53c2\u6570 \u5177\u4f53\u6765\u8bf4\uff0c\u7531\u4e8eRotatedBBox Field\u7684\u58f0\u660e\u53c2\u6570\u5305\u542b mode \u548c measure \uff0c\u56e0\u6b64\u5b83\u5bf9\u5e94\u7684Geometry\u7c7bRBBox\u7684\u521d\u59cb\u5316\u53c2\u6570\u9664\u4e86\u5177\u4f53value\u6570\u636e\uff0c\u4e5f\u5fc5\u987b\u5305\u542b mode \u548c measure \u4e24\u4e2a\u53c2\u6570\uff0c\u4e14\u542b\u4e49\u4e0eRotatedBBox Field\u4e2d\u7684\u4e00\u81f4\u3002 \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u6839\u636e\u4f20\u5165\u7684 mode \u548c measure \u5bf9\u4f20\u5165\u7684\u6570\u636e value \u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\uff0c\u6bd4\u5982\uff1a \u5982\u679c measure \u4e3a degree \uff0c\u5219\u9700\u8981\u5c06 value \u4e2d\u7684\u89d2\u5ea6\u7684\u503c\u8f6c\u6362\u4e3a\u5f27\u5ea6\u5355\u4f4d\uff1b \u5982\u679c mode \u4e3a xywht \uff0c\u5219\u9700\u8981\u5c06value\u5b58\u50a8\u4e3a self._rbbox \u5c5e\u6027\uff0c\u5982\u679c mode \u4e3a xyxy \uff0c\u5219\u9700\u8981\u5c06value\u5b58\u50a8\u4e3a self._polygon","title":"4.1 \u5b9a\u4e49\u521d\u59cb\u5316\u65b9\u6cd5"},{"location":"tutorials/advanced/dsdl_extend/#42","text":"\u6211\u4eec\u6709\u53ef\u80fd\u60f3\u5bf9\u5c01\u88c5\u7684\u6570\u636e\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5219\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u76f8\u5e94\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982\u5728RBBox\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\uff1a @staticmethod def rbbox2polygon ( value ): x , y , width , height , angle = value cosA , sinA = math . cos ( angle ), math . sin ( angle ) def _rotate ( p_ ): # clockwise x_ , y_ = p_ x_r = ( x_ - x ) * cosA - ( y_ - y ) * sinA + x y_r = ( x_ - x ) * sinA + ( y_ - y ) * cosA + y return [ x_r , y_r ] x_l , x_r , y_t , y_b = x - width / 2 , x + width / 2 , y - height / 2 , y + height / 2 p_lt , p_lb , p_rt , p_rb = [ x_l , y_t ], [ x_l , y_b ], [ x_r , y_t ], [ x_r , y_b ] return [ _rotate ( p_lt ), _rotate ( p_lb ), _rotate ( p_rb ), _rotate ( p_rt )] @staticmethod def polygon2rbbox ( value ): res = cv2 . minAreaRect ( np . array ( value ) . astype ( np . int32 )) x , y = res [ 0 ] width , height = res [ 1 ] # width is \"first edge\" angle = res [ 2 ] if width < height : width , height = height , width angle = angle + 90 angle = 1 - angle / 180 * math . pi return [ x , y , width , height , angle ] @property def polygon_value ( self ): if self . _polygon is None : self . _polygon = self . rbbox2polygon ( self . _rbbox ) return self . _polygon @property def rbbox_value ( self ): if self . _rbbox is None : self . _rbbox = self . polygon2rbbox ( self . _polygon ) return self . _rbbox \u4e0a\u9762\u7684\u65b9\u6cd5\u5b9e\u73b0\u4e86 mode \u4e3a xywht \u548c xyxy \u4e4b\u95f4\u6570\u636e\u7684\u76f8\u4e92\u8f6c\u6362","title":"4.2 \u5b9a\u4e49\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5"},{"location":"tutorials/advanced/dsdl_extend/#5-field","text":"\u5728\u5b8c\u6210\u4e86\u4e0a\u8ff0\u7684\u64cd\u4f5c\u540e\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u5c06\u4e0a\u9762\u5b9a\u4e49\u7684\u5185\u5bb9\u7ec4\u88c5\u5230\u4e00\u4e2aField\u7c7b\u4e2d\uff0c\u5373\u5b9a\u4e49Field\u7c7b\u672c\u8eab\u3002 \u4ee5RotatedBBox Field\u4e3a\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u5728 dsdl.fields \u5305\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u540c\u540d\u7684\u7c7b\uff0c\u5e76\u8ba9\u5b83\u7ee7\u627f dsdl.base_field.BaseField \u57fa\u7c7b\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5c06\u4e0a\u9762\u51e0\u5c0f\u8282\u5b9a\u4e49\u7684jsonschema\u8bbe\u7f6e\u4e3a\u5b83\u7684\u7c7b\u5c5e\u6027\uff0c\u5206\u522b\u4e3a\uff1a default_args \uff1aField\u58f0\u660e\u9ed8\u8ba4\u53c2\u6570 args_schema \uff1a\u58f0\u660eField\u65f6\u4f20\u5165\u53c2\u6570\u9700\u8981\u9075\u5b88\u7684 jsonschema data_schema \uff1a\u8be5Field\u7684\u5b9e\u4f8b\u6570\u636e\u9700\u8981\u9075\u5b88\u7684jsonschema whole_schema \uff1a\u8be5Field\u7684\u58f0\u660e\u53c2\u6570\u548c\u5b9e\u4f8b\u6570\u636e\u9700\u8981\u9075\u5b88\u7684\u6574\u4f53schema\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\uff09 geometry_class \uff1a\u8be5Field\u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u7684\u7c7b\u540d\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7c7b\u540d\u4e3a RBBox \u56e0\u6b64\uff0c\u6700\u7ec8\u5b9a\u4e49\u7684Field\u7c7b\u5982\u4e0b\u6240\u793a\uff1a class RotatedBBox ( BaseField ): default_args = { \"mode\" : \"xywht\" , \"measure\" : \"radian\" } data_schema = { \"$id\" : \"/special/rotatedbbox\" , \"title\" : \"RotatedBBoxField\" , \"description\" : \"Rotated bounding box field in dsdl.\" , \"type\" : \"array\" , \"oneOf\" : [ { \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }]}, { \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} ] } args_schema = { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" , \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] } whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } geometry_class = \"RBBox\" \u901a\u8fc7\u4e0a\u8ff0\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u5c31\u5b9a\u4e49\u4e86\u4e00\u4e2aRotatedBBox Field\uff0cpython\u4ee3\u7801\u7684\u4f7f\u7528\u5b9e\u4f8b\u5982\u4e0b\uff1a from dsdl.fields import RotatedBBox # import RotatedBBox field field = RotatedBBox ( mode = \"xywht\" , measure = \"radian\" ) # decare the RotatedBBox field data = [ 10 , 12 , 60 , 70 , 3.14 ] # define the data of a rotated bounding box rotated_bbox_obj = field . validate ( data ) # return a dsdl.geometry.RBBox object \u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u8c03\u7528\u5176\u65b9\u6cd5\uff1a rotated_bbox_obj . polygon_value # \u8f93\u51fa\u8be5rotated bounding box\u7684xyxy\u5f62\u5f0f rotated_bbox_obj . rbbox_value # \u8f93\u51fa\u8be5rotated bounding box\u7684xywht\u5f62\u5f0f ...","title":"5. \u5b9a\u4e49Field\u7c7b"},{"location":"tutorials/advanced/overview/","text":"DSDL\u9ad8\u9636\u6559\u7a0b \u672c\u7ae0\u8282\u5c06\u8be6\u7ec6\u8bb2\u89e3\u5982\u4f55\u901a\u8fc7DSDL\u5bf9\u5df2\u6709\u7684\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\uff0c\u5e76\u8f6c\u6362\u4e3aDSDL\u6570\u636e\u96c6\uff0c\u4ee5\u4fbf\u4f7f\u7528\u540e\u7eedODL\u5de5\u5177\u94fe\u76f8\u5173\u529f\u80fd\u3002\u53e6\u5916\uff0c\u8fd8\u8bb2\u89e3\u4e86\u5982\u4f55\u81ea\u5b9a\u4e49DSDL Field\uff0c\u80fd\u591f\u62d3\u5c55\u7528\u6237\u9700\u8981\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4ece\u800c\u62d3\u5c55DSDL\u6807\u51c6\uff0c\u6b22\u8fce\u7528\u6237\u7ed9 DSDL-SDK \u63d0PR\u3002 \u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a \u81ea\u5b9a\u4e49DSDL\u6570\u636e\u96c6 \uff1a DSDL\u6570\u636e\u96c6\u6a21\u677f\u5236\u5b9a \uff1a\u5305\u62ec\u7528DSDL\u63cf\u8ff0\u5df2\u6709\u7684\u6570\u636e\u96c6\u3001\u5229\u7528\u4efb\u52a1\u6a21\u677f\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684DSDL\u6570\u636e\u96c6\u3002 DSDL\u6570\u636e\u96c6\u683c\u5f0f\u8f6c\u6362 \uff1a\u63d0\u4f9b\u4e86\u8f6c\u6362\u811a\u672c\u6a21\u677f\uff08\u63d0\u4f9bSDK\u63a5\u53e3\u548c\u5b9e\u7528\u51fd\u6570\uff0c\u8f85\u52a9\u6570\u636e\u96c6\u8f6c\u6362\uff09\u3001\u5e76\u4ee5\u4e00\u4e2a\u5b9e\u9645\u793a\u4f8b\u6f14\u793a\u4e86\u8f6c\u6362\u6d41\u7a0b\u3002 DSDL\u6570\u636e\u96c6\u9a8c\u8bc1 \uff1a\u5bf9\u5b9a\u4e49\u7684DSDL\u6570\u636e\u96c6\u8fdb\u884c\u9a8c\u8bc1\uff0c\u786e\u8ba4\u5176\u89c4\u8303\u6027\u3002 \u81ea\u5b9a\u4e49DSDL Field : \u4ecb\u7ecd\u4e86DSDL Field\u62d3\u5c55\u7684\u5177\u4f53\u6b65\u9aa4\u3002","title":"\u9ad8\u9636\u6559\u7a0b\u4ecb\u7ecd"},{"location":"tutorials/advanced/overview/#dsdl","text":"\u672c\u7ae0\u8282\u5c06\u8be6\u7ec6\u8bb2\u89e3\u5982\u4f55\u901a\u8fc7DSDL\u5bf9\u5df2\u6709\u7684\u6570\u636e\u96c6\u8fdb\u884c\u63cf\u8ff0\uff0c\u5e76\u8f6c\u6362\u4e3aDSDL\u6570\u636e\u96c6\uff0c\u4ee5\u4fbf\u4f7f\u7528\u540e\u7eedODL\u5de5\u5177\u94fe\u76f8\u5173\u529f\u80fd\u3002\u53e6\u5916\uff0c\u8fd8\u8bb2\u89e3\u4e86\u5982\u4f55\u81ea\u5b9a\u4e49DSDL Field\uff0c\u80fd\u591f\u62d3\u5c55\u7528\u6237\u9700\u8981\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4ece\u800c\u62d3\u5c55DSDL\u6807\u51c6\uff0c\u6b22\u8fce\u7528\u6237\u7ed9 DSDL-SDK \u63d0PR\u3002 \u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a \u81ea\u5b9a\u4e49DSDL\u6570\u636e\u96c6 \uff1a DSDL\u6570\u636e\u96c6\u6a21\u677f\u5236\u5b9a \uff1a\u5305\u62ec\u7528DSDL\u63cf\u8ff0\u5df2\u6709\u7684\u6570\u636e\u96c6\u3001\u5229\u7528\u4efb\u52a1\u6a21\u677f\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684DSDL\u6570\u636e\u96c6\u3002 DSDL\u6570\u636e\u96c6\u683c\u5f0f\u8f6c\u6362 \uff1a\u63d0\u4f9b\u4e86\u8f6c\u6362\u811a\u672c\u6a21\u677f\uff08\u63d0\u4f9bSDK\u63a5\u53e3\u548c\u5b9e\u7528\u51fd\u6570\uff0c\u8f85\u52a9\u6570\u636e\u96c6\u8f6c\u6362\uff09\u3001\u5e76\u4ee5\u4e00\u4e2a\u5b9e\u9645\u793a\u4f8b\u6f14\u793a\u4e86\u8f6c\u6362\u6d41\u7a0b\u3002 DSDL\u6570\u636e\u96c6\u9a8c\u8bc1 \uff1a\u5bf9\u5b9a\u4e49\u7684DSDL\u6570\u636e\u96c6\u8fdb\u884c\u9a8c\u8bc1\uff0c\u786e\u8ba4\u5176\u89c4\u8303\u6027\u3002 \u81ea\u5b9a\u4e49DSDL Field : \u4ecb\u7ecd\u4e86DSDL Field\u62d3\u5c55\u7684\u5177\u4f53\u6b65\u9aa4\u3002","title":"DSDL\u9ad8\u9636\u6559\u7a0b"},{"location":"tutorials/analysis/result_analysis/","text":"\u5185\u5bb9\u5f85\u66f4\u65b0\u3002","title":"Result analysis"},{"location":"tutorials/config/location_config/","text":"\u6570\u636e\u96c6\u914d\u7f6e \u5728dsdl\u4e2d\u4e3a\u4e86\u6570\u636e\u96c6\u65b9\u4fbf\u5206\u53d1\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u3010\u5a92\u4f53\u6570\u636e\u3011\u548c\u3010\u6807\u6ce8\u6587\u4ef6\u3011\u5206\u79bb\u8fd9\u4e00\u8bbe\u8ba1\u7406\u5ff5\uff0c\u8fd9\u6837\u5373\u4fbf\u7528\u6237\u628a\u4e0d\u540c\u6570\u636e\u4fdd\u5b58\u5728\u4e0d\u540c\u7684\u5b58\u50a8\u4e0a\uff0c\u4e5f\u65e0\u9700\u4fee\u6539dsdl yaml\u6587\u4ef6\uff0c\u4ec5\u9700\u4fee\u6539\u5bf9\u5e94\u7684config\u6587\u4ef6\u5373\u53ef\uff0c\u8fd9\u91cc\u7684\u6570\u636e\u96c6\u914d\u7f6e\u4e5f\u4e3b\u8981\u662f\u6307\u5bf9config\u6587\u4ef6\u7684\u9002\u914d\uff0c\u7ed3\u5408\u5b9e\u9645\u60c5\u51b5\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a \u7528\u6237\u901a\u8fc7odl get\u83b7\u53d6\u7684dsdl\u6570\u636e\u96c6\uff0c\u540c\u65f6\u5305\u542b\u3010\u539f\u59cb\u5a92\u4f53\u6570\u636e\u3011\u548c\u3010dsdl\u6807\u6ce8\u6587\u4ef6\u3011\uff0c\u7528\u6237\u9700\u8981\uff1b \u5bf9\u4e8e\u672c\u5730\u6216\u8005\u8fdc\u7aef\u5df2\u7ecf\u62e5\u6709\u4e0b\u8f7d\u597d\u7684\u3010\u539f\u59cb\u5a92\u4f53\u6570\u636e\u3011\uff0c\u540c\u65f6\u8fd8\u5e0c\u671b\u4f7f\u7528dsdl\u76f8\u5173\u914d\u5957\u5de5\u5177\u7684\u7528\u6237\uff0c\u53ef\u4ee5\u53ea\u4e0b\u8f7d\u5bf9\u5e94\u6570\u636e\u96c6\u7684\u3010dsdl\u6807\u6ce8\u6587\u4ef6\u3011\uff0c\u540c\u65f6\u4fee\u6539\u5176\u4e2d\u7684 config.py \u6587\u4ef6\u5373\u53ef\uff1b \u5728 config.py \u4e2d\uff0c\u5217\u4e3e\u4e86\u6240\u652f\u6301\u7684\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5e76\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u7b49\u4fe1\u606f\uff1a \u672c\u5730\u8bfb\u53d6\uff1a local \u4e2d\u7684\u53c2\u6570 working_dir \uff08\u672c\u5730\u6570\u636e\u6240\u5728\u7684\u76ee\u5f55\uff09 \u963f\u91cc\u4e91OSS\u8bfb\u53d6\uff1a ali_oss \u4e2d\u7684\u53c2\u6570\uff08\u963f\u91cc\u4e91OSS\u7684\u914d\u7f6e access_key_secret , endpoint , access_key_id \uff1b\u6876\u540d\u79f0 bucket_name \uff0c\u6570\u636e\u5728\u6876\u4e2d\u7684\u76ee\u5f55 working_dir \u3002\u5173\u4e8e\u963f\u91cc\u4e91OSS\u53c2\u6570\u914d\u7f6e\u4e2d\u76f8\u5173\u5b57\u6bb5\u7684\u8be6\u7ec6\u542b\u4e49\u548c\u914d\u7f6e\u65b9\u6cd5\uff0c\u8bf7\u53c2\u8003\u5176\u5b98\u65b9\u6587\u6863\uff1a \u914d\u7f6e\u6559\u7a0b \uff09 \u5b8c\u6574\u7684config.py\u6587\u4ef6\u793a\u4f8b\u5982\u4e0b\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" )","title":"**\u6570\u636e\u96c6\u914d\u7f6e**"},{"location":"tutorials/config/location_config/#_1","text":"\u5728dsdl\u4e2d\u4e3a\u4e86\u6570\u636e\u96c6\u65b9\u4fbf\u5206\u53d1\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u3010\u5a92\u4f53\u6570\u636e\u3011\u548c\u3010\u6807\u6ce8\u6587\u4ef6\u3011\u5206\u79bb\u8fd9\u4e00\u8bbe\u8ba1\u7406\u5ff5\uff0c\u8fd9\u6837\u5373\u4fbf\u7528\u6237\u628a\u4e0d\u540c\u6570\u636e\u4fdd\u5b58\u5728\u4e0d\u540c\u7684\u5b58\u50a8\u4e0a\uff0c\u4e5f\u65e0\u9700\u4fee\u6539dsdl yaml\u6587\u4ef6\uff0c\u4ec5\u9700\u4fee\u6539\u5bf9\u5e94\u7684config\u6587\u4ef6\u5373\u53ef\uff0c\u8fd9\u91cc\u7684\u6570\u636e\u96c6\u914d\u7f6e\u4e5f\u4e3b\u8981\u662f\u6307\u5bf9config\u6587\u4ef6\u7684\u9002\u914d\uff0c\u7ed3\u5408\u5b9e\u9645\u60c5\u51b5\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a \u7528\u6237\u901a\u8fc7odl get\u83b7\u53d6\u7684dsdl\u6570\u636e\u96c6\uff0c\u540c\u65f6\u5305\u542b\u3010\u539f\u59cb\u5a92\u4f53\u6570\u636e\u3011\u548c\u3010dsdl\u6807\u6ce8\u6587\u4ef6\u3011\uff0c\u7528\u6237\u9700\u8981\uff1b \u5bf9\u4e8e\u672c\u5730\u6216\u8005\u8fdc\u7aef\u5df2\u7ecf\u62e5\u6709\u4e0b\u8f7d\u597d\u7684\u3010\u539f\u59cb\u5a92\u4f53\u6570\u636e\u3011\uff0c\u540c\u65f6\u8fd8\u5e0c\u671b\u4f7f\u7528dsdl\u76f8\u5173\u914d\u5957\u5de5\u5177\u7684\u7528\u6237\uff0c\u53ef\u4ee5\u53ea\u4e0b\u8f7d\u5bf9\u5e94\u6570\u636e\u96c6\u7684\u3010dsdl\u6807\u6ce8\u6587\u4ef6\u3011\uff0c\u540c\u65f6\u4fee\u6539\u5176\u4e2d\u7684 config.py \u6587\u4ef6\u5373\u53ef\uff1b \u5728 config.py \u4e2d\uff0c\u5217\u4e3e\u4e86\u6240\u652f\u6301\u7684\u5a92\u4f53\u6587\u4ef6\u8bfb\u53d6\u65b9\u5f0f\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5e76\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u7b49\u4fe1\u606f\uff1a \u672c\u5730\u8bfb\u53d6\uff1a local \u4e2d\u7684\u53c2\u6570 working_dir \uff08\u672c\u5730\u6570\u636e\u6240\u5728\u7684\u76ee\u5f55\uff09 \u963f\u91cc\u4e91OSS\u8bfb\u53d6\uff1a ali_oss \u4e2d\u7684\u53c2\u6570\uff08\u963f\u91cc\u4e91OSS\u7684\u914d\u7f6e access_key_secret , endpoint , access_key_id \uff1b\u6876\u540d\u79f0 bucket_name \uff0c\u6570\u636e\u5728\u6876\u4e2d\u7684\u76ee\u5f55 working_dir \u3002\u5173\u4e8e\u963f\u91cc\u4e91OSS\u53c2\u6570\u914d\u7f6e\u4e2d\u76f8\u5173\u5b57\u6bb5\u7684\u8be6\u7ec6\u542b\u4e49\u548c\u914d\u7f6e\u65b9\u6cd5\uff0c\u8bf7\u53c2\u8003\u5176\u5b98\u65b9\u6587\u6863\uff1a \u914d\u7f6e\u6559\u7a0b \uff09 \u5b8c\u6574\u7684config.py\u6587\u4ef6\u793a\u4f8b\u5982\u4e0b\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" )","title":"\u6570\u636e\u96c6\u914d\u7f6e"},{"location":"tutorials/train_test/openmmlab/","text":"\u57fa\u4e8eDSDL\u6570\u636e\u7684\u8bad\u7ec3\u63a8\u7406\uff08OpenMMLab\uff09 1. \u5b89\u88c5\u73af\u5883 \u8fd9\u91cc\u4f7f\u7528mmdetection\u6846\u67b6\u8fdb\u884c\u6a21\u578b\u7684\u8bad\u7ec3\u548c\u63a8\u7406\uff0c\u7528\u6237\u53ef\u4ee5\u53c2\u8003mmdetection\u7684\u5b98\u7f51\u8fdb\u884c\u5b89\u88c5\uff0c\u76ee\u524dmmlab2.0(\u5bf9\u5e94mmdet 3.x\u7248\u672c)\u5df2\u7ecf\u652f\u6301DSDL\u6570\u636e\u96c6\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u5982\u4f55\u5b89\u88c53.x\u7248\u672c\u7684mmdet\uff0c\u66f4\u591a\u4fe1\u606f\u4ee5\u53ca\u76f8\u5173\u7684\u4f9d\u8d56\u5b89\u88c5\u8bf7\u53c2\u8003 MMDetection\u5b89\u88c5\u6587\u6863 . git clone https://gitlab.shlab.tech/research/dataset_standard/openmmlab-dsdl/mmdetection-dsdl -b dev-3.x cd mmdetection pip install -v -e . \u5b89\u88c5\u5b8cmmdetection\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u636e\u96c6\u4e0b\u8f7d\u5230mmdetection/data\u8def\u5f84\u4e0b\uff0c\u8fd9\u91cc\u4ee5VOC\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u4e0b\u8f7d\u597d\u540e\u7684\u6570\u636e\u96c6\u8def\u5f84\u5982\u4e0b\u6240\u793a\uff1a mmdetection \u2514\u2500\u2500 data \u2514\u2500\u2500 PASCAL_VOC2007 \u251c\u2500\u2500 dsdl \u2502 \u251c\u2500\u2500 config.py \u2502 \u251c\u2500\u2500 defs \u2502 \u251c\u2500\u2500 README.md \u2502 \u251c\u2500\u2500 set-test \u2502 \u251c\u2500\u2500 set-train \u2502 \u2514\u2500\u2500 set-val \u2514\u2500\u2500 original \u251c\u2500\u2500 Annotations \u251c\u2500\u2500 ImageSets \u251c\u2500\u2500 JPEGImages \u251c\u2500\u2500 SegmentationClass \u2514\u2500\u2500 SegmentationObject 2. \u4fee\u6539\u914d\u7f6e\u6587\u4ef6 mmdet \u6846\u67b6\u76ee\u524d\u652f\u6301dsdl\u6570\u636e\u96c6\u7684\u8bad\u7ec3\uff0c\u4e00\u822c\u53ea\u9700\u8981\u5bf9\u6570\u636e\u96c6\u7684\u6839\u76ee\u5f55\u8fdb\u884c\u4fee\u6539\u5373\u53ef\u8fdb\u884c\u8bad\u7ec3\u3002\u5982\u679c\u662fvoc\uff0ccoco\u7b49\u4e3b\u6d41\u6570\u636e\u96c6\uff0c\u4e14\u6570\u636e\u96c6\u4fdd\u5b58\u5728mmdetection/data\u8def\u5f84\u4e0b\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5b98\u7f51\u7684\u914d\u7f6e\u8fdb\u884c\u8bad\u7ec3\uff1b\u5982\u679c\u5e76\u975e\u4e3b\u6d41\u6570\u636e\u96c6\uff0c\u6216\u8005\u6570\u636e\u96c6\u6ca1\u6709\u4fdd\u5b58\u5728data\u8def\u5f84\u4e0b\uff0c\u4e5f\u53ea\u9700\u8981\u5bf9\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u8def\u5f84\u8fdb\u884c\u4fee\u6539\u5373\u53ef\uff1a # dataset settings dataset_type = 'DSDLDetDataset' data_root = '{path to your dataset}' # \u5b58\u653e\u6570\u636e\u96c6\u7684\u6839\u76ee\u5f55 train_ann = \"dsdl/set-train/train.yaml\" # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 val_ann = \"dsdl/set-val/val.yaml\" # \u9a8c\u8bc1\u96c6\u7684yaml\u6587\u4ef6 \u5b8c\u6574\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u7684\u9700\u6c42\u5bf9\u5176\u5b83\u53c2\u6570\u8fdb\u884c\u4fee\u6539\u3002 dsdl-voc\u5b8c\u6574\u8bad\u7ec3\u914d\u7f6e _base_ = [ '../_base_/models/faster-rcnn_r50_fpn.py' , '../_base_/default_runtime.py' ] # model setting model = dict ( roi_head = dict ( bbox_head = dict ( num_classes = 20 ))) # dataset settings dataset_type = \"DSDLDetDataset\" data_root = \"/nvme/wufan/.dsdl/datasets/PascalVOC2007-detection\" train_ann = \"yml/set-train/train.yaml\" val_ann = \"yml/set-test/test.yaml\" attribute_cfg = dict ( ignore_train = { \"difficult\" : ( True , 1 ) } ) file_client_args = dict ( backend = 'disk' ) train_pipeline = [ dict ( type = 'LoadImageFromFile' , file_client_args = file_client_args ), dict ( type = 'LoadAnnotations' , with_bbox = True ), dict ( type = 'Resize' , scale = ( 1000 , 600 ), keep_ratio = True ), dict ( type = 'RandomFlip' , prob = 0.5 ), dict ( type = 'PackDetInputs' ) ] test_pipeline = [ dict ( type = 'LoadImageFromFile' , file_client_args = file_client_args ), dict ( type = 'Resize' , scale = ( 1000 , 600 ), keep_ratio = True ), # avoid bboxes being resized dict ( type = 'LoadAnnotations' , with_bbox = True ), dict ( type = 'PackDetInputs' , meta_keys = ( 'img_id' , 'img_path' , 'ori_shape' , 'img_shape' , 'scale_factor' , 'instances' ) ) ] train_dataloader = dict ( batch_size = 2 , num_workers = 2 , persistent_workers = True , sampler = dict ( type = 'DefaultSampler' , shuffle = True ), batch_sampler = dict ( type = 'AspectRatioBatchSampler' ), dataset = dict ( type = dataset_type , attribute_cfg = attribute_cfg , data_root = data_root , ann_file = train_ann , filter_cfg = dict ( filter_empty_gt = True , min_size = 32 , bbox_min_size = 32 ), pipeline = train_pipeline ) ) val_dataloader = dict ( batch_size = 1 , num_workers = 2 , persistent_workers = True , drop_last = False , sampler = dict ( type = 'DefaultSampler' , shuffle = False ), dataset = dict ( type = dataset_type , attribute_cfg = attribute_cfg , data_root = data_root , ann_file = val_ann , test_mode = True , pipeline = test_pipeline )) test_dataloader = val_dataloader # Pascal VOC2007 uses `11points` as default evaluate mode, while PASCAL # VOC2012 defaults to use 'area'. # val_evaluator = dict(type='VOCMetric', metric='mAP', eval_mode='11points') val_evaluator = dict ( type = 'CocoMetric' , metric = 'bbox' ) test_evaluator = val_evaluator # training schedule, voc dataset is repeated 3 times, in # `_base_/datasets/voc0712.py`, so the actual epoch = 4 * 3 = 12 max_epochs = 4 train_cfg = dict ( type = 'EpochBasedTrainLoop' , max_epochs = max_epochs , val_interval = 1 ) val_cfg = dict ( type = 'ValLoop' ) test_cfg = dict ( type = 'TestLoop' ) # learning rate param_scheduler = [ dict ( type = 'MultiStepLR' , begin = 0 , end = max_epochs , by_epoch = True , milestones = [ 3 ], gamma = 0.1 ) ] # optimizer optim_wrapper = dict ( type = 'OptimWrapper' , optimizer = dict ( type = 'SGD' , lr = 0.01 , momentum = 0.9 , weight_decay = 0.0001 )) # Default setting for scaling LR automatically # - `enable` means enable scaling LR automatically # or not by default. # - `base_batch_size` = (8 GPUs) x (2 samples per GPU). auto_scale_lr = dict ( enable = False , base_batch_size = 16 ) gpu_ids = range ( 0 , 8 ) 3 \u6a21\u578b\u8bad\u7ec3 \u5355\u5361\u8bad\u7ec3 python tools/train.py { path_to_config_file } \u6bd4\u5982\uff1a python tools/train.py config/dsdl/voc2007.py \u96c6\u7fa4\u8bad\u7ec3 ./tools/slurm_train.sh { partition } { job_name } { config_file } { work_dir } { gpu_nums } \u5f53\u51fa\u73b0\u5982\u4e0b\u65e5\u5fd7\u65f6\uff0c\u8868\u793a\u8bad\u7ec3\u6b63\u5728\u8fdb\u884c\u4e2d\uff1a 2022 /12/13 19 :00:05 - mmengine - INFO - Checkpoints will be saved to /nvme/wufan/project/mmlab2.x/work_dirs/voc_dsdl. 2022 /12/13 19 :00:12 - mmengine - INFO - Epoch ( train ) [ 1 ][ 50 /3104 ] lr: 1 .0000e-02 eta: 0 :26:28 time: 0 .1285 data_time: 0 .0040 memory: 2581 loss: 0 .7176 loss_rpn_cls: 0 .1582 loss_rpn_bbox: 0 .0301 loss_cls: 0 .3771 acc: 92 .1875 loss_bbox: 0 .1522 2022 /12/13 19 :00:18 - mmengine - INFO - Epoch ( train ) [ 1 ][ 100 /3104 ] lr: 1 .0000e-02 eta: 0 :25:32 time: 0 .1204 data_time: 0 .0024 memory: 2581 loss: 0 .5537 loss_rpn_cls: 0 .0577 loss_rpn_bbox: 0 .0220 loss_cls: 0 .2768 acc: 87 .8906 loss_bbox: 0 .1972 2022 /12/13 19 :00:24 - mmengine - INFO - Epoch ( train ) [ 1 ][ 150 /3104 ] lr: 1 .0000e-02 eta: 0 :25:12 time: 0 .1210 data_time: 0 .0025 memory: 2581 loss: 0 .6777 loss_rpn_cls: 0 .0885 loss_rpn_bbox: 0 .0340 loss_cls: 0 .3201 acc: 92 .6758 loss_bbox: 0 .2350 ... 4 \u6a21\u578b\u6d4b\u8bd5 python tools/test.py { path_to_config_file } { path_to_checkpoint_file } \u6bd4\u5982\uff1a python tools/test.py config/dsdl/voc2007.py work_dirs/voc2007/epoch_4.pth \u63a8\u7406\u7ed3\u679c\u5982\u4e0b\uff1a 2022 /12/21 11 :07:13 - mmengine - INFO - Load checkpoint from work_dirs/voc2007/epoch_4.pth 2022 /12/21 11 :07:15 - mmengine - INFO - Epoch ( test ) [ 50 /4952 ] eta: 0 :02:17 time: 0 .0280 data_time: 0 .0028 memory: 348 ... 2022 /12/21 11 :09:15 - mmengine - INFO - Epoch ( test ) [ 4950 /4952 ] eta: 0 :00:00 time: 0 .0246 data_time: 0 .0009 memory: 360 2022 /12/21 11 :09:15 - mmengine - INFO - Converting ground truth to coco format... 2022 /12/21 11 :09:16 - mmengine - INFO - Evaluating bbox... 2022 /12/21 11 :09:25 - mmengine - INFO - bbox_mAP_copypaste: 0 .454 0 .757 0 .479 0 .123 0 .340 0 .536 2022 /12/21 11 :09:25 - mmengine - INFO - Epoch ( test ) [ 4952 /4952 ] coco/bbox_mAP: 0 .4540 coco/bbox_mAP_50: 0 .7570 coco/bbox_mAP_75: 0 .4790 coco/bbox_mAP_s: 0 .1230 coco/bbox_mAP_m: 0 .3400 coco/bbox_mAP_l: 0 .5360","title":"OpenMMLab"},{"location":"tutorials/train_test/openmmlab/#dsdlopenmmlab","text":"","title":"\u57fa\u4e8eDSDL\u6570\u636e\u7684\u8bad\u7ec3\u63a8\u7406\uff08OpenMMLab\uff09"},{"location":"tutorials/train_test/openmmlab/#1","text":"\u8fd9\u91cc\u4f7f\u7528mmdetection\u6846\u67b6\u8fdb\u884c\u6a21\u578b\u7684\u8bad\u7ec3\u548c\u63a8\u7406\uff0c\u7528\u6237\u53ef\u4ee5\u53c2\u8003mmdetection\u7684\u5b98\u7f51\u8fdb\u884c\u5b89\u88c5\uff0c\u76ee\u524dmmlab2.0(\u5bf9\u5e94mmdet 3.x\u7248\u672c)\u5df2\u7ecf\u652f\u6301DSDL\u6570\u636e\u96c6\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u5982\u4f55\u5b89\u88c53.x\u7248\u672c\u7684mmdet\uff0c\u66f4\u591a\u4fe1\u606f\u4ee5\u53ca\u76f8\u5173\u7684\u4f9d\u8d56\u5b89\u88c5\u8bf7\u53c2\u8003 MMDetection\u5b89\u88c5\u6587\u6863 . git clone https://gitlab.shlab.tech/research/dataset_standard/openmmlab-dsdl/mmdetection-dsdl -b dev-3.x cd mmdetection pip install -v -e . \u5b89\u88c5\u5b8cmmdetection\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u636e\u96c6\u4e0b\u8f7d\u5230mmdetection/data\u8def\u5f84\u4e0b\uff0c\u8fd9\u91cc\u4ee5VOC\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u4e0b\u8f7d\u597d\u540e\u7684\u6570\u636e\u96c6\u8def\u5f84\u5982\u4e0b\u6240\u793a\uff1a mmdetection \u2514\u2500\u2500 data \u2514\u2500\u2500 PASCAL_VOC2007 \u251c\u2500\u2500 dsdl \u2502 \u251c\u2500\u2500 config.py \u2502 \u251c\u2500\u2500 defs \u2502 \u251c\u2500\u2500 README.md \u2502 \u251c\u2500\u2500 set-test \u2502 \u251c\u2500\u2500 set-train \u2502 \u2514\u2500\u2500 set-val \u2514\u2500\u2500 original \u251c\u2500\u2500 Annotations \u251c\u2500\u2500 ImageSets \u251c\u2500\u2500 JPEGImages \u251c\u2500\u2500 SegmentationClass \u2514\u2500\u2500 SegmentationObject","title":"1. \u5b89\u88c5\u73af\u5883"},{"location":"tutorials/train_test/openmmlab/#2","text":"mmdet \u6846\u67b6\u76ee\u524d\u652f\u6301dsdl\u6570\u636e\u96c6\u7684\u8bad\u7ec3\uff0c\u4e00\u822c\u53ea\u9700\u8981\u5bf9\u6570\u636e\u96c6\u7684\u6839\u76ee\u5f55\u8fdb\u884c\u4fee\u6539\u5373\u53ef\u8fdb\u884c\u8bad\u7ec3\u3002\u5982\u679c\u662fvoc\uff0ccoco\u7b49\u4e3b\u6d41\u6570\u636e\u96c6\uff0c\u4e14\u6570\u636e\u96c6\u4fdd\u5b58\u5728mmdetection/data\u8def\u5f84\u4e0b\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5b98\u7f51\u7684\u914d\u7f6e\u8fdb\u884c\u8bad\u7ec3\uff1b\u5982\u679c\u5e76\u975e\u4e3b\u6d41\u6570\u636e\u96c6\uff0c\u6216\u8005\u6570\u636e\u96c6\u6ca1\u6709\u4fdd\u5b58\u5728data\u8def\u5f84\u4e0b\uff0c\u4e5f\u53ea\u9700\u8981\u5bf9\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u8def\u5f84\u8fdb\u884c\u4fee\u6539\u5373\u53ef\uff1a # dataset settings dataset_type = 'DSDLDetDataset' data_root = '{path to your dataset}' # \u5b58\u653e\u6570\u636e\u96c6\u7684\u6839\u76ee\u5f55 train_ann = \"dsdl/set-train/train.yaml\" # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 val_ann = \"dsdl/set-val/val.yaml\" # \u9a8c\u8bc1\u96c6\u7684yaml\u6587\u4ef6 \u5b8c\u6574\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u7684\u9700\u6c42\u5bf9\u5176\u5b83\u53c2\u6570\u8fdb\u884c\u4fee\u6539\u3002 dsdl-voc\u5b8c\u6574\u8bad\u7ec3\u914d\u7f6e _base_ = [ '../_base_/models/faster-rcnn_r50_fpn.py' , '../_base_/default_runtime.py' ] # model setting model = dict ( roi_head = dict ( bbox_head = dict ( num_classes = 20 ))) # dataset settings dataset_type = \"DSDLDetDataset\" data_root = \"/nvme/wufan/.dsdl/datasets/PascalVOC2007-detection\" train_ann = \"yml/set-train/train.yaml\" val_ann = \"yml/set-test/test.yaml\" attribute_cfg = dict ( ignore_train = { \"difficult\" : ( True , 1 ) } ) file_client_args = dict ( backend = 'disk' ) train_pipeline = [ dict ( type = 'LoadImageFromFile' , file_client_args = file_client_args ), dict ( type = 'LoadAnnotations' , with_bbox = True ), dict ( type = 'Resize' , scale = ( 1000 , 600 ), keep_ratio = True ), dict ( type = 'RandomFlip' , prob = 0.5 ), dict ( type = 'PackDetInputs' ) ] test_pipeline = [ dict ( type = 'LoadImageFromFile' , file_client_args = file_client_args ), dict ( type = 'Resize' , scale = ( 1000 , 600 ), keep_ratio = True ), # avoid bboxes being resized dict ( type = 'LoadAnnotations' , with_bbox = True ), dict ( type = 'PackDetInputs' , meta_keys = ( 'img_id' , 'img_path' , 'ori_shape' , 'img_shape' , 'scale_factor' , 'instances' ) ) ] train_dataloader = dict ( batch_size = 2 , num_workers = 2 , persistent_workers = True , sampler = dict ( type = 'DefaultSampler' , shuffle = True ), batch_sampler = dict ( type = 'AspectRatioBatchSampler' ), dataset = dict ( type = dataset_type , attribute_cfg = attribute_cfg , data_root = data_root , ann_file = train_ann , filter_cfg = dict ( filter_empty_gt = True , min_size = 32 , bbox_min_size = 32 ), pipeline = train_pipeline ) ) val_dataloader = dict ( batch_size = 1 , num_workers = 2 , persistent_workers = True , drop_last = False , sampler = dict ( type = 'DefaultSampler' , shuffle = False ), dataset = dict ( type = dataset_type , attribute_cfg = attribute_cfg , data_root = data_root , ann_file = val_ann , test_mode = True , pipeline = test_pipeline )) test_dataloader = val_dataloader # Pascal VOC2007 uses `11points` as default evaluate mode, while PASCAL # VOC2012 defaults to use 'area'. # val_evaluator = dict(type='VOCMetric', metric='mAP', eval_mode='11points') val_evaluator = dict ( type = 'CocoMetric' , metric = 'bbox' ) test_evaluator = val_evaluator # training schedule, voc dataset is repeated 3 times, in # `_base_/datasets/voc0712.py`, so the actual epoch = 4 * 3 = 12 max_epochs = 4 train_cfg = dict ( type = 'EpochBasedTrainLoop' , max_epochs = max_epochs , val_interval = 1 ) val_cfg = dict ( type = 'ValLoop' ) test_cfg = dict ( type = 'TestLoop' ) # learning rate param_scheduler = [ dict ( type = 'MultiStepLR' , begin = 0 , end = max_epochs , by_epoch = True , milestones = [ 3 ], gamma = 0.1 ) ] # optimizer optim_wrapper = dict ( type = 'OptimWrapper' , optimizer = dict ( type = 'SGD' , lr = 0.01 , momentum = 0.9 , weight_decay = 0.0001 )) # Default setting for scaling LR automatically # - `enable` means enable scaling LR automatically # or not by default. # - `base_batch_size` = (8 GPUs) x (2 samples per GPU). auto_scale_lr = dict ( enable = False , base_batch_size = 16 ) gpu_ids = range ( 0 , 8 )","title":"2. \u4fee\u6539\u914d\u7f6e\u6587\u4ef6"},{"location":"tutorials/train_test/openmmlab/#3","text":"\u5355\u5361\u8bad\u7ec3 python tools/train.py { path_to_config_file } \u6bd4\u5982\uff1a python tools/train.py config/dsdl/voc2007.py \u96c6\u7fa4\u8bad\u7ec3 ./tools/slurm_train.sh { partition } { job_name } { config_file } { work_dir } { gpu_nums } \u5f53\u51fa\u73b0\u5982\u4e0b\u65e5\u5fd7\u65f6\uff0c\u8868\u793a\u8bad\u7ec3\u6b63\u5728\u8fdb\u884c\u4e2d\uff1a 2022 /12/13 19 :00:05 - mmengine - INFO - Checkpoints will be saved to /nvme/wufan/project/mmlab2.x/work_dirs/voc_dsdl. 2022 /12/13 19 :00:12 - mmengine - INFO - Epoch ( train ) [ 1 ][ 50 /3104 ] lr: 1 .0000e-02 eta: 0 :26:28 time: 0 .1285 data_time: 0 .0040 memory: 2581 loss: 0 .7176 loss_rpn_cls: 0 .1582 loss_rpn_bbox: 0 .0301 loss_cls: 0 .3771 acc: 92 .1875 loss_bbox: 0 .1522 2022 /12/13 19 :00:18 - mmengine - INFO - Epoch ( train ) [ 1 ][ 100 /3104 ] lr: 1 .0000e-02 eta: 0 :25:32 time: 0 .1204 data_time: 0 .0024 memory: 2581 loss: 0 .5537 loss_rpn_cls: 0 .0577 loss_rpn_bbox: 0 .0220 loss_cls: 0 .2768 acc: 87 .8906 loss_bbox: 0 .1972 2022 /12/13 19 :00:24 - mmengine - INFO - Epoch ( train ) [ 1 ][ 150 /3104 ] lr: 1 .0000e-02 eta: 0 :25:12 time: 0 .1210 data_time: 0 .0025 memory: 2581 loss: 0 .6777 loss_rpn_cls: 0 .0885 loss_rpn_bbox: 0 .0340 loss_cls: 0 .3201 acc: 92 .6758 loss_bbox: 0 .2350 ...","title":"3 \u6a21\u578b\u8bad\u7ec3"},{"location":"tutorials/train_test/openmmlab/#4","text":"python tools/test.py { path_to_config_file } { path_to_checkpoint_file } \u6bd4\u5982\uff1a python tools/test.py config/dsdl/voc2007.py work_dirs/voc2007/epoch_4.pth \u63a8\u7406\u7ed3\u679c\u5982\u4e0b\uff1a 2022 /12/21 11 :07:13 - mmengine - INFO - Load checkpoint from work_dirs/voc2007/epoch_4.pth 2022 /12/21 11 :07:15 - mmengine - INFO - Epoch ( test ) [ 50 /4952 ] eta: 0 :02:17 time: 0 .0280 data_time: 0 .0028 memory: 348 ... 2022 /12/21 11 :09:15 - mmengine - INFO - Epoch ( test ) [ 4950 /4952 ] eta: 0 :00:00 time: 0 .0246 data_time: 0 .0009 memory: 360 2022 /12/21 11 :09:15 - mmengine - INFO - Converting ground truth to coco format... 2022 /12/21 11 :09:16 - mmengine - INFO - Evaluating bbox... 2022 /12/21 11 :09:25 - mmengine - INFO - bbox_mAP_copypaste: 0 .454 0 .757 0 .479 0 .123 0 .340 0 .536 2022 /12/21 11 :09:25 - mmengine - INFO - Epoch ( test ) [ 4952 /4952 ] coco/bbox_mAP: 0 .4540 coco/bbox_mAP_50: 0 .7570 coco/bbox_mAP_75: 0 .4790 coco/bbox_mAP_s: 0 .1230 coco/bbox_mAP_m: 0 .3400 coco/bbox_mAP_l: 0 .5360","title":"4 \u6a21\u578b\u6d4b\u8bd5"},{"location":"tutorials/train_test/pytorch/","text":"\u57fa\u4e8eDSDL\u6570\u636e\u7684\u8bad\u7ec3\u63a8\u7406\uff08Pytorch\uff09 \u8fd9\u91cc\u4ee5MNIST\u4e3a\u4f8b\uff0c\u5c55\u793adsdl\u5982\u4f55\u5728Pytorch\u6846\u67b6\u4e0a\u8fdb\u884c\u8bad\u7ec3\u3002 1. \u521d\u59cb\u5316Dataset dsdl\u63d0\u4f9b\u4e86DSDLDataset\u7c7b\uff0c\u53ef\u4ee5\u5f88\u597d\u7684\u652f\u6301Pytorch\u8bad\u7ec3\uff0c\u53ea\u9700\u8981dsdl\u7684yaml\u6587\u4ef6\u548clocation config\uff0c\u5373\u53ef\u521d\u59cb\u5316\u4e00\u4e2aDSDLDataset\u7c7b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from dsdl.dataset import DSDLDataset loc_config = dict( type=\"LocalFileReader\", working_dir=\"path to MNIST original\" ) train_yaml = \"path to MNIST dsdl train yaml file\" val_yaml = \"path to MNIST dsdl val yaml file\" fields_list = [\"Image\", \"Label\"] ds_train = DSDLDataset(dsdl_yaml=train_yaml, location_config=loc_config, required_fields=fields_list) ds_val = DSDLDataset(dsdl_yaml=val_yaml, location_config=loc_config, required_fields=fields_list) \u4ee3\u7801\u4e2d\uff0cfield_list\u53c2\u6570\u662f\u7528\u6765\u544a\u8bc9\u7a0b\u5e8f\uff0c\u7528\u6237\u6240\u9700\u8981\u7684\u5b57\u6bb5\u662f\u54ea\u4e9b\uff08\u5982\u679c\u6ca1\u6709\u7ed9\u5b9a\u7684\u8bdd\uff0c\u4f1a\u9ed8\u8ba4\u63d0\u53d6\u4e3b\u8981\u5b57\u6bb5\uff09\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5\u5206\u7c7b\u4efb\u52a1\u4e3a\u4f8b\uff0c\u63d0\u53d6\u6570\u636e\u7684'Image', 'Label'\u4e24\u4e2a\u5b57\u6bb5\u3002 2. \u5b9a\u4e49\u9884\u5904\u7406pipline\u5e76\u751f\u6210Dataloader DSDLDataset \u652f\u6301\u8c03\u7528set_transform()\u65b9\u6cd5\u6765\u5b9a\u4e49\u6570\u636e\u5904\u7406pipline\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u5bf9\u56fe\u7247\u8fdb\u884c\u8bfb\u53d6 -> \u8f6c\u4e3atensor -> \u6807\u51c6\u5316\u7b49\u5904\u7406\u6d41\u7a0b, \u540c\u65f6\u4e5f\u5b9a\u4e49\u4e86\u5bf9\u6807\u7b7e\u7684\u5904\u7406\u6d41\u7a0b\u3002 import numpy as np from torchvision import transforms T = { \"Image\": transforms.Compose([ lambda x: x[0].to_image().convert(mode='RGB'), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]) ]), \"Label\": transforms.Compose([ lambda x: np.array([x[0].index_in_domain() - 1]) ]) } ds_train.set_transform(T) ds_val.set_transform(T) DSDLDatset\u7c7b\u62e5\u6709\u76f4\u63a5\u8f93\u51fapytorch DataLoader\u7684\u63a5\u53e3\uff0c\u8c03\u7528\u4ee3\u7801\u5982\u4e0b\uff1a dl_train = ds_train.to_pytorch(batch_size=32) dl_val = ds_val.to_pytorch(batch_size=32) to_pytorch\u65b9\u6cd5\u540c\u6837\u652f\u6301\u4f20\u9012\u4e00\u4e9b\u5176\u4ed6\u53c2\u6570\uff0c\u6bd4\u5982shuffle\uff0cnum_works\u7b49\u7b49\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003Pytorch\u7684 DataLoader\u7c7b \u3002 3. \u5b9a\u4e49\u6a21\u578b\u548c\u4f18\u5316\u5668 \u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684resnet18\u5206\u7c7b\u5668, \u5e76\u91c7\u7528SGD\u4f18\u5316\u5668\uff0c\u540c\u65f6\u5b9a\u4e49\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\uff1a import torch from torchvision import models model = models.resnet18(pretrained=False) class_nums = 1000 model.fc = torch.nn.Linear(model.fc.in_features, class_nums) device = torch.device(\"cuda:0\") # device = \"cpu\" # use cpu if cuda is not available model.to(device) criterion = torch.nn.CrossEntropyLoss() optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.1) 4. \u8fdb\u884c\u8bad\u7ec3 \u5b9a\u4e49\u8bad\u7ec3\u6d41\u7a0b: import time def train_one_epoch(model, optimizer, data_loader, device, image_key = 'Image', label_key = 'Label'): model.train() running_loss = 0.0 start_time = time.time() total = 0 correct = 0 for i, data in enumerate(data_loader): # get the inputs; data is a dict contains image and label inputs = data[image_key] labels = torch.squeeze(data[label_key]) inputs = inputs.to(device) labels = labels.to(device) optimizer.zero_grad() outputs = model(inputs.float()) loss = criterion(outputs, labels) loss.backward() optimizer.step() _, predicted = torch.max(outputs.data, 1) total += labels.size(0) correct += (predicted == labels).sum().item() accuracy = 100 * correct / total running_loss += loss.item() if i % 100 == 0 and i > 0: batch_time = time.time() cost = (batch_time-start_time) print(' [%5d] loss: %.3f, time cost: %.2f, accuracy: %.2f %%' % (i, running_loss, cost, accuracy)) running_loss = 0.0 total = 0 correct = 0 \u5f00\u59cb\u8bad\u7ec3\uff1a num_epochs = 5 for epoch in range(num_epochs): print(\"------------------ Training Epoch {} ------------------\".format(epoch+1)) train_one_epoch(model, optimizer, dl_train, device) \u51fa\u73b0\u5982\u4e0b\u8bad\u7ec3\u65e5\u5fd7\u65f6\u8868\u793a\u6570\u636e\u6b63\u5e38\u8bad\u7ec3\uff1a ------------------ Training Epoch 1 ------------------ [ 100] loss: 77.967, time cost: 4.43, accuracy: 86.63 % [ 200] loss: 14.327, time cost: 8.68, accuracy: 95.75 % [ 300] loss: 9.919, time cost: 12.98, accuracy: 97.05 % [ 400] loss: 8.642, time cost: 17.23, accuracy: 97.47 % [ 500] loss: 8.459, time cost: 21.56, accuracy: 97.40 % ------------------ Training Epoch 2 ------------------ [ 100] loss: 5.610, time cost: 4.40, accuracy: 98.29 % [ 200] loss: 4.055, time cost: 8.73, accuracy: 98.83 % [ 300] loss: 3.560, time cost: 13.00, accuracy: 98.91 % [ 400] loss: 3.555, time cost: 17.31, accuracy: 98.99 % [ 500] loss: 3.243, time cost: 21.60, accuracy: 99.09 % ------------------ Training Epoch 3 ------------------ [ 100] loss: 2.235, time cost: 4.37, accuracy: 99.46 % [ 200] loss: 1.480, time cost: 8.69, accuracy: 99.72 % [ 300] loss: 1.259, time cost: 12.98, accuracy: 99.73 % [ 400] loss: 1.315, time cost: 17.27, accuracy: 99.72 % [ 500] loss: 1.207, time cost: 21.55, accuracy: 99.77 % ------------------ Training Epoch 4 ------------------ [ 100] loss: 0.816, time cost: 4.36, accuracy: 99.88 % [ 200] loss: 0.483, time cost: 8.67, accuracy: 99.98 % [ 300] loss: 0.510, time cost: 12.98, accuracy: 99.94 % [ 400] loss: 0.476, time cost: 17.26, accuracy: 99.94 % [ 500] loss: 0.407, time cost: 21.56, accuracy: 99.97 % ------------------ Training Epoch 5 ------------------ [ 100] loss: 0.315, time cost: 4.40, accuracy: 99.99 % [ 200] loss: 0.224, time cost: 8.78, accuracy: 100.00 % [ 300] loss: 0.237, time cost: 13.09, accuracy: 100.00 % [ 400] loss: 0.226, time cost: 17.40, accuracy: 100.00 % [ 500] loss: 0.210, time cost: 21.67, accuracy: 100.00 % 5. \u8fdb\u884c\u6d4b\u8bd5 \u5b9a\u4e49\u6d4b\u8bd5\u6d41\u7a0b\u5982\u4e0b\uff1a def test_model(model, data_loader, device, image_key = 'Image', label_key = 'Label'): model.eval() start_time = time.time() total = 0 correct = 0 with torch.no_grad(): for i, data in enumerate(data_loader): # get the inputs; data is a dict contains image and label inputs = data[image_key] labels = torch.squeeze(data[label_key]) inputs = inputs.to(device) labels = labels.to(device) optimizer.zero_grad() outputs = model(inputs.float()) _, predicted = torch.max(outputs.data, 1) total += labels.size(0) correct += (predicted == labels).sum().item() accuracy = 100 * correct / total print(' Testing accuracy: %.2f %%' %(accuracy)) \u5f00\u59cb\u5728\u6d4b\u8bd5\u96c6\u4e0a\u8fdb\u884c\u6d4b\u8bd5\uff1a test_model(model, dl_val, device) \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a Testing accuracy: 99.04 % \u53ef\u4ee5\u770b\u5230\uff0cMNIST\u6574\u4f53\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\uff0cresnet18\u7ecf\u8fc75\u4e2aepoch\u7684\u8bad\u7ec3\uff0c\u5373\u53ef\u5728\u6d4b\u8bd5\u96c6\u8fbe\u523099.04\u7684\u7cbe\u5ea6\u3002 \u5b8c\u6574\u7684\u4ee3\u7801\u8bf7\u53c2\u8003 pytorch_classification.py . \u62d3\u5c55\u9605\u8bfb A. set_transform \u548c pre_transform DSDLDatset\u652f\u6301\u4e24\u79cd\u5b9a\u4e49\u9884\u5904\u7406pipline\u7684\u65b9\u6cd5\uff0c pre_transform \u548c set_transform \uff0c\u4e24\u8005\u7684\u8c03\u7528\u65b9\u5f0f\u5b8c\u5168\u76f8\u540c\uff0c\u533a\u522b\u5982\u4e0b\uff1a pre_transform \u4f1a\u5728\u5b9a\u4e49\u5904\u7406\u6d41\u7a0b\u7684\u65f6\u5019\u5c06\u5185\u5b58\u4e2d\u7684\u6570\u636e\u540c\u6b65\u8d70\u4e00\u904dpipline\uff0c set_transform \u5219\u4e0d\u4f1a\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u8fdb\u884c\uff0c\u800c\u662f\u5728\u8bad\u7ec3\u8fed\u4ee3\u7684\u65f6\u5019\u624d\u8fdb\u884cpipline\u64cd\u4f5c\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6570\u636e\u96c6\u4e0d\u5927\uff0c\u4e14pipline\u64cd\u4f5c\u662f\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u5efa\u8bae\u91c7\u7528\u524d\u8005\uff0c\u8fd9\u4f1a\u4f7f\u8bad\u7ec3\u8fed\u4ee3\u8fc7\u7a0b\u52a0\u901f\u5f88\u591a\uff0c\u800c\u5982\u679c\u6570\u636e\u96c6\u8f83\u5927\uff08\u51fa\u73b0\u5185\u5b58\u4e0d\u591f\u7684\u60c5\u51b5\uff09\u6216\u8005pipline\u4e2d\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u968f\u673a\u6027\u7684\u64cd\u4f5c\uff08\u6bd4\u5982\u8fdb\u884c\u968f\u673a\u7684\u6570\u636e\u589e\u5f3a\uff09\uff0c\u5219\u63a8\u8350\u4f7f\u7528\u540e\u8005\u3002\u6b64\u5916\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\uff0c\u53ea\u9700\u8981\u6ce8\u610f\u548cpre_transform\u7684\u8f93\u51fa\u548cset_transform \u7684\u8f93\u5165\u80fd\u591f\u5bf9\u63a5\u5373\u53ef\u3002 B. Field\u7684\u5185\u7f6e\u65b9\u6cd5 \u5728\u672c\u6559\u7a0b\u7b2c\u4e8c\u8282\uff0c\u5173\u4e8e \u5b9a\u4e49\u9884\u5904\u7406pipline \u90e8\u5206\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e24\u4e2aField\u5185\u7f6e\u65b9\u6cd5\uff0c\u5206\u522b\u4e3aImage Field\u7684 to_image() \u4ee5\u53caLabel Field\u7684 index_in_domain() \u65b9\u6cd5\uff0c\u524d\u8005\u80fd\u83b7\u53d6\u8bfb\u53d6\u540e\u7684\u56fe\u7247\uff08PIL\u8bfb\u53d6\u65b9\u5f0f\uff09\uff0c\u540e\u8005\u5219\u80fd\u5feb\u901f\u83b7\u53d6\u6307\u5b9a\u7c7b\u522b\u5728ClassDom\u4e2d\u7684\u7d22\u5f15\u4fe1\u606f\uff08\u4ece1\u5f00\u59cb\uff09\u3002\u5b9e\u9645\u4e0a\uff0c\u5728DSDL\u4e2d\uff0c\u6211\u4eec\u5c06\u5404\u4e2aField\u5e38\u89c1\u7684\u5904\u7406\u65b9\u6cd5\u90fd\u5199\u8fdb\u4e86Field\u7684\u5185\u7f6e\u65b9\u6cd5\uff0c\u7528\u6237\u80fd\u5f88\u65b9\u4fbf\u7684\u5bf9\u5176\u8fdb\u884c\u8f6c\u6362\u6216\u8005\u5904\u7406\u3002\u66f4\u591aField\u7684\u5185\u7f6e\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003 API\u63a5\u53e3\u6587\u6863 .","title":"Pytorch"},{"location":"tutorials/train_test/pytorch/#dsdlpytorch","text":"\u8fd9\u91cc\u4ee5MNIST\u4e3a\u4f8b\uff0c\u5c55\u793adsdl\u5982\u4f55\u5728Pytorch\u6846\u67b6\u4e0a\u8fdb\u884c\u8bad\u7ec3\u3002","title":"\u57fa\u4e8eDSDL\u6570\u636e\u7684\u8bad\u7ec3\u63a8\u7406\uff08Pytorch\uff09"},{"location":"tutorials/train_test/pytorch/#1-dataset","text":"dsdl\u63d0\u4f9b\u4e86DSDLDataset\u7c7b\uff0c\u53ef\u4ee5\u5f88\u597d\u7684\u652f\u6301Pytorch\u8bad\u7ec3\uff0c\u53ea\u9700\u8981dsdl\u7684yaml\u6587\u4ef6\u548clocation config\uff0c\u5373\u53ef\u521d\u59cb\u5316\u4e00\u4e2aDSDLDataset\u7c7b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from dsdl.dataset import DSDLDataset loc_config = dict( type=\"LocalFileReader\", working_dir=\"path to MNIST original\" ) train_yaml = \"path to MNIST dsdl train yaml file\" val_yaml = \"path to MNIST dsdl val yaml file\" fields_list = [\"Image\", \"Label\"] ds_train = DSDLDataset(dsdl_yaml=train_yaml, location_config=loc_config, required_fields=fields_list) ds_val = DSDLDataset(dsdl_yaml=val_yaml, location_config=loc_config, required_fields=fields_list) \u4ee3\u7801\u4e2d\uff0cfield_list\u53c2\u6570\u662f\u7528\u6765\u544a\u8bc9\u7a0b\u5e8f\uff0c\u7528\u6237\u6240\u9700\u8981\u7684\u5b57\u6bb5\u662f\u54ea\u4e9b\uff08\u5982\u679c\u6ca1\u6709\u7ed9\u5b9a\u7684\u8bdd\uff0c\u4f1a\u9ed8\u8ba4\u63d0\u53d6\u4e3b\u8981\u5b57\u6bb5\uff09\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5\u5206\u7c7b\u4efb\u52a1\u4e3a\u4f8b\uff0c\u63d0\u53d6\u6570\u636e\u7684'Image', 'Label'\u4e24\u4e2a\u5b57\u6bb5\u3002","title":"1. \u521d\u59cb\u5316Dataset"},{"location":"tutorials/train_test/pytorch/#2-piplinedataloader","text":"DSDLDataset \u652f\u6301\u8c03\u7528set_transform()\u65b9\u6cd5\u6765\u5b9a\u4e49\u6570\u636e\u5904\u7406pipline\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u5bf9\u56fe\u7247\u8fdb\u884c\u8bfb\u53d6 -> \u8f6c\u4e3atensor -> \u6807\u51c6\u5316\u7b49\u5904\u7406\u6d41\u7a0b, \u540c\u65f6\u4e5f\u5b9a\u4e49\u4e86\u5bf9\u6807\u7b7e\u7684\u5904\u7406\u6d41\u7a0b\u3002 import numpy as np from torchvision import transforms T = { \"Image\": transforms.Compose([ lambda x: x[0].to_image().convert(mode='RGB'), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]) ]), \"Label\": transforms.Compose([ lambda x: np.array([x[0].index_in_domain() - 1]) ]) } ds_train.set_transform(T) ds_val.set_transform(T) DSDLDatset\u7c7b\u62e5\u6709\u76f4\u63a5\u8f93\u51fapytorch DataLoader\u7684\u63a5\u53e3\uff0c\u8c03\u7528\u4ee3\u7801\u5982\u4e0b\uff1a dl_train = ds_train.to_pytorch(batch_size=32) dl_val = ds_val.to_pytorch(batch_size=32) to_pytorch\u65b9\u6cd5\u540c\u6837\u652f\u6301\u4f20\u9012\u4e00\u4e9b\u5176\u4ed6\u53c2\u6570\uff0c\u6bd4\u5982shuffle\uff0cnum_works\u7b49\u7b49\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003Pytorch\u7684 DataLoader\u7c7b \u3002","title":"2. \u5b9a\u4e49\u9884\u5904\u7406pipline\u5e76\u751f\u6210Dataloader"},{"location":"tutorials/train_test/pytorch/#3","text":"\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684resnet18\u5206\u7c7b\u5668, \u5e76\u91c7\u7528SGD\u4f18\u5316\u5668\uff0c\u540c\u65f6\u5b9a\u4e49\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\uff1a import torch from torchvision import models model = models.resnet18(pretrained=False) class_nums = 1000 model.fc = torch.nn.Linear(model.fc.in_features, class_nums) device = torch.device(\"cuda:0\") # device = \"cpu\" # use cpu if cuda is not available model.to(device) criterion = torch.nn.CrossEntropyLoss() optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.1)","title":"3. \u5b9a\u4e49\u6a21\u578b\u548c\u4f18\u5316\u5668"},{"location":"tutorials/train_test/pytorch/#4","text":"\u5b9a\u4e49\u8bad\u7ec3\u6d41\u7a0b: import time def train_one_epoch(model, optimizer, data_loader, device, image_key = 'Image', label_key = 'Label'): model.train() running_loss = 0.0 start_time = time.time() total = 0 correct = 0 for i, data in enumerate(data_loader): # get the inputs; data is a dict contains image and label inputs = data[image_key] labels = torch.squeeze(data[label_key]) inputs = inputs.to(device) labels = labels.to(device) optimizer.zero_grad() outputs = model(inputs.float()) loss = criterion(outputs, labels) loss.backward() optimizer.step() _, predicted = torch.max(outputs.data, 1) total += labels.size(0) correct += (predicted == labels).sum().item() accuracy = 100 * correct / total running_loss += loss.item() if i % 100 == 0 and i > 0: batch_time = time.time() cost = (batch_time-start_time) print(' [%5d] loss: %.3f, time cost: %.2f, accuracy: %.2f %%' % (i, running_loss, cost, accuracy)) running_loss = 0.0 total = 0 correct = 0 \u5f00\u59cb\u8bad\u7ec3\uff1a num_epochs = 5 for epoch in range(num_epochs): print(\"------------------ Training Epoch {} ------------------\".format(epoch+1)) train_one_epoch(model, optimizer, dl_train, device) \u51fa\u73b0\u5982\u4e0b\u8bad\u7ec3\u65e5\u5fd7\u65f6\u8868\u793a\u6570\u636e\u6b63\u5e38\u8bad\u7ec3\uff1a ------------------ Training Epoch 1 ------------------ [ 100] loss: 77.967, time cost: 4.43, accuracy: 86.63 % [ 200] loss: 14.327, time cost: 8.68, accuracy: 95.75 % [ 300] loss: 9.919, time cost: 12.98, accuracy: 97.05 % [ 400] loss: 8.642, time cost: 17.23, accuracy: 97.47 % [ 500] loss: 8.459, time cost: 21.56, accuracy: 97.40 % ------------------ Training Epoch 2 ------------------ [ 100] loss: 5.610, time cost: 4.40, accuracy: 98.29 % [ 200] loss: 4.055, time cost: 8.73, accuracy: 98.83 % [ 300] loss: 3.560, time cost: 13.00, accuracy: 98.91 % [ 400] loss: 3.555, time cost: 17.31, accuracy: 98.99 % [ 500] loss: 3.243, time cost: 21.60, accuracy: 99.09 % ------------------ Training Epoch 3 ------------------ [ 100] loss: 2.235, time cost: 4.37, accuracy: 99.46 % [ 200] loss: 1.480, time cost: 8.69, accuracy: 99.72 % [ 300] loss: 1.259, time cost: 12.98, accuracy: 99.73 % [ 400] loss: 1.315, time cost: 17.27, accuracy: 99.72 % [ 500] loss: 1.207, time cost: 21.55, accuracy: 99.77 % ------------------ Training Epoch 4 ------------------ [ 100] loss: 0.816, time cost: 4.36, accuracy: 99.88 % [ 200] loss: 0.483, time cost: 8.67, accuracy: 99.98 % [ 300] loss: 0.510, time cost: 12.98, accuracy: 99.94 % [ 400] loss: 0.476, time cost: 17.26, accuracy: 99.94 % [ 500] loss: 0.407, time cost: 21.56, accuracy: 99.97 % ------------------ Training Epoch 5 ------------------ [ 100] loss: 0.315, time cost: 4.40, accuracy: 99.99 % [ 200] loss: 0.224, time cost: 8.78, accuracy: 100.00 % [ 300] loss: 0.237, time cost: 13.09, accuracy: 100.00 % [ 400] loss: 0.226, time cost: 17.40, accuracy: 100.00 % [ 500] loss: 0.210, time cost: 21.67, accuracy: 100.00 %","title":"4. \u8fdb\u884c\u8bad\u7ec3"},{"location":"tutorials/train_test/pytorch/#5","text":"\u5b9a\u4e49\u6d4b\u8bd5\u6d41\u7a0b\u5982\u4e0b\uff1a def test_model(model, data_loader, device, image_key = 'Image', label_key = 'Label'): model.eval() start_time = time.time() total = 0 correct = 0 with torch.no_grad(): for i, data in enumerate(data_loader): # get the inputs; data is a dict contains image and label inputs = data[image_key] labels = torch.squeeze(data[label_key]) inputs = inputs.to(device) labels = labels.to(device) optimizer.zero_grad() outputs = model(inputs.float()) _, predicted = torch.max(outputs.data, 1) total += labels.size(0) correct += (predicted == labels).sum().item() accuracy = 100 * correct / total print(' Testing accuracy: %.2f %%' %(accuracy)) \u5f00\u59cb\u5728\u6d4b\u8bd5\u96c6\u4e0a\u8fdb\u884c\u6d4b\u8bd5\uff1a test_model(model, dl_val, device) \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a Testing accuracy: 99.04 % \u53ef\u4ee5\u770b\u5230\uff0cMNIST\u6574\u4f53\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\uff0cresnet18\u7ecf\u8fc75\u4e2aepoch\u7684\u8bad\u7ec3\uff0c\u5373\u53ef\u5728\u6d4b\u8bd5\u96c6\u8fbe\u523099.04\u7684\u7cbe\u5ea6\u3002 \u5b8c\u6574\u7684\u4ee3\u7801\u8bf7\u53c2\u8003 pytorch_classification.py .","title":"5. \u8fdb\u884c\u6d4b\u8bd5"},{"location":"tutorials/train_test/pytorch/#_1","text":"","title":"\u62d3\u5c55\u9605\u8bfb"},{"location":"tutorials/train_test/pytorch/#a-set_transform-pre_transform","text":"DSDLDatset\u652f\u6301\u4e24\u79cd\u5b9a\u4e49\u9884\u5904\u7406pipline\u7684\u65b9\u6cd5\uff0c pre_transform \u548c set_transform \uff0c\u4e24\u8005\u7684\u8c03\u7528\u65b9\u5f0f\u5b8c\u5168\u76f8\u540c\uff0c\u533a\u522b\u5982\u4e0b\uff1a pre_transform \u4f1a\u5728\u5b9a\u4e49\u5904\u7406\u6d41\u7a0b\u7684\u65f6\u5019\u5c06\u5185\u5b58\u4e2d\u7684\u6570\u636e\u540c\u6b65\u8d70\u4e00\u904dpipline\uff0c set_transform \u5219\u4e0d\u4f1a\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u8fdb\u884c\uff0c\u800c\u662f\u5728\u8bad\u7ec3\u8fed\u4ee3\u7684\u65f6\u5019\u624d\u8fdb\u884cpipline\u64cd\u4f5c\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6570\u636e\u96c6\u4e0d\u5927\uff0c\u4e14pipline\u64cd\u4f5c\u662f\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u5efa\u8bae\u91c7\u7528\u524d\u8005\uff0c\u8fd9\u4f1a\u4f7f\u8bad\u7ec3\u8fed\u4ee3\u8fc7\u7a0b\u52a0\u901f\u5f88\u591a\uff0c\u800c\u5982\u679c\u6570\u636e\u96c6\u8f83\u5927\uff08\u51fa\u73b0\u5185\u5b58\u4e0d\u591f\u7684\u60c5\u51b5\uff09\u6216\u8005pipline\u4e2d\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u968f\u673a\u6027\u7684\u64cd\u4f5c\uff08\u6bd4\u5982\u8fdb\u884c\u968f\u673a\u7684\u6570\u636e\u589e\u5f3a\uff09\uff0c\u5219\u63a8\u8350\u4f7f\u7528\u540e\u8005\u3002\u6b64\u5916\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\uff0c\u53ea\u9700\u8981\u6ce8\u610f\u548cpre_transform\u7684\u8f93\u51fa\u548cset_transform \u7684\u8f93\u5165\u80fd\u591f\u5bf9\u63a5\u5373\u53ef\u3002","title":"A. set_transform \u548c  pre_transform"},{"location":"tutorials/train_test/pytorch/#b-field","text":"\u5728\u672c\u6559\u7a0b\u7b2c\u4e8c\u8282\uff0c\u5173\u4e8e \u5b9a\u4e49\u9884\u5904\u7406pipline \u90e8\u5206\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e24\u4e2aField\u5185\u7f6e\u65b9\u6cd5\uff0c\u5206\u522b\u4e3aImage Field\u7684 to_image() \u4ee5\u53caLabel Field\u7684 index_in_domain() \u65b9\u6cd5\uff0c\u524d\u8005\u80fd\u83b7\u53d6\u8bfb\u53d6\u540e\u7684\u56fe\u7247\uff08PIL\u8bfb\u53d6\u65b9\u5f0f\uff09\uff0c\u540e\u8005\u5219\u80fd\u5feb\u901f\u83b7\u53d6\u6307\u5b9a\u7c7b\u522b\u5728ClassDom\u4e2d\u7684\u7d22\u5f15\u4fe1\u606f\uff08\u4ece1\u5f00\u59cb\uff09\u3002\u5b9e\u9645\u4e0a\uff0c\u5728DSDL\u4e2d\uff0c\u6211\u4eec\u5c06\u5404\u4e2aField\u5e38\u89c1\u7684\u5904\u7406\u65b9\u6cd5\u90fd\u5199\u8fdb\u4e86Field\u7684\u5185\u7f6e\u65b9\u6cd5\uff0c\u7528\u6237\u80fd\u5f88\u65b9\u4fbf\u7684\u5bf9\u5176\u8fdb\u884c\u8f6c\u6362\u6216\u8005\u5904\u7406\u3002\u66f4\u591aField\u7684\u5185\u7f6e\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003 API\u63a5\u53e3\u6587\u6863 .","title":"B. Field\u7684\u5185\u7f6e\u65b9\u6cd5"},{"location":"tutorials/train_test/tensorflow/","text":"\u5185\u5bb9\u5f85\u66f4\u65b0\u3002","title":"Tensorflow"},{"location":"tutorials/transfer/Classification/","text":"\u5b9e\u4f8b\u6f14\u793a- \u56fe\u50cf\u5206\u7c7b \uff08\u53c2\u7167tutorials/transfer/Detection.md\uff0c\u7531\u81f4\u8fdc\u8865\u5145\uff09","title":"\u5b9e\u4f8b\u6f14\u793a- \u56fe\u50cf\u5206\u7c7b"},{"location":"tutorials/transfer/Classification/#-","text":"\uff08\u53c2\u7167tutorials/transfer/Detection.md\uff0c\u7531\u81f4\u8fdc\u8865\u5145\uff09","title":"\u5b9e\u4f8b\u6f14\u793a- \u56fe\u50cf\u5206\u7c7b"},{"location":"tutorials/transfer/Detection/","text":"\u5b9e\u4f8b\u6f14\u793a- \u76ee\u6807\u68c0\u6d4b \u8be5\u6559\u7a0b\u4ecb\u7ecd\u4e86\u5982\u4f55\u5c06\u4e00\u4e2a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u8f6c\u6362\u4e3aDSDL\u683c\u5f0f\uff0c\u8fd9\u91cc\u4ee5VOC\u4e3a\u4f8b\u505a\u4e00\u4e2a\u4ecb\u7ecd\u3002\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u6570\u636e\u96c6\u8c03\u7814 DSDL\u6a21\u677f\u5236\u5b9a \u6570\u636e\u96c6\u8f6c\u6362 \u6570\u636e\u96c6\u9a8c\u8bc1 \u6570\u636e\u96c6\u8c03\u7814 \u8c03\u7814\u9700\u8981\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u7ed3\u6784 \u539f\u59cb\u6570\u636e\u96c6\u6807\u6ce8\u7684\u539f\u59cb\u5b57\u6bb5\u53ca\u5176\u542b\u4e49 \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u7ed3\u6784 VOC2007/ \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001 .xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001 .jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032 .png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032 .png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ... \u6211\u4eec\u8fd9\u91cc\u53ea\u4ee5\u68c0\u6d4b\u4efb\u52a1\u4e3a\u4f8b\u751f\u6210\u6a21\u677f\uff0c\u56e0\u6b64\u53ea\u9700\u8981Annotations/\u3001JPEGImages/\u8fd9\u4e24\u4e2a\u6587\u4ef6\u5939\uff0c\u53e6\u5916\uff0c\u8bad\u7ec3\u6d4b\u8bd5\u96c6\u5212\u5206\uff0c\u9700\u8981\u7528ImageSets/Main/train.txt\u3001val.txt\u3001test.txt\u8fd9\u4e09\u4e2a\u6587\u4ef6\u3002 \u539f\u59cb\u6570\u636e\u96c6\u6807\u6ce8\u7684\u539f\u59cb\u5b57\u6bb5\u53ca\u5176\u542b\u4e49 \u6807\u6ce8\u7c7b\u578b\u5982\u4e0b\uff08\u4ee5Annotations/000001.xml\u4e3a\u4f8b\uff09\uff1a <annotation> <folder> VOC2007 </folder> # \u6587\u4ef6\u5939 <filename> 000001.jpg </filename> # \u56fe\u7247\u6587\u4ef6\u540d <source> # \u56fe\u50cf\u5143\u4fe1\u606f <database> The VOC2007 Database </database> # \u6570\u636e\u96c6\u540d\u79f0 <annotation> PASCAL VOC2007 </annotation> # \u6807\u6ce8\u7c7b\u578b <image> flickr </image> # \u6765\u6e90 <flickrid> 341012865 </flickrid> # \u6765\u6e90ID </source> <owner> # \u6e90\u4fe1\u606f <flickrid> Fried Camels </flickrid> <name> Jinky the Fruit Bat </name> </owner> <size> <width> 353 </width> # \u56fe\u7247\u5bbd <height> 500 </height> # \u56fe\u7247\u9ad8 <depth> 3 </depth> # \u56fe\u7247\u901a\u9053\u6570 </size> <segmented> 0 </segmented> # \u662f\u5426\u7528\u4e8e\u5206\u5272 <object> # \u6807\u6ce8\u90e8\u5206 <name> dog </name> # \u6807\u7b7e <pose> Left </pose> # \u59ff\u6001 <truncated> 1 </truncated> # \u7269\u4f53\u662f\u5426\u88ab\u90e8\u5206\u906e\u6321\uff08>15%\uff09 <difficult> 0 </difficult> # \u662f\u5426\u4e3a\u96be\u4ee5\u8fa8\u8bc6\u7684\u7269\u4f53 <bndbox> <xmin> 48 </xmin> # \u5de6\u4e0a\u89d2\u70b9\u7684x <ymin> 240 </ymin> # \u5de6\u4e0a\u89d2\u70b9\u7684y <xmax> 195 </xmax> # \u53f3\u4e0b\u89d2\u70b9\u7684x <ymax> 371 </ymax> # \u53f3\u4e0b\u89d2\u70b9\u7684y </bndbox> </object> ... </annotation> \u8fd9\u91cc\u4ee5ImageSets/Main/train.txt\u4e3a\u4f8b\u5c55\u793a\u4e00\u4e0b\u6570\u636e\u96c6segment\u5212\u5206\u7684\u6587\u4ef6\u5185\u5bb9\uff1a 000012 # \u56fe\u7247\u540d\u524d\u7f00 000017 000023 000026 ... DSDL\u6a21\u677f\u5236\u5b9a Yaml\u683c\u5f0f\u89e3\u91ca \u6700\u7ec8\u9700\u8981\u8f6c\u6210\u7684yaml\u6570\u636e\u96c6\u683c\u5f0f\uff0c\u5728\u8fd9\u91cc\u505a\u4e00\u4e2a\u8be6\u7ec6\u89e3\u91ca\u3002\u8f6c\u6210\u540e\u7684DSDL\u6570\u636e\u96c6\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u91cd\u8981\u7684\u6587\u4ef6\uff1a struct\u7684\u5b9a\u4e49\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u6587\u4ef6\u540d\u4e3aobject-detetction.yaml\uff09\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5bf9struct\u505a\u4e00\u4e2a\u660e\u786e\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u6709sample\u7684\u7ed3\u6784\u4f53\u548c\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u7b49\uff0c\u9700\u6307\u660e\u5305\u542b\u4e86\u54ea\u4e9bfield\uff0c\u6bcf\u4e2afield\u7684\u7c7b\u578b\u3002 \u7c7b\u522b\u57df\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e3aVOC2007ClassDom.yaml\uff09\uff1a\u91cc\u9762\u5305\u542b\u4e86\u7c7b\u522b\u5217\u8868\uff0c\u5bf9\u5e94category\u7684\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\u6392\u5e8f\uff09 samples\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5206\u522b\u5206\u4e3atrain.yaml\u548ctrain_samples.json) train.yaml\u4e3b\u8981\u662f\u6307\u660e\u5f15\u7528\u54ea\u4e2astruct\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6587\u4ef6\uff0c\u5e76\u4e14\u6307\u660e\u6570\u636e\u7c7b\u578b\u548c\u5b58\u653e\u8def\u5f84\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9bmeta\u4fe1\u606f train_samples.json\u91cc\u4fdd\u5b58\u4e86\u5b9e\u9645\u7684samples\u4fe1\u606f\uff0c\u5176\u7ec4\u7ec7\u7ed3\u6784\u5fc5\u987b\u548c\u4e4b\u524d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u5339\u914d \u540e\u8fb9\u4f1a\u5bf9\u76ee\u5f55\u7ed3\u6784\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u8fdb\u884c\u4e00\u4e2a\u8be6\u7ec6\u5c55\u793a\u548c\u89e3\u91ca\u3002 DSDL\u6570\u636e\u96c6\u76ee\u5f55 VOC2007-dsdl/ \u251c\u2500\u2500 doms/ \u2502 \u251c\u2500\u2500 object-detection.yaml # struct\u5b9a\u4e49\u6587\u4ef6 \u2502 \u2514\u2500\u2500 VOC2007ClassDom.yaml # VOC\u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u2514\u2500\u2500 test/ # \u6d4b\u8bd5\u96c6 \u251c\u2500\u2500 test.yaml \u2514\u2500\u2500 test_samples.json \u6a21\u677f\u53ca\u6807\u6ce8\u6587\u4ef6 object-detection.yaml\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5b9a\u4e49struct\u7684yaml\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u540d\u79f0\u53ef\u4ee5\u6839\u636e\u539f\u59cb\u6570\u636e\u96c6\u8fdb\u884c\u4e00\u4e2a\u4fee\u6539\u548c\u9002\u5e94\uff08\u5c3d\u91cf\u4fdd\u7559\u539f\u59cb\u6570\u636e\u96c6\u7684\u5b57\u6bb5\u540d\u79f0\u548c\u7ed3\u6784\uff09\uff0c\u4f46\u662f\u5b57\u6bb5\u7c7b\u578b\u4e00\u5b9a\u8981\u4f7f\u7528\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\uff08\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\u8be6\u89c1\uff1ahttps://opendatalab.github.io/dsdl-docs/zh/lang/basic_types/\uff09 $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : _bbox : BBox _category : Label[dom=$cdom] pose : Str truncated : Bool difficult : Bool ObjectDetectionSample : $def : struct $params : [ \"cdom\" ] $fields : media_path : Image folder : Str source : Dict owner : Dict height : Int width : Int depth : Int segmented : Bool _objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\u53ca\u5bf9\u5e94\u5173\u7cfb\uff1a \uff08\u6ca1\u6709\u63d0\u5230\u7684\u5b57\u6bb5\u90fd\u662f\u4e0e\u539f\u6570\u636e\u96c6\u540c\u540d\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u53e6\u5916\uff0c\u547d\u540d\u4e2d\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u4e00\u822c\u90fd\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u5373\u539f\u6570\u636e\u96c6\u6ca1\u6709\u7684\u5b57\u6bb5\uff09 \u5728ObjectDetectionSample\u4e2d\uff1a media_path\uff1a\u8be5\u5b57\u6bb5\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u7528\u4e8e\u50a8\u5b58\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u4e3b\u8981\u4ece\u539f\u59cb\u6570\u636e\u96c6\u7684filename\u5b57\u6bb5\u8f6c\u5316\u800c\u6765 _objects\uff1a\u8be5\u5b57\u6bb5\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684object\u5b57\u6bb5\uff0c\u4ee5List\u7684\u5f62\u5f0f\u5b58\u50a8\u5177\u4f53bounding box\u7684\u6807\u6ce8\u4fe1\u606f source\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684source\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684source\u5b57\u6bb5\u4e0b\u7684database\u3001annotation\u3001image\u3001flickerid\u5b57\u6bb5 owner\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684owner\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684owner\u5b57\u6bb5\u4e0b\u7684flickerid\u548cname\u5b57\u6bb5 width\u3001height\u3001depth\uff1a\u662f\u539f\u59cb\u6570\u636e\u96c6\u7684size\u5b57\u6bb5\u4e0b\u7684 \u5728LocalObjectEntry\u4e2d\uff1a _bbox\uff1a\u5bf9\u5e94\u539f\u6570\u636e\u96c6\u7684bndbox\u5b57\u6bb5\uff0c\u4f46\u8f6c\u5316\u4e3abbox\u6807\u51c6\uff0c\u5373[x,y,w,h] _category\uff1a\u662f\u8be5\u76ee\u6807\u7684\u7c7b\u522b\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u53f7\uff0c\u5bf9\u5e94\u7684\u662f\u539f\u6570\u636e\u96c6\u7684name\u5b57\u6bb5\uff0c\u7c7b\u522b\u6807\u53f7\u53ef\u4ee5\u53c2\u89c1\u4e0b\u9762\u7684VOC2007ClassDom.yaml VOC2007ClassDom.yaml\uff1a\u8fd9\u662f\u4e00\u4e2a\u7c7b\u522b\u5b9a\u4e49\u7684Dom\u6587\u6863 $dsdl-version : \"0.5.0\" VOC2007ClassDom : $def : class_domain classes : - aeroplane # \u5bf9\u5e94category\u4e3a1 - bicycle # \u5bf9\u5e94category\u4e3a2 - bird - boat - bottle - bus - car - cat - chair - cow - diningtable - dog - horse - motorbike - person - pottedplant - sheep - sofa - train - tvmonitor train.yaml\uff1a\u8fd9\u4e2a\u6587\u6863\u5f15\u7528\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u4e24\u4e2a\u6587\u6863\uff0c\u5e76\u4e14\u6307\u5f15\u4e86\u5177\u4f53\u7684sample\u8def\u5f84\uff08test.yaml\u548cval.yaml\u7c7b\u4f3c\uff0c\u53ea\u662f\u4fee\u6539\u5bf9\u5e94sample-path\u548csub_dataset_name\u5b57\u6bb5\uff09 $dsdl-version : \"0.5.0\" $import : - VOC2007ClassDom - object-detection meta : dataset_name : \"VOC2007\" protocol_version : \"v0.3rc3\" sub_dataset_name : \"train\" data : sample-type : ObjectDetectionSample[cdom=VOC2007ClassDom] sample-path : train_samples.json \u5176\u4e2dtrain_samples.json\u9700\u8981\u6211\u4eec\u5199\u811a\u672c\u4ece\u539f\u59cb\u6570\u636e\u96c6\u8f6c\u6362\u6765\uff0c\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684struct\u5bf9\u5e94\uff0c\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"_media_path\" : \"JPEGImages/000001.jpg\" , \"folder\" : \"VOC2007\" , \"source\" : { \"database\" : \"The VOC2007 Database\" , \"annotation\" : \"PASCAL VOC2007\" , \"flickrid\" : \"341012865\" }, \"owner\" :{ \"flickrid\" : \"Fried Camels\" , \"name\" : \"Jinky the Fruit Bat\" }, \"height\" : 640 , \"width\" : 480 , \"depth\" : 3 , \"segmented\" : 0 , \"_objects\" : [ { \"_bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"_category\" : 1 , \"pose\" : \"Left\" , \"truncated\" : 1 , \"difficult\" : 0 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002 \u6570\u636e\u96c6\u8f6c\u6362 \u8fd9\u4e00\u8282\u63d0\u4f9b\u4e86\u9488\u5bf9\u4e4b\u524d\u5b9a\u4e49\u7684yaml\u6587\u4ef6\u5bf9\u5e94\u751f\u6210sample.json\u6587\u4ef6\u7684\u8f6c\u6362\u811a\u672c\uff0c\u8fd9\u4e2a\u811a\u672c\u53ef\u4ee5\u751f\u6210\u8bad\u7ec3\u3001\u6d4b\u8bd5\u548c\u9a8c\u8bc1\u4e09\u4e2asamples.json\u6587\u4ef6\uff08\u8f6c\u6362\u811a\u672c\u53ef\u81ea\u884c\u4f18\u5316\uff09\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6570\u636e\u96c6\u91cc\u7684\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684ObjectDetectionSample\u7c7b\u5bf9\u5e94\uff08\u65e0\u8bba\u662f\u5b57\u6bb5\u540d\uff0c\u8fd8\u662f\u5176\u503c\u7684\u7c7b\u578b\uff09\uff0c\u4e0d\u8981\u81ea\u884c\u589e\u52a0\u6216\u8005\u51cf\u5c11\u5b57\u6bb5\u3002 \u8f6c\u6362\u811a\u672c\u5982\u4e0b\uff1a #!/usr/bin/env python3 # # Copyright 2022 Shanghai Artificial Intelligence Laboratory. All rights reserved. # \"\"\" This file implements the generator of the VOC2007 DSDL format dataset. \"\"\" import itertools import itertools import yaml import os from xml.etree import ElementTree import json f = open ( 'train/VOC2007ClassDom.yaml' , 'r' ) data = yaml . safe_load ( f ) category_list = data [ 'VOC2007ClassDom' ][ 'classes' ] _VOC_CATEGORY_DICT = { _name : ( _ind + 1 ) for _ind , _name in enumerate ( category_list )} root_path = '/home/PJLAB/ouyanglinke/mmdetection-master/data/VOCdevkit/VOC2007' anno_paths = os . path . join ( root_path , \"Annotations\" ) segmentation = [ 'train' , 'val' , 'test' ] ann_id_gen = itertools . count () for seg in segmentation : seg_path = os . path . join ( root_path , 'ImageSets' , 'Main' , seg + '.txt' ) try : with open ( seg_path , 'r' ) as f : seg_list = f . readlines () except : print ( 'The segmentation file {} cannot be open, it will be skipped.' . format ( seg_path )) continue samples = [] for anno_id in seg_list : anno_path = os . path . join ( root_path , 'Annotations' , anno_id . strip () + '.xml' ) try : with open ( anno_path , 'r' ) as f : anno_tree = ElementTree . parse ( f ) except : print ( 'The annotation file {} cannot read, it will be skipped.' . format ( anno_path )) continue sample = { 'media_path' : os . path . join ( 'JPEGImages' , anno_tree . find ( 'filename' ) . text ), 'folder' : '' , 'source' : { 'database' : anno_tree . find ( 'source' ) . find ( 'database' ) . text , 'annotation' : anno_tree . find ( 'source' ) . find ( 'annotation' ) . text , 'flickrid' : anno_tree . find ( 'source' ) . find ( 'flickrid' ) . text , }, 'owner' : { 'flickrid' : anno_tree . find ( 'owner' ) . find ( 'flickrid' ) . text , 'name' : anno_tree . find ( 'owner' ) . find ( 'name' ) . text }, 'height' : int ( anno_tree . find ( 'size' ) . find ( 'height' ) . text ), 'width' : int ( anno_tree . find ( 'size' ) . find ( 'width' ) . text ), 'depth' : int ( anno_tree . find ( 'size' ) . find ( 'depth' ) . text ), 'segmented' : int ( anno_tree . find ( 'segmented' ) . text ), '_objects' : [] } for obj in anno_tree . iter ( 'object' ): xmin , ymin , xmax , ymax = [ float ( obj . find ( 'bndbox' ) . find ( boxes ) . text ) for boxes in [ 'xmin' , 'ymin' , 'xmax' , 'ymax' ]] sample [ '_objects' ] . append ({ '_bbox' : [ xmin , ymin , xmax - xmin , ymax - ymin ], '_category' : _VOC_CATEGORY_DICT [ obj . find ( 'name' ) . text ], 'pose' : obj . find ( 'pose' ) . text , 'truncated' : int ( obj . find ( 'truncated' ) . text ), 'difficult' : int ( obj . find ( 'difficult' ) . text ) }) samples . append ( sample ) samples_save = { 'samples' : samples } save_path = os . path . join ( seg , seg + '_samples_v2.json' ) with open ( save_path , 'w' ) as f : json . dump ( samples_save , f ) \u6570\u636e\u96c6\u9a8c\u8bc1 \u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u81ea\u52a8\u9a8c\u8bc1\u7684\u65b9\u6cd5\u5982\u4e0b\u3002 dsdl check - y xxx . yaml - c config . py - l ali - oss - t detection - p ./ - o ./ ### -y \u4e3a\u8f93\u5165\u7684yaml\u6587\u4ef6 ### -c \u4e3a\u6570\u636e\u96c6\u7684\u8bfb\u53d6\u914d\u7f6e\uff08\u8bb0\u5f55\u4e86\u6570\u636e\u96c6\u5728\u963f\u91cc\u4e91/\u672c\u5730\u7684\u4f4d\u7f6e\uff09\uff0c\u4e3b\u8981\u5f62\u5f0f\u5982\u4e0b\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) ### -l \u4e3a\u6307\u5b9a\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 ali-oss \u6216 local ### -t \u4e3a\u6307\u5b9a\u5f53\u524dyaml\u7684\u4efb\u52a1\u7c7b\u522b\uff0c\u5f53\u524d\u652f\u6301\u7684\u4efb\u52a1\u7c7b\u522b\u6709\uff08detection\uff0csegmentation\uff0cclassification\uff09 ### -p yaml\u6587\u4ef6\u5bfc\u5165\u7684\u5e93\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84\u5730\u5740 ### -o \u4e3a\u8f93\u51fa\u7684\u6587\u4ef6\u5939\uff0c\u5305\u542b\u56fe\u7247\u548cmd\u6587\u6863\uff0c\u6ce8\u610f\u6253\u5305\u4e0b\u8f7d \u6700\u7ec8\u83b7\u5f97\u7684\u62a5\u544a\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a parser\u68c0\u67e5\u7ed3\u679c\uff1a\u7ed3\u679c\u5305\u62ec\u4e86parse\u7ed3\u679c\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u5219\u53ef\u4ee5\u67e5\u770b\u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f samples\u5b9e\u4f8b\u5316\u68c0\u67e5\u7ed3\u679c\uff1a\u5176\u4e2d\u62a5\u544a\u8bf4\u660e\u4e86\u5f53\u524d\u6570\u636e\u96c6\u5171\u6709\u6837\u672c\u4e2a\u6570\uff0c\u6b63\u5e38\u6837\u672c\u4e2a\u6570\uff0c\u8b66\u544a\u6837\u672c\u4e2a\u6570\uff0c\u9519\u8bef\u6837\u672c\u4e2a\u6570\uff0c\u5e76\u63d0\u4f9b\u4e86\u5f02\u5e38\u6837\u672c\u7684\u5177\u4f53\u4fe1\u606f\u65e5\u5fd7 \u53ef\u89c6\u5316\u7ed3\u679c\uff1a\u9700\u8981\u8089\u773c\u89c2\u5bdf\u53ef\u89c6\u5316\u7ed3\u679c\u662f\u5426\u6b63\u786e\uff0c\u6bd4\u5982bbox\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\uff0c\u6807\u7b7e\u5185\u5bb9\u662f\u5426\u6b63\u786e\u7b49\u3002\u5728\u56fe\u7247\u4e0b\u9762\u5c55\u793a\u4e86\u53ef\u89c6\u5316\u8fc7\u7a0b\u4e2d\u7684\u65e5\u5fd7\u5185\u5bb9\uff0c\u6bd4\u5982\u662f\u53ef\u89c6\u5316\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u4ee5\u53ca\u5931\u8d25\u65e5\u5fd7\u7b49\u3002","title":"\u5b9e\u4f8b\u6f14\u793a- \u76ee\u6807\u68c0\u6d4b"},{"location":"tutorials/transfer/Detection/#-","text":"\u8be5\u6559\u7a0b\u4ecb\u7ecd\u4e86\u5982\u4f55\u5c06\u4e00\u4e2a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u8f6c\u6362\u4e3aDSDL\u683c\u5f0f\uff0c\u8fd9\u91cc\u4ee5VOC\u4e3a\u4f8b\u505a\u4e00\u4e2a\u4ecb\u7ecd\u3002\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u6570\u636e\u96c6\u8c03\u7814 DSDL\u6a21\u677f\u5236\u5b9a \u6570\u636e\u96c6\u8f6c\u6362 \u6570\u636e\u96c6\u9a8c\u8bc1","title":"\u5b9e\u4f8b\u6f14\u793a- \u76ee\u6807\u68c0\u6d4b"},{"location":"tutorials/transfer/Detection/#_1","text":"\u8c03\u7814\u9700\u8981\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u7ed3\u6784 \u539f\u59cb\u6570\u636e\u96c6\u6807\u6ce8\u7684\u539f\u59cb\u5b57\u6bb5\u53ca\u5176\u542b\u4e49","title":"\u6570\u636e\u96c6\u8c03\u7814"},{"location":"tutorials/transfer/Detection/#_2","text":"VOC2007/ \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001 .xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001 .jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032 .png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032 .png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ... \u6211\u4eec\u8fd9\u91cc\u53ea\u4ee5\u68c0\u6d4b\u4efb\u52a1\u4e3a\u4f8b\u751f\u6210\u6a21\u677f\uff0c\u56e0\u6b64\u53ea\u9700\u8981Annotations/\u3001JPEGImages/\u8fd9\u4e24\u4e2a\u6587\u4ef6\u5939\uff0c\u53e6\u5916\uff0c\u8bad\u7ec3\u6d4b\u8bd5\u96c6\u5212\u5206\uff0c\u9700\u8981\u7528ImageSets/Main/train.txt\u3001val.txt\u3001test.txt\u8fd9\u4e09\u4e2a\u6587\u4ef6\u3002","title":"\u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u7ed3\u6784"},{"location":"tutorials/transfer/Detection/#_3","text":"\u6807\u6ce8\u7c7b\u578b\u5982\u4e0b\uff08\u4ee5Annotations/000001.xml\u4e3a\u4f8b\uff09\uff1a <annotation> <folder> VOC2007 </folder> # \u6587\u4ef6\u5939 <filename> 000001.jpg </filename> # \u56fe\u7247\u6587\u4ef6\u540d <source> # \u56fe\u50cf\u5143\u4fe1\u606f <database> The VOC2007 Database </database> # \u6570\u636e\u96c6\u540d\u79f0 <annotation> PASCAL VOC2007 </annotation> # \u6807\u6ce8\u7c7b\u578b <image> flickr </image> # \u6765\u6e90 <flickrid> 341012865 </flickrid> # \u6765\u6e90ID </source> <owner> # \u6e90\u4fe1\u606f <flickrid> Fried Camels </flickrid> <name> Jinky the Fruit Bat </name> </owner> <size> <width> 353 </width> # \u56fe\u7247\u5bbd <height> 500 </height> # \u56fe\u7247\u9ad8 <depth> 3 </depth> # \u56fe\u7247\u901a\u9053\u6570 </size> <segmented> 0 </segmented> # \u662f\u5426\u7528\u4e8e\u5206\u5272 <object> # \u6807\u6ce8\u90e8\u5206 <name> dog </name> # \u6807\u7b7e <pose> Left </pose> # \u59ff\u6001 <truncated> 1 </truncated> # \u7269\u4f53\u662f\u5426\u88ab\u90e8\u5206\u906e\u6321\uff08>15%\uff09 <difficult> 0 </difficult> # \u662f\u5426\u4e3a\u96be\u4ee5\u8fa8\u8bc6\u7684\u7269\u4f53 <bndbox> <xmin> 48 </xmin> # \u5de6\u4e0a\u89d2\u70b9\u7684x <ymin> 240 </ymin> # \u5de6\u4e0a\u89d2\u70b9\u7684y <xmax> 195 </xmax> # \u53f3\u4e0b\u89d2\u70b9\u7684x <ymax> 371 </ymax> # \u53f3\u4e0b\u89d2\u70b9\u7684y </bndbox> </object> ... </annotation> \u8fd9\u91cc\u4ee5ImageSets/Main/train.txt\u4e3a\u4f8b\u5c55\u793a\u4e00\u4e0b\u6570\u636e\u96c6segment\u5212\u5206\u7684\u6587\u4ef6\u5185\u5bb9\uff1a 000012 # \u56fe\u7247\u540d\u524d\u7f00 000017 000023 000026 ...","title":"\u539f\u59cb\u6570\u636e\u96c6\u6807\u6ce8\u7684\u539f\u59cb\u5b57\u6bb5\u53ca\u5176\u542b\u4e49"},{"location":"tutorials/transfer/Detection/#dsdl","text":"","title":"DSDL\u6a21\u677f\u5236\u5b9a"},{"location":"tutorials/transfer/Detection/#yaml","text":"\u6700\u7ec8\u9700\u8981\u8f6c\u6210\u7684yaml\u6570\u636e\u96c6\u683c\u5f0f\uff0c\u5728\u8fd9\u91cc\u505a\u4e00\u4e2a\u8be6\u7ec6\u89e3\u91ca\u3002\u8f6c\u6210\u540e\u7684DSDL\u6570\u636e\u96c6\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u91cd\u8981\u7684\u6587\u4ef6\uff1a struct\u7684\u5b9a\u4e49\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u6587\u4ef6\u540d\u4e3aobject-detetction.yaml\uff09\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5bf9struct\u505a\u4e00\u4e2a\u660e\u786e\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u6709sample\u7684\u7ed3\u6784\u4f53\u548c\u6807\u6ce8\u7684\u7ed3\u6784\u4f53\u7b49\uff0c\u9700\u6307\u660e\u5305\u542b\u4e86\u54ea\u4e9bfield\uff0c\u6bcf\u4e2afield\u7684\u7c7b\u578b\u3002 \u7c7b\u522b\u57df\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e3aVOC2007ClassDom.yaml\uff09\uff1a\u91cc\u9762\u5305\u542b\u4e86\u7c7b\u522b\u5217\u8868\uff0c\u5bf9\u5e94category\u7684\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\u6392\u5e8f\uff09 samples\u6587\u4ef6\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5206\u522b\u5206\u4e3atrain.yaml\u548ctrain_samples.json) train.yaml\u4e3b\u8981\u662f\u6307\u660e\u5f15\u7528\u54ea\u4e2astruct\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6587\u4ef6\uff0c\u5e76\u4e14\u6307\u660e\u6570\u636e\u7c7b\u578b\u548c\u5b58\u653e\u8def\u5f84\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9bmeta\u4fe1\u606f train_samples.json\u91cc\u4fdd\u5b58\u4e86\u5b9e\u9645\u7684samples\u4fe1\u606f\uff0c\u5176\u7ec4\u7ec7\u7ed3\u6784\u5fc5\u987b\u548c\u4e4b\u524d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u5339\u914d \u540e\u8fb9\u4f1a\u5bf9\u76ee\u5f55\u7ed3\u6784\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u8fdb\u884c\u4e00\u4e2a\u8be6\u7ec6\u5c55\u793a\u548c\u89e3\u91ca\u3002","title":"Yaml\u683c\u5f0f\u89e3\u91ca"},{"location":"tutorials/transfer/Detection/#dsdl_1","text":"VOC2007-dsdl/ \u251c\u2500\u2500 doms/ \u2502 \u251c\u2500\u2500 object-detection.yaml # struct\u5b9a\u4e49\u6587\u4ef6 \u2502 \u2514\u2500\u2500 VOC2007ClassDom.yaml # VOC\u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u2514\u2500\u2500 test/ # \u6d4b\u8bd5\u96c6 \u251c\u2500\u2500 test.yaml \u2514\u2500\u2500 test_samples.json","title":"DSDL\u6570\u636e\u96c6\u76ee\u5f55"},{"location":"tutorials/transfer/Detection/#_4","text":"object-detection.yaml\uff1a\u8fd9\u4e2a\u6587\u4ef6\u4e3b\u8981\u662f\u5b9a\u4e49struct\u7684yaml\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u540d\u79f0\u53ef\u4ee5\u6839\u636e\u539f\u59cb\u6570\u636e\u96c6\u8fdb\u884c\u4e00\u4e2a\u4fee\u6539\u548c\u9002\u5e94\uff08\u5c3d\u91cf\u4fdd\u7559\u539f\u59cb\u6570\u636e\u96c6\u7684\u5b57\u6bb5\u540d\u79f0\u548c\u7ed3\u6784\uff09\uff0c\u4f46\u662f\u5b57\u6bb5\u7c7b\u578b\u4e00\u5b9a\u8981\u4f7f\u7528\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\uff08\u53ef\u8bc6\u522b\u7684\u6570\u636e\u7c7b\u578b\u8be6\u89c1\uff1ahttps://opendatalab.github.io/dsdl-docs/zh/lang/basic_types/\uff09 $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : _bbox : BBox _category : Label[dom=$cdom] pose : Str truncated : Bool difficult : Bool ObjectDetectionSample : $def : struct $params : [ \"cdom\" ] $fields : media_path : Image folder : Str source : Dict owner : Dict height : Int width : Int depth : Int segmented : Bool _objects : List[etype=LocalObjectEntry[cdom=$cdom]] \u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\u53ca\u5bf9\u5e94\u5173\u7cfb\uff1a \uff08\u6ca1\u6709\u63d0\u5230\u7684\u5b57\u6bb5\u90fd\u662f\u4e0e\u539f\u6570\u636e\u96c6\u540c\u540d\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u53e6\u5916\uff0c\u547d\u540d\u4e2d\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u4e00\u822c\u90fd\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u5373\u539f\u6570\u636e\u96c6\u6ca1\u6709\u7684\u5b57\u6bb5\uff09 \u5728ObjectDetectionSample\u4e2d\uff1a media_path\uff1a\u8be5\u5b57\u6bb5\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u7528\u4e8e\u50a8\u5b58\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u4e3b\u8981\u4ece\u539f\u59cb\u6570\u636e\u96c6\u7684filename\u5b57\u6bb5\u8f6c\u5316\u800c\u6765 _objects\uff1a\u8be5\u5b57\u6bb5\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684object\u5b57\u6bb5\uff0c\u4ee5List\u7684\u5f62\u5f0f\u5b58\u50a8\u5177\u4f53bounding box\u7684\u6807\u6ce8\u4fe1\u606f source\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684source\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684source\u5b57\u6bb5\u4e0b\u7684database\u3001annotation\u3001image\u3001flickerid\u5b57\u6bb5 owner\uff1a\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684owner\u5b57\u6bb5\uff0c\u4e3a\u4e00\u4e2a\u5b57\u5178\u5f62\u5f0f\uff0c\u91cc\u9762\u7684keys\u5206\u522b\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u91cc\u7684owner\u5b57\u6bb5\u4e0b\u7684flickerid\u548cname\u5b57\u6bb5 width\u3001height\u3001depth\uff1a\u662f\u539f\u59cb\u6570\u636e\u96c6\u7684size\u5b57\u6bb5\u4e0b\u7684 \u5728LocalObjectEntry\u4e2d\uff1a _bbox\uff1a\u5bf9\u5e94\u539f\u6570\u636e\u96c6\u7684bndbox\u5b57\u6bb5\uff0c\u4f46\u8f6c\u5316\u4e3abbox\u6807\u51c6\uff0c\u5373[x,y,w,h] _category\uff1a\u662f\u8be5\u76ee\u6807\u7684\u7c7b\u522b\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u53f7\uff0c\u5bf9\u5e94\u7684\u662f\u539f\u6570\u636e\u96c6\u7684name\u5b57\u6bb5\uff0c\u7c7b\u522b\u6807\u53f7\u53ef\u4ee5\u53c2\u89c1\u4e0b\u9762\u7684VOC2007ClassDom.yaml VOC2007ClassDom.yaml\uff1a\u8fd9\u662f\u4e00\u4e2a\u7c7b\u522b\u5b9a\u4e49\u7684Dom\u6587\u6863 $dsdl-version : \"0.5.0\" VOC2007ClassDom : $def : class_domain classes : - aeroplane # \u5bf9\u5e94category\u4e3a1 - bicycle # \u5bf9\u5e94category\u4e3a2 - bird - boat - bottle - bus - car - cat - chair - cow - diningtable - dog - horse - motorbike - person - pottedplant - sheep - sofa - train - tvmonitor train.yaml\uff1a\u8fd9\u4e2a\u6587\u6863\u5f15\u7528\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u4e24\u4e2a\u6587\u6863\uff0c\u5e76\u4e14\u6307\u5f15\u4e86\u5177\u4f53\u7684sample\u8def\u5f84\uff08test.yaml\u548cval.yaml\u7c7b\u4f3c\uff0c\u53ea\u662f\u4fee\u6539\u5bf9\u5e94sample-path\u548csub_dataset_name\u5b57\u6bb5\uff09 $dsdl-version : \"0.5.0\" $import : - VOC2007ClassDom - object-detection meta : dataset_name : \"VOC2007\" protocol_version : \"v0.3rc3\" sub_dataset_name : \"train\" data : sample-type : ObjectDetectionSample[cdom=VOC2007ClassDom] sample-path : train_samples.json \u5176\u4e2dtrain_samples.json\u9700\u8981\u6211\u4eec\u5199\u811a\u672c\u4ece\u539f\u59cb\u6570\u636e\u96c6\u8f6c\u6362\u6765\uff0c\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684struct\u5bf9\u5e94\uff0c\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a { \"samples\" : [ { \"_media_path\" : \"JPEGImages/000001.jpg\" , \"folder\" : \"VOC2007\" , \"source\" : { \"database\" : \"The VOC2007 Database\" , \"annotation\" : \"PASCAL VOC2007\" , \"flickrid\" : \"341012865\" }, \"owner\" :{ \"flickrid\" : \"Fried Camels\" , \"name\" : \"Jinky the Fruit Bat\" }, \"height\" : 640 , \"width\" : 480 , \"depth\" : 3 , \"segmented\" : 0 , \"_objects\" : [ { \"_bbox\" : [ 120.24 , 0.32 , 359.76 , 596.04 ], \"_category\" : 1 , \"pose\" : \"Left\" , \"truncated\" : 1 , \"difficult\" : 0 }, ... ] }, ... ]} \u6ce8\u610f\uff0c\"samples\"\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff08\u4e0d\u53ef\u6539\u540d\uff09\uff0c\u4e14\u7ec4\u7ec7\u5f62\u5f0f\u4e5f\u4e0d\u80fd\u6539\u53d8\uff0c\u5373\uff1a\u5fc5\u987b\u662f\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u6709\u4e00\u4e2a\u952e\u4e3a\"samples\"\uff0c\u5176\u503c\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2asample\u7c7b\u7684\u5b9e\u4f8b\uff08\u5373\u672c\u6848\u4f8b\u4e2d\u7684ObjectDetectionSample\u7c7b\uff09\u3002","title":"\u6a21\u677f\u53ca\u6807\u6ce8\u6587\u4ef6"},{"location":"tutorials/transfer/Detection/#_5","text":"\u8fd9\u4e00\u8282\u63d0\u4f9b\u4e86\u9488\u5bf9\u4e4b\u524d\u5b9a\u4e49\u7684yaml\u6587\u4ef6\u5bf9\u5e94\u751f\u6210sample.json\u6587\u4ef6\u7684\u8f6c\u6362\u811a\u672c\uff0c\u8fd9\u4e2a\u811a\u672c\u53ef\u4ee5\u751f\u6210\u8bad\u7ec3\u3001\u6d4b\u8bd5\u548c\u9a8c\u8bc1\u4e09\u4e2asamples.json\u6587\u4ef6\uff08\u8f6c\u6362\u811a\u672c\u53ef\u81ea\u884c\u4f18\u5316\uff09\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6570\u636e\u96c6\u91cc\u7684\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684ObjectDetectionSample\u7c7b\u5bf9\u5e94\uff08\u65e0\u8bba\u662f\u5b57\u6bb5\u540d\uff0c\u8fd8\u662f\u5176\u503c\u7684\u7c7b\u578b\uff09\uff0c\u4e0d\u8981\u81ea\u884c\u589e\u52a0\u6216\u8005\u51cf\u5c11\u5b57\u6bb5\u3002 \u8f6c\u6362\u811a\u672c\u5982\u4e0b\uff1a #!/usr/bin/env python3 # # Copyright 2022 Shanghai Artificial Intelligence Laboratory. All rights reserved. # \"\"\" This file implements the generator of the VOC2007 DSDL format dataset. \"\"\" import itertools import itertools import yaml import os from xml.etree import ElementTree import json f = open ( 'train/VOC2007ClassDom.yaml' , 'r' ) data = yaml . safe_load ( f ) category_list = data [ 'VOC2007ClassDom' ][ 'classes' ] _VOC_CATEGORY_DICT = { _name : ( _ind + 1 ) for _ind , _name in enumerate ( category_list )} root_path = '/home/PJLAB/ouyanglinke/mmdetection-master/data/VOCdevkit/VOC2007' anno_paths = os . path . join ( root_path , \"Annotations\" ) segmentation = [ 'train' , 'val' , 'test' ] ann_id_gen = itertools . count () for seg in segmentation : seg_path = os . path . join ( root_path , 'ImageSets' , 'Main' , seg + '.txt' ) try : with open ( seg_path , 'r' ) as f : seg_list = f . readlines () except : print ( 'The segmentation file {} cannot be open, it will be skipped.' . format ( seg_path )) continue samples = [] for anno_id in seg_list : anno_path = os . path . join ( root_path , 'Annotations' , anno_id . strip () + '.xml' ) try : with open ( anno_path , 'r' ) as f : anno_tree = ElementTree . parse ( f ) except : print ( 'The annotation file {} cannot read, it will be skipped.' . format ( anno_path )) continue sample = { 'media_path' : os . path . join ( 'JPEGImages' , anno_tree . find ( 'filename' ) . text ), 'folder' : '' , 'source' : { 'database' : anno_tree . find ( 'source' ) . find ( 'database' ) . text , 'annotation' : anno_tree . find ( 'source' ) . find ( 'annotation' ) . text , 'flickrid' : anno_tree . find ( 'source' ) . find ( 'flickrid' ) . text , }, 'owner' : { 'flickrid' : anno_tree . find ( 'owner' ) . find ( 'flickrid' ) . text , 'name' : anno_tree . find ( 'owner' ) . find ( 'name' ) . text }, 'height' : int ( anno_tree . find ( 'size' ) . find ( 'height' ) . text ), 'width' : int ( anno_tree . find ( 'size' ) . find ( 'width' ) . text ), 'depth' : int ( anno_tree . find ( 'size' ) . find ( 'depth' ) . text ), 'segmented' : int ( anno_tree . find ( 'segmented' ) . text ), '_objects' : [] } for obj in anno_tree . iter ( 'object' ): xmin , ymin , xmax , ymax = [ float ( obj . find ( 'bndbox' ) . find ( boxes ) . text ) for boxes in [ 'xmin' , 'ymin' , 'xmax' , 'ymax' ]] sample [ '_objects' ] . append ({ '_bbox' : [ xmin , ymin , xmax - xmin , ymax - ymin ], '_category' : _VOC_CATEGORY_DICT [ obj . find ( 'name' ) . text ], 'pose' : obj . find ( 'pose' ) . text , 'truncated' : int ( obj . find ( 'truncated' ) . text ), 'difficult' : int ( obj . find ( 'difficult' ) . text ) }) samples . append ( sample ) samples_save = { 'samples' : samples } save_path = os . path . join ( seg , seg + '_samples_v2.json' ) with open ( save_path , 'w' ) as f : json . dump ( samples_save , f )","title":"\u6570\u636e\u96c6\u8f6c\u6362"},{"location":"tutorials/transfer/Detection/#_6","text":"\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u81ea\u52a8\u9a8c\u8bc1\u7684\u65b9\u6cd5\u5982\u4e0b\u3002 dsdl check - y xxx . yaml - c config . py - l ali - oss - t detection - p ./ - o ./ ### -y \u4e3a\u8f93\u5165\u7684yaml\u6587\u4ef6 ### -c \u4e3a\u6570\u636e\u96c6\u7684\u8bfb\u53d6\u914d\u7f6e\uff08\u8bb0\u5f55\u4e86\u6570\u636e\u96c6\u5728\u963f\u91cc\u4e91/\u672c\u5730\u7684\u4f4d\u7f6e\uff09\uff0c\u4e3b\u8981\u5f62\u5f0f\u5982\u4e0b\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) ### -l \u4e3a\u6307\u5b9a\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 ali-oss \u6216 local ### -t \u4e3a\u6307\u5b9a\u5f53\u524dyaml\u7684\u4efb\u52a1\u7c7b\u522b\uff0c\u5f53\u524d\u652f\u6301\u7684\u4efb\u52a1\u7c7b\u522b\u6709\uff08detection\uff0csegmentation\uff0cclassification\uff09 ### -p yaml\u6587\u4ef6\u5bfc\u5165\u7684\u5e93\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84\u5730\u5740 ### -o \u4e3a\u8f93\u51fa\u7684\u6587\u4ef6\u5939\uff0c\u5305\u542b\u56fe\u7247\u548cmd\u6587\u6863\uff0c\u6ce8\u610f\u6253\u5305\u4e0b\u8f7d \u6700\u7ec8\u83b7\u5f97\u7684\u62a5\u544a\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a parser\u68c0\u67e5\u7ed3\u679c\uff1a\u7ed3\u679c\u5305\u62ec\u4e86parse\u7ed3\u679c\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u5219\u53ef\u4ee5\u67e5\u770b\u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f samples\u5b9e\u4f8b\u5316\u68c0\u67e5\u7ed3\u679c\uff1a\u5176\u4e2d\u62a5\u544a\u8bf4\u660e\u4e86\u5f53\u524d\u6570\u636e\u96c6\u5171\u6709\u6837\u672c\u4e2a\u6570\uff0c\u6b63\u5e38\u6837\u672c\u4e2a\u6570\uff0c\u8b66\u544a\u6837\u672c\u4e2a\u6570\uff0c\u9519\u8bef\u6837\u672c\u4e2a\u6570\uff0c\u5e76\u63d0\u4f9b\u4e86\u5f02\u5e38\u6837\u672c\u7684\u5177\u4f53\u4fe1\u606f\u65e5\u5fd7 \u53ef\u89c6\u5316\u7ed3\u679c\uff1a\u9700\u8981\u8089\u773c\u89c2\u5bdf\u53ef\u89c6\u5316\u7ed3\u679c\u662f\u5426\u6b63\u786e\uff0c\u6bd4\u5982bbox\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\uff0c\u6807\u7b7e\u5185\u5bb9\u662f\u5426\u6b63\u786e\u7b49\u3002\u5728\u56fe\u7247\u4e0b\u9762\u5c55\u793a\u4e86\u53ef\u89c6\u5316\u8fc7\u7a0b\u4e2d\u7684\u65e5\u5fd7\u5185\u5bb9\uff0c\u6bd4\u5982\u662f\u53ef\u89c6\u5316\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u4ee5\u53ca\u5931\u8d25\u65e5\u5fd7\u7b49\u3002","title":"\u6570\u636e\u96c6\u9a8c\u8bc1"},{"location":"tutorials/transfer/SDK_doc/","text":"SDK\u6587\u6863 \uff08\u7531\u6587\u660c\u548c\u5764\u660e\u8865\u5145\uff09","title":"SDK\u6587\u6863"},{"location":"tutorials/transfer/SDK_doc/#sdk","text":"\uff08\u7531\u6587\u660c\u548c\u5764\u660e\u8865\u5145\uff09","title":"SDK\u6587\u6863"},{"location":"tutorials/transfer/converter_scipt/","text":"\u4e3b\u6d41\u683c\u5f0f\u6570\u636e\u96c6\u4e0eDSDL\u4e92\u8f6c\u811a\u672c \u8be5\u6587\u6863\u5c06\u4e3b\u6d41\u683c\u5f0f\u6570\u636e\u96c6\uff08\u6bd4\u5982COCO, VOC, KITTI\u7b49\uff09\u4e0eDSDL\u7684\u4e92\u8f6c\u811a\u672c\uff0c\u5206\u4e3a\u4e24\u90e8\u5206\uff1a \u5229\u7528\u5de5\u5177\u8f6c\u6362\uff08CLI\u5de5\u5177\uff09 \u5229\u7528\u8f6c\u6362\u811a\u672c\u8f6c\u6362\uff08\u76f4\u63a5\u5728\u8be5\u6587\u6863\u91cc\uff0c\u7528\u4ee3\u7801\u5757\u7684\u5f62\u5f0f\u63d0\u4f9b\u811a\u672c\uff09 \uff08\u8fd9\u4e00\u90e8\u5206\u7531\u5404\u4e2a\u4efb\u52a1\u8d1f\u8d23\u4eba\u63d0\u4f9b\uff0c\u8fd8\u9700\u8981\u8003\u8651\u4efb\u52a1\u662f\u5206\u5f00\u63d0\u4f9b\u811a\u672c\u8fd8\u662f\u5408\u5e76\u811a\u672c\uff09","title":"\u4e3b\u6d41\u683c\u5f0f\u6570\u636e\u96c6\u4e0eDSDL\u4e92\u8f6c\u811a\u672c"},{"location":"tutorials/transfer/converter_scipt/#dsdl","text":"\u8be5\u6587\u6863\u5c06\u4e3b\u6d41\u683c\u5f0f\u6570\u636e\u96c6\uff08\u6bd4\u5982COCO, VOC, KITTI\u7b49\uff09\u4e0eDSDL\u7684\u4e92\u8f6c\u811a\u672c\uff0c\u5206\u4e3a\u4e24\u90e8\u5206\uff1a \u5229\u7528\u5de5\u5177\u8f6c\u6362\uff08CLI\u5de5\u5177\uff09 \u5229\u7528\u8f6c\u6362\u811a\u672c\u8f6c\u6362\uff08\u76f4\u63a5\u5728\u8be5\u6587\u6863\u91cc\uff0c\u7528\u4ee3\u7801\u5757\u7684\u5f62\u5f0f\u63d0\u4f9b\u811a\u672c\uff09 \uff08\u8fd9\u4e00\u90e8\u5206\u7531\u5404\u4e2a\u4efb\u52a1\u8d1f\u8d23\u4eba\u63d0\u4f9b\uff0c\u8fd8\u9700\u8981\u8003\u8651\u4efb\u52a1\u662f\u5206\u5f00\u63d0\u4f9b\u811a\u672c\u8fd8\u662f\u5408\u5e76\u811a\u672c\uff09","title":"\u4e3b\u6d41\u683c\u5f0f\u6570\u636e\u96c6\u4e0eDSDL\u4e92\u8f6c\u811a\u672c"},{"location":"en/","text":"","title":"Home"},{"location":"en/api_reference/fields_overview/","text":"DSDL Field\u7c7b\u578b\u7b80\u4ecb Field\u662fDSDL\u4e2d\u8868\u8fbe\u6570\u636e\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u5728\u6570\u636e\u96c6\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u6837\u672c\u90fd\u9075\u5faa\u4e00\u4e2aStruct\u6a21\u677f\uff0c\u800cStruct\u7684\u7ec4\u6210\u5185\u5bb9\u5373\u4e3aField\uff08\u6216\u8005\u5d4c\u5957Struct\uff09\u3002 \u5982\u4e0b\u6240\u793a\uff0c\u4e00\u4e2a\u5177\u4f53\u7684\u6837\u672c\u4e3a\uff1a sample = { \"img\" : \"media/00001.jpg\" , \"bbox\" : [ 369.3 , 253.15 , 57.7 , 29.96 ], \"label\" : \"dog\" } \u5b83\u9075\u5faa\u7684Struct\u4e3a\uff1a LocalObjectEntry : $def : struct $fields : bbox : BBox label : Label[dom=\"COCODomain\"] img : Image \u5176\u4e2d\u7684BBox\u3001Label\u3001Image\u90fd\u662fField\uff0c\u8fd9\u4e9bField\u89c4\u5b9a\u4e86\u6837\u672c\u4e2d\u5404\u4e2a\u5b57\u6bb5\u503c\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u6837\u672c\u4e2d\u7684 \"img\" \u5b57\u6bb5\u867d\u7136\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f46\u7531\u4e8e\u5728Struct\u5b9a\u4e49\u4e2d\u8be5\u5b57\u6bb5\u88ab\u58f0\u660e\u4e3a Image Field\uff0c\u5219dsdl sdk\u4f1a\u5c06\u5176\u5f53\u4f5c\u4e00\u4e2a\u56fe\u50cf\u7c7b\u578b\u6765\u5904\u7406\u3002 \u672c\u7ae0\u5185\u5bb9\u4f1a\u8be6\u7ec6\u4ecb\u7ecdDSDL\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u9884\u8bbe\u7684Field\u3002 \u5728DSDL\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528jsonschema\u6765\u89c4\u8303Field\u7684\u521d\u59cb\u5316\u4f20\u5165\u7684\u53c2\u6570\u4ee5\u53ca\u89c4\u8303\u8be5Field\u5bf9\u5e94\u7684\u503c\u7684\u5f62\u5f0f\u3002 \u57fa\u7840\u7c7b\u578bField DSDL\u4e2d\u6709\u4e00\u4e9b\u8868\u793a\u57fa\u7840\u7c7b\u578b\u7684Field\uff0c\u5305\u62ec\uff1a 1. Bool Bool\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema \uff1a args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u8be5schema\u8868\u793a\uff0cBool\u7c7b\u578bField\u5728\u58f0\u660e\u7684\u65f6\u5019\u4e0d\u9700\u8981\u4f20\u5165\u53c2\u6570 \u6570\u636eschema \uff1a data_schema = { \"$id\" : \"/generic/boolean\" , \"title\" : \"BoolField\" , \"description\" : \"Bool field in dsdl.\" , \"oneOf\" : [ { \"type\" : \"boolean\" }, { \"type\" : \"number\" , \"enum\" : [ 0 , 1 ]} ] } \u8be5schema\u8868\u793a\uff0cBool\u7c7b\u578bField\u5728\u5b9e\u4f8b\u5316\u65f6\u53ef\u4ee5\u4f20\u5165True\uff0cFalse\uff0c0\uff0c1 \u5b9e\u4f8b \uff1a # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : iscrowd : Bool # \u5177\u4f53\u6837\u672c sample = { \"iscrowd\" : True # True/False/0/1\u90fd\u6ee1\u8db3\u8981\u6c42 } sample = { \"iscrowd\" : 2 # \u4e0d\u6ee1\u8db3\u8981\u6c42 } sample = { \"iscrowd\" : \"True\" # \u4e0d\u6ee1\u8db3\u8981\u6c42 } 2. Int Int\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u6574\u6570\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/generic/int\" , \"title\" : \"IntField\" , \"description\" : \"Int field in dsdl.\" , \"type\" : \"integer\" , } \u8be5schema\u8868\u793a\uff0cInt\u7c7b\u578bField\u5b9e\u4f8b\u5316\u65f6\u53ea\u53ef\u4ee5\u4f20\u5165\u6574\u6570\u7c7b\u578b \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : count : Int # \u5177\u4f53\u6837\u672c sample = { \"count\" : 1 # correct } sample = { \"count\" : \"1\" # wrong } sample = { \"count\" : True # wrong } 3. Num Num\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u6d6e\u70b9\u6570\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/generic/num\" , \"title\" : \"NumField\" , \"description\" : \"Num field in dsdl.\" , \"type\" : \"number\" , } \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : weight : Num # \u5177\u4f53\u6837\u672c sample = { \"weight\" : 1 # correct } sample = { \"weight\" : 10.4 # correct } sample = { \"weight\" : True # wrong } 4. Str Str\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/generic/str\" , \"title\" : \"StrField\" , \"description\" : \"Str field in dsdl.\" , \"type\" : \"string\" , } \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : name : Str # \u5177\u4f53\u6837\u672c sample = { \"name\" : \"dsdl\" # correct } sample = { \"name\" : 10.4 # wrong } sample = { \"name\" : True # wrong } 5. Dict Dict\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u5b57\u5178\u7c7b\u578b\u7684\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/generic/dict\" , \"title\" : \"DictField\" , \"description\" : \"Dict field in dsdl.\" , \"type\" : \"object\" , } \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : attributes : Dict # \u5177\u4f53\u6837\u672c sample = { \"attributes\" : { \"name\" : \"dsdl\" , \"age\" : 0 , \"gender\" : \"female\" } # correct } sample = { \"attributes\" : 10.4 # wrong } sample = { \"attributes\" : \"dsdl\" # wrong } \u7279\u6b8a\u7c7b\u578bField \u5728DSDL\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7684Field\u6765\u63cf\u8ff0bounding box\u3001polygon\u3001keypoint\u7b49\u6807\u6ce8\u7c7b\u578b\uff0c\u5e76\u4e3a\u5176\u4e2d\u4e00\u4e9bField\u5b9e\u73b0\u4e86\u76f8\u5e94\u7684\u57fa\u7840\u7c7b\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5\u65b9\u4fbf\u7528\u6237\u8c03\u7528\u3002 1. Coord Coord\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u4e8c\u7ef4\u5750\u6807\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/coord\" , \"title\" : \"CoordField\" , \"description\" : \"Coord 2D field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 2 , \"maxItems\" : 2 } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5fc5\u987b\u5305\u542b\u4e24\u4e2a\u5143\u7d20\uff0c\u4e24\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : coordinate : Coord # \u5177\u4f53\u6837\u672c sample = { \"coordinate\" : [ 10 , 12 ] # correct } sample = { \"coordinate\" : [ 10 , 12 , 13 ] # wrong } sample = { \"coordinate\" : \"dsdl\" # wrong } sample = { \"coordinate\" : [ 10 , False ] # wrong } 2. Coord3D Coord3D\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u4e09\u7ef4\u5750\u6807\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/coord3d\" , \"title\" : \"Coord3DField\" , \"description\" : \"Coord 3D field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 3 , \"maxItems\" : 3 } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5fc5\u987b\u5305\u542b3\u4e2a\u5143\u7d20\uff0c3\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : coordinate : Coord3D # \u5177\u4f53\u6837\u672c sample = { \"coordinate\" : [ 10 , 12 , 0 ] # correct } sample = { \"coordinate\" : [ 10 , 12 ] # wrong } sample = { \"coordinate\" : \"dsdl\" # wrong } sample = { \"coordinate\" : [ 10 , False , 12 ] # wrong } 3. Interval Interval\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u65f6\u95f4\u95f4\u9694\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { # \u65e0\u6cd5\u5b9a\u4e49\u987a\u5e8f \"$id\" : \"/special/interval\" , \"title\" : \"IntervalField\" , \"description\" : \"Interval field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" , }, \"minItems\" : 2 , \"maxItems\" : 2 , } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5fc5\u987b\u5305\u542b2\u4e2a\u5143\u7d20\uff0c2\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57 \u8865\u5145\u6821\u9a8c \u7531\u4e8eInterval\u7c7b\u578b\u8fd8\u8981\u6c42\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c0f\u4e8e\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c\u800c\u8be5\u89c4\u5219\u65e0\u6cd5\u7528jsonschema\u8868\u793a\uff0c\u56e0\u6b64dsdl\u8fd8\u4e3a\u8fd9\u79cd\u60c5\u51b5\u589e\u52a0\u4e86\u4e8c\u6b21\u6821\u9a8c\uff0cInterval Field\u7684\u4e8c\u6b21\u6821\u9a8c\u4ee3\u7801\u4e3a\uff1a def additional_validate ( self , value ): assert value [ 0 ] <= value [ 1 ] return value \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : interval : Interval # \u5177\u4f53\u6837\u672c sample = { \"interval\" : [ 10 , 12 ] # correct } sample = { \"interval\" : [ 12 , 10 ] # wrong } sample = { \"interval\" : \"dsdl\" # wrong } sample = { \"interval\" : [ 10 , False , 12 ] # wrong } 4. Date Date\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u65e5\u671f\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/date\" , \"title\" : \"DateField\" , \"description\" : \"Date field in dsdl.\" , \"type\" : \"string\" , \"format\" : \"date\" } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u5fc5\u987b\u6ee1\u8db3 ISO8601 format \u4e2d\u7684Date\u7684\u683c\u5f0f\uff0c\u5373 YYYY-MM-DD \u683c\u5f0f \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : date : Date # \u5177\u4f53\u6837\u672c sample = { \"date\" : \"2022-12-12\" # correct } sample = { \"date\" : \"12-12\" # correct } sample = { \"date\" : \"12\" # wrong } sample = { \"date\" : [ 10 , False ] # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Date Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a datetime.date.fromisoformat \u5bf9\u8c61 5. Time Time\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u65f6\u95f4\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/time\" , \"title\" : \"TimeField\" , \"description\" : \"Time field in dsdl.\" , \"type\" : \"string\" , \"format\" : \"time\" } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u5fc5\u987b\u6ee1\u8db3 ISO8601 format \u4e2d\u7684Time\u7684\u683c\u5f0f \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : time : Time # \u5177\u4f53\u6837\u672c sample = { \"time\" : \"20:20:39+00:00\" # correct } sample = { \"time\" : \"20:20:39\" # correct } sample = { \"time\" : \"12-12\" # wrong } sample = { \"time\" : \"12::12\" # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Time Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a datetime.time.fromisoformat \u5bf9\u8c61 6. BBox BBox\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684bounding box\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywh\" , \"xyxy\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] } \u8be5jsonschema\u8868\u793aBBox\u7c7b\u578b\u4f20\u5165\u7684\u53c2\u6570\u4e3a mode \uff0c\u53ef\u4ee5\u7684\u53d6\u503c\u4e3a xywh \u6216 xyxy \uff1a mode=xywh \u8868\u793a\u4f20\u5165\u7684\u6570\u636e\u4f1a\u4ee5\u5de6\u4e0a\u89d2xy\u5750\u6807\u548cbbox\u5bbd\u9ad8\u7684\u5f62\u5f0f\u7ed9\u51fa\uff1b mode=xyxy \u8868\u793a\u4f20\u5165\u7684\u6570\u636e\u4f1a\u4ee5\u5de6\u4e0a\u89d2+\u53f3\u4e0b\u89d2\u7684xy\u5750\u6807\u7684\u5f62\u5f0f\u7ed9\u51fa \u6570\u636eschema data_schema = { \"$id\" : \"/special/bbox\" , \"title\" : \"BBoxField\" , \"description\" : \"Bounding box field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 4 , \"maxItems\" : 4 , } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5305\u542b4\u4e2a\u5143\u7d20\uff0c\u8fd9\u56db\u4e2a\u5143\u7d20\u5fc5\u987b\u662f\u6570\u5b57\u7c7b\u578b\u3002 \u7531\u4e8e\u6211\u4eec\u5e0c\u671b\u5728mode\u4e3a xywh \u65f6\uff0c\u4f20\u5165\u7684\u5217\u8868\u76844\u4e2a\u5143\u7d20\u4e2d\uff0c\u8868\u793awh\u7684\u540e\u4e24\u4e2a\u5143\u7d20\u5fc5\u987b\u4e3a\u975e\u8d1f\uff0c\u6211\u4eec\u989d\u5916\u4e3aBBox Field\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u53c2\u6570+\u6570\u636e schema\uff0c\u6765\u89c4\u8303\u5b83\u7684\u53c2\u6570\u4e0e\u4f20\u5165\u6570\u636e\uff1a whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywh\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 4 , \"maxItems\" : 4 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 4 , \"maxItems\" : 4 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } \u5b9e\u4f8b1 # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : bbox : BBox # \u5177\u4f53\u6837\u672c sample = { \"bbox\" : [ 10 , 12 , 480 , 720 ] # correct } sample = { \"bbox\" : [ - 1 , 12 , 40 , 80 ] # correct } sample = { \"bbox\" : [ 1 , 2 , - 1 , 100 ] # wrong } sample = { \"bbox\" : [ 1 , 2 , 10 , 10 , 1 ] # wrong } \u5b9e\u4f8b2 # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : bbox : BBox[mode=xyxy] # \u5177\u4f53\u6837\u672c sample = { \"bbox\" : [ 10 , 12 , 480 , 720 ] # correct } sample = { \"bbox\" : [ - 1 , 12 , 40 , 80 ] # correct } sample = { \"bbox\" : [ 1 , 2 , - 1 , 100 ] # correct } sample = { \"bbox\" : [ 1 , 2 , 10 , 10 , 1 ] # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3BBox Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.BBox \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import BBox # import BBox field field = BBox () # decare the BBox field data = [ 10 , 12 , 60 , 70 ] # define the data of a bounding box bbox_obj = field . validate ( data ) # return a dsdl.geometry.BBox object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9bounding box\u8fdb\u884c\u64cd\u4f5c\uff1a bbox_obj . xyxy # \u8f93\u51fa\u8be5bounding box\u7684xyxy\u5f62\u5f0f bbox_obj . area # \u8f93\u51fa\u8be5bounding box\u7684\u9762\u79ef bbox_obj . xmin # \u8f93\u51fa\u8be5bounding box\u7684\u5de6\u4e0a\u89d2\u70b9x\u5750\u6807 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.BBox\u90e8\u5206\u3002 7. RotatedBBox RotatedBBox\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u65cb\u8f6cbounding box\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { # \u53c2\u6570schema \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"enum\" : [ \"xywht\" , \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] } default_args = { # \u9ed8\u8ba4\u53c2\u6570 \"mode\" : \"xywht\" , \"measure\" : \"radian\" } args_schema \u7ea6\u675f\u4e86\u5728\u58f0\u660eRotatedBBox Field\u65f6\u9700\u8981\u6307\u5b9a\u53c2\u6570 mode \u4e0e measure \uff1a mode\uff1a\u8868\u793a\u4f20\u5165\u6570\u636e\u7684\u6a21\u5f0f\uff0c\u53ef\u4ee5\u9009\u62e9 xywht \u6216 xyxy \uff0c\u9ed8\u8ba4\u4e3a xywht xywht \uff1a\u4f20\u5165\u7684\u65cb\u8f6c\u76ee\u6807\u6846\u7684\u503c\u9700\u8981\u662f[x, y, w, h, theta]\u7684\u5f62\u5f0f xyxy \uff1a\u4f20\u5165\u7684\u65cb\u8f6c\u76ee\u6807\u6846\u7684\u503c\u9700\u8981\u662f[x1, y1, x2, y2, x3, y3, x4, y4]\u7684\u5f62\u5f0f measure\uff1a\u8868\u793a\u5728 xywht \u6a21\u5f0f\u4e0b\uff0c\u4f20\u5165\u7684\u89d2\u5ea6 theta \u7684\u5355\u4f4d\u662f\u5f27\u5ea6\u8fd8\u662f\u5ea6\u6570\uff0c\u53ef\u4ee5\u9009\u62e9 radian \u6216 degree \uff0c\u9ed8\u8ba4\u4e3a radian \uff1a radian \uff1a xywht \u6a21\u5f0f\u4e0b\uff0c\u4f20\u5165\u7684\u89d2\u5ea6 theta \u7684\u5355\u4f4d\u662f\u5f27\u5ea6 degree \uff1a xywht \u6a21\u5f0f\u4e0b\uff0c\u4f20\u5165\u7684\u89d2\u5ea6 theta \u7684\u5355\u4f4d\u662f\u5ea6\u6570 \u6570\u636eschema data_schema = { \"$id\" : \"/special/rotatedbbox\" , \"title\" : \"RotatedBBoxField\" , \"description\" : \"Rotated bounding box field in dsdl.\" , \"type\" : \"array\" , \"oneOf\" : [ { \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }]}, { \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} ] } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5305\u542b5\u4e2a\u5143\u7d20\uff08rotated bbox\u7684\u4e2d\u5fc3\u70b9xy\u5750\u6807\u3001\u5bbd\u9ad8\uff0c\u65cb\u8f6c\u89d2\u5ea6\uff09\u62168\u4e2a\u5143\u7d20\uff08rotated bbox\u7684\u56db\u4e2a\u9876\u70b9\u7684xy\u5750\u6807\uff09\uff0c\u5143\u7d20\u7c7b\u578b\u5fc5\u987b\u662f\u6570\u5b57\u7c7b\u578b\u3002 \u7531\u4e8e\u6211\u4eec\u5e0c\u671b\u5728mode\u4e3a xywht \u65f6\uff0c\u4f20\u5165\u7684\u5217\u8868\u4e3a5\u4e2a\u5143\u7d20\uff1bmode\u4e3a xyxy \u65f6\uff0c\u4f20\u5165\u7684\u5217\u8868\u4e3a8\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u6211\u4eec\u989d\u5916\u4e3aRotateBBox Field\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u53c2\u6570+\u6570\u636e schema\uff0c\u6765\u89c4\u8303\u5b83\u7684\u53c2\u6570\u4e0e\u4f20\u5165\u6570\u636e\uff1a whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"enum\" : [ \"xywht\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } \u5b9e\u4f8b1 # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox # \u9ed8\u8ba4\u60c5\u51b5\u4e0b mode=xywht, measure=radian # \u5177\u4f53\u6837\u672c sample = { \"rbbox\" : [ 10 , 12 , 480 , 720 , 3.14 ] # correct } sample = { \"rbbox\" : [ - 1 , 12 , - 40 , 80 \uff0c 3.14 ] # wrong } sample = { \"rbbox\" : [ 12 \uff0c 12 \uff0c 12 \uff0c 13 \uff0c 14 \uff0c 13 \uff0c 14 \uff0c 12 ] # wrong } \u5b9e\u4f8b2 # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox[mode=xyxy] # \u9ed8\u8ba4\u60c5\u51b5\u4e0b measure=radian # \u5177\u4f53\u6837\u672c sample = { \"rbbox\" : [ 10 , 12 , 480 , 720 , 3.14 ] # wrong } sample = { \"rbbox\" : [ - 1 , 12 , - 40 , 80 \uff0c 3.14 ] # wrong } sample = { \"rbbox\" : [ 12 \uff0c 12 \uff0c 12 \uff0c 13 \uff0c 14 \uff0c 13 \uff0c 14 \uff0c 12 ] # correct } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3RotatedBBox Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.RBBox \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import RotatedBBox # import RotatedBBox field field = RotatedBBox ( mode = \"xywht\" , measure = \"radian\" ) # decare the RotatedBBox field data = [ 10 , 12 , 60 , 70 , 3.14 ] # define the data of a rotated bounding box rotated_bbox_obj = field . validate ( data ) # return a dsdl.geometry.RBBox object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9rotated bounding box\u8fdb\u884c\u64cd\u4f5c\uff1a rotated_bbox_obj . polygon_value # \u8f93\u51fa\u8be5rotated bounding box\u7684xyxy\u5f62\u5f0f rotated_bbox_obj . rbbox_value # \u8f93\u51fa\u8be5rotated bounding box\u7684xywht\u5f62\u5f0f ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.RBBox\u90e8\u5206\u3002 8. Polygon Polygon\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684polygon\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/polygon\" , \"title\" : \"PolygonField\" , \"description\" : \"Polygon field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 2 , \"maxItems\" : 2 , } } } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5217\u8868\uff0c\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e5f\u662f\u4e00\u4e2a\u5217\u8868\uff08\u4ee3\u8868\u4e00\u4e2a\u95ed\u5408\u7684polygon\uff09\uff0c\u8be5\u5217\u8868\u4e2d\u518d\u5d4c\u5957\u4e00\u5c42\u5217\u8868\uff08\u4ee3\u8868\u6bcf\u4e2apoint\uff09\uff0c\u6700\u91cc\u5c42\u5217\u8868\u91cc\u5305\u542b\u4e24\u4e2a\u5143\u7d20\uff0c\u90fd\u9700\u8981\u662f\u6570\u5b57\u7c7b\u578b\uff0c\u4ee3\u8868\u8fd9\u4e2apoint\u7684xy\u5750\u6807\u3002\u5373\uff1a polygon = [ polygon_item1 , polygon_item2 , ... ] polygon_item = [ point1 , point2 , ... ] point = [ x , y ] \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : polygon : Polygon # \u5177\u4f53\u6837\u672c sample = { \"polygon\" : [ [[ 10 , 12 ], [ 480 , 720 ], [ 11 , 360 ]], [[ 45 , 34 ], [ 90 , 12 ], [ 11 , 56 ]] ] # correct } sample = { \"polygon\" : [[ 10 , 12 ], [ 480 , 720 ], [ 11 , 360 ]] # wrong } sample = { \"polygon\" : [ [[ 10 , 12 ], [ 480 , 720 ], [ 11 , 360 ]], ] # correct } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Polygon Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.Polygon \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import Polygon # import Polygon field field = Polygon () # decare the Polygon field data = [ [[ 10 , 12 ], [ 480 , 720 ], [ 11 , 360 ]], [[ 45 , 34 ], [ 90 , 12 ], [ 11 , 56 ]] ] # define the data of a polygon polygon_obj = field . validate ( data ) # return a dsdl.geometry.Polygon object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9bounding box\u8fdb\u884c\u64cd\u4f5c\uff1a polygon_obj . openmmlabformat # \u5c06\u6240\u6709\u7684\u70b9\u5e73\u94fa\uff08\u4e0eopenmmlab\u5b58\u50a8polygon\u7684\u683c\u5f0f\u4e00\u81f4\uff09 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.Polygon\u90e8\u5206\u3002 9. Text Text\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u6587\u672c\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u6570\u636eschema data_schema = { \"$id\" : \"/special/text\" , \"title\" : \"TextField\" , \"description\" : \"Text field in dsdl.\" , \"type\" : \"string\" } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u5b57\u7b26\u4e32\u7c7b\u578b\u3002 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : txt : Text # \u5177\u4f53\u6837\u672c sample = { \"txt\" : \"dsdl\" # correct } sample = { \"txt\" : 1 # wrong } sample = { \"txt\" : [ 1 , 2 , - 1 , 100 ] # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Text Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.Text \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import Text # import Text field field = Text () # decare the Text field data = \"dsdl\" # define the data of a text annotation text_obj = field . validate ( data ) # return a dsdl.geometry.BBox object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9text\u6807\u6ce8\u8fdb\u884c\u64cd\u4f5c\uff1a text_obj . value # \u8f93\u51fa\u8be5\u6587\u672c \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.Text\u90e8\u5206\u3002 10. ImageShape ImageShape\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u56fe\u50cf\u5c3a\u5bf8\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"properties\" : { \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"hw\" , \"wh\" ] } }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"mode\" ] } default_args = { \"mode\" : \"hw\" } \u58f0\u660eImageShape Field\u9700\u8981\u6307\u5b9a mode \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u7684\u503c\u53ef\u4ee5\u662f hw \u6216 wh \uff0c\u9ed8\u8ba4\u4e3a hw \uff1a hw \uff1aImageShape\u4f20\u5165\u7684\u503c\u5c06\u4f5c\u4e3a[\u9ad8\uff0c\u5bbd]\u6765\u89e3\u6790 wh \uff1aImageShape\u4f20\u5165\u7684\u503c\u5c06\u4f5c\u4e3a[\u5bbd\uff0c\u9ad8]\u6765\u89e3\u6790 \u6570\u636eschema data_schema = { \"$id\" : \"/special/imageshape\" , \"title\" : \"ImageShapeField\" , \"description\" : \"ImageShape field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"integer\" , \"minimum\" : 0 }, \"minItems\" : 2 , \"maxItems\" : 2 , } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5217\u8868\uff0c\u5143\u7d20\u6570\u76ee\u5fc5\u987b\u662f2\uff0c\u5143\u7d20\u5fc5\u987b\u662f\u4e0d\u5c0f\u4e8e0\u7684\u6574\u6570\u3002 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : shape : ImageShape[mode=wh] # \u5177\u4f53\u6837\u672c sample = { \"shape\" : [ 12 , 45 ] # correct } sample = { \"shape\" : [ 12 , - 1 ] # wrong } sample = { \"shape\" : [ 1 , 2 , 100 ] # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3ImageShape Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.ImageShape \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import ImageShape # import ImageShape field field = ImageShape () # decare the ImageShape field data = [ 360 , 960 ] # define the data of a imageshape shape_obj = field . validate ( data ) # return a dsdl.geometry.ImageShape object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9imageshape\u6807\u6ce8\u8fdb\u884c\u64cd\u4f5c\uff1a shape_obj . height # \u8f93\u51fa\u9ad8 shape_obj . width # \u8f93\u51fa\u5bbd \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.ImageShape\u90e8\u5206\u3002 11. UniqueID UniqueID\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u552f\u4e00ID\u6570\u636e\uff1a \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"properties\" : { \"id_type\" : { \"type\" : [ \"string\" , \"null\" ]} }, \"minProperties\" : 1 , \"maxProperties\" : 1 , \"required\" : [ \"id_type\" ] } default_args = { \"id_type\" : None } \u58f0\u660eUniqueID Field\u9700\u8981\u6307\u5b9a id_type \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u7684\u503c\u9700\u8981\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\u6216\u8005None\uff0c\u4e3b\u8981\u7528\u4e8e\u8868\u793a\u8be5UniqueID Field\u662f\u63cf\u8ff0\u4ec0\u4e48ID\u7684\uff0c\u9ed8\u8ba4\u503c\u4e3aNone\u3002 \u6570\u636eschema data_schema = { \"$id\" : \"/special/uniqueid\" , \"title\" : \"UniqueIDField\" , \"description\" : \"UniqueID field in dsdl.\" , \"type\" : \"string\" } \u8be5schema\u8868\u793a\u4f20\u5165\u7684\u503c\u5fc5\u987b\u8981\u662f\u5b57\u7b26\u4e32\u3002 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : uid : UniqueID[id_type=image_id] # \u7528\u4e8e\u8868\u793aImageID # \u5177\u4f53\u6837\u672c sample = { \"uid\" : \"image001\" # correct } sample = { \"uid\" : [ 12 , - 1 ] # wrong } sample = { \"uid\" : 1 # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3UniqueID Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.UniqueID \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import UniqueID # import UniqueID field field = UniqueID ( id_type = \"image_id\" ) # decare the UniqueID field data = \"image001\" # define the data of an image id uid_obj = field . validate ( data ) # return a dsdl.geometry.UniqueID object DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9UniqueID\u8fdb\u884c\u64cd\u4f5c\uff1a uid_obj . value # \u8f93\u51faid\u503c \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.UniqueID\u90e8\u5206\u3002 12. InstanceID InstanceID\u7c7b\u578bField\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u7279\u6b8a\u7684UniqueID Field\uff0c\u4e13\u95e8\u7528\u6765\u8868\u793a\u5b9e\u4f8b\u7684\u552f\u4e00id\uff1a InstanceId Field\u7b49\u4ef7\u4e8e UniqueID[id_type=InstanceID] \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : ins_id : InstanceID # \u5177\u4f53\u6837\u672c sample = { \"ins_id\" : \"instance_001\" # correct } sample = { \"ins_id\" : [ 12 , - 1 ] # wrong } sample = { \"ins_id\" : 1 # wrong } 13. Label Label\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u7c7b\u522b\u6807\u6ce8\u7c7b\u578b\u3002 \u58f0\u660e\u53c2\u6570 \u7531\u4e8eLabel Field\u7528\u6765\u89c4\u8303\u4f20\u5165\u7684\u7c7b\u522b\u6807\u7b7e\u6570\u636e\uff0c\u56e0\u6b64\u5728\u58f0\u660eLabel Field\u65f6\u6211\u4eec\u9700\u8981\u6307\u660e\u8be5\u7c7b\u522b\u6807\u7b7e\u7684 ClassDomain \u3002\u4e0b\u9762\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u9996\u5148\u58f0\u660e\u4e00\u4e2aClassDomain\uff0c\u7136\u540e\u4f7f\u7528\u8be5ClassDomain\u6765\u58f0\u660eLabel Field\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684ClassDomain COCOClassDemoDom : $def : class_domain classes : - person - bicycle - car - motorcycle - airplane # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : category : Label[dom=COCOClassDemoDom] \u901a\u8fc7\u4e0a\u8ff0\u7684\u58f0\u660e\u8bed\u53e5\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2aClassDomain\u4e3aCOCOClassDemoDom\u7684Label Field\u3002 \u4f20\u5165\u6570\u636e \u5728\u4f20\u5165\u5177\u4f53\u7684label\u6570\u636e\u65f6\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4ee4\u6570\u636e\u9075\u5faa\u4e0b\u9762\u7684jsonschema\uff1a data_schema = { \"$id\" : \"/special/label\" , \"title\" : \"LabelField\" , \"description\" : \"Label field in dsdl.\" , \"type\" : [ \"string\" , \"integer\" ] } \u4f20\u5165\u7684\u503c\u9700\u8981\u662f\u6574\u6570\u7c7b\u578b\u6216\u8005\u5b57\u7b26\u4e32\u7c7b\u578b \u5982\u679c\u4f20\u5165\u7684\u6570\u636e\u662f\u6574\u6570\u7c7b\u578b\uff0c\u5219dsdl\u4f1a\u5c06\u5176\u7406\u89e3\u4e3a\u8be5Label\u5728ClassDomain\u4e2d\u7684\u5e8f\u53f7\uff1a data = { \"category\" : 1 } # \u8868\u793a COCOClassDemoDom\u7684\u7b2c1\u4e2alabel\uff08\u5373person\uff09 data = { \"category\" : 5 } # \u8868\u793a COCOClassDemoDom\u7684\u7b2c5\u4e2alabel\uff08\u5373airplane\uff09 data = { \"category\" : 6 } # error! COCOClassDemoDom\u4e2d\u53ea\u67095\u4e2alabel \u5982\u679c\u4f20\u5165\u7684\u6570\u636e\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5219dsdl\u4f1a\u5c06\u5176\u7406\u89e3\u4e3a\u8be5Label\u7684\u540d\u79f0\u6216\u8005 <classdomain name>::<label name> \uff1a data = { \"category\" : \"COCOClassDemoDom::person\" } # \u8868\u793a COCOClassDemoDom\u4e2d\u7684person data = { \"category\" : \"person\" } # \u8868\u793a COCOClassDemoDom\u4e2d\u7684person data = { \"category\" : \"OtherDom::person\" } # error! OtherDom\u6ca1\u6709\u5728Label Field\u4e2d\u88ab\u58f0\u660e data = { \"category\" : \"arrow\" } # error! COCOClassDemoDom\u4e2d\u4e0d\u5b58\u5728 arrow \u6570\u636e\u7c7b \u5728dsdl\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsd.geometry.Label \u5bf9\u8c61\uff1a from dsdl.geometry import ClassDomain from dsdl.fields import Label # \u5b9a\u4e49ClassDomain ClassDomain ( name = \"COCOClassDemoDom\" , classes = [ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" ], ) # \u58f0\u660eLabelField field = Label ( dom = \"COCOClassDemoDom\" ) # \u5b9e\u4f8b\u5316 data = \"COCOClassDemoDom::car\" label_obj = field . validate ( data ) DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9Label\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff1a label_obj . index_in_domain () # \u8fd4\u56de3\uff0c\u5373\u8be5\u7c7b\u522b\u5728classdomain\u4e2d\u7684\u5e8f\u53f7 label_obj . category_name # \u8fd4\u56de car\uff0c\u5373\u8be5\u7c7b\u522b\u7684\u540d\u79f0 \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.Label\u90e8\u5206\u3002 14. Keypoint Keypoint\u7c7b\u578bField\u7528\u6765\u8868\u793a\u6837\u672c\u4e2d\u7684\u5173\u952e\u70b9\u7c7b\u578b\u7684\u6570\u636e\u3002 \u58f0\u660e\u53c2\u6570 \u7531\u4e8e\u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u9700\u8981\u6211\u4eec\u4e8b\u5148\u6307\u5b9a\u4e00\u4e2a\u76ee\u6807\u4e2d\u5404\u4e2a\u5173\u952e\u70b9\u7684\u7c7b\u578b\u540d\u79f0\u4ee5\u53ca\u8fde\u7ed3\u5173\u7cfb\uff0c\u56e0\u6b64\u5728dsdl\u4e2d\u6211\u4eec\u9700\u8981\u5728\u58f0\u660eKeypoint Field\u65f6\u6307\u5b9a\u4e00\u4e2aClassDomain\uff0c\u5b9e\u4f8b\u5982\u4e0b\uff1a # \u5b9a\u4e49ClassDomain KeyPoint_person_ClassDom : $def : class_domain classes : - left_ankle - left_ear - left_elbow - left_eye - left_hip - left_knee - left_shoulder - left_wrist - nose - right_ankle - right_ear - right_elbow - right_eye - right_hip - right_knee - right_shoulder - right_wrist skeleton : - [ 16 , 14 ] - [ 14 , 12 ] - [ 17 , 15 ] - [ 15 , 13 ] - [ 12 , 13 ] - [ 6 , 12 ] - [ 7 , 13 ] - [ 6 , 7 ] - [ 6 , 8 ] - [ 7 , 9 ] - [ 8 , 10 ] - [ 9 , 11 ] - [ 2 , 3 ] - [ 1 , 2 ] - [ 1 , 3 ] - [ 2 , 4 ] - [ 3 , 5 ] - [ 4 , 6 ] - [ 5 , 7 ] # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : kp : Keypoint[dom=KeyPoint_person_ClassDom] \u5176\u4e2dskeleton\u5b57\u6bb5\u6307\u660e\u4e86classes\u5b57\u6bb5\u4e2d\u5404\u4e2a\u5173\u952e\u70b9\u7684\u8fde\u7ed3\u5173\u7cfb \u901a\u8fc7\u4e86\u4e0a\u9762\u7684yaml\u8bed\u53e5\uff0c\u6211\u4eec\u58f0\u660e\u4e86\u4e00\u4e2aClassDomain\u4e3aKeyPoint_person_ClassDom\u7684Keypoint Field\u3002 \u4f20\u5165\u6570\u636e \u5728\u4f20\u5165\u5177\u4f53\u7684keypoint\u6570\u636e\u65f6\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4ee4\u6570\u636e\u9075\u5faa\u4e0b\u9762\u7684jsonschema\uff1a data_schema = { \"$id\" : \"/special/keypoint\" , \"title\" : \"KeypointField\" , \"description\" : \"Keypoint Field in dsdl.\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"array\" , \"items\" : { \"type\" : \"number\" }, \"minItems\" : 3 , \"maxItems\" : 3 , } } \u8be5schema\u89c4\u5b9a\uff0c\u4f20\u5165\u7684keypoint\u503c\u5fc5\u987b\u662f\u4e00\u4e2a\u5217\u8868 \u8be5\u5217\u8868\u7684\u5143\u7d20\u4e5f\u5fc5\u987b\u662f\u4e00\u4e2a\u5143\u7d20\u6570\u76ee\u4e3a3\uff0c\u7c7b\u578b\u4e3a\u6570\u5b57\u7c7b\u578b\u7684\u5217\u8868\uff0c\u8868\u793a\u4e00\u4e2a\u5173\u952e\u70b9\u7684xy\u5750\u6807\u4ee5\u53ca\u662f\u5426\u53ef\u89c1 \u5b9e\u4f8b # \u5b9a\u4e49ClassDomain KeypointClassDom : $def : class_domain classes : - hand - arm - shoulder - neck - head skeleton : - [ 1 , 2 ] - [ 2 , 3 ] - [ 3 , 4 ] - [ 4 , 5 ] - [ 5 , 6 ] # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : kp : Keypoint[dom=KeypointClassDom] # \u5177\u4f53\u6837\u672c sample = { \"kp\" : [[ 1 , 3 , 1 ], [ 1 , 4 , 1 ], [ 2 , 3 , 1 ], [ 3 , 4 , 0 ], [ 5 , 5 , 1 ]] # correct } sample = { \"kp\" : [ 12 , - 1 ] # wrong } sample = { \"kp\" : 1 # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Keypoint Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.Keypoint \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.geometry import ClassDomain from dsdl.fields import Keypoint # \u5b9a\u4e49ClassDomain ClassDomain ( name = \"KeypointDom\" , classes = [ \"hand\" , \"arm\" , \"shoulder\" , \"neck\" , \"head\" ], skeleton = [[ 1 , 2 ], [ 2 , 3 ], [ 3 , 4 ], [ 4 , 5 ]] ) # \u58f0\u660eLabelField field = Keypoint ( dom = \"KeypointDom\" ) # \u5b9e\u4f8b\u5316 data = [[ 1 , 3 , 1 ], [ 1 , 4 , 1 ], [ 2 , 3 , 1 ], [ 3 , 4 , 0 ], [ 5 , 5 , 1 ]] kp_obj = field . validate ( data ) DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9Keypoint\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff1a kp_obj . points # \u8fd4\u56de\u6240\u6709\u70b9\u7684xy\u5750\u6807 kp_obj . visables # \u6240\u6709\u70b9\u662f\u5426\u53ef\u89c1 \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684dsdl.geometry.Keypoint\u90e8\u5206\u3002 \u5a92\u4f53\u7c7b\u578bField 1. Image Image\u7c7b\u578bField\u7528\u6765\u8868\u793a\u56fe\u50cf\u6570\u636e \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u4f20\u5165\u6570\u636eschema data_schema = { \"$id\" : \"/unstructure/image\" , \"title\" : \"ImageField\" , \"description\" : \"Image field in dsdl.\" , \"type\" : \"string\" , } Image Field\u7684\u4f20\u5165\u6570\u636e\u53ea\u8981\u6c42\u662f\u5b57\u7b26\u4e32\u5373\u53ef\uff0c\u8be5\u5b57\u7b26\u4e32\u4e00\u822c\u662f\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : img : Image # \u5177\u4f53\u6837\u672c sample = { \"img\" : \"dsdl.jpg\" # correct } sample = { \"img\" : 10.4 # wrong } sample = { \"img\" : True # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Image Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.Image \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import Image # import Image field from dsdl.objectio import LocalFileReader field = Image () # declare the Image field file_reader = LocalFileReader ( working_dir = \"the/dir/of/images\" ) field . set_file_reader ( file_reader ) # declare the file reader data = \"1.jpg\" img_obj = field . validate ( data ) # return a dsdl.geometry.Image object \u7531\u4e8e\u5728\u6807\u6ce8\u6587\u4ef6\u4e2d\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u53ea\u4f1a\u63d0\u4f9bImage\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u9700\u8981\u4e3aImage Field\u5bf9\u8c61\u6307\u5b9a\u4e00\u4e2afile reader\u5bf9\u8c61\uff0c\u4ece\u800c\u544a\u8bc9dsdl\u4ece\u54ea\u91cc\u8bfb\u53d6\u8be5\u56fe\u7247 DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9Image\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff1a img_obj . to_image () # \u5c06\u56fe\u50cf\u8f6c\u6362\u4e3aPIL.Image\u5bf9\u8c61 img_obj . to_array () # \u5c06\u56fe\u50cf\u8f6c\u6362\u4e3anumpy.ndarray\u5bf9\u8c61 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684 dsdl.geometry.Image \u90e8\u5206\u3002 2. LabelMap LabelMap\u7c7b\u578bField\u7528\u6765\u8868\u793a\u8bed\u4e49\u5206\u5272\u56fe \u58f0\u660e\u53c2\u6570 \u7531\u4e8e\u8bed\u4e49\u5206\u5272\u4efb\u52a1\u9700\u8981\u4e8b\u5148\u6307\u5b9a\u4e00\u4e2aClassDomain\uff0c\u56e0\u6b64\u5728\u58f0\u660eLabelMap Field\u65f6\u9700\u8981\u6307\u5b9a\u5b83\u7684ClassDomain\u3002\u6307\u5b9a\u65b9\u6cd5\u548cLabel Field\u3001Keypoint Field\u7c7b\u4f3c\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684ClassDomain COCOClassDemoDom : $def : class_domain classes : - person - bicycle - car - motorcycle - airplane # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : labelmap : LabelMap[dom=COCOClassDemoDom] \u901a\u8fc7\u4e0a\u9762\u7684yaml\u8bed\u53e5\uff0c\u58f0\u660e\u4e86\u4e00\u4e2aclass domain\u4e3aCOCOClassDemoDom\u7684LabelMap Field \u4f20\u5165\u6570\u636eschema data_schema = { \"$id\" : \"/unstructure/labelmap\" , \"title\" : \"LabelMapField\" , \"description\" : \"LabelMap field in dsdl.\" , \"type\" : \"string\" , } LabelMap Field\u7684\u4f20\u5165\u6570\u636e\u53ea\u8981\u6c42\u662f\u5b57\u7b26\u4e32\u5373\u53ef\uff0c\u8be5\u5b57\u7b26\u4e32\u4e00\u822c\u662f\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84 \u5b9e\u4f8b # \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684ClassDomain COCOClassDemoDom : $def : class_domain classes : - person - bicycle - car - motorcycle - airplane # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : labelmap : LabelMap[dom=COCOClassDemoDom] # \u5177\u4f53\u6837\u672c sample = { \"labelmap\" : \"dsdl_label.jpg\" # correct } sample = { \"labelmap\" : 10.4 # wrong } sample = { \"labelmap\" : True # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3LabelMap Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.LabelMap \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import LabelMap , ClassDomain # import LabelMap field from dsdl.objectio import LocalFileReader # \u5b9a\u4e49ClassDomain ClassDomain ( name = \"COCOClassDemoDom\" , classes = [ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" ], ) field = LabelMap ( dom = \"COCOClassDemoDom\" ) # declare the LabelMap field file_reader = LocalFileReader ( working_dir = \"the/dir/of/label/images\" ) field . set_file_reader ( file_reader ) # declare the file reader data = \"1.jpg\" labelmap_obj = field . validate ( data ) # return a dsdl.geometry.LabelMap object \u7531\u4e8e\u5728\u6807\u6ce8\u6587\u4ef6\u4e2d\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u53ea\u4f1a\u63d0\u4f9bImage\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u9700\u8981\u4e3aLabelMap Field\u5bf9\u8c61\u6307\u5b9a\u4e00\u4e2afile reader\u5bf9\u8c61\uff0c\u4ece\u800c\u544a\u8bc9dsdl\u4ece\u54ea\u91cc\u8bfb\u53d6\u8be5\u56fe\u7247 DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9labelmap image\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\uff1a labelmap_obj . to_image () # \u5c06\u5206\u5272\u56fe\u50cf\u8f6c\u6362\u4e3aPIL.Image\u5bf9\u8c61 labelmap_obj . to_array () # \u5c06\u5206\u5272\u56fe\u50cf\u8f6c\u6362\u4e3anumpy.ndarray\u5bf9\u8c61 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684 dsdl.geometry.LabelMap \u90e8\u5206\u3002 3. InstanceMap InstanceMap\u7c7b\u578bField\u7528\u6765\u8868\u793a\u5b9e\u4f8b\u5206\u5272\u56fe \u58f0\u660e\u53c2\u6570schema args_schema = { \"type\" : \"object\" , \"minProperties\" : 0 , \"maxProperties\" : 0 , } \u4f20\u5165\u6570\u636eschema data_schema = { \"$id\" : \"/unstructure/instancemap\" , \"title\" : \"InstanceMapField\" , \"description\" : \"InstanceMap field in dsdl.\" , \"type\" : \"string\" , } InstanceMap Field\u7684\u4f20\u5165\u6570\u636e\u53ea\u8981\u6c42\u662f\u5b57\u7b26\u4e32\u5373\u53ef\uff0c\u8be5\u5b57\u7b26\u4e32\u4e00\u822c\u662f\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84 \u5b9e\u4f8b # Struct \u5b9a\u4e49 LocalObjectEntry : $def : struct $fields : insmap : InstanceMap # \u5177\u4f53\u6837\u672c sample = { \"insmap\" : \"dsdl_instance.jpg\" # correct } sample = { \"insmap\" : 10.4 # wrong } sample = { \"insmap\" : True # wrong } \u6570\u636e\u7c7b \u5728DSDL\u4e2d\uff0c\u4f1a\u5c06\u4f20\u5165\u7684\u6ee1\u8db3Image Field\u89c4\u8303\u7684\u503c\u5b9e\u4f8b\u5316\u4e3a\u4e00\u4e2a dsdl.geometry.InstanceMap \u5bf9\u8c61\uff0c\u76f8\u5e94\u7684\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a from dsdl.fields import InstanceMap # import InstanceMap field from dsdl.objectio import LocalFileReader field = InstanceMap () # declare the InstanceMap field file_reader = LocalFileReader ( working_dir = \"the/dir/of/instance_images\" ) field . set_file_reader ( file_reader ) # declare the file reader data = \"1.jpg\" ins_obj = field . validate ( data ) # return a dsdl.geometry.Image object \u7531\u4e8e\u5728\u6807\u6ce8\u6587\u4ef6\u4e2d\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u53ea\u4f1a\u63d0\u4f9bInstanceMap\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u9700\u8981\u4e3aInstanceMap Field\u5bf9\u8c61\u6307\u5b9a\u4e00\u4e2afile reader\u5bf9\u8c61\uff0c\u4ece\u800c\u544a\u8bc9dsdl\u4ece\u54ea\u91cc\u8bfb\u53d6\u8be5\u56fe\u7247 DSDL\u4e3a\u7528\u6237\u9884\u8bbe\u4e00\u4e9b\u5e38\u7528\u65b9\u6cd5\u4e0e\u5c5e\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7528\u6237\u5bf9Instance \u56fe\u50cf\u8fdb\u884c\u64cd\u4f5c\uff1a ins_obj . to_image () # \u5c06\u5b9e\u4f8b\u56fe\u50cf\u8f6c\u6362\u4e3aPIL.Image\u5bf9\u8c61 ins_obj . to_array () # \u5c06\u5b9e\u4f8b\u56fe\u50cf\u8f6c\u6362\u4e3anumpy.ndarray\u5bf9\u8c61 ... \u5176\u4ed6\u65b9\u6cd5\u4e0e\u5c5e\u6027\u53ef\u4ee5\u53c2\u8003DSDL API\u6587\u6863\u7684 dsdl.geometry.InstanceMap \u90e8\u5206\u3002","title":"Field Overview"},{"location":"en/dsdl_language/install/","text":"Install","title":"Install"},{"location":"en/dsdl_language/install/#install","text":"","title":"Install"},{"location":"en/dsdl_language/overview/","text":"Overview Data is the cornerstone of artificial intelligence. The efficiency of data acquisition, exchange, and application directly impacts the advances in technologies and applications. Over the long history of AI, a vast quantity of data sets have been developed and distributed. However, these datasets are defined in very different forms, which incurs significant overhead when it comes to exchange, integration, and utilization -- it is often the case that one needs to develop a new customized tool or script in order to incorporate a new dataset into a workflow. To overcome such difficulties, we develop Data Set Description Language (DSDL) . Design Goals The design of DSDL is driven by three goals, namely generic , portable , extensible . We refer to these three goals together as GPE . Generic This language aims to provide a unified representation standard for data in multiple fields of artificial intelligence, rather than being designed for a single field or task. It should be able to express data sets with different modalities and structures in a consistent format. Portable Write once, distribute everywhere. Dataset descriptions can be widely distributed and exchanged, and used in different environments without modification of the source files. The achievement of this goal is crucial for creating an open and thriving ecosystem. To this end, we need to carefully examine the details of the design, and remove unnecessary dependencies on specific assumptions about the underlying facilities or organizations. Extensible One should be able to extend the boundary of expression without modifying the core standard. For a programming language such as C++ or Python, its application boundaries can be significantly extended by libraries or packages, while the core language remains stable over a long period. Such libraries and packages form a rich ecosystem, making the language stay alive for a very long time. Design Overview A data set is essentially a data structure stored in persistent storages. In general, it comprises unstructured objects, e.g. images, videos, and texts, together with associated annotations. Such elements are aggregated in certain ways into a data set. It is noteworthy that the unstructured objects mentioned above usually contain large volume of data. To facilitate quick distribution of data sets, our design separates the structured description of a dataset from the content of unstructured objects. Below is an overall summary of the language design: Basic data model DSDL describes a data set with a collection of basic elements organized via containers such as structs , lists , and sets . Basic elements are individual units in a data set description, which include not only the primitives such as numbers, strings, but also those elements that facilitate the expression of object locations, annotations, etc. Unstructured objects such as images, videos, and texts, are special basic elements, as they are indivisible in a data set description. In particular, an unstructured object is represented by an object locator which tells where it is stored instead of being embedded into the description entirely. Optionally, additional descriptors can be used to provide additional information about the object, e.g. the format or resolution of an image. Aggregates are used to organize basic elements into a data structure. DSDL provides list and struct types to express aggregate data structures. In particular, individual samples are represented by a struct (an aggregate of multiple fields), while a data set consists of a list of samples. Extensible type system All elements and structured units in DSDL have types. DSDL adopts a simple yet extensible type systems. Specifically, there are three kinds of types in DSDL: Primitive types are the types of primitive values such as booleans, numbers, and strings. DSDL provides a large collection of primitive types, which serve as the basic building blocks of the description. Note that different primitive types in DSDL can be expressed in the same form. For example, object locators and time stamps both use strings as their expression form, but the string values will be interpreted diffferently depending on the underlying types. Unstructured object classes are the abstractions for unstructured objects, such as images, videos, audios, point clouds, texts, etc. Such objects, despite their rich internal structures, are considered as indivisible units in data set definitions. DSDL provides a collection of pre-defined unstructured object classes to cover common applications, while allowing 3rd parties to extend this collection by registering new unstructured object classes via a minimal set of interfaces. Struct classes are the abstractions for aggregate data structures in DSDL. Each instance of a struct class is called a struct , which contains multiple fields, each with its own type. An important application of structs are to represent data samples. DSDL comes with a collection of predefined struct classes for commonly seen tasks in the standard library, while allowing users to define their own struct classes for special tasks. Types need to be defined (either builtin, by 3rd parties, or by the user) before they are used. Circular references are not allowed in this version of DSDL. Object locators As mentioned, unstructured objects are not embedded entirely into the data set description. Instead, they are referred to by object locators . In particular, an object locator is a string with special format, which will be converted into an actual address by the DSDL interpreter when the corresponding object is to be loaded. The introduction of object locators is the key to separating the structured description of the data set from the unstructured media content. This way not only enables light-weight distribution of data set descriptions without moving the large volume of media data, but also allows quick manipulation of a data set, e.g. combining multiple sets, merging properties, or taking a subset. Based on JSON or YAML DSDL is a domain-specific language based on popular data exchange languages: JSON or YAML . Note that the elements in JSON or YAML are not associated with specific meanings at the language level. By endowing such elements with semantics, DSDL can describe a data set in a meaningful manner. This design choice allows one to leverage the rich tool systems already available for JSON and YAML. With such tools, one can readily build a full-fledged system that fully supports interpretation, validation, and query, and as well as the interoperability with the Internet ecosystem.","title":"Overview"},{"location":"en/dsdl_language/overview/#overview","text":"Data is the cornerstone of artificial intelligence. The efficiency of data acquisition, exchange, and application directly impacts the advances in technologies and applications. Over the long history of AI, a vast quantity of data sets have been developed and distributed. However, these datasets are defined in very different forms, which incurs significant overhead when it comes to exchange, integration, and utilization -- it is often the case that one needs to develop a new customized tool or script in order to incorporate a new dataset into a workflow. To overcome such difficulties, we develop Data Set Description Language (DSDL) .","title":"Overview"},{"location":"en/dsdl_language/overview/#design-goals","text":"The design of DSDL is driven by three goals, namely generic , portable , extensible . We refer to these three goals together as GPE . Generic This language aims to provide a unified representation standard for data in multiple fields of artificial intelligence, rather than being designed for a single field or task. It should be able to express data sets with different modalities and structures in a consistent format. Portable Write once, distribute everywhere. Dataset descriptions can be widely distributed and exchanged, and used in different environments without modification of the source files. The achievement of this goal is crucial for creating an open and thriving ecosystem. To this end, we need to carefully examine the details of the design, and remove unnecessary dependencies on specific assumptions about the underlying facilities or organizations. Extensible One should be able to extend the boundary of expression without modifying the core standard. For a programming language such as C++ or Python, its application boundaries can be significantly extended by libraries or packages, while the core language remains stable over a long period. Such libraries and packages form a rich ecosystem, making the language stay alive for a very long time.","title":"Design Goals"},{"location":"en/dsdl_language/overview/#design-overview","text":"A data set is essentially a data structure stored in persistent storages. In general, it comprises unstructured objects, e.g. images, videos, and texts, together with associated annotations. Such elements are aggregated in certain ways into a data set. It is noteworthy that the unstructured objects mentioned above usually contain large volume of data. To facilitate quick distribution of data sets, our design separates the structured description of a dataset from the content of unstructured objects. Below is an overall summary of the language design:","title":"Design Overview"},{"location":"en/dsdl_language/overview/#basic-data-model","text":"DSDL describes a data set with a collection of basic elements organized via containers such as structs , lists , and sets . Basic elements are individual units in a data set description, which include not only the primitives such as numbers, strings, but also those elements that facilitate the expression of object locations, annotations, etc. Unstructured objects such as images, videos, and texts, are special basic elements, as they are indivisible in a data set description. In particular, an unstructured object is represented by an object locator which tells where it is stored instead of being embedded into the description entirely. Optionally, additional descriptors can be used to provide additional information about the object, e.g. the format or resolution of an image. Aggregates are used to organize basic elements into a data structure. DSDL provides list and struct types to express aggregate data structures. In particular, individual samples are represented by a struct (an aggregate of multiple fields), while a data set consists of a list of samples.","title":"Basic data model"},{"location":"en/dsdl_language/overview/#extensible-type-system","text":"All elements and structured units in DSDL have types. DSDL adopts a simple yet extensible type systems. Specifically, there are three kinds of types in DSDL: Primitive types are the types of primitive values such as booleans, numbers, and strings. DSDL provides a large collection of primitive types, which serve as the basic building blocks of the description. Note that different primitive types in DSDL can be expressed in the same form. For example, object locators and time stamps both use strings as their expression form, but the string values will be interpreted diffferently depending on the underlying types. Unstructured object classes are the abstractions for unstructured objects, such as images, videos, audios, point clouds, texts, etc. Such objects, despite their rich internal structures, are considered as indivisible units in data set definitions. DSDL provides a collection of pre-defined unstructured object classes to cover common applications, while allowing 3rd parties to extend this collection by registering new unstructured object classes via a minimal set of interfaces. Struct classes are the abstractions for aggregate data structures in DSDL. Each instance of a struct class is called a struct , which contains multiple fields, each with its own type. An important application of structs are to represent data samples. DSDL comes with a collection of predefined struct classes for commonly seen tasks in the standard library, while allowing users to define their own struct classes for special tasks. Types need to be defined (either builtin, by 3rd parties, or by the user) before they are used. Circular references are not allowed in this version of DSDL.","title":"Extensible type system"},{"location":"en/dsdl_language/overview/#object-locators","text":"As mentioned, unstructured objects are not embedded entirely into the data set description. Instead, they are referred to by object locators . In particular, an object locator is a string with special format, which will be converted into an actual address by the DSDL interpreter when the corresponding object is to be loaded. The introduction of object locators is the key to separating the structured description of the data set from the unstructured media content. This way not only enables light-weight distribution of data set descriptions without moving the large volume of media data, but also allows quick manipulation of a data set, e.g. combining multiple sets, merging properties, or taking a subset.","title":"Object locators"},{"location":"en/dsdl_language/overview/#based-on-json-or-yaml","text":"DSDL is a domain-specific language based on popular data exchange languages: JSON or YAML . Note that the elements in JSON or YAML are not associated with specific meanings at the language level. By endowing such elements with semantics, DSDL can describe a data set in a meaningful manner. This design choice allows one to leverage the rich tool systems already available for JSON and YAML. With such tools, one can readily build a full-fledged system that fully supports interpretation, validation, and query, and as well as the interoperability with the Internet ecosystem.","title":"Based on JSON or YAML"},{"location":"en/dsdl_language/tutorial/","text":"Tutorial","title":"Tutorial"},{"location":"en/dsdl_language/tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"en/dsdl_language/examples/cv/","text":"Computer Vision Examples All classes defined in this section will be provided in a standard library named ``cv``. General users just need to import ``cv``, and don't need to write the class definitions by themselves. Through out the example below, we use a class domain named ``MyClassDom``. Image Classification The task of image classification is to assign a class label to each image. Sample class definition: ImageClassificationSample : # Each sample contains an image together with a class label (optional). $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] $optional : [ 'label' ] Here, the fields in the $optional list can be omitted in the data samples. When label is omitted, the corresponding field value will be set to a null value (in Python it is None ). Data samples: data : sample-type : ImageClassificationSample[cdom=MyClassDom] samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } - { image : \"xyz/0003.jpg\" } Object Detection The task of object detection is to detect meaningful objects on an image. Each detected object can be represented by a bounding box together with an object class label. Sample class definition: LocalObjectEntry : # Each sample contains a bounding box together a class label (optional). $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] $optional : [ 'label' ] ObjectDetectionSample : # Each sample contains an image together with a list of local objects. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] Data samples: data : sample-type : ObjectDetectionSample[cdom=MyClassDom] samples : - image : \"xyz/0001.jpg\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 } Object Detection with Scene Classification In certain applications, scene classification (at the image level) and object detection are combined into a joint task. For such a task, we can have two class domains, say SceneDom and ObjectDom , respectively for scene classes and object classes. Sample class definition: SceneAndObjectSample : # Each samples contains an image, a scene label (optional) # together with a list of local objects. $def : struct $params : [ 'scenedom' , 'objectdom' ] $fields : image : Image sclabel : Label[dom=$scenedom] objects : List[LocalObjectEntry[cdom=$objectdom]] $optional : [ 'sclabel' ] Data samples: data : sample-type : SceneAndObjectSample[scenedom=SceneDom, objectdom=ObjectDom] samples : - image : \"xyz/0001.jpg\" sclabel : \"street\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" sclabel : \"river\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 } Image Segmentation The image segmentation task is to assign pixel-wise labels to an image. A common practice is to use a labelmap, which is stored as an unstructured object in an external file. Sample class definition: ImageSegmentationSample : # Each sample contains an image together with a label map. $def : struct $params : [ 'cdom' ] $fields : image : Image labelmap : LabelMap[dom=$cdom] Data samples: data : sample-type : ImageSegmentationSample[cdom=MyClassDom] samples : - { image : \"imgs/0001.jpg\" , labelmap : \"maps/0001.ppm\" } - { image : \"imgs/0002.jpg\" , labelmap : \"maps/0002.ppm\" } - { image : \"imgs/0003.jpg\" , labelmap : \"maps/0003.ppm\" }","title":"Computer Vision"},{"location":"en/dsdl_language/examples/cv/#computer-vision-examples","text":"All classes defined in this section will be provided in a standard library named ``cv``. General users just need to import ``cv``, and don't need to write the class definitions by themselves. Through out the example below, we use a class domain named ``MyClassDom``.","title":"Computer Vision Examples"},{"location":"en/dsdl_language/examples/cv/#image-classification","text":"The task of image classification is to assign a class label to each image. Sample class definition: ImageClassificationSample : # Each sample contains an image together with a class label (optional). $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] $optional : [ 'label' ] Here, the fields in the $optional list can be omitted in the data samples. When label is omitted, the corresponding field value will be set to a null value (in Python it is None ). Data samples: data : sample-type : ImageClassificationSample[cdom=MyClassDom] samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } - { image : \"xyz/0003.jpg\" }","title":"Image Classification"},{"location":"en/dsdl_language/examples/cv/#object-detection","text":"The task of object detection is to detect meaningful objects on an image. Each detected object can be represented by a bounding box together with an object class label. Sample class definition: LocalObjectEntry : # Each sample contains a bounding box together a class label (optional). $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] $optional : [ 'label' ] ObjectDetectionSample : # Each sample contains an image together with a list of local objects. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] Data samples: data : sample-type : ObjectDetectionSample[cdom=MyClassDom] samples : - image : \"xyz/0001.jpg\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 }","title":"Object Detection"},{"location":"en/dsdl_language/examples/cv/#object-detection-with-scene-classification","text":"In certain applications, scene classification (at the image level) and object detection are combined into a joint task. For such a task, we can have two class domains, say SceneDom and ObjectDom , respectively for scene classes and object classes. Sample class definition: SceneAndObjectSample : # Each samples contains an image, a scene label (optional) # together with a list of local objects. $def : struct $params : [ 'scenedom' , 'objectdom' ] $fields : image : Image sclabel : Label[dom=$scenedom] objects : List[LocalObjectEntry[cdom=$objectdom]] $optional : [ 'sclabel' ] Data samples: data : sample-type : SceneAndObjectSample[scenedom=SceneDom, objectdom=ObjectDom] samples : - image : \"xyz/0001.jpg\" sclabel : \"street\" objects : - { bbox : [ x1 , y1 , w1 , h1 ], label : 1 } - { bbox : [ x2 , y2 , w2 , h2 ], label : 2 } - { bbox : [ x3 , y3 , w3 , h3 ], label : 2 } - image : \"xyz/0002.jpg\" sclabel : \"river\" objects : - { bbox : [ x4 , y4 , w4 , h4 ], label : 3 } - { bbox : [ x5 , y5 , w5 , h5 ], label : 4 }","title":"Object Detection with Scene Classification"},{"location":"en/dsdl_language/examples/cv/#image-segmentation","text":"The image segmentation task is to assign pixel-wise labels to an image. A common practice is to use a labelmap, which is stored as an unstructured object in an external file. Sample class definition: ImageSegmentationSample : # Each sample contains an image together with a label map. $def : struct $params : [ 'cdom' ] $fields : image : Image labelmap : LabelMap[dom=$cdom] Data samples: data : sample-type : ImageSegmentationSample[cdom=MyClassDom] samples : - { image : \"imgs/0001.jpg\" , labelmap : \"maps/0001.ppm\" } - { image : \"imgs/0002.jpg\" , labelmap : \"maps/0002.ppm\" } - { image : \"imgs/0003.jpg\" , labelmap : \"maps/0003.ppm\" }","title":"Image Segmentation"},{"location":"en/dsdl_language/lang/basic_types/","text":"Basic Types Basic types are the types for basic elements in DSDL. The instances of basic types serve as the basic building blocks of a data set description. Note : The underlying language, namely JSON and YAML, provides several primitive literals, such as boolean, number, string. While using such literals to express values, DSDL maintains its own basic types. It is important to note that association between DSDL basic types and JSON primitive types is NOT one-to-one. Different DSDL basic types can adopt the same primitive type for expressing their values. For example, object locators and labels are of different types ( Loc and Label in this example) in DSDL, but they both use strings for expressing values. Generic basic types DSDL defines four generic basic types. The values of such types are simply interpreted, without special meaning. Bool : boolean type, which can take either of the two values: true and false . Int : integer type, which can take any integral values, such as 12 , -3 , or 0 . When a number has the Int type, the DSDL interpreter should verify if it is actually an integer. Num : general numeric type, which can take any numeric values, such as 12.5 , -13 , 1.25e-6 . Str : string type, which can take arbitrary strings, such as \"hello\" , \"a\" , \"\" . Special basic types DSDL defines a collection of basic types with special meanings. The values of these types are also expressed as strings or other common JSON forms, but they have specific semantics and DSDL interpreter will interpret them accordingly. Coord : 2D coordinate in the form of [x, y] . Coord3D```: 3D coordinate in the form of [x, y, z]``. Interval : sequential interval in the form of [begin, end] . BBox : bounding box in the form of [x, y, w, h] . Polygon : polygon represented in the form of a series of 2D coordinates as [[x1, y1], [x2, y2], ...] . Date : date represented by a string, according to the strftime spec . Time : time represented by a string, according to the strftime spec . Label: class label type Classification is a common way to endow an object with semantic meaning. In this approach, class labels are often used to express the category which an object belongs to. In DSDL, class labels are strings with type Label . In practice, labels in different classification domains are different. DSDL introduces the concept of class domain to represent different contexts for classification. Each class domain provides a class list or a class hierarchy. Given a class domain, the labels are can be expressed in either of the following two forms: name-based : with format \"<class-domain>::<class-name>\" , e.g. \"COCO::cat\" represents the class cat in the COCO domain. index-based : with format \"<class-domain>[class-index]\" , e.g. \"COCO[3]\" represents thr 3rd class in the COCO domain. For a class domain with a multi-level class hierarchy, the class label can be expressed as a dot-delimited path, such as \"MyDom::animal.dog.hound\" or \"MyDom[3.2.5]\" . Note : We are working on unifying class systems for specific areas. The efforts would result in a standard classification domain. We reserve the domain name std for this. Loc: object locator type Object locators are used as references to unstructured objects, such as images, videos, and texts. They are instances of the type Loc , and are represented by a specially-formatted string. Specifically, DSDL supports three ways to express an object locator: relative path : the path relative to the root data path. This is the default way. When there is no special prefix, an object locator string will be treated as a relative path. For example, \"abc/001.jpg\" will be interpreted as \"<data-root>/abc/001.jpg\" , where data-root is the root directory where all data objects are stored and can be specified via environment configurations. alias path : when a data set comprises data objects stored in multiple source directories, one can use alias to simplify the expression of paths, e.g. \"$mydir1/abc/001.jpg\" , where $ implies that mydir1 is an alias, which should be specified by either by a global variable in the description file or by an environment variable. object id : a string with prefix :: , e.g. \"::cuhk.ie::abcd1234xyz\" , where cuhk.ie is the name of a data domain, while abcd1234xyz is an ID string which uniquely identifies an data object in the data domain. When object ids are used, the data platform needs to provide a Key-value mapping facility to map an ID string to the corresponding actual address. Using type parameters From the standpoint of the DSDL interpretator, the type of an element determines how that element is intepreted and validated. In addition to the type name itself, DSDL allows one to provide type parameters to customize how the corresponding elements should be expressed, interpreted, and validated. Label type with parameters In the example in {ref} get_started , the field label of ImageClassificationSample has the type specified as Label[dom=MyClassDom] . Here, Label is a parametric type , which accepts a type parameter dom . This dom parameter specifies the class domain where the label comes from. When the domain is explicitly given (here it is given as MyClassDom ), there is no need to provide the class domain names in the values, and thus the labels can be expressed as either the class name or the index. For example, a value \"cat\" indicates the fully qualified label \"MyClassDom::cat\" ; an integer value 2 indicates the class label \"MyClassDom[2]\" . Date and Time types with parameters For Date and Time types, when no parameters are explicitly provided, the values should conform to the ISO 8601 format. The interpreter will invoke date.fromisoformat and time.fromisoformat methods to parse the string. One can also specify a customized format using the type parameter fmt . For example, one can use a type Time[fmt=\"%H:%M\"] , which requires the value should follow the %H:%M format, e.g. \"15:32\" . When fmt is explicitly specified, the value of fmt will be fed to strptime function to parse the time string. Note that this parameter also works for Date type. List type DSDL provides a parametric type List to express unordered or ordered lists. Specifically, an instance of List is a list that contains multiple elements of a certain element type. The parametric type List has two parameters: etype : the type of each individual element. This parameter must be explicitly specified. ordered : whether there is an sequential order among elements. This parameter is optional, and its default value is false . This need should only be set to true for truly sequential types, e.g. sequence of video frames or time series. For example, for a list of integers, we can specify the type as List[Int] ; for a list of class labels within the domain MyClassDom , we can specify the type as List[Label[MyClassDom]] .","title":"Basic Types"},{"location":"en/dsdl_language/lang/basic_types/#basic-types","text":"Basic types are the types for basic elements in DSDL. The instances of basic types serve as the basic building blocks of a data set description. Note : The underlying language, namely JSON and YAML, provides several primitive literals, such as boolean, number, string. While using such literals to express values, DSDL maintains its own basic types. It is important to note that association between DSDL basic types and JSON primitive types is NOT one-to-one. Different DSDL basic types can adopt the same primitive type for expressing their values. For example, object locators and labels are of different types ( Loc and Label in this example) in DSDL, but they both use strings for expressing values.","title":"Basic Types"},{"location":"en/dsdl_language/lang/basic_types/#generic-basic-types","text":"DSDL defines four generic basic types. The values of such types are simply interpreted, without special meaning. Bool : boolean type, which can take either of the two values: true and false . Int : integer type, which can take any integral values, such as 12 , -3 , or 0 . When a number has the Int type, the DSDL interpreter should verify if it is actually an integer. Num : general numeric type, which can take any numeric values, such as 12.5 , -13 , 1.25e-6 . Str : string type, which can take arbitrary strings, such as \"hello\" , \"a\" , \"\" .","title":"Generic basic types"},{"location":"en/dsdl_language/lang/basic_types/#special-basic-types","text":"DSDL defines a collection of basic types with special meanings. The values of these types are also expressed as strings or other common JSON forms, but they have specific semantics and DSDL interpreter will interpret them accordingly. Coord : 2D coordinate in the form of [x, y] . Coord3D```: 3D coordinate in the form of [x, y, z]``. Interval : sequential interval in the form of [begin, end] . BBox : bounding box in the form of [x, y, w, h] . Polygon : polygon represented in the form of a series of 2D coordinates as [[x1, y1], [x2, y2], ...] . Date : date represented by a string, according to the strftime spec . Time : time represented by a string, according to the strftime spec .","title":"Special basic types"},{"location":"en/dsdl_language/lang/basic_types/#label-class-label-type","text":"Classification is a common way to endow an object with semantic meaning. In this approach, class labels are often used to express the category which an object belongs to. In DSDL, class labels are strings with type Label . In practice, labels in different classification domains are different. DSDL introduces the concept of class domain to represent different contexts for classification. Each class domain provides a class list or a class hierarchy. Given a class domain, the labels are can be expressed in either of the following two forms: name-based : with format \"<class-domain>::<class-name>\" , e.g. \"COCO::cat\" represents the class cat in the COCO domain. index-based : with format \"<class-domain>[class-index]\" , e.g. \"COCO[3]\" represents thr 3rd class in the COCO domain. For a class domain with a multi-level class hierarchy, the class label can be expressed as a dot-delimited path, such as \"MyDom::animal.dog.hound\" or \"MyDom[3.2.5]\" . Note : We are working on unifying class systems for specific areas. The efforts would result in a standard classification domain. We reserve the domain name std for this.","title":"Label: class label type"},{"location":"en/dsdl_language/lang/basic_types/#loc-object-locator-type","text":"Object locators are used as references to unstructured objects, such as images, videos, and texts. They are instances of the type Loc , and are represented by a specially-formatted string. Specifically, DSDL supports three ways to express an object locator: relative path : the path relative to the root data path. This is the default way. When there is no special prefix, an object locator string will be treated as a relative path. For example, \"abc/001.jpg\" will be interpreted as \"<data-root>/abc/001.jpg\" , where data-root is the root directory where all data objects are stored and can be specified via environment configurations. alias path : when a data set comprises data objects stored in multiple source directories, one can use alias to simplify the expression of paths, e.g. \"$mydir1/abc/001.jpg\" , where $ implies that mydir1 is an alias, which should be specified by either by a global variable in the description file or by an environment variable. object id : a string with prefix :: , e.g. \"::cuhk.ie::abcd1234xyz\" , where cuhk.ie is the name of a data domain, while abcd1234xyz is an ID string which uniquely identifies an data object in the data domain. When object ids are used, the data platform needs to provide a Key-value mapping facility to map an ID string to the corresponding actual address.","title":"Loc: object locator type"},{"location":"en/dsdl_language/lang/basic_types/#using-type-parameters","text":"From the standpoint of the DSDL interpretator, the type of an element determines how that element is intepreted and validated. In addition to the type name itself, DSDL allows one to provide type parameters to customize how the corresponding elements should be expressed, interpreted, and validated. Label type with parameters In the example in {ref} get_started , the field label of ImageClassificationSample has the type specified as Label[dom=MyClassDom] . Here, Label is a parametric type , which accepts a type parameter dom . This dom parameter specifies the class domain where the label comes from. When the domain is explicitly given (here it is given as MyClassDom ), there is no need to provide the class domain names in the values, and thus the labels can be expressed as either the class name or the index. For example, a value \"cat\" indicates the fully qualified label \"MyClassDom::cat\" ; an integer value 2 indicates the class label \"MyClassDom[2]\" . Date and Time types with parameters For Date and Time types, when no parameters are explicitly provided, the values should conform to the ISO 8601 format. The interpreter will invoke date.fromisoformat and time.fromisoformat methods to parse the string. One can also specify a customized format using the type parameter fmt . For example, one can use a type Time[fmt=\"%H:%M\"] , which requires the value should follow the %H:%M format, e.g. \"15:32\" . When fmt is explicitly specified, the value of fmt will be fed to strptime function to parse the time string. Note that this parameter also works for Date type.","title":"Using type parameters"},{"location":"en/dsdl_language/lang/basic_types/#list-type","text":"DSDL provides a parametric type List to express unordered or ordered lists. Specifically, an instance of List is a list that contains multiple elements of a certain element type. The parametric type List has two parameters: etype : the type of each individual element. This parameter must be explicitly specified. ordered : whether there is an sequential order among elements. This parameter is optional, and its default value is false . This need should only be set to true for truly sequential types, e.g. sequence of video frames or time series. For example, for a list of integers, we can specify the type as List[Int] ; for a list of class labels within the domain MyClassDom , we can specify the type as List[Label[MyClassDom]] .","title":"List type"},{"location":"en/dsdl_language/lang/class_dom/","text":"","title":"Class Domain"},{"location":"en/dsdl_language/lang/data_section/","text":"","title":"Data Section"},{"location":"en/dsdl_language/lang/get_started/","text":"Get Started In DSDL, a data set is described by a data set description file . Below is an example that illustrates a typical data set description file. The data set description file can be in either JSON or YAML format. JSON Format: { \"$dsdl-version\" : \"0.5.0\" , \"meta\" : { \"name\" : \"my-dataset\" , \"creator\" : \"my-team\" , \"dataset-version\" : \"1.0.0\" }, \"defs\" : { \"MyClassDom\" : { \"$def\" : \"class_domain\" , \"classes\" : [ \"dog\" , \"cat\" , \"fish\" , \"tiger\" ] }, \"ImageClassificationSample\" : { \"$def\" : \"struct\" , \"$fields\" : { \"image\" : \"Image\" , \"label\" : \"Label[dom=MyClassDom]\" } } }, \"data\" : { \"sample-type\" : \"ImageClassificationSample\" , \"samples\" : [ { \"image\" : \"xyz/0001.jpg\" , \"label\" : \"cat\" }, { \"image\" : \"xyz/0002.jpg\" , \"label\" : \"dog\" } ] } } YAML format: $dsdl-version : \"0.5.0\" meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } Both JSON and YAML formats can express exactly the same data structure. Due to YAML's more concise form and that it allows comments, we will use YAML as the default format in later examples of this document, which can be easily translated into JSON format. At the top level, the file consists of four parts: header specifies about how the description file should be interpreted; meta section provides meta information about the data set; defs section provides global definitions, e.g. user-defined types; data section describes the data contained in the data set. Note : The property names with a prefix $ are reserved by DSDL for special meaning. DSDL version (the property with name $dsdl-version in the header) must be explicitly specified. It is crucial for the DSDL interpreter to know the language version in order to interpret the description correctly. The definition for common types are often provided in standard or extended libraries. In most cases, users don't need to define their own types. In this example, we define ImageClassificationSample just for the purpose of illustration and being self-contained.","title":"Get Started"},{"location":"en/dsdl_language/lang/get_started/#get-started","text":"In DSDL, a data set is described by a data set description file . Below is an example that illustrates a typical data set description file. The data set description file can be in either JSON or YAML format. JSON Format: { \"$dsdl-version\" : \"0.5.0\" , \"meta\" : { \"name\" : \"my-dataset\" , \"creator\" : \"my-team\" , \"dataset-version\" : \"1.0.0\" }, \"defs\" : { \"MyClassDom\" : { \"$def\" : \"class_domain\" , \"classes\" : [ \"dog\" , \"cat\" , \"fish\" , \"tiger\" ] }, \"ImageClassificationSample\" : { \"$def\" : \"struct\" , \"$fields\" : { \"image\" : \"Image\" , \"label\" : \"Label[dom=MyClassDom]\" } } }, \"data\" : { \"sample-type\" : \"ImageClassificationSample\" , \"samples\" : [ { \"image\" : \"xyz/0001.jpg\" , \"label\" : \"cat\" }, { \"image\" : \"xyz/0002.jpg\" , \"label\" : \"dog\" } ] } } YAML format: $dsdl-version : \"0.5.0\" meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } Both JSON and YAML formats can express exactly the same data structure. Due to YAML's more concise form and that it allows comments, we will use YAML as the default format in later examples of this document, which can be easily translated into JSON format. At the top level, the file consists of four parts: header specifies about how the description file should be interpreted; meta section provides meta information about the data set; defs section provides global definitions, e.g. user-defined types; data section describes the data contained in the data set. Note : The property names with a prefix $ are reserved by DSDL for special meaning. DSDL version (the property with name $dsdl-version in the header) must be explicitly specified. It is crucial for the DSDL interpreter to know the language version in order to interpret the description correctly. The definition for common types are often provided in standard or extended libraries. In most cases, users don't need to define their own types. In this example, we define ImageClassificationSample just for the purpose of illustration and being self-contained.","title":"Get Started"},{"location":"en/dsdl_language/lang/libraries/","text":"Libraries Whereas we are already trying to simplify the design of DSDL, some efforts remain needed to learn how to define classes in DSDL. However, we understand that most AI researchers or developers don't want to learn yet another language. Hence, we introduce libraries to further simplify the process of data set description. Define and import a library Consider the example in get_started , the part that defines the class ImageClassificationSample is quite generic and can be used in many data sets. Hence, we can extract it to a library file , while the data set description file can just import it. In general, a library file is a file in YAML or JSON format that provides a collection of definitions. In the example above, we can provide a library file named imageclass.yaml as follows: # file: imageclass.yaml # DSDL version is mandatory here. $dsdl-version : \"0.5.0\" # -- below are definitions -- MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] Note : This library file should be placed in the default library path so the system can find it. One can also supply additional library paths by setting an environment variable DSDL_LIBRARY_PATH . Then the data set description can be simplified by importing the library, as follows: $dsdl-version : \"0.5.0\" $import : - imageclass meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } Here, we use an $import directive in the header section. The content of $import should be a list, which means that one can import multiple files. Note : When multiple library files being imported contain definitions of the same name, then the definition imported later will overwrite previous ones. In this case, the interpreter should raise a warning. Better Practice of Using Libraries Here are some good practice for defining a DSDL library: Define generic classes: As discussed in :ref: parametric_class , it is not a good idea to involving specific settings of parameters in a generic class definition. Hence, it is strongly suggested that one defines a parametric class if the class requires specific information related to a particular application ( e.g. class domains) in order to be completed. Grouped definitions: It is advisable to put multiple definitions related to a certain area into one library file. This is makes it easier to distribute and import. Documentation: Document the definitions to make it easier for users to understand. Below is an example where we put multiple classes related to visual recognition into a single library file: # file: visualrecog.yaml ImageClassificationSample : # Each image classification sample contains an image and a label. $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] LocalObjectEntry : # Each local object entry contains a bounding box and a label. $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : # Each object detection sample contains an image and a list of local object entries. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] With this library, one can write a data set description as follows: $dsdl-version : \"0.5.0\" $import : - visualrecog meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } Since MyClassDom is a specific definition only used in this dataset. Hence, it is fine to define it in the description file itself as a customized definition, while importing common classes from a library. Note : The library visualrecog is an example just for illustration. Along with DSDL, we provide a standard library named cv that contains a rich collection of definitions related to computer vision, including various types and commonly used class domains, etc.","title":"Libraries"},{"location":"en/dsdl_language/lang/libraries/#libraries","text":"Whereas we are already trying to simplify the design of DSDL, some efforts remain needed to learn how to define classes in DSDL. However, we understand that most AI researchers or developers don't want to learn yet another language. Hence, we introduce libraries to further simplify the process of data set description.","title":"Libraries"},{"location":"en/dsdl_language/lang/libraries/#define-and-import-a-library","text":"Consider the example in get_started , the part that defines the class ImageClassificationSample is quite generic and can be used in many data sets. Hence, we can extract it to a library file , while the data set description file can just import it. In general, a library file is a file in YAML or JSON format that provides a collection of definitions. In the example above, we can provide a library file named imageclass.yaml as follows: # file: imageclass.yaml # DSDL version is mandatory here. $dsdl-version : \"0.5.0\" # -- below are definitions -- MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] Note : This library file should be placed in the default library path so the system can find it. One can also supply additional library paths by setting an environment variable DSDL_LIBRARY_PATH . Then the data set description can be simplified by importing the library, as follows: $dsdl-version : \"0.5.0\" $import : - imageclass meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } Here, we use an $import directive in the header section. The content of $import should be a list, which means that one can import multiple files. Note : When multiple library files being imported contain definitions of the same name, then the definition imported later will overwrite previous ones. In this case, the interpreter should raise a warning.","title":"Define and import a library"},{"location":"en/dsdl_language/lang/libraries/#better-practice-of-using-libraries","text":"Here are some good practice for defining a DSDL library: Define generic classes: As discussed in :ref: parametric_class , it is not a good idea to involving specific settings of parameters in a generic class definition. Hence, it is strongly suggested that one defines a parametric class if the class requires specific information related to a particular application ( e.g. class domains) in order to be completed. Grouped definitions: It is advisable to put multiple definitions related to a certain area into one library file. This is makes it easier to distribute and import. Documentation: Document the definitions to make it easier for users to understand. Below is an example where we put multiple classes related to visual recognition into a single library file: # file: visualrecog.yaml ImageClassificationSample : # Each image classification sample contains an image and a label. $def : struct $params : [ 'cdom' ] $fields : image : Image label : Label[dom=$cdom] LocalObjectEntry : # Each local object entry contains a bounding box and a label. $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : # Each object detection sample contains an image and a list of local object entries. $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] With this library, one can write a data set description as follows: $dsdl-version : \"0.5.0\" $import : - visualrecog meta : name : \"my-dataset\" creator : \"my-team\" dataset-version : \"1.0.0\" defs : MyClassDom : $def : class_domain classes : - dog - cat - fish - tiger data : sample-type : ImageClassificationSample samples : - { image : \"xyz/0001.jpg\" , label : \"cat\" } - { image : \"xyz/0002.jpg\" , label : \"dog\" } Since MyClassDom is a specific definition only used in this dataset. Hence, it is fine to define it in the description file itself as a customized definition, while importing common classes from a library. Note : The library visualrecog is an example just for illustration. Along with DSDL, we provide a standard library named cv that contains a rich collection of definitions related to computer vision, including various types and commonly used class domains, etc.","title":"Better Practice of Using Libraries"},{"location":"en/dsdl_language/lang/structs/","text":"Struct Classes Structs are the most common way to represent composite entities. For example, a typical sample in a data set is comprised of multiple elements, e.g. an image with a class label. Hence, structs are a good fit for representing data samples or its composite components. DSDL allows one to define struct classes to provide an abstraction for a particular type of structs. Define a struct class In DSDL, one can define a customized struct class in the defs section of a data set description file. In the example in {ref} get_started , we defined a struct class named ImageClassificationSample as follows: ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] This class definition is a JSON object, with the following properties: $defs : its value must be \"struct\" , indicating that it is defining a struct class. $fields : its value must be a JSON object containing a set of properties, each corresponding to a field. In particular, for each property of $field , the key will be considered as the field name, while the value is the specification of the corresponding field. The field specification can be given in two ways: Just the type name : just give the type name of the field (if that type involves parameters, then the parameters will be set in the default way). With parameters : one can also specify certain type parameters using a JSON object, which contains a $type property to specify the type name, and other properties to specify the settings of type parameters. See thet label field specification above. Nested structs In DSDL, structs can be nested. For example, an object detection sample may be comprised of an image together with a set of \"local objects\", where each local object can be represented by a struct with a bounding box and a class label. For such a sample, we can define a struct class as follows: LocalObjectEntry : # Each entry refers to an individual detected object on an image. $def : struct $fields : bbox : BBox label : Label[dom=MyClassDom] ObjectDetectionSample : # Each sample contains the detection results on an image. $def : struct $fields : image : Image objects : List[etype=LocalObjectEntry] Here, the structs of class LocalObjectEntry are embedded into the struct of class ObjectDetectionSample . Parametric struct classes Note that in the example above, the struct class LocalObjectEntry uses a specific class domain MyClassDom , while the struct class ObjectDetectionSample , as it nests LocalObjectEntry , also assumes the use of this particular class domain. Hence, such definitions are not generic. To use another class domain, one has to rewrite both classes. DSDL provides parametric struct classes to address this problem. Specifically, a parametric struct class can be considered as a class template, which allows the setting of certain parameters when the class is used. With parametric struct classes, we can define classes in a more generic way. Take the object detection example for instance. We can re-define the classes above as follows: LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] Here, we introduce a property $params in struct class definition. When the $params property is explicitly given and non-empty, then the corresponding struct class is parametric . Note that when a parametric class is used, its parameters must be given in order to make it into a concrete class . Particularly, in the LocalObjectEntry class above, we introduce a class parameter cdom , which are used in specifying the domain attribute of label . Note that when a class parameter is used, it should be enclosed by [] . Then, the class ObjectDetectionSample is also defined as a parametric struct class with a parameter cdom , and the parameter is used when specifying the type of objects . With such class definitions, we can write the set of data samples as follows: data : sample-type : $type : ObjectDetectionSample cdom : MyClassDom samples : - image : \"abc/0001.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 1 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - image : \"abc/0002.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 3 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - { bbox : [ 4 , 3 , 5 , 8 ], label : 3 } Note that with the parameter cdom is given as MyClassDom , the parametric class ObjectDetectionSample is made into a concrete class and used in sample type specification.","title":"Struct Classes"},{"location":"en/dsdl_language/lang/structs/#struct-classes","text":"Structs are the most common way to represent composite entities. For example, a typical sample in a data set is comprised of multiple elements, e.g. an image with a class label. Hence, structs are a good fit for representing data samples or its composite components. DSDL allows one to define struct classes to provide an abstraction for a particular type of structs.","title":"Struct Classes"},{"location":"en/dsdl_language/lang/structs/#define-a-struct-class","text":"In DSDL, one can define a customized struct class in the defs section of a data set description file. In the example in {ref} get_started , we defined a struct class named ImageClassificationSample as follows: ImageClassificationSample : $def : struct $fields : image : Image label : Label[dom=MyClassDom] This class definition is a JSON object, with the following properties: $defs : its value must be \"struct\" , indicating that it is defining a struct class. $fields : its value must be a JSON object containing a set of properties, each corresponding to a field. In particular, for each property of $field , the key will be considered as the field name, while the value is the specification of the corresponding field. The field specification can be given in two ways: Just the type name : just give the type name of the field (if that type involves parameters, then the parameters will be set in the default way). With parameters : one can also specify certain type parameters using a JSON object, which contains a $type property to specify the type name, and other properties to specify the settings of type parameters. See thet label field specification above.","title":"Define a struct class"},{"location":"en/dsdl_language/lang/structs/#nested-structs","text":"In DSDL, structs can be nested. For example, an object detection sample may be comprised of an image together with a set of \"local objects\", where each local object can be represented by a struct with a bounding box and a class label. For such a sample, we can define a struct class as follows: LocalObjectEntry : # Each entry refers to an individual detected object on an image. $def : struct $fields : bbox : BBox label : Label[dom=MyClassDom] ObjectDetectionSample : # Each sample contains the detection results on an image. $def : struct $fields : image : Image objects : List[etype=LocalObjectEntry] Here, the structs of class LocalObjectEntry are embedded into the struct of class ObjectDetectionSample .","title":"Nested structs"},{"location":"en/dsdl_language/lang/structs/#parametric-struct-classes","text":"Note that in the example above, the struct class LocalObjectEntry uses a specific class domain MyClassDom , while the struct class ObjectDetectionSample , as it nests LocalObjectEntry , also assumes the use of this particular class domain. Hence, such definitions are not generic. To use another class domain, one has to rewrite both classes. DSDL provides parametric struct classes to address this problem. Specifically, a parametric struct class can be considered as a class template, which allows the setting of certain parameters when the class is used. With parametric struct classes, we can define classes in a more generic way. Take the object detection example for instance. We can re-define the classes above as follows: LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : bbox : BBox label : Label[dom=$cdom] ObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] Here, we introduce a property $params in struct class definition. When the $params property is explicitly given and non-empty, then the corresponding struct class is parametric . Note that when a parametric class is used, its parameters must be given in order to make it into a concrete class . Particularly, in the LocalObjectEntry class above, we introduce a class parameter cdom , which are used in specifying the domain attribute of label . Note that when a class parameter is used, it should be enclosed by [] . Then, the class ObjectDetectionSample is also defined as a parametric struct class with a parameter cdom , and the parameter is used when specifying the type of objects . With such class definitions, we can write the set of data samples as follows: data : sample-type : $type : ObjectDetectionSample cdom : MyClassDom samples : - image : \"abc/0001.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 1 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - image : \"abc/0002.jpg\" objects : - { bbox : [ 1 , 2 , 3 , 4 ], label : 3 } - { bbox : [ 5 , 6 , 7 , 8 ], label : 2 } - { bbox : [ 4 , 3 , 5 , 8 ], label : 3 } Note that with the parameter cdom is given as MyClassDom , the parametric class ObjectDetectionSample is made into a concrete class and used in sample type specification.","title":"Parametric struct classes"},{"location":"en/dsdl_language/lang/unstructured_objs/","text":"Unstructured Object Classes Unstructured objects , such as images, videos, audios, point clouds, and texts, are digital representations of real-world objects. Despite their rich internal structures, they are treated as a whole in a data set description and their internal structures are not manifested. In DSDL, an unstructured object class provides an abstraction for all unstructured objects of a particular kind. Pre-defined unstructured object classes With the standard library, DSDL provides the following unstructured object classes out of the box: Image : each instance is an image that can be represented as a matrix of pixels. Video : each instance can be decoded into a sequence of frames, where each frame is an image. Audio : each instance an audio signal that can be represented as a wave sequence. Text : each instance is a sequence of words. PointCloud : each instance is a set of 3D points, which represents the shape of a 3D entity. LabelMap : each instance is a matrix of integer labels, where each label corresponds to a class. Describe an unstructured object In DSDL, an unstructured object can be specified with an object locator together with an optional descriptor that provides additional information about the object. Take an image stored at abc/0001.jpg for example. It can be expressed in either of the following ways: Just the object locator : simply use the object locator \"abc/0001.jpg\" . When a variable or a field has an unstructured object class type and its value is a string, then that string will be interpreted as an object locator. With a descriptor : if one wants to provide additional information, say the size and the color format, then it can be expressed with an JSON object with two properties $loc and $descr , like the following: $loc : \"abc/0001.jpg\" $descr : size : [ 640 , 480 ] color : \"rgb\" Here, the descriptive information is provided via the $descr field, which will be used by the object loader of the corresponding unstructured object classes. Extended unstructured object classes DSDL allows one to register extended unstructured object classes by specifying how to load the object from storage. At the client side, this can be accomplished by defining a sub-class of an abstract base class UnstructuredObject and implementing the load method for object loading. Specifically, in Python, the abstract base class UnstructuredObject are defined as follows. from abc import ABC , abstractmethod class UnstructuredObject ( ABC ): \"\"\"Abstract base class for unstructured objects.\"\"\" @abstractmethod def load ( file , descr ): \"\"\"Load an unstructured object from a given file-like object. Arguments: file: file-like, from which the unstructured object is loaded. descr: dict-like, which provides the descriptive information. Returns: The loaded object. \"\"\" pass Note : Note here that this load method accepts an file-like object, which is already open, instead of a file path. The design is based on the \"Separation of Concerns\" principle: it is the responsibility of the data system to interpret the object locator and construct a file reader accordingly. A specific subclass of UnstructuredObject only needs to care about how to load, interpret, and validate the object given a file reader.","title":"Unstructured Object Classes"},{"location":"en/dsdl_language/lang/unstructured_objs/#unstructured-object-classes","text":"Unstructured objects , such as images, videos, audios, point clouds, and texts, are digital representations of real-world objects. Despite their rich internal structures, they are treated as a whole in a data set description and their internal structures are not manifested. In DSDL, an unstructured object class provides an abstraction for all unstructured objects of a particular kind.","title":"Unstructured Object Classes"},{"location":"en/dsdl_language/lang/unstructured_objs/#pre-defined-unstructured-object-classes","text":"With the standard library, DSDL provides the following unstructured object classes out of the box: Image : each instance is an image that can be represented as a matrix of pixels. Video : each instance can be decoded into a sequence of frames, where each frame is an image. Audio : each instance an audio signal that can be represented as a wave sequence. Text : each instance is a sequence of words. PointCloud : each instance is a set of 3D points, which represents the shape of a 3D entity. LabelMap : each instance is a matrix of integer labels, where each label corresponds to a class.","title":"Pre-defined unstructured object classes"},{"location":"en/dsdl_language/lang/unstructured_objs/#describe-an-unstructured-object","text":"In DSDL, an unstructured object can be specified with an object locator together with an optional descriptor that provides additional information about the object. Take an image stored at abc/0001.jpg for example. It can be expressed in either of the following ways: Just the object locator : simply use the object locator \"abc/0001.jpg\" . When a variable or a field has an unstructured object class type and its value is a string, then that string will be interpreted as an object locator. With a descriptor : if one wants to provide additional information, say the size and the color format, then it can be expressed with an JSON object with two properties $loc and $descr , like the following: $loc : \"abc/0001.jpg\" $descr : size : [ 640 , 480 ] color : \"rgb\" Here, the descriptive information is provided via the $descr field, which will be used by the object loader of the corresponding unstructured object classes.","title":"Describe an unstructured object"},{"location":"en/dsdl_language/lang/unstructured_objs/#extended-unstructured-object-classes","text":"DSDL allows one to register extended unstructured object classes by specifying how to load the object from storage. At the client side, this can be accomplished by defining a sub-class of an abstract base class UnstructuredObject and implementing the load method for object loading. Specifically, in Python, the abstract base class UnstructuredObject are defined as follows. from abc import ABC , abstractmethod class UnstructuredObject ( ABC ): \"\"\"Abstract base class for unstructured objects.\"\"\" @abstractmethod def load ( file , descr ): \"\"\"Load an unstructured object from a given file-like object. Arguments: file: file-like, from which the unstructured object is loaded. descr: dict-like, which provides the descriptive information. Returns: The loaded object. \"\"\" pass Note : Note here that this load method accepts an file-like object, which is already open, instead of a file path. The design is based on the \"Separation of Concerns\" principle: it is the responsibility of the data system to interpret the object locator and construct a file reader accordingly. A specific subclass of UnstructuredObject only needs to care about how to load, interpret, and validate the object given a file reader.","title":"Extended unstructured object classes"},{"location":"en/dsdl_template/cv/cv_classification/","text":"Image Classification","title":"Image Classification"},{"location":"en/dsdl_template/cv/cv_classification/#image-classification","text":"","title":"Image Classification"},{"location":"en/dsdl_template/cv/cv_detection/","text":"Object Detection","title":"Object Detection"},{"location":"en/dsdl_template/cv/cv_detection/#object-detection","text":"","title":"Object Detection"},{"location":"en/dsdl_template/cv/cv_generation/","text":"Image Generation","title":"\u56fe\u50cf\u751f\u6210"},{"location":"en/dsdl_template/cv/cv_generation/#image-generation","text":"","title":"Image Generation"},{"location":"en/dsdl_template/cv/cv_keypoint_detection/","text":"\u5173\u952e\u70b9\u68c0\u6d4b\uff08\u59ff\u6001\u4f30\u8ba1\uff09\u4efb\u52a1 1. \u4efb\u52a1\u8c03\u7814 1.1 \u4efb\u52a1\u5b9a\u4e49 \u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u76ee\u6807\u662f\u6807\u51fa\u7269\u4f53\u7684\u5173\u952e\u90e8\u4f4d\uff0c\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u76ee\u6807\u662f\u5bf9\u7269\u4f53\uff08\u901a\u5e38\u662f\u4eba\u548c\u52a8\u7269\uff09\u7684\u59ff\u6001\uff08\u5373\u5173\u952e\u70b9\u548c\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\uff09\u8fdb\u884c\u4f30\u8ba1\u3002\u5173\u952e\u70b9\u68c0\u6d4b\u548c\u59ff\u6001\u4f30\u8ba1\u901a\u5e38\u5408\u5728\u4e00\u8d77\u8ba8\u8bba\uff0c\u539f\u56e0\u662f\u5bf9\u4e8e\u4eba\u4f53\u548c\u52a8\u7269\u7b49\u5176\u8eab\u4f53\u90e8\u4f4d\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\u662f\u56fa\u5b9a\u7684\uff0c\u5f97\u5230\u4e86\u4eba\u4f53\u5173\u952e\u70b9\u7684\u68c0\u6d4b\u7ed3\u679c\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u59ff\u6001\u4f30\u8ba1\u7684\u7ed3\u679c(\u662f\u5426\u6709\u59ff\u6001\u4f30\u8ba1\u53d6\u51b3\u4e8e\u662f\u5426\u6709\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb)\u3002 \u56fe\u7247\u53d6\u81ea\uff1aDeep High-Resolution Representation Learning for Human Pose Estimation, CVPR19 1.2 \u8bc4\u4ef7\u6307\u6807 \u8bc4\u4ef7\u6307\u6807\u4e00\u822c\u91c7\u7528COCO\u683c\u5f0f\u7684mAP\u3002mAP\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e0eCOCO\u76ee\u6807\u68c0\u6d4b\u4e2d\u7684mAP\u8ba1\u7b97\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u5bf9\u4e8e\u5173\u952e\u70b9\u68c0\u6d4b\u65b9\u6cd5\u68c0\u6d4b\u51fa\u7684\u6240\u6709\u7269\u4f53\u4ee5\u53ca\u7269\u4f53\u4e2d\u7684\u5173\u952e\u70b9\uff0c\u9996\u5148\u4f7f\u7528\u5173\u952e\u70b9\u4e2d\u7684OKS\u5ea6\u91cf\u6307\u6807\u5bf9\u6240\u6709\u68c0\u6d4b\u51fa\u7684\u7269\u4f53\u8fdb\u884c\u5206\u7c7b\uff0c\u5206\u4e3aTP\u3001FP\u3001FN\u51e0\u7c7b\uff0c\u5212\u5206\u5b8c\u4e4b\u540e\uff0c\u901a\u8fc7\u6539\u53d8score\u7684\u9608\u503c\u8ba1\u7b97P-R\u66f2\u7ebf\uff0cP-R\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\u5373\u4e3aAP\u7684\u503c\u3002 \u4e0e\u76ee\u6807\u68c0\u6d4bmAP\u8ba1\u7b97\u65b9\u5f0f\u6700\u5927\u7684\u4e0d\u540c\u5728\u4e8e\uff0c\u76ee\u6807\u68c0\u6d4b\u4e2d\u8861\u91cf\u5b9e\u4f8b\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\u65f6\u4f7f\u7528\u7684\u662f\u68c0\u6d4b\u6846\u4e4b\u95f4\u7684IOU\uff0c\u800c\u5728\u5173\u952e\u70b9\u68c0\u6d4b\u4e2d\uff0c\u8861\u91cf\u5b9e\u4f8b\u76f8\u4f3c\u5ea6\u4f7f\u7528\u7684\u662f\u7269\u4f53\u5173\u952e\u70b9\u4e4b\u95f4\u7684OKS\u8ddd\u79bb\uff0cOKS\u7684\u8ba1\u7b97\u65b9\u5f0f\u5982\u4e0b\uff1a \u56fe\u7247\u53d6\u81ea\uff1ahttps://cocodataset.org/#keypoints-eval OKS\u4ee3\u8868\u7684\u662f\u4e00\u4e2a\u7269\u4f53\u5176\u6240\u6709\u5173\u952e\u70b9\u68c0\u6d4b\u7ed3\u679c\uff08prediction\uff09\u548c\u771f\u5b9e\u6807\u6ce8\uff08ground truth\uff09\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0cdi\u4ee3\u8868\u7b2ci\u4e2a\u68c0\u6d4b\u51fa\u7684\u5173\u952e\u70b9\u548c\u771f\u5b9e\u6807\u6ce8\u7684\u6b27\u6c0f\u8ddd\u79bb\uff0cs\u662f\u7269\u4f53\u7684\u50cf\u7d20\u9762\u79ef\uff0ck\u4ee3\u8868\u7b2ci\u79cd\u5173\u952e\u70b9\uff08\u4f8b\u5982\u9f3b\u5b50\uff09\u7684\u5f52\u4e00\u5316\u56e0\u5b50\uff0c\u662f\u5bf9\u5df2\u6709\u6570\u636e\u96c6\u4e2d\u6240\u6709\u7269\u4f53\u7684\u540c\u79cd\u5173\u952e\u70b9\uff08\u4f8b\u5982\u6570\u636e\u96c6\u79cd\u6240\u6709\u4eba\u7684\u9f3b\u5b50\u5173\u952e\u70b9\uff09\u8ba1\u7b97\u5f97\u5230\u7684\uff0c\u503c\u8d8a\u5927\uff0c\u4ee3\u8868\u6570\u636e\u96c6\u4e2d\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u8d8a\u5dee\u5373\u8fd9\u4e2a\u5173\u952e\u70b9\u8d8a\u96be\u68c0\u6d4b\uff0c\u503c\u8d8a\u5c0f\u4ee3\u8868\u8fd9\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\u8d8a\u597d\uff0c\u5373\u8fd9\u4e2a\u5173\u952e\u70b9\u68c0\u6d4b\u96be\u5ea6\u8f83\u5c0f\u3002\u6709\u4e86OKS\u8ddd\u79bb\u4e4b\u540e\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230\u4e0d\u540cOKS\u9608\u503c\u4e0b\u7684AP\u6307\u6807\u3002COCO\u7684\u5173\u952e\u70b9\u68c0\u6d4b\u6307\u6807\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e0e\u76ee\u6807\u68c0\u6d4b\u7c7b\u4f3c\u5b9a\u4e49\uff1a \u56fe\u7247\u53d6\u81ea\uff1ahttps://cocodataset.org/#keypoints-eval 1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814 \u6839\u636e\u76ee\u6807\u7c7b\u578b\u7684\u4e0d\u540c\uff0c\u59ff\u6001\u4f30\u8ba1\uff08\u5173\u952e\u70b9\u68c0\u6d4b\uff09\u6570\u636e\u96c6\u7684\u6807\u6ce8\u5f62\u5f0f\u4e5f\u4e0d\u540c\u3002\u59ff\u6001\u4f30\u8ba1\uff08\u5173\u952e\u70b9\u68c0\u6d4b\uff09\u6570\u636e\u96c6\u6839\u636e\u76ee\u6807\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff1a \u76ee\u6807\u7c7b\u578b \u4efb\u52a1\u7c7b\u578b \u4ee3\u8868\u6570\u636e\u96c6 \u4eba\u4f53 \u4eba\u4f53\u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b (human body keypoint) COCO, MPII, MPII-TRB, AI Challenger, CrowdPose, OCHuman, MHP \u4eba\u4f53(\u5168\u8eab) \u4eba\u4f53(\u5168\u8eab)\u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b (human wholebody keypoint) COCO WholeBody, Halpe \u4eba\u8138 \u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b (face keypoint) 300W, WFLW, AFLW, COFW, COCO-WholeBody-Face \u624b \u624b\u90e8\u5173\u952e\u70b9\u68c0\u6d4b (hand keypoint) OneHand-10K, FreiHand, CMU Panoptic HandDB, InterHand2.6M, RHD, COCO-WholeBody-Hand \u8863\u7269 \u8863\u7269\u5173\u952e\u70b9\u68c0\u6d4b (fashion lanmark) DeepFashion \u52a8\u7269 \u52a8\u7269\u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b (animal keypoint) Animal-Pose, AP-10K, Horse-10, MacaquePose, Vinegar Fly, Desert Locust, Gr\u00e9vy\u2019s Zebra, ATRW \u6211\u4eec\u8c03\u7814\u4e8610\u4e2a\u4e3b\u6d41\u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b\u6570\u636e\u96c6\uff0c\u6db5\u76d6\u4e86\u6240\u6709\u4ee5\u4e0a\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u96c6\u3002\u5b8c\u6574\u7684\u5b57\u6bb5\u8c03\u7814\u7ed3\u679c\u5982\u4e0b\u8868\u6240\u793a\uff1a \u59ff\u6001\u4f30\u8ba1/\u5173\u952e\u70b9\u68c0\u6d4b\u6570\u636e\u96c6 image_id height width instance_id category_id is_crowd area num_keypoints bbox segmentation keypoints visible center categories super_categories keypoint_names skeleton other COCO Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y MPII Y Y Y Y scale, person, torsoangle AIC Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y CrowdPose Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y crowd index COCO-WholeBody Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y face valid/kpts/bbox, right hand valid/kpts/bbox, left hand valid/kpts/bbox, foot valid/kpts Halpe Y Y Y Y Y Y Y Y Y Y Y Hoi 300W Y Y Y Y Y Y Y Y Y Y Y Y Y Y OneHand10K Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y DeepFashion Y Y Y Y Y Y Y variation AnimalPose Y Y Y Y Y Y Y Y Y Y \u7ecf\u8fc7\u6574\u7406\uff0c\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u7684\u5b57\u6bb5\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\uff1a\u4e00\u79cd\u662f\u4e0d\u540c\u6570\u636e\u96c6\u5171\u6709\u7684\u5171\u4eab\u5b57\u6bb5\uff0c\u4e00\u79cd\u662f\u4e0d\u540c\u6570\u636e\u96c6\u4e0d\u540c\u7684\u72ec\u7acb\u5b57\u6bb5\u3002\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u7684\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a keypoints \u5355\u4e2a\u76ee\u6807\u7684\u5173\u952e\u70b9\u6807\u6ce8\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u5750\u6807\u70b9\uff0c\u5750\u6807\u70b9\u7528[x, y]\u6216\u8005[x,y,vis]\u8868\u793a\uff08vis\u4ee3\u8868\u8fd9\u4e2a\u5173\u952e\u70b9\u662f\u5426\u53ef\u89c1\uff09 visible \u8868\u793a\u67d0\u4e2a\u5173\u952e\u70b9\u662f\u5426\u53ef\u89c1\uff0c\u4f7f\u7528\u6574\u6570\u6765\u6807\u8bc6 \u72ec\u7acb\u5b57\u6bb5 height/width \u56fe\u50cf\u7684\u539f\u59cb\u5c3a\u5bf8\uff08\u957f\u548c\u5bbd\uff09 instance_id \u8fd9\u4e2a\u76ee\u6807\u7684id\uff0c\u5b9a\u4f4d\u5230\u67d0\u4e2a\u5177\u4f53\u7684\u76ee\u6807 category_id \u7c7b\u522bid\uff0c\u8868\u793a\u8fd9\u4e2a\u76ee\u6807\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u522b is_crowd \u6807\u6ce8\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\u8fd8\u662f\u4e00\u7ec4\u5bf9\u8c61\uff0c\u4f7f\u75280\u6216\u80051\u6765\u6807\u8bc6\uff0c\u5982\u679c\u662f\u4e00\u7ec4\u5bf9\u8c61\u4e3a1\uff0c\u5426\u5219\u4e3a0\uff0c area \u8fd9\u4e2a\u76ee\u6807\u6240\u5360\u7684\u9762\u79ef\uff0c\u901a\u5e38\u4f7f\u7528\u6240\u5360\u50cf\u7d20\u4e2a\u6570\u6765\u8868\u793a num_keypoints \u5173\u952e\u70b9\u4e2a\u6570 bbox \u76ee\u6807\u7684\u77e9\u5f62\u6846\u6807\u6ce8\uff0c\u901a\u5e38\u4f7f\u7528[x,y,w,h]\u6765\u8868\u793a segmentation \u76ee\u6807\u7684\u50cf\u7d20\u7ea7\u5206\u5272\u6807\u6ce8\uff0c\u901a\u5e38\u4f7f\u7528\u4e00\u7ec4[x,y]\u5750\u6807\u6765\u8868\u793a center \u76ee\u6807\u7684\u4e2d\u5fc3\u70b9\u5750\u6807\uff0c\u4f7f\u7528[x,y]\u6765\u8868\u793a\uff0c\u901a\u5e38\u4ee3\u8868\u7684\u662f\u76ee\u6807\u77e9\u5f62\u6846\u7684\u4e2d\u5fc3\u70b9\u5750\u6807 categories \u8868\u793a\u6570\u636e\u96c6\u4e2d\u6240\u5305\u542b\u7684\u7c7b\u522b\u4ee5\u53ca\u7c7b\u522b\u7f16\u53f7 super_categories \u6570\u636e\u96c6\u4e2d\u7c7b\u522b\u7684\u7236\u7c7b keypoint_names \u5173\u952e\u70b9\u7684\u540d\u79f0 skeleton \u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb scale MPII\u4e2d\u5b57\u6bb5\uff0c\u8868\u793a\u76ee\u6807\u6846\u7684\u7f29\u653e\u6bd4\u4f8b\uff0cMPII\u4e2d\u7531\u4e8e\u76ee\u6807\u6846\u662f\u6b63\u65b9\u5f62\uff0cscale*200px\u53ef\u4ee5\u8fd8\u539f\u5f97\u5230\u76ee\u6807\u6846\u7684\u8fb9\u957f person MPII\u4e2d\u5b57\u6bb5\uff0c\u4ee3\u8868\u56fe\u7247\u4e2d\u4eba\u7684\u4e2a\u6570 torsoangle MPII\u4e2d\u5b57\u6bb5\uff0c\u4ee3\u8868\u4eba\u4f53\u8eaf\u5e72\u7684\u504f\u8f6c\u89d2\u5ea6 face/hand/foot valid COCO-WholeBody\u4e2d\u5b57\u6bb5\uff0c\u4ee3\u8868\u662f\u5426\u6709\u8138/\u624b/\u811a\u7684\u6807\u6ce8\uff0c\u503c\u4e3a0\u6216\u80051 face/hand/foot kpts COCO-WholeBody\u4e2d\u5b57\u6bb5\uff0c\u8868\u793a\u8138/\u624b/\u811a\u7684\u5173\u952e\u70b9\u6807\u6ce8\uff0c\u4e3a\u4e00\u7ec4\u5750\u6807\u70b9 face/hand bbox COCO-WholeBody\u4e2d\u5b57\u6bb5\uff0c\u8868\u793a\u8138/\u624b\u7684\u77e9\u5f62\u6846\u6807\u6ce8\uff0c\u8868\u793a\u4e3a\u77e9\u5f62\u6846[x,y,h,w] Hoi Halpe\u4e2d\u5b57\u6bb5\uff0c\u4f7f\u7528\u6574\u578b\u8868\u793a\uff0c\u4ee3\u8868\u7684\u662f\u4eba\u4f53\u548c\u5176\u4ed6\u7269\u4f53\u53d1\u751f\u4ea4\u4e92\u7684\u79cd\u7c7b\uff08\u4f8b\u59820\u4ee3\u8868\u62ff\u8d77\uff0c1\u4ee3\u8868\u5750\uff0c\u7b49\u7b49\uff09 Variation DeepFashion\u4e2d\u5b57\u6bb5\uff0c\u4f7f\u7528\u6574\u578b\u8868\u793a\uff0c\u4ee3\u8868\u7684\u662f\u4efb\u52a1\u7684\u59ff\u6001 \u7efc\u4e0a\u6240\u8ff0\uff0c\u9700\u8981\u63cf\u8ff0\u4e00\u4e2a\u5173\u952e\u70b9\u68c0\u6d4b\u6570\u636e\u96c6\uff0c\u6700\u57fa\u7840\u7684\u5b57\u6bb5\u5305\u62ecimage_id, keypoints, visible\u8fd9\u4e09\u4e2a\u5b57\u6bb5\uff0c\u6570\u636e\u96c6\u72ec\u7acb\u5b57\u6bb5\u7528\u6237\u81ea\u884c\u6dfb\u52a0\u4fee\u6539\u3002 2. \u6a21\u677f\u5c55\u793a \u6839\u636e\u4e0a\u8ff0\u7684\u8c03\u7814\u7ed3\u679c\uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\uff0c\u4e00\u4e2a\u6837\u672c\u6700\u91cd\u8981\u7684\u5c5e\u6027\u662f\u56fe\u7247\u7684id(\u6216\u8def\u5f84)\u3001\u6bcf\u4e2a\u76ee\u6807\u7684\u5173\u952e\u70b9\u6807\u6ce8\uff0c\u4ee5\u53ca\u5173\u952e\u70b9\u662f\u5426\u53ef\u89c1\u8fd9\u4e2a\u5c5e\u6027\uff0c\u8003\u8651\u5230\u6bcf\u5f20\u56fe\u7247\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u7269\u4f53\uff0c\u53ef\u80fd\u6709\u591a\u4e2a\u5173\u952e\u70b9\u6807\u6ce8\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5d4c\u5957\u7ed3\u6784\u4f53KeyPointLocalObject\uff0c\u7528\u6765\u8868\u8ff0\u5355\u4e2a\u76ee\u6807\u7684\u5173\u952e\u70b9\u6807\u6ce8\u7684\u4fe1\u606f\uff08\u5373\u7c7b\u522b\u548c\u5173\u952e\u70b9\uff09\u3002\u5728\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u7ed3\u6784\u4f53\u7684$fields \u5c5e\u6027\u4e2d\u5b9a\u4e49\u4e86image\u548cannotations\u4e24\u4e2a\u5b57\u6bb5\uff0c\u5176\u4e2dannotations\u5b57\u6bb5\u5219\u4e3a\u591a\u4e2aKeyPointLocalObject\u7ed3\u6784\u4f53\u6784\u6210\u7684\u5217\u8868\uff08\u5217\u8868\u4e3a\u7a7a\u8868\u793a\u56fe\u7247\u4e2d\u6ca1\u6709\u5173\u952e\u70b9\u6807\u6ce8\u7684\u7269\u4f53\uff09\u3002\u6700\u540e\uff0c\u8003\u8651\u5230\u6a21\u677f\u9700\u8981\u5177\u6709\u7684\u4ee3\u8868\u6027\u548c\u53ef\u6269\u5c55\u6027\uff0c\u5728\u6240\u6709\u7684\u5c5e\u6027\u4e2d\uff0c\u6709\u4e00\u4e9b\u5c5e\u6027\u662f\u5fc5\u987b\u7684\uff0c\u5176\u4ed6\u4e00\u4e9b\u7279\u5b9a\u6570\u636e\u96c6\u4e2d\u7684\u72ec\u7acb\u5b57\u6bb5\u662f\u53ef\u9009\u7684\u3002\u57fa\u4e8e\u4e0a\u8ff0\u8003\u8651\uff0c\u6211\u4eec\u5236\u5b9a\u4e86\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a KeypointClassDom : $def : class_domain classes : - person - - ... KeypointDescDom : $def : class_domain classes : - \"left eye\" - - ... skeleton : - [ 14 , 16 ] - [ 5 , 6 ] - [ 10 , 12 ] - ... \u9996\u5148\u662f\u5b9a\u4e49\u4e86\u4efb\u52a1\u7c7b\u522b\u57df\u7684\u6587\u4ef6\u3002\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a \u5b9a\u4e49\u4e86\u76ee\u6807\u7c7b\u522b\u7684KeypointClassDom\u3002KeypointClassDom\u5b9a\u4e49\u4e86\u76ee\u6807\u7684\u7c7b\u522b\u57df\uff0c\u5373\u8fd9\u4e2a\u76ee\u6807\u5c5e\u4e8e\u54ea\u4e9b\u7c7b\u522b\uff0c\u6bd4\u5982person\u7b49\u3002 \u5b9a\u4e49\u4e86\u76ee\u6807\u5173\u952e\u70b9\u540d\u79f0\u4ee5\u53ca\u8fde\u63a5\u5173\u7cfb\u7684KeypointDescDom\u3002KeypointDescDom\u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u7684\u68c0\u6d4b\u4efb\u52a1\u4e2d\u4e00\u4e9b\u4e8b\u5148\u5b9a\u4e49\u597d\u7684\u57df\uff0c\u5305\u62ec\u5173\u952e\u70b9\u540d\u79f0\u548c\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfbskeleton\u3002 KeyPointLocalObject : $def : struct $params : [ 'cdom1' , 'cdom2' ] $fields : keypoint : Keypoint[dom=$cdom2] label : Label[dom=$cdom1] $optional : [ \"label\" ] KeyPointSample : $def : struct $params : [ 'cdom1' , 'cdom2' ] $fields : image : Image annotations : List[etype=LocalObjectEntry[cdom1=$cdom1, cdom2=$cdom2]] data : sample-type : ObjectKeypointSample[cdom1=KeypointClassDom, cdom2=KeypointDescDom] \u5176\u6b21\u662f\u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u68c0\u6d4bsample\u7684yaml\u6587\u4ef6\u3002\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a KeyPointSample\u3002KeyPointSample\u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u68c0\u6d4b\u4e2d\u7684\u4e00\u4e2asample\u5bf9\u8c61\uff0c\u5305\u62ec\u56fe\u50cf\u8def\u5f84image\u4ee5\u53ca\u6807\u6ce8\u4e86\u7684\u76ee\u6807\u5217\u8868annotations\u3002 KeyPointLocalObject\u3002KeyPointLocalObject\u5b9a\u4e49\u4e86\u4e00\u4e2a\u76ee\u6807\u7684\u6807\u6ce8\uff0c\u6807\u6ce8\u91cc\u5305\u62ec\uff1a \u76ee\u6807\u7684\u7c7b\u522blabel\uff0c\u6ce8\u610f\u8fd9\u4e2alabel\u6240\u5c5e\u7684\u57df\u662fKeypointClassDom\uff0c\u5373\u76ee\u6807\u6240\u5c5e\u7684\u7c7b\u522b\u3002 \u5173\u952e\u70b9\u6807\u6ce8keypoint\uff0c\u5373\u76ee\u6807\u7684\u5173\u952e\u70b9\u6807\u6ce8\uff0cKeypoint\u6807\u6ce8\u4f7f\u7528\u5217\u8868[x1,y1,v1,x2,y2,v2,.....]\u6765\u8868\u793a\uff0cx1,y1\u8868\u793a\u5173\u952e\u70b9\u7684\u5750\u6807\uff0cv1\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u7684\u53ef\u89c1\u6027\uff08\u5173\u952e\u70b9\u7684\u53ef\u89c1\u6027\u6807\u6ce8\u65b9\u9762\uff0c\u4e0d\u8bbe\u5b9a\u7edf\u4e00\u7684\u6807\u51c6\uff0c\u548c\u539f\u59cb\u6570\u636e\u96c6\u683c\u5f0f\u4fdd\u6301\u4e00\u81f4\uff0c\u8ba4\u4e3a<=0\u7684\u503c\u5373\u4ee3\u8868\u4e0d\u53ef\u89c1\u4e14\u65e0\u6807\u6ce8\uff0c>1\u4ee3\u8868\u6709\u6807\u6ce8\uff09\u3002keypoint\u6240\u5c5e\u7684\u57df\u662fKeypointDescDom\u5373\u63cf\u8ff0\u5173\u952e\u70b9\u7684domain\u3002 3. \u4f7f\u7528\u65b9\u6cd5 \u4e0b\u9762\u4ecb\u7ecd\u600e\u4e48\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u6a21\u677f\u6765\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u4ee5COCOKeypoint2017\u4e3a\u4f8b\uff0c\u63cf\u8ff0\u4e86sample\u7684yaml\u6587\u4ef6keypoint-coco2017.yaml\u5982\u4e0b\uff1a $dsdl-version : \"0.5.0\" KeyPointLocalObject : $def : struct $params : [ \"cdom0\" , \"cdom1\" ] $fields : iscrowd : Int area : Num category : Label[dom=$cdom0] bbox : BBox polygon : Polygon num_keypoints : Int ann_id : Int keypoints : Keypoint[dom=$cdom1] KeyPointSample : $def : struct $params : [ \"cdom0\" , \"cdom1\" ] $fields : media : Image height : Int width : Int image_id : Int annotations : List[etype=KeyPointLocalObject[cdom0=$cdom0, cdom1=$cdom1]] \u53ef\u4ee5\u770b\u51fa\uff0cCOCO2017Keypoints\u6570\u636e\u96c6\u7684\u6a21\u677f\u9664\u4e86\u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u4e2d\u7684\u5fc5\u987b\u5b57\u6bb5\u5916\uff08keypoints\uff0c visible\uff0c \u4ee5\u53caimage_id\uff09\uff0c\u8fd8\u6709\u8bb8\u591a\u6570\u636e\u96c6\u7279\u6709\u7684\u72ec\u7acb\u5b57\u6bb5 \u5728\u68c0\u6d4b\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff1a - $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c\u3002 ObjectKeypointEntry: \u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u6807\u6ce8\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u3002 $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain\u3002 $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: is_crowd\uff1a \u662f\u5bf9\u4e00\u4e2a\u7269\u4f53\u7684\u6807\u6ce8\u8fd8\u662f\u591a\u4e2a\u7269\u4f53\u7684\u6807\u6ce8\u3002 area\uff1a \u76ee\u6807\u5b9e\u4f8b\u7684\u50cf\u7d20\u9762\u79ef\u3002 category\uff1a \u7269\u4f53\u6240\u5c5e\u7684\u7c7b\u522b\u3002 bbox\uff1a \u76ee\u6807\u7684\u76ee\u6807\u6846\u6807\u6ce8\uff0c\u7c7b\u578b\u4e3aBBox\u3002 polygon\uff1a \u76ee\u6807\u7684\u5b9e\u4f8b\u5206\u5272\u6807\u6ce8\uff0c\u7c7b\u578b\u4e3aPolygon\u3002 num_keypoints\uff1a \u4ee3\u8868\u8fd9\u4e2a\u5bf9\u8c61\u5173\u952e\u70b9\u7684\u4e2a\u6570\u3002 ann_id\uff1a \u5b9e\u4f8b\u6807\u6ce8\u5728\u6574\u4e2a\u6570\u636e\u96c6\u4e2d\u7684\u7f16\u53f7\u3002 keypoints\uff1a \u5173\u952e\u70b9\u6807\u6ce8\u7684\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a[x,y,z]\u7684\u4e09\u7ef4\u5750\u6807\uff0cx\u548cy\u8868\u793a\u5173\u952e\u70b9\u4f4d\u7f6e\uff0cz\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u70b9\u7684\u53ef\u89c1\u60c5\u51b5\u3002 KeypointDetectionSample: \u5b9a\u4e49\u4e86\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u3002 $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain\u3002 $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: media \u56fe\u7247\u7684\u8def\u5f84\u3002 height: \u56fe\u50cf\u7684\u9ad8\u3002 width: \u56fe\u50cf\u7684\u5bbd\u3002 image_id: \u56fe\u50cf\u5728\u6570\u636e\u96c6\u4e2d\u7684\u7f16\u53f7\u3002 annotations \u6807\u6ce8\u4fe1\u606f\uff0c\u5173\u952e\u70b9\u68c0\u6d4b/\u59ff\u6001\u4f30\u8ba1\u4efb\u52a1\u4e2d\uff0c\u4e3a\u524d\u9762\u7684ObjectKeypointEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868\u3002 \u63cf\u8ff0\u4e86\u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u7684class-dom.yaml\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version : \"0.5.0\" COCO2017KeypointsClassDom : $def : class_domain classes : - person COCO2017KeypointsDescDom[COCO2017KeypointsClassDom] : $def : class_domain classes : - nose[person] - left_eye[person] - right_eye[person] - ... skeleton : - [ 16 , 14 ] - [ 14 , 12 ] - [ 17 , 15 ] - ... \u4e0a\u9762\u7684\u6587\u4ef6\u4e2d\u7ed9\u51fa\u4e86\u5173\u952e\u70b9\u68c0\u6d4b\u4efb\u52a1\u91cd\u7c7b\u522b\u57df\u7684\u5b9a\u4e49\uff0c\u5177\u4f53\u5305\u542b\u4e0b\u5217\u5b57\u6bb5\uff1a COCO2017KeypointsClassDom\uff1aCOCO2017Keypoint\u5173\u952e\u70b9\u68c0\u6d4b\u7684\u7c7b\u522b\u57df\uff0c\u53ea\u5305\u542b\u4e86\u4eba\u8fd9\u4e00\u4e2a\u7c7b\u522b \u3002 COCO2017KeypointsDescDom\uff1aCOCO2017Keypoint\u5173\u952e\u70b9\u68c0\u6d4b\u7684\u6570\u636e\u96c6\u63cf\u8ff0\u4fe1\u606f\u57df\uff0c\u7ee7\u627f\u4e86COCO2017KeypointsClassDom\uff0c\u5305\u542b\u4e86\u6570\u636e\u96c6\u4e2d\u5bf9person\u7684\u63cf\u8ff0\u4fe1\u606f\uff0c\u5305\u62ec\u5173\u952e\u70b9\u540d\u79f0\u4ee5\u53ca\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\u3002","title":"Keypoint Detection"},{"location":"en/dsdl_template/cv/cv_object_tracking/","text":"\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1 \u6211\u4eec\u901a\u8fc7\u5bf9\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u8fdb\u884c\u8c03\u7814\uff0c\u5e76\u603b\u7ed3\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\uff0c\u4ece\u800c\u5236\u5b9a\u51fa\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1DSDL\u6a21\u677f\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u4f7f\u7528\u3002 1. \u4efb\u52a1\u8c03\u7814 1.1 \u4efb\u52a1\u5b9a\u4e49 \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u662f\u6307\u5728\u56fe\u50cf\u4e2d\u68c0\u6d4b\u51fa\u7269\u4f53\u7684\u4f4d\u7f6e\uff0c\u5e76\u8bc6\u522b\u51fa\u5177\u4f53\u7684\u5b9e\u4f8b\uff0c\u901a\u8fc7\u4e00\u4e2a\u7279\u6b8a\u8bc6\u522bID\u5bf9\u5176\u8fdb\u884c\u8ddf\u8e2a\u3002\u5206\u4e3a\u5355\u76ee\u6807\u8ddf\u8e2a\u548c\u591a\u76ee\u6807\u8ddf\u8e2a\uff0c\u6709\u7684\u6570\u636e\u96c6\u8fd8\u4f1a\u5bf9\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u7c7b\u522b\u8fdb\u884c\u6807\u6ce8\u3002\u5176\u793a\u610f\u56fe\u5982\u4e0b\u6240\u793a\uff1a \u56fe1 GOT10k \u5355\u76ee\u6807\u8ddf\u8e2a \u56fe2 MOT17 \u591a\u76ee\u6807\u8ddf\u8e2a 1.2 \u8bc4\u4ef7\u6307\u6807 \u6700\u5e38\u7528\u7684\u5c31\u662f\u4e24\u4e2a\uff1a\u7cbe\u786e\u5ea6\u548c\u6210\u529f\u7387\uff08\u6bd4\u5982TrackingNet\u3001UAV123\u3001Nfs\u3001OTB2015\u3001LaSOT\u3001TLP\uff09\u3002 \u6210\u529f\u7387\uff08Success Rate/IOU Rate/AOS\uff09 \u6210\u529f\u503c ( success )\u8ba1\u7b97\u662f\u8ba1\u7b97\u9884\u6d4b\u6846\u4e0e\u6807\u6ce8\u6846\u7684\u533a\u57df\u5185\u50cf\u7d20\u7684\u4ea4\u5e76\u6bd4\u3002\u6210\u529f\u7387 ( Success Rate )\u5373\u5728success\u4e00\u5b9a\u9608\u503c\u4e4b\u4e0b\uff0c\u6210\u529f\u4e2a\u6570\u7684\u6bd4\u4f8b\u3002\u5728\u4e0d\u540c\u7684\u9608\u503c\u4e0b\uff0c\u6210\u529f\u7387\u4e5f\u4f1a\u76f8\u5e94\u53d8\u5316\uff0c\u4ee5\u9608\u503c\u4e3ax\uff0c\u6210\u529f\u7387\u4e3ay\uff0c\u53ef\u4f5c\u51fa\u6210\u529f\u7387\u66f2\u7ebf ( Success rate plot) \u3002 AUC (Area under curve)\u5206\u6570\u5373\u4e3a\u6210\u529f\u7387\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\u3002\u6709\u7684\u8bba\u6587\u4e5f\u4f1a\u76f4\u63a5\u6307\u5b9a\u9608\u503c\uff0c\u7531\u4e8e\u4e2d\u503c\u5b9a\u7406\uff0c\u6700\u5e38\u7528\u7684\u9608\u503c\u662f0.5\u3002 \u7cbe\u786e\u5ea6 \uff08 Precision\uff09 \u7cbe\u786e\u5ea6\u662f\u8ffd\u8e2a\u6210\u529f\u7684\u4e2a\u6570\u6bd4\u4f8b\u3002\u4e3a\u4e86\u8ba1\u7b97\u8ffd\u8e2a\u6210\u529f\u7684\u4e2a\u6570\uff0c\u9700\u8981\u8ba1\u7b97\u9884\u6d4b\u6846\u4e2d\u5fc3\u70b9\u4e0e\u6807\u6ce8\u6846\u7684\u4e2d\u5fc3\u70b9\u7684\u4e4b\u95f4\u6b27\u6c0f\u8ddd\u79bb\uff0c\u901a\u5e38\u9608\u503c\u4e3a20\u50cf\u7d20\uff0c\u5373\u5b83\u4eec\u7684\u6b27\u6c0f\u8ddd\u79bb\u572820\u50cf\u7d20\u4e4b\u5185\u5c31\u89c6\u4e3a\u8ffd\u8e2a\u6210\u529f\u3002 \u5f52\u4e00\u5316\u7cbe\u786e\u5ea6\uff08Normalized Precision\uff09 \u8003\u8651\u5230\u6807\u6ce8\u6846\u7684\u5c3a\u5ea6\u5927\u5c0f\u5c06\u5f71\u54cd\u5bf9\u7cbe\u786e\u5ea6\u7684\u5224\u65ad\uff08\u6bd4\u5982\uff0c\u5bf9\u4e8e\u8f83\u5c0f\u7684\u6807\u6ce8\u6846\uff0c\u9884\u6d4b\u6846\u548c\u6807\u6ce8\u6846\u7684\u4e2d\u5fc3\u70b9\u76f8\u969420\u50cf\u7d20\uff0c\u4e24\u8005\u7684\u4ea4\u5e76\u6bd4\u5df2\u7ecf\u4e0b\u964d\u5230\u4e00\u4e2a\u975e\u5e38\u4f4e\u7684\u503c\uff09\uff0c\u56e0\u6b64\uff0c\u5c06\u7cbe\u786e\u5ea6 (Precision)\u6839\u636e\u6807\u6ce8\u6846\u5927\u5c0f\u8fdb\u884c\u4e86\u5f52\u4e00\u5316\uff0c\u5f97\u5230\u4e86\u5f52\u4e00\u5316\u7cbe\u786e\u5ea6 (Normalized Precision)\u3002 1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814 \u6211\u4eec\u5bf94\u4e2a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u8fdb\u884c\u8c03\u7814\uff0c\u5bf9\u76f8\u5173\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\uff08\u4e3b\u8981\u662f\u6807\u6ce8\u5b57\u6bb5\uff09\u8fdb\u884c\u5206\u6790\u6c47\u603b\uff0c\u76f8\u540c\u542b\u4e49\u7684\u6807\u6ce8\u5b57\u6bb5\u4f1a\u4ee5\u7edf\u4e00\u547d\u540d\u8fdb\u884c\u5c55\u793a\uff0c\u6c47\u603b\u4fe1\u606f\u5982\u4e0b\u8868\u6240\u793a\uff1a \u76ee\u6807\u8ddf\u8e2a\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 instance_id bbox category media_path frame_ID width height frameRate seqLength absence Visibility/Cover/Occluded truncated/cut_by_image ignore_flag TrackingNet Y Y Y GOT10k Y Y Y Y Y Y Y Y Y Y MOT17 Y Y Y Y Y Y Y Y Y Y Y KITTI-tracking Y Y Y Y Y Y Y \u5bf9\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u8fdb\u884c\u6c47\u603b\uff0c\u5f97\u5230\u4e0b\u8868\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 instance_id \u76ee\u6807\u7f16\u53f7\uff0c\u540c\u4e00\u76ee\u6807\u5728\u6574\u4e2a\u89c6\u9891\u7247\u6bb5\u4e2d\u5177\u6709\u552f\u4e00\u7684\u7f16\u53f7\uff0c\u5728\u591a\u76ee\u6807\u8ddf\u8e2a\u91cc\u4e3a\u5fc5\u9700\u5b57\u6bb5 bbox \u5b9a\u4f4d\u5355\u4e2a\u76ee\u6807\u7684\u77e9\u5f62\u6846\uff0c\u6bd4\u5982\u7528[xmin, ymin, xmax, ymax]\u8868\u793a category \u5355\u4e2a\u76ee\u6807\u6240\u5c5e\u7684\u7c7b\u522b media_path \u5a92\u4f53\u6587\u4ef6\u8def\u5f84 frame_ID \u5e27\u53f7\uff0c\u7528\u4e8e\u89c6\u9891\u5e8f\u5217\u6392\u5e8f \u72ec\u7acb\u5b57\u6bb5 width \u56fe\u7247\u7684\u5bbd height \u56fe\u7247\u7684\u9ad8 frameRate \u5e27\u7387\uff0c\u6709\u7684\u6570\u636e\u96c6\u4e5f\u53ebanno_fps seqLength \u89c6\u9891\u5e27\u5e8f\u5217\u957f\u5ea6/\u5f20\u6570 absence \u6307\u793a\u8be5\u5e27\u662f\u5426\u5b58\u5728\u8be5\u5bf9\u8c61 Visibility/Cover/Occluded \u906e\u6321\u5ea6\u3002\u5728\u4e0d\u540c\u6570\u636e\u96c6\u6709\u4e0d\u540c\u7684\u8868\u793a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u662fCover\uff08\u906e\u6321\u5ea6\u3001\u7ea7\u522b\u8303\u56f4\u4e3a0~8\uff09\uff0c\u4e5f\u53ef\u4ee5\u662fvisibility\uff08\u7269\u4f53\u53ef\u89c1\u7a0b\u5ea6\uff0c\u53d6\u503c\u5728 0~1 \u4e4b\u95f4\uff09,\u8fd8\u53ef\u4ee5\u662fOccluded\uff08\u5f53\u524d\u6807\u6ce8\u662f\u5426\u6709\u88ab\u906e\u6321\u30020 \u8868\u793a \"fully visiable\"\uff1b1 \u8868\u793a \"partly occluded\"\uff1b2 \u8868\u793a \"largely occluded\"\uff1b3 \u8868\u793a \"unknown\"\uff09 truncated/cut_by_image \u5f53\u524d\u6807\u6ce8\u7684\u5bf9\u8c61\u662f\u5426\u6b63\u88ab\u56fe\u50cf\u8fb9\u7f18\u622a\u65ad,1\u8868\u793a\u88ab\u622a\u65ad ignore_flag \u5f53\u524d\u6807\u6ce8\u5728\u8bc4\u4f30\u4e2d\u662f\u5426\u88ab\u8003\u8651\uff0c\u82e5 flag = 1\uff0c\u5219\u8003\u8651\u5f53\u524d\u6807\u6ce8\uff0c\u82e5 flag = 0\uff0c\u5219\u5ffd\u7565 \u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u8981\u63cf\u8ff0\u4e00\u4e2a\u68c0\u6d4b\u6570\u636e\u96c6\u7684\u6837\u672c\uff0cinstance_id\u3001bbox\u3001media_path\u548cframe_id\u662f\u6700\u57fa\u7840\u7684\u5b57\u6bb5\uff0c\u6b64\u5916\u8fd8\u5305\u542b\u4e86\u5404\u79cd\u63cf\u8ff0\u8fb9\u754c\u6846\u4fe1\u606f\u7684\u7279\u6b8a\u5b57\u6bb5\u3002 2. \u6a21\u677f\u5c55\u793a \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u662f\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u7684\u62d3\u5c55\uff0c\u4e5f\u5305\u542b\u5d4c\u5957\u7ed3\u6784\u4f53\uff08\u5176\u8be6\u7ec6\u5b9a\u4e49\u53ef\u4ee5\u53c2\u8003 DSDL\u5165\u95e8\u6587\u6863-\u8bed\u8a00\u5b9a\u4e49-\u5d4c\u5957\u7ed3\u6784\u4f53 \uff09\u548c\u7c7b\u522b\u57df\uff08class domain\uff0c\u6216\u8005cdom\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 DSDL\u5165\u95e8\u6587\u6863-\u8bed\u8a00\u5b9a\u4e49-\u7c7b\u522b\u57df \uff09\uff0c\u4f46\u4e0e\u4e4b\u4e0d\u540c\u7684\u662f\uff1a\u6839\u636e\u4e0a\u8ff0\u7684\u8c03\u7814\u7ed3\u679c\uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u91cd\u8981\u7684\u5c5e\u6027\u5305\u62ecframe_id\u3001media_path\u3001instance_id\u3001bbox\u548ccategory\uff0c\u800c\u8fd9\u4e9b\u5c5e\u6027\u5206\u522b\u5c5e\u4e8e \u4e09\u4e2a\u5c42\u7ea7\u7684\u7ed3\u6784\u4f53 \uff0c\u7b2c\u4e00\u5c42\u662f\u89c6\u9891\uff0c\u7b2c\u4e8c\u5c42\u662f\u89c6\u9891\u5e27\uff08\u5373\u56fe\u7247\uff09\uff0c\u7b2c\u4e09\u5c42\u662f\u6807\u6ce8\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e09\u5c42\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u7528\u6765\u8be6\u7ec6\u63cf\u8ff0\u6bcf\u4e2a\u6837\u672c\u7684\u4fe1\u606f\u3002 \u57fa\u4e8e\u4e0a\u8ff0\u8003\u8651\uff0c\u6211\u4eec\u5236\u5b9a\u4e86\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u7684\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a object-tracking.yaml $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : instance_id : InstanceID bbox : BBox category : Label[dom=$cdom] FrameSample : $def : struct $params : [ \"cdom\" ] $fields : frame_id : UniqueID media_path : Image objects : List[etype=LocalObjectEntry[cdom=$cdom]] VideoFrame : $def : struct $params : [ \"cdom\" ] $fields : video_name : Str videoframes : List[etype=FrameSample[cdom=$cdom]] \u5728\u76ee\u6807\u8ddf\u8e2a\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff08\u8be6\u7ec6\u5b66\u4e60\u8bf7\u53c2\u8003 DSDL\u8bed\u8a00\u6559\u7a0b \uff09 $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalObjectEntry: \u5b9a\u4e49\u4e86\u6807\u6ce8\u6846\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: instance_id\uff1a\u7269\u4f53\u7f16\u53f7\uff0c\u540c\u4e00\u7269\u4f53\u5728\u6574\u4e2a\u89c6\u9891\u7247\u6bb5\u4e2d\u5177\u6709\u552f\u4e00\u7684\u7f16\u53f7 bbox\uff1a\u6807\u6ce8\u6846\u4fe1\u606f\uff0c\u8f6c\u5316\u4e3abbox\u6807\u51c6\uff0c\u5373[x,y,w,h] category\uff1a\u6807\u6ce8\u6846\u7c7b\u522b\uff0c\u4e0eClassDom\u5bf9\u5e94 FrameSample: \u5b9a\u4e49\u4e86\u89c6\u9891\u5e27sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: frame_id\uff1a\u89c6\u9891\u5e27\u5e8f\u53f7\uff0c\u7c7b\u578b\u4e3aUniqueID\uff0c\u5982\u6709\u591a\u4e2a\u5c42\u7ea7\u5305\u542bUniqueID\uff0c\u53ef\u6307\u5b9a\u53c2\u6570id_type\uff0c\u6bd4\u5982UniqueID[id_type='frame'] media_path\uff1a\u89c6\u9891\u5e27\u7684\u8def\u5f84 objects\uff1a\u6807\u6ce8\u4fe1\u606f\uff0c\u4e3a\u524d\u9762\u7684\u6807\u6ce8\u6846\u7ed3\u6784\u4f53\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 VideoFrame\uff1a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u89c6\u9891sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5 $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: video_name\uff1a\u89c6\u9891\u7684\u540d\u79f0\uff08\u4e00\u822c\u662f\u6587\u4ef6\u5939\u540d\u5b57\uff09 videoframes\uff1a\u4e3a\u524d\u9762\u7684\u89c6\u9891\u5e27sample\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 \u9664\u4e86\u8fd9\u4e9b\u5fc5\u9700\u5b57\u6bb5\u4ee5\u5916\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u53c2\u8003\u201c\u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814\u201d\u4e2d\u7684\u7279\u6b8a\u5b57\u6bb5\u548c\u5176\u4ed6\u5b57\u6bb5\uff0c\u65b0\u589e\u5bf9\u7ed3\u6784\u4f53\u7684\u5c5e\u6027\u5b9a\u4e49\u3002 3. \u5b8c\u6574\u793a\u4f8b \u6211\u4eec\u4ee5TrackingNet\u6570\u636e\u96c6\uff08\u5355\u76ee\u6807\u8ddf\u8e2a\uff09\u4e3a\u4f8b\uff0c\u5c55\u793a\u76ee\u6807\u8ddf\u8e2a\u6570\u636e\u96c6DSDL\u63cf\u8ff0\u6587\u4ef6\u5177\u4f53\u5185\u5bb9\u3002 object-tracking.yaml $dsdl-version : \"0.5.3\" LocalObjectEntry : $def : struct $params : [ \"cdom\" ] $fields : instance_id : InstanceID bbox : BBox category : Label[dom=$cdom] FrameSample : $def : struct $params : [ \"cdom\" ] $fields : frame_id : UniqueID media_path : Image _image_shape : ImageShape objects : List[etype=LocalObjectEntry[cdom=$cdom]] VideoFrame : $def : struct $params : [ \"cdom\" ] $fields : video_name : Str _folder : Str videoframes : List[etype=FrameSample[cdom=$cdom]] \u5b57\u6bb5\u542b\u4e49\u89e3\u91ca\u53ca\u5bf9\u5e94\u5173\u7cfb\uff1a \uff08\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5b57\u6bb5\u662f \u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f \u4e2d\u6ca1\u6709\u5305\u542b\u7684\u5b57\u6bb5\uff09 \u5728LocalObjectEntry\u4e2d\uff1a bbox\uff1a\u5bf9\u5e94\u539f\u6570\u636e\u96c6txt\u6807\u6ce8\u6587\u4ef6\u4e2d\u7684\u6807\u6ce8\u6846\u5750\u6807\uff0c\u5373[x,y,w,h] \u5728ObjectTrackingSample\u4e2d\uff1a frame_id\uff1a\u89c6\u9891\u5e27\u5e8f\u53f7\uff0c\u7c7b\u578b\u4e3aUniqueID\uff0c\u8fd9\u91cc\u5bf9\u5e94\u7684\u662f\u539f\u6570\u636e\u96c6\u7684\u89c6\u9891\u5e27\u6587\u4ef6\u540d\uff0c\u6bd4\u5982\u201c0.jpg\"\u5bf9\u5e94\u7684frame_id\u4e3a\u201c0\u201d\u3002 media_path\uff1a\u8be5\u5b57\u6bb5\u662f\u6211\u4eec\u81ea\u9002\u5e94\u7684\u5b57\u6bb5\uff0c\u7528\u4e8e\u50a8\u5b58\u56fe\u50cf\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u4e3b\u8981\u4ece\u539f\u59cb\u6570\u636e\u96c6\u7684filename\u5b57\u6bb5\u8f6c\u5316\u800c\u6765 _image_shape\uff1a\u56fe\u7247\u7684\u5bbd\u9ad8\u4fe1\u606f\uff0c\u683c\u5f0f\u4e3a[height, width]\uff0cTrackingNet\u4e2d\u5e76\u6ca1\u6709\u76f4\u63a5\u63d0\u4f9b\u56fe\u7247\u5bbd\u9ad8\u5c5e\u6027\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbfodl\u5de5\u5177\u7684\u7b5b\u9009\u7b49\u64cd\u4f5c\uff0c\u5efa\u8bae\u6dfb\u52a0\u8be5\u5b57\u6bb5 objects\uff1a\u8be5\u5b57\u6bb5\u5bf9\u5e94\u539f\u59cb\u6570\u636e\u96c6\u7684object\u5b57\u6bb5\uff0c\u4ee5List\u7684\u5f62\u5f0f\u5b58\u50a8\u5177\u4f53bounding box\u7684\u6807\u6ce8\u4fe1\u606f \u5728VideoFrame\u4e2d\uff1a video_name\uff1a\u89c6\u9891\u7684\u540d\u79f0\uff08\u5bf9\u5e94frames\u4e0b\u7684\u5b50\u76ee\u5f55\u6587\u4ef6\u540d\uff09 _folder: \u4e3b\u8981\u662f\u6807\u8bc6\u89c6\u9891\u6765\u81ea\u4e8e\u54ea\u4e2a\u6587\u4ef6\u5939\uff0c\u56e0\u4e3a\u8bad\u7ec3\u96c6\u4e00\u5171\u5206\u4e8612\u4e2a\u6587\u4ef6\u5939\uff0c\u6a21\u677f\u4e2d\u6ca1\u6709\u8be5\u5b57\u6bb5\uff0c\u4e3a\u65b0\u589e\u5b57\u6bb5 videoframes\uff1a\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u5b58\u50a8\u4e86\u89c6\u9891\u7684\u6bcf\u4e00\u5e27\u7684\u4fe1\u606f \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u8be5\u6570\u636e\u96c6\u6ca1\u6709\u7c7b\u522b\u4fe1\u606f\uff0c\u56e0\u6b64\u5176\u5b9e\u53ef\u4ee5\u4e0d\u9700\u8981category\u5b57\u6bb5\u548c\u7c7b\u522b\u57df\u6587\u4ef6\uff0c\u53e6\u5916\uff0c\u56e0\u4e3a\u662f\u5355\u76ee\u6807\u8ddf\u8e2a\uff0cinstance_id\u5b57\u6bb5\u4e5f\u53ef\u4ee5\u7701\u7565\u3002\u4f46\u4e3a\u4e86\u4fdd\u8bc1\u793a\u4f8b\u7684\u5b8c\u6574\u6027\uff0c\u5728\u6b64\u7686\u4fdd\u7559\uff0c\u4f9b\u7528\u6237\u53c2\u8003\u3002 \u7c7b\u522b\u57df\u7684\u6587\u4ef6\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff0c\u7531\u4e8eTrackingNet\u6ca1\u6709\u7c7b\u522b\u6807\u6ce8\uff0c\u5728\u8fd9\u91cc\u7528\u9ed8\u8ba4\u7c7b\u522b\"object\"\u4f5c\u4e3a\u5355\u4e00\u7c7b\u522b\u4fe1\u606f\u3002 class-dom.yaml $dsdl-version : 0.5.3 TrackingNetClassDom : $def : class_domain classes : - object train.yaml \u5728\u8be5\u793a\u4f8b\u4e2d\u5c06\u5c55\u793a\u7684\u65b9\u5f0f\u662f\u4ece\u5916\u90e8json\u8bfb\u53d6\u6837\u672c\u5177\u4f53\u6807\u6ce8\u4fe1\u606f\u3002 $dsdl-version : \"0.5.3\" $import : - ../defs/object-tracking - ../defs/class-dom meta : dataset_name : \"TrackingNet\" creator : \"King Abdullah University of Science and Technology\" home-page : \"https://tracking-net.org/\" opendatalab-page : \"https://opendatalab.com/TrackingNet\" sub_dataset_name : \"train\" task_name : \"single-object tracking\" data : sample-type : VideoFrame[cdom=TrackingNetClassDom] sample-path : train_samples.json \u4e0a\u9762\u7684\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff0c\u9996\u5148\u5b9a\u4e49\u4e86dsdl\u7684\u7248\u672c\u4fe1\u606f\uff0c\u7136\u540eimport\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u6570\u636e\u96c6\u6a21\u677f\u6587\u4ef6\uff0c\u5305\u62ec\u4efb\u52a1\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6a21\u677f\u3002\u63a5\u7740\u7528meta\u548cdata\u5b57\u6bb5\u6765\u63cf\u8ff0\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: dsdl\u7248\u672c\u4fe1\u606f $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u548cTrackingNet\u7684class domain meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u521b\u5efa\u8005\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: \u5176\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece\u76ee\u6807\u8ddf\u8e2a\u4efb\u52a1\u6a21\u677f\u4e2d\u5bfc\u5165\u7684VideoFrame\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aTrackingNetClassDom sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u8fd9\u91cc\u7ed9\u4e86\u5b9e\u9645\u7684json\u6587\u4ef6\u8def\u5f84\uff0c\u56e0\u6b64samples\u7684\u5185\u5bb9\u5c06\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6 train_samples.json train_samples.json\u9700\u8981\u6211\u4eec\u5199\u811a\u672c\u4ece\u539f\u59cb\u6570\u636e\u96c6\u8f6c\u6362\u6765\uff0c\u8f6c\u6362\u811a\u672c\u6a21\u677f\u53ef\u4ee5\u53c2\u8003 \u6570\u636e\u96c6\u8f6c\u6362 \u9875\u9762\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u5b57\u6bb5\u9700\u8981\u548c\u4e4b\u524d\u5b9a\u4e49\u7684struct\u5bf9\u5e94\uff0c\u6700\u7ec8\u6837\u5f0f\u5982\u4e0b\uff1a {\"samples\": [ { \"video_name\": \"0-6LB4FqxoE_0\", \"_folder\": \"TRAIN_0\", \"videoframes\": [ { \"frame_id\": \u201c0\u201d, \"media_path\": \"TRAIN_0/frames/0-6LB4FqxoE_0/0.jpg\", \"_image_shape\": [360, 480], \"objects\": [ { \"instance_id\": 000000000001, \"bbox\": [120.24, 0.32, 359.76, 596.04], \"category\": 1 }, ... ] }, ... ] }, ... ]}","title":"Object Tracking"},{"location":"en/dsdl_template/cv/cv_ocr/","text":"Optical Character Recognition","title":"Optical Character Recognition (OCR)"},{"location":"en/dsdl_template/cv/cv_ocr/#optical-character-recognition","text":"","title":"Optical Character Recognition"},{"location":"en/dsdl_template/cv/cv_rotated_detection/","text":"\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1 \u6211\u4eec\u901a\u8fc7\u5bf9\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u8fdb\u884c\u8c03\u7814\uff0c\u5e76\u603b\u7ed3\u6570\u636e\u96c6\u63cf\u8ff0\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\uff0c\u4ece\u800c\u5236\u5b9a\u51fa\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1DSDL\u6a21\u677f\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u4f7f\u7528\u3002 1. \u4efb\u52a1\u8c03\u7814 1.1 \u4efb\u52a1\u5b9a\u4e49 \u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u662f\u6307\u5728\u56fe\u50cf\u4e2d\u7528\u65cb\u8f6c\u77e9\u5f62\u6846\u3001\u56db\u8fb9\u5f62\u751a\u81f3\u4efb\u610f\u5f62\u72b6\u7684\u5f62\u5f0f\u68c0\u6d4b\u51fa\u7269\u4f53\u7684\u4f4d\u7f6e\uff0c\u5e76\u8bc6\u522b\u5176\u6240\u5c5e\u7c7b\u522b\uff0c\u793a\u610f\u56fe\u5982\u4e0b\uff1a 1.2 \u8bc4\u4ef7\u6307\u6807\uff1a \u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u7684\u8bc4\u4ef7\u6307\u6807\u4e0e\u76ee\u6807\u68c0\u6d4b\u76f8\u540c\uff0c\u6700\u5e38\u7528\u7684\u8bc4\u4ef7\u6307\u6807\u5c31\u662fmAP\uff08 m ean A verage P recision\uff09\u548cAP\uff08 A verage P recision\uff09\uff0c\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003 \u76ee\u6807\u68c0\u6d4b\u8bc4\u4ef7\u6307\u6807 \u3002 1.3 \u4e3b\u6d41\u6570\u636e\u96c6\u8c03\u7814\uff1a \u6211\u4eec\u5bf95\u4e2a\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u8fdb\u884c\u8c03\u7814\uff0c\u5bf9\u76f8\u5173\u6570\u636e\u96c6\u63cf\u8ff0\u6587\u4ef6\uff08\u4e3b\u8981\u662f\u6807\u6ce8\u5b57\u6bb5\uff09\u8fdb\u884c\u5206\u6790\u6c47\u603b\uff0c\u76f8\u540c\u542b\u4e49\u7684\u6807\u6ce8\u5b57\u6bb5\u4f1a\u4ee5\u7edf\u4e00\u547d\u540d\u8fdb\u884c\u5c55\u793a\uff0c\u6c47\u603b\u4fe1\u606f\u5982\u4e0b\u8868\u6240\u793a\uff1a \u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6 \u5171\u4eab\u5b57\u6bb5 \u72ec\u7acb\u5b57\u6bb5 image_id label_id rbbox bbox istruncated isdifficult pose theta head DOTAv2.0 Y Y Y Y Y HRSC2016 Y Y Y Y Y Y Y UCAS_AOD Y Y Y Y Y SZTAKI-INRIA Y Y Y SSDD+ Y Y Y Y Y Y \u5bf9\u5171\u4eab\u5b57\u6bb5\u548c\u72ec\u7acb\u5b57\u6bb5\u8fdb\u884c\u6c47\u603b\uff0c\u5f97\u5230\u4e0b\u8868\uff1a \u5b57\u6bb5\u7c7b\u578b \u5b57\u6bb5\u540d\u79f0 \u542b\u4e49 \u5171\u4eab\u5b57\u6bb5 image_id \u5b9a\u4f4d\u5230\u552f\u4e00\u56fe\u7247\uff0c\u6bd4\u5982\u7528\u56fe\u7247\u540d\u6216\u8005\u56fe\u7247\u8def\u5f84\u8868\u793a label_id \u5355\u4e2a\u76ee\u6807\u6240\u5c5e\u7684\u7c7b\u522b rbbox \u5b9a\u4f4d\u5355\u4e2a\u65cb\u8f6c\u76ee\u6807\u6846\uff0c\u6bd4\u5982\u7528[x1, y1, x2, y2, x3, y3, x4, y4]\u8868\u793a \u72ec\u7acb\u5b57\u6bb5 bbox \u5b9a\u4f4d\u5355\u4e2a\u76ee\u6807\u7684\u666e\u901a\u77e9\u5f62\u6846\uff0c\u6bd4\u5982\u7528[xmin, ymin, xmax, ymax]\u8868\u793a\uff0c\u4e00\u822c\u7528\u4e8e\u666e\u901a\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\uff0c\u505a\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u65f6\uff0c\u5e76\u4e0d\u4f7f\u7528\u8be5\u5b57\u6bb5 istruncated \u76ee\u6807\u662f\u5426\u88ab\u622a\u65ad\uff0c\u5373\u76ee\u6807\u90e8\u5206\u5904\u4e8e\u56fe\u7247\u4e4b\u5916 isdifficult \u662f\u5426\u4e3a\u68c0\u6d4b\u56f0\u96be\u7684\u76ee\u6807 theta \u7269\u4f53\u5c3e\u90e8\u5230\u5934\u90e8\u7684\u5411\u91cf\u4e0ex\u8f74\u6b63\u65b9\u5411\u7684\u5939\u89d2 head \u7269\u4f53\u5934\u90e8\u5750\u6807 pose \u62cd\u6444\u89d2\u5ea6\uff0c\u53d6\u503c\u4e3a Unspecified\uff0cFrontal\uff0cRear\uff0cLeft\uff0cRight \u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u8981\u63cf\u8ff0\u4e00\u4e2a\u65cb\u8f6c\u68c0\u6d4b\u6570\u636e\u96c6\u7684\u6837\u672c\uff0cimage_id\u3001label_id\u548crbbox\u662f\u6700\u57fa\u7840\u7684\u5b57\u6bb5\uff0c\u6b64\u5916\u8fd8\u5305\u542b\u4e86\u5404\u79cd\u63cf\u8ff0\u8fb9\u754c\u6846\u4fe1\u606f\u7684\u7279\u6b8a\u5b57\u6bb5\u3002 2. \u6a21\u677f\u5c55\u793a \u6839\u636e\u4e0a\u8ff0\u8c03\u7814\uff0c\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u4e2d\u4e00\u5f20 \u56fe\u50cf \u5bf9\u5e94\u4e0d\u5b9a\u6570\u91cf\u7684 \u76ee\u6807 \uff0c\u6bcf\u4e2a\u76ee\u6807\u7528 \u8fb9\u754c\u6846RotatedBBox \u6765\u5b9a\u4f4d\u76ee\u6807\u4f4d\u7f6e\uff0c\u6bcf\u4e2aRotatedBBox\u540c\u65f6\u63d0\u4f9b \u8bed\u4e49\u6807\u7b7e \uff0c\u7531\u6b64\u6211\u4eec\u5b9a\u4e49\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u6a21\u677f\u5982\u4e0b\uff1a $dsdl-version : \"0.5.0\" LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : rbbox : RotatedBBox[mode=\"xyxy\"] label : Label[dom=$cdom] OrientedObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image objects : List[LocalObjectEntry[cdom=$cdom]] \u5728\u68c0\u6d4b\u6a21\u677f\u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\uff08\u8be6\u7ec6\u5b66\u4e60\u8bf7\u53c2\u8003 DSDL\u8bed\u8a00\u6559\u7a0b \uff09 $dsdl-version: \u63cf\u8ff0\u4e86\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684dsdl\u7248\u672c LocalObjectEntry: \u5b9a\u4e49\u4e86\u8fb9\u754c\u6846\u7684\u63cf\u8ff0\u65b9\u5f0f\u7684\u5d4c\u5957\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: label \u8fb9\u754c\u6846\u7684\u7c7b\u522b rbbox \u8fb9\u754c\u6846\u7684\u4f4d\u7f6e\uff0c\u76ee\u524d\u6709\u4e24\u79cd\u6a21\u5f0f RotatedBBox[mode=\"xyxy\"]\uff1a\u4ee3\u8868\u4ee5\u56db\u8fb9\u5f62\u8868\u793a\u6807\u6ce8\u6846\uff0c\u5177\u4f53\u6807\u6ce8\u503c\u793a\u4f8b\uff1a[x1,y1,x2,y2,x3,y3,x4,y4]\uff0cxi,yi\u4ee3\u8868\u56db\u8fb9\u5f62\u7684\u56db\u4e2a\u9876\u70b9\u5750\u6807\u3002 RotatedBBox[mode=\"xywht\", measure=\"degree\"]\uff1a\u4ee3\u8868\u4ee5\u65cb\u8f6c\u77e9\u5f62\u8868\u793a\u6807\u6ce8\u6846\uff0c\u5177\u4f53\u6807\u6ce8\u503c\u793a\u4f8b\uff1a[x, y, w, h, t]\uff0cx,y\uff1a\u77e9\u5f62\u6846\u7684\u4e2d\u5fc3\u70b9\u5750\u6807\uff0cw,h\uff1a\u77e9\u5f62\u6846\u7684\u5bbd\u548c\u9ad8\uff0ct\uff1a\u77e9\u5f62\u6846\u65cb\u8f6c\u7684\u89d2\u5ea6\u3002 \u5f53measure=\"degree\" \u65f6\uff0ct\u4ee3\u8868\u89d2\u5ea6\uff0c\u8303\u56f4\u662f(-180,180)\uff1b\u5f53measure=\"radian\"\u65f6\uff0ct\u4ee3\u8868\u5f27\u5ea6\uff0c\u8303\u56f4\u662f\uff08-pi,pi\uff09\u3002 measure\u7684\u9ed8\u8ba4\u503c\u662f\u5f27\u5ea6\u3002\u5373RotatedBBox[mode=\"xywht\"]\u4ee3\u8868t\u53ea\u80fd\u586b\u5199\u5f27\u5ea6\u503c\u3002 OrientedObjectDetectionSample: \u5b9a\u4e49\u4e86\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1sample\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u56db\u4e2a\u5b57\u6bb5: $def: struct, \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b $params: \u5b9a\u4e49\u4e86\u5f62\u53c2\uff0c\u5728\u8fd9\u91cc\u5373class domain $fields: \u7ed3\u6784\u4f53\u7c7b\u6240\u5305\u542b\u7684\u5c5e\u6027\uff0c\u5177\u4f53\u5305\u62ec: image \u56fe\u7247\u7684\u8def\u5f84 objects \u6807\u6ce8\u4fe1\u606f\uff0c\u68c0\u6d4b\u4efb\u52a1\u4e2d\uff0c\u4e3a\u524d\u9762\u7684LocalObjectEntry\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868 3. \u5b8c\u6574\u793a\u4f8b \u6211\u4eec\u4ee5DOTAv2.0\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u5c55\u793a\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6DSDL\u63cf\u8ff0\u6587\u4ef6\u5177\u4f53\u5185\u5bb9\u3002 3.1 DSDL\u8bed\u6cd5\u63cf\u8ff0\u7c7b\u522b\u4fe1\u606f class-dom.yaml $dsdl-version : \"0.5.2\" DOTAV2ClassDom : $def : class_domain classes : - large_vehicle - small_vehicle - ship - ground_track_field - soccer_ball_field - tennis_court - swimming_pool - harbor - baseball_diamond - plane - storage_tank - roundabout - basketball_court - bridge - helicopter - container_crane - airport - helipad ExampleClassDomDescr : $def : struct $params : [ 'cdom' ] $fields : dsdl_name : Label[dom=$cdom] original_name : Str ClassMapInfo : $def : struct $params : [ 'cdom' ] $fields : class_info : List[ExampleClassDomDescr[cdom=$cdom]] \u4e0a\u9762\u7684\u6587\u4ef6\u4e2d\u7ed9\u51fa\u4e86DOTAV2ClassDom\u7684\u5b9a\u4e49\uff0c\u5177\u4f53\u5305\u542b\u4e0b\u5217\u5b57\u6bb5\uff1a $def: \u63cf\u8ff0\u4e86DOTAV2ClassDom\u7684dsdl\u7c7b\u578b\uff0c\u8fd9\u91cc\u5373class_domain classes: \u63cf\u8ff0\u4e86\u8be5\u7c7b\u522b\u57df\u4e2d\u6240\u5305\u542b\u7684\u7c7b\u522b\u53ca\u5176\u987a\u5e8f\uff0c\u5728DOTAV2ClassDom\u6570\u636e\u96c6\u4e2d\uff0c\u5219\u4f9d\u6b21\u4e3alarge_vehicle\u3001small_vehicle\u7b49\u7b49 \u4ececlass_domain\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u6570\u636e\u96c6\u6240\u6709\u7c7b\u522b\u4fe1\u606f\uff0c\u719f\u6089DOTA\u6570\u636e\u96c6\u7684\u7528\u6237\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53\u524d\u7684\u7c7b\u522b\u540d\u4e0e\u539f\u59cbDOTA\u6570\u636e\u96c6\u5b58\u5728\u4e00\u5b9a\u5dee\u5f02\uff0c\u8fd9\u662f\u56e0\u4e3aDOTA\u6570\u636e\u96c6\u7c7b\u522b\u547d\u540d\u5b58\u5728\u7279\u6b8a\u5b57\u7b26\uff0c\u6211\u4eec\u5bf9\u9f50\u8fdb\u884c\u89c4\u8303\u5316\u8f6c\u6362\u3002\u6211\u4eec\u5c06\u539f\u59cb\u547d\u540d\u5230DSDL\u547d\u540d\u7684\u6620\u5c04\u5173\u7cfb\u5b58\u50a8\u5728ClassMapInfo\u4e2d\uff0c\u9700\u8981\u7684\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u83b7\u53d6\uff0c\u5173\u4e8e\u5168\u5c40\u4fe1\u606f\u5b58\u50a8\u65b9\u5f0f\u7684\u5177\u4f53\u4fe1\u606f\u53ef\u4ee5\u67e5\u770bDSDL\u8bed\u8a00\u6559\u7a0b\u7684 Global-Info\u5b57\u6bb5\u7528\u6cd5 \u3002 3.2 \u6570\u636e\u96c6yaml\u6587\u4ef6\u5b9a\u4e49 train.yaml $dsdl-version : \"0.5.2\" $import : - ../defs/class-dom - ../defs/rotated-detection meta : dataset_name : \"DOTAv2.0\" subset-name : \"train\" creator : \"Wuhan University\u00b7Cornell University\u00b7Huazhong University of Science and Technology\" dataset-version : \"2.0\" home-page : \"https://captain-whu.github.io/DOTA/dataset.html\" opendatalab-page : \"https://opendatalab.com/DOTA_V2.0\" task_type : \"Rotated Object Detection\" data : global-info-type : ClassMapInfo[cdom=DOTAV2ClassDom] global-info-path : ../defs/global-info.json sample-type : OrientedObjectDetectionSample[cdom=DOTAV2ClassDom] sample-path : samples.json \u4e0a\u9762\u7684\u63cf\u8ff0\u6587\u4ef6train.yaml\u4e2d\uff0c\u9996\u5148\u5b9a\u4e49\u4e86dsdl\u7684\u7248\u672c\u4fe1\u606f\uff0c\u7136\u540eimport\u4e86\u4e24\u4e2a\u6a21\u677f\u6587\u4ef6\uff0c\u5305\u62ec\u4efb\u52a1\u6a21\u677f\u548c\u7c7b\u522b\u57df\u6a21\u677f\uff0c\u63a5\u7740\u7528meta\u548cdata\u5b57\u6bb5\u6765\u63cf\u8ff0\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u5177\u4f53\u7684\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\u6240\u793a\uff1a $dsdl-version: dsdl\u7248\u672c\u4fe1\u606f $import: \u6a21\u677f\u5bfc\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u5bfc\u5165\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u548cDOTAV2\u7684class domain\u3002 meta: \u4e3b\u8981\u5c55\u793a\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6570\u636e\u96c6\u540d\u79f0\uff0c\u521b\u5efa\u8005\u7b49\u7b49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6dfb\u52a0\u60f3\u8981\u5907\u6ce8\u7684\u5176\u5b83\u4fe1\u606f data: \u5176\u5185\u5bb9\u5c31\u662f\u6309\u7167\u524d\u9762\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u6240\u4fdd\u5b58\u7684\u6837\u672c\u4fe1\u606f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a global-info-type: \u6570\u636e\u96c6\u7684\u5168\u5c40\u4fe1\u606f\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ececlass-dom.yaml\u4e2d\u5bfc\u5165\u7684ClassMapInfo\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aDOTAV2ClassDom. global-info-path: \u5168\u5c40\u4fe1\u606fglobal-info.json\u7684\u5b58\u653e\u8def\u5f84. sample-type: \u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u7528\u7684\u662f\u4ece\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u6a21\u677f\u4e2d\u5bfc\u5165\u7684OrientedObjectDetectionSample\u7c7b\uff0c\u540c\u65f6\u6307\u5b9a\u4e86\u91c7\u7528\u7684cdom\u4e3aDOTAV2ClassDom. sample-path: samples\u7684\u5b58\u653e\u8def\u5f84\uff0c\u5982\u679c\u5b9e\u9645\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219samples\u7684\u5185\u5bb9\u4ece\u8be5\u6587\u4ef6\u8bfb\u53d6\uff08\u6b64\u5904\u662f\u5f53\u524d\u76ee\u5f55\u4e0b\u7684samples.json\u6587\u4ef6\uff09\uff0c\u5982\u679c\u662f$local\uff0c\u5219\u4ece\u672c\u6587\u4ef6\u7684data.samples\u5b57\u6bb5\u4e2d\u76f4\u63a5\u8bfb\u53d6. samples: \u4fdd\u5b58\u6570\u636e\u96c6\u7684\u6837\u672c\u4fe1\u606f\uff0c\u6ce8\u610f\u53ea\u6709\u5728sample-path\u662f$local\u7684\u65f6\u5019\u8be5\u5b57\u6bb5\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219samples\u4f1a\u4f18\u5148\u4ecesample-path\u4e2d\u7684\u8def\u5f84\u53bb\u8bfb\u53d6 train.yaml\u4e2d\u51fa\u73b0\u7684\u6587\u4ef6\u548c\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a rotated-detection.yaml $dsdl-version : \"0.5.2\" LocalObjectEntry : $def : struct $params : [ 'cdom' ] $fields : rbbox : RotatedBBox[mode=\"xyxy\"] label : Label[dom=$cdom] isdifficult : Bool bbox : BBox $optional : [ 'bbox' ] OrientedObjectDetectionSample : $def : struct $params : [ 'cdom' ] $fields : image : Image imageshape : ImageShape objects : List[etype=LocalObjectEntry[cdom=$cdom]] acquisition_dates : Str imagesource : Str gsd : Num $optional : [ 'objects' , 'acquisition_dates' , 'imagesource' , 'gsd' ] \u6b64\u6a21\u677f\u4e2d\u4f7f\u7528\u5230\u4e86\u201c$optional\u201d\u5b57\u6bb5\uff0c\u8be5\u5b57\u6bb5\u7684\u503c\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u7684\u503c\u53ea\u80fd\u6765\u6e90\u4e8e\u201c$fields\u201d\u4e2d\u3002\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u5b57\u6bb5\u5728\u6837\u672c\u4e2d\u662f\u53ef\u4ee5\u4e0d\u51fa\u73b0\u7684\u3002\u5177\u4f53\u7528\u6cd5\u8bf7\u53c2\u8003DSDL\u8bed\u8a00\u6559\u7a0b\u4e2d Optional\u7684\u7528\u6cd5 \u3002 global-info.json { \"global-info\" : { \"class_info\" : [ { \"dsdl_name\" : \"roundabout\" , \"original_name\" : \"roundabout\" }, { \"dsdl_name\" : \"large_vehicle\" , \"original_name\" : \"large-vehicle\" }, { \"dsdl_name\" : \"small_vehicle\" , \"original_name\" : \"small-vehicle\" }, ... ] } } samples.json { \"samples\" : [ { \"image\" : \"train/images/P0000.png\" , \"imageshape\" : [ 5502 , 3875 ], \"objects\" : [ { \"rbbox\" : [ 2244.0 , 1791.0 , 2254.0 , 1795.0 , 2245.0 , 1813.0 , 2238.0 , 1809.0 ], \"label\" : \"small_vehicle\" , \"isdifficult\" : true , \"bbox\" : [ 2238.0 , 1791.0 , 16.0 , 22.0 ] }, ... ], \"acquisition_dates\" : \"2016-05-04\" , \"imagesource\" : \"GoogleEarth\" , \"gsd\" : 0.146343590398 } ... ] }","title":"Rotated Object Detection"},{"location":"en/dsdl_template/cv/cv_segmentation/","text":"Image Segmentation","title":"Image Segmentation"},{"location":"en/dsdl_template/cv/cv_segmentation/#image-segmentation","text":"","title":"Image Segmentation"},{"location":"en/dsdl_template/nlp/nlp/","text":"Natural Language Processing","title":"Natural Language Processing"},{"location":"en/dsdl_template/nlp/nlp/#natural-language-processing","text":"","title":"Natural Language Processing"},{"location":"en/getting_started/install/","text":"Installation Case a install it with pip pip install dsdl Case b install it from source git clone https://github.com/opendatalab/dsdl.git cd dsdl python setup.py install","title":"Install"},{"location":"en/getting_started/install/#installation","text":"Case a install it with pip pip install dsdl Case b install it from source git clone https://github.com/opendatalab/dsdl.git cd dsdl python setup.py install","title":"Installation"},{"location":"en/getting_started/overview/","text":"Overview and introduction of DSDL.","title":"overview"},{"location":"en/getting_started/quick_start/","text":"\u5feb\u901f\u5165\u95e8 \u672c\u6559\u7a0b\u5c06\u4f7f\u7528 PASCAL VOC 2007 \u68c0\u6d4b\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u6f14\u793a\u6570\u636e\u5904\u7406\u53ca\u6a21\u578b\u8bad\u7ec3\u5168\u6d41\u7a0b\u3002 1. \u6570\u636e\u96c6\u4e0b\u8f7d odl get VOC07-det \u51fa\u73b0\u5982\u4e0b\u65e5\u5fd7\uff0c\u8bf4\u660e\u6570\u636e\u96c6\u5df2\u7ecf\u4e0b\u8f7d\u5b8c\u6210\u3002 saving to {your home path}/datasets/VOC07-det preparing... start download... Download |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.0%, Eta 0 seconds Download Complete register local dataset... \u4e0b\u8f7d\u5b8c\u6210\u540e\u9700\u8981\u8fdb\u884c\u89e3\u538b\uff08\u89e3\u538b\u6b65\u9aa4\u53ef\u4ee5\u53c2\u8003\u6559\u7a0b \u6570\u636e\u96c6\u51c6\u5907 \uff09\uff0c\u89e3\u538b\u5b8c\u6210\u540e\uff0c\u539f\u59cb\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a voc\u6570\u636e\u96c6\u539f\u59cb\u76ee\u5f55\u7ed3\u6784 original/ # \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001.xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001.jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ... \u5bf9\u5e94\u7684DSDL\u6807\u51c6\u5316\u6587\u4ef6\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a dsdl-voc\u76ee\u5f55\u7ed3\u6784 dsdl/ \u251c\u2500\u2500 defs/ \u2502 \u251c\u2500\u2500 object-detection-def.yaml # \u4efb\u52a1\u7c7b\u578b\u7684\u5b9a\u4e49 \u2502 \u2514\u2500\u2500 class-dom.yaml # \u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 set-train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 set-val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u251c\u2500\u2500 set-test/ # \u6d4b\u8bd5\u96c6 \u2502 \u251c\u2500\u2500 test.yaml \u2502 \u2514\u2500\u2500 test_samples.json \u251c\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6 \u2514\u2500\u2500 README.md # \u6570\u636e\u96c6\u7b80\u4ecb \u6ce8: DSDL\u6587\u4ef6\u76ee\u5f55\u4e0b\u5404\u4e2a\u6587\u4ef6\u7684\u5177\u4f53\u5185\u5bb9\u548c\u89e3\u91ca\u53ef\u53c2\u8003 \u9ad8\u9636\u6559\u7a0b \u3002 2. \u6570\u636e\u96c6\u914d\u7f6e dsdl\u91c7\u7528\u4e86\u3010\u5a92\u4f53\u6570\u636e\u3011\u548c\u3010\u6807\u6ce8\u6587\u4ef6\u3011\u5206\u79bb\u8fd9\u4e00\u8bbe\u8ba1\u7406\u5ff5\uff0c\u82e5\u7528\u6237\u4e4b\u524d\u5df2\u7ecf\u4e0b\u8f7d\u8fc7\u76f8\u5173\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\uff0c\u53ea\u9700\u4e0b\u8f7ddsdl\u6807\u6ce8\u6587\u4ef6\u5373\u53ef\u4f7f\u7528\u8be5\u6570\u636e\u96c6\u3002\u4e3a\u4e86\u4f7f\u7528\u4e0b\u8f7d\u597d\u7684\u6570\u636e\u96c6\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u914d\u7f6e\u6587\u4ef6 config.py \uff08\u4f4d\u4e8e VOC07-det/dsdl/config.py \uff09\u6765\u8fdb\u884c\u5bf9\u5a92\u4f53\u6570\u636e\u7684\u5b9a\u4f4d\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u5982\u4e0b\u8f7d\u7684 VOC07-det \u6570\u636e\u96c6\u4f4d\u4e8e ~/datasets \u8def\u5f84\u4e0b\uff0c\u5219\u53ea\u9700\u8981\u5c06 ~/datasets/VOC07-det/dsdl/config.py \u4e2d\u7684\u914d\u7f6e\u6309\u7167\u5982\u4e0b\u5185\u5bb9\u8fdb\u884c\u4fee\u6539\u5373\u53ef\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"~/datasets/VOC07-det/original\" , ) \u5b9e\u9645\u4e0a\uff0cdsdl\u4e5f\u652f\u6301\u4ece\u963f\u91cc\u4e91\u8bfb\u53d6\u5a92\u4f53\u6570\u636e\uff0c\u540c\u6837\u4e5f\u53ea\u9700\u8981\u4fee\u6539 config.py \u6587\u4ef6\u5373\u53ef\uff0c\u8be6\u7ec6\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 \u6570\u636e\u96c6\u914d\u7f6e\u6559\u7a0b 3. \u6570\u636e\u96c6\u7b80\u5355\u4f7f\u7528 3.1. \u6570\u636e\u96c6\u521d\u59cb\u5316 dsdl\u5c06dsdl\u6570\u636e\u96c6\u7684\u4f7f\u7528\u63a5\u53e3\u5c01\u88c5\u8fdbDSDLDataset\u7c7b\uff0c\u521d\u59cb\u5316\u4e00\u4e2aDSDLDataset\u7c7b\u9700\u8981yaml\u6587\u4ef6\u548clocation config\uff0c\u8fd9\u91cc\u4ecd\u7136\u5047\u8bbe\u4e0a\u9762VOC\u6570\u636e\u96c6\u7684\u5b58\u653e\u8def\u5f84\u4e3a~/datasets/VOC07-det\uff0c\u5219\u521d\u59cb\u5316\u4ee3\u7801\u5982\u4e0b\uff1a from dsdl.dataset import DSDLDataset # 1. \u6307\u5b9a\u8981\u52a0\u8f7d\u6570\u636e\u7684dsdl\u6587\u4ef6 train_yaml = \"~/datasets/VOC07-det/dsdl/set-train/train.yaml\" val_yaml = \"~/datasets/VOC07-det/dsdl/set-val/val.yaml\" # 2. \u914d\u7f6e\u6570\u636e\u96c6\u8def\u5f84\uff08\u652f\u6301\u672c\u5730\u3001\u963f\u91cc\u4e91oss\u7b49\u4e3b\u6d41\u5b58\u50a8\uff09 loc_config = dict( type=\"LocalFileReader\", working_dir=\"~/datasets/VOC07-det/original\" ) ds_train = DSDLDataset(dsdl_yaml=train_yaml, location_config=loc_config) ds_val = DSDLDataset(dsdl_yaml=val_yaml, location_config=loc_config) 3.2. \u83b7\u53d6\u7c7b\u522b\u540d\u79f0 \u83b7\u53d6\u6570\u636e\u96c6\u7684\u7c7b\u522b\u540d\u79f0\u5217\u8868\uff0c\u4ee3\u7801\u5982\u4e0b\uff08\u8fd9\u91cc\u53ea\u5c55\u793a\u4e86VOC\u6570\u636e\u96c6\u7684\u524d10\u4e2a\u6807\u7b7e\uff09\uff1a print(ds_val.class_names[0:10]) \u8f93\u51fa\u5982\u4e0b\u6240\u793a\uff1a ['aeroplane', 'bicycle', 'bird', 'boat', 'bottle', 'bus', 'car', 'cat', 'chair', 'cow'] 3.3. \u83b7\u53d6\u6837\u672c\u4fe1\u606f DSDLDataset\u4f7f\u7528\u7d22\u5f15\u7684\u65b9\u5f0f\u83b7\u53d6\u6837\u672c\uff0c\u5982\u4e0b\u5c55\u793a\u4e86VOC\u6570\u636e\u96c6\u7d22\u5f15\u4e3a0\u7684\u6837\u672c\u7684\u4fe1\u606f\uff1a print(ds_val[0]) \u8f93\u51fa\u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a {'Image': [path:JPEGImages/000005.jpg], 'Label': [chair, chair, chair, chair, chair], 'Bbox': [[263.0, 211.0, 324.0, 339.0], [165.0, 264.0, 253.0, 372.0], [5.0, 244.0, 67.0, 374.0], [241.0, 194.0, 295.0, 299.0], [277.0, 186.0, 312.0, 220.0]]} \u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u83b7\u53d6\u6837\u672c\u7684\u4e0d\u540c\u5b57\u6bb5\uff0c\u6bd4\u5982\u8981\u83b7\u53d6\u56fe\u7247\u5b57\u6bb5\uff0c\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u547d\u4ee4\uff1a print(ds_val[0].Image) \u5f97\u5230\u8f93\u51fa\u5982\u4e0b\uff1a [path:JPEGImages/000005.jpg] \u7c7b\u4f3c\u7684\uff0c\u8981\u83b7\u53d6\u6240\u6709\u6807\u6ce8\u6846\u7684\u7c7b\u522b\u5c5e\u6027\u548c\u7b2c\u4e00\u4e2a\u6807\u6ce8\u6846\u4f4d\u7f6e\u5c5e\u6027\uff0c\u5219\u53ef\u4ee5\u91c7\u7528\u4e0b\u9762\u7684\u8bed\u53e5\uff1a print(ds_val[0].Label) print(ds_val[0].Bbox[0]) \u5f97\u5230\u8f93\u51fa\u5206\u522b\u5982\u4e0b\uff1a [chair, chair, chair, chair, chair] [263.0, 211.0, 324.0, 339.0]","title":"Quick Start"},{"location":"en/getting_started/quick_start/#1","text":"odl get VOC07-det \u51fa\u73b0\u5982\u4e0b\u65e5\u5fd7\uff0c\u8bf4\u660e\u6570\u636e\u96c6\u5df2\u7ecf\u4e0b\u8f7d\u5b8c\u6210\u3002 saving to {your home path}/datasets/VOC07-det preparing... start download... Download |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.0%, Eta 0 seconds Download Complete register local dataset... \u4e0b\u8f7d\u5b8c\u6210\u540e\u9700\u8981\u8fdb\u884c\u89e3\u538b\uff08\u89e3\u538b\u6b65\u9aa4\u53ef\u4ee5\u53c2\u8003\u6559\u7a0b \u6570\u636e\u96c6\u51c6\u5907 \uff09\uff0c\u89e3\u538b\u5b8c\u6210\u540e\uff0c\u539f\u59cb\u6570\u636e\u96c6\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a voc\u6570\u636e\u96c6\u539f\u59cb\u76ee\u5f55\u7ed3\u6784 original/ # \u539f\u59cb\u6570\u636e\u96c6\u6587\u4ef6\u5939 \u251c\u2500\u2500 Annotations/ # \u91cc\u9762\u5b58\u653e\u7684\u662f\u6bcf\u5f20\u56fe\u7247\u6253\u5b8c\u6807\u7b7e\u6240\u5bf9\u5e94\u7684XML\u6587\u4ef6 \u2502 \u251c\u2500\u2500 000001.xml # \u67d0\u5f20\u56fe\u7247\u7684\u6807\u6ce8\u4fe1\u606f \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ImageSets/ # \u56fe\u7247\u5212\u5206\u7684txt\u5b58\u653e\u4f4d\u7f6e \u2502 \u251c\u2500\u2500 Layout # \u5305\u542bLayout\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u50cf\u6587\u4ef6\u540d\u5217\u8868 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Main # \u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_test.txt # \u6309\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7b49\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 aeroplane_train.txt \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u251c\u2500\u2500 test.txt # \u5168\u6570\u636e\u96c6\u7684test\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 train.txt # \u5168\u6570\u636e\u96c6\u7684train\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u2502 \u251c\u2500\u2500 Segmentation # \u5305\u542b\u8bed\u4e49\u5206\u5272\u4fe1\u606f\u56fe\u50cf\u6587\u4ef6\u7684\u5217\u8868\u548c\u5212\u5206 \u2502 \u2502 \u251c\u2500\u2500 test.txt \u2502 \u2502 \u251c\u2500\u2500 train.txt \u2502 \u2502 \u251c\u2500\u2500 trainval.txt \u2502 \u2502 \u2514\u2500\u2500 val.txt \u251c\u2500\u2500 JPEGImages/ # \u5b58\u653e\u7684\u662f\u8bad\u7ec3\u4e0e\u6d4b\u8bd5\u7684\u6240\u6709\u56fe\u7247 \u2502 \u251c\u2500\u2500 000001.jpg # \u56fe\u7247\uff08\u5e8f\u53f7\u4f5c\u4e3a\u56fe\u7247\u540d\uff09 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 SegmentationClass/ # \u8bed\u4e49\u5206\u5272\u6807\u6ce8 \u2502 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 SegmentationObject/ # \u5b9e\u4f8b\u5206\u5272\u6807\u6ce8 \u251c\u2500\u2500 000032.png # \u67d0\u5f20\u56fe\u7247\u7684\u5a92\u4f53\u6587\u4ef6 \u2514\u2500\u2500 ... \u5bf9\u5e94\u7684DSDL\u6807\u51c6\u5316\u6587\u4ef6\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a dsdl-voc\u76ee\u5f55\u7ed3\u6784 dsdl/ \u251c\u2500\u2500 defs/ \u2502 \u251c\u2500\u2500 object-detection-def.yaml # \u4efb\u52a1\u7c7b\u578b\u7684\u5b9a\u4e49 \u2502 \u2514\u2500\u2500 class-dom.yaml # \u6570\u636e\u96c6\u7684\u7c7b\u522b\u57df \u251c\u2500\u2500 set-train/ # \u8bad\u7ec3\u96c6 \u2502 \u251c\u2500\u2500 train.yaml # \u8bad\u7ec3\u7684yaml\u6587\u4ef6 \u2502 \u2514\u2500\u2500 train_samples.json # \u8bad\u7ec3\u96c6sample\u7684json\u6587\u4ef6 \u251c\u2500\u2500 set-val/ # \u9a8c\u8bc1\u96c6 \u2502 \u251c\u2500\u2500 val.yaml \u2502 \u2514\u2500\u2500 val_samples.json \u251c\u2500\u2500 set-test/ # \u6d4b\u8bd5\u96c6 \u2502 \u251c\u2500\u2500 test.yaml \u2502 \u2514\u2500\u2500 test_samples.json \u251c\u2500\u2500 config.py # \u6570\u636e\u96c6\u8bfb\u53d6\u8def\u5f84\u7b49config\u6587\u4ef6 \u2514\u2500\u2500 README.md # \u6570\u636e\u96c6\u7b80\u4ecb \u6ce8: DSDL\u6587\u4ef6\u76ee\u5f55\u4e0b\u5404\u4e2a\u6587\u4ef6\u7684\u5177\u4f53\u5185\u5bb9\u548c\u89e3\u91ca\u53ef\u53c2\u8003 \u9ad8\u9636\u6559\u7a0b \u3002","title":"1. \u6570\u636e\u96c6\u4e0b\u8f7d"},{"location":"en/getting_started/quick_start/#2","text":"dsdl\u91c7\u7528\u4e86\u3010\u5a92\u4f53\u6570\u636e\u3011\u548c\u3010\u6807\u6ce8\u6587\u4ef6\u3011\u5206\u79bb\u8fd9\u4e00\u8bbe\u8ba1\u7406\u5ff5\uff0c\u82e5\u7528\u6237\u4e4b\u524d\u5df2\u7ecf\u4e0b\u8f7d\u8fc7\u76f8\u5173\u6570\u636e\u96c6\u5a92\u4f53\u6587\u4ef6\uff0c\u53ea\u9700\u4e0b\u8f7ddsdl\u6807\u6ce8\u6587\u4ef6\u5373\u53ef\u4f7f\u7528\u8be5\u6570\u636e\u96c6\u3002\u4e3a\u4e86\u4f7f\u7528\u4e0b\u8f7d\u597d\u7684\u6570\u636e\u96c6\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u914d\u7f6e\u6587\u4ef6 config.py \uff08\u4f4d\u4e8e VOC07-det/dsdl/config.py \uff09\u6765\u8fdb\u884c\u5bf9\u5a92\u4f53\u6570\u636e\u7684\u5b9a\u4f4d\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u5982\u4e0b\u8f7d\u7684 VOC07-det \u6570\u636e\u96c6\u4f4d\u4e8e ~/datasets \u8def\u5f84\u4e0b\uff0c\u5219\u53ea\u9700\u8981\u5c06 ~/datasets/VOC07-det/dsdl/config.py \u4e2d\u7684\u914d\u7f6e\u6309\u7167\u5982\u4e0b\u5185\u5bb9\u8fdb\u884c\u4fee\u6539\u5373\u53ef\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"~/datasets/VOC07-det/original\" , ) \u5b9e\u9645\u4e0a\uff0cdsdl\u4e5f\u652f\u6301\u4ece\u963f\u91cc\u4e91\u8bfb\u53d6\u5a92\u4f53\u6570\u636e\uff0c\u540c\u6837\u4e5f\u53ea\u9700\u8981\u4fee\u6539 config.py \u6587\u4ef6\u5373\u53ef\uff0c\u8be6\u7ec6\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 \u6570\u636e\u96c6\u914d\u7f6e\u6559\u7a0b","title":"2. \u6570\u636e\u96c6\u914d\u7f6e"},{"location":"en/getting_started/quick_start/#31","text":"dsdl\u5c06dsdl\u6570\u636e\u96c6\u7684\u4f7f\u7528\u63a5\u53e3\u5c01\u88c5\u8fdbDSDLDataset\u7c7b\uff0c\u521d\u59cb\u5316\u4e00\u4e2aDSDLDataset\u7c7b\u9700\u8981yaml\u6587\u4ef6\u548clocation config\uff0c\u8fd9\u91cc\u4ecd\u7136\u5047\u8bbe\u4e0a\u9762VOC\u6570\u636e\u96c6\u7684\u5b58\u653e\u8def\u5f84\u4e3a~/datasets/VOC07-det\uff0c\u5219\u521d\u59cb\u5316\u4ee3\u7801\u5982\u4e0b\uff1a from dsdl.dataset import DSDLDataset # 1. \u6307\u5b9a\u8981\u52a0\u8f7d\u6570\u636e\u7684dsdl\u6587\u4ef6 train_yaml = \"~/datasets/VOC07-det/dsdl/set-train/train.yaml\" val_yaml = \"~/datasets/VOC07-det/dsdl/set-val/val.yaml\" # 2. \u914d\u7f6e\u6570\u636e\u96c6\u8def\u5f84\uff08\u652f\u6301\u672c\u5730\u3001\u963f\u91cc\u4e91oss\u7b49\u4e3b\u6d41\u5b58\u50a8\uff09 loc_config = dict( type=\"LocalFileReader\", working_dir=\"~/datasets/VOC07-det/original\" ) ds_train = DSDLDataset(dsdl_yaml=train_yaml, location_config=loc_config) ds_val = DSDLDataset(dsdl_yaml=val_yaml, location_config=loc_config)","title":"3.1. \u6570\u636e\u96c6\u521d\u59cb\u5316"},{"location":"en/getting_started/quick_start_ex1/","text":"Get Started Use dsdl parser to deserialize the Yaml file to Python code dsdl parse --yaml demo/coco_demo.yaml Modify the configuration & set the directory of media in dataset Create a configuration file config.py with the following contents\uff08for now dsdl only reading from aliyun oss or local is supported\uff09\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) In config.py , the configuration of how to read the media in a dataset is defined. One should specify the arguments depending on from where to read the media\uff1a read from local\uff1a working_dir field in local should be specified (the directory of local media) read from aliyun oss\uff1a all the field in ali_oss<span> </span> should be specified (including access_key_secret , endpoint , access_key_id , bucket_name , working_dir ) Visualize samples dsdl view -y <yaml-name>.yaml -c <config.py> -l ali-oss -n 10 -r -v -f Label BBox Attributes The description of each argument is shown below: simplified argument argument description -y --yaml The path of dsdl yaml file. -c --config The path of location configuration file. -l --location local or ali-oss \uff0cwhich means read media from local or aliyun oss. -n --num The number of samples to be visualized. -r --random Whether to load the samples in a random order. -v --visualize Whether to visualize the samples or just print the information in console. -f --field The field type to visualize, e.g. -f BBox means show the bounding box in samples, -f Attributes means show the attributes of a sample in the console . One can specify multiple field types simultaneously, such as -f Label BBox Attributes . -t --task The task you are working on, for example, -t detection is equivalent to -f Label BBox Polygon Attributes .","title":"Quick start ex1"},{"location":"en/getting_started/quick_start_ex1/#get-started","text":"","title":"Get Started"},{"location":"en/getting_started/quick_start_ex1/#use-dsdl-parser-to-deserialize-the-yaml-file-to-python-code","text":"dsdl parse --yaml demo/coco_demo.yaml","title":"Use dsdl parser to deserialize the Yaml file to Python code"},{"location":"en/getting_started/quick_start_ex1/#modify-the-configuration-set-the-directory-of-media-in-dataset","text":"Create a configuration file config.py with the following contents\uff08for now dsdl only reading from aliyun oss or local is supported\uff09\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) In config.py , the configuration of how to read the media in a dataset is defined. One should specify the arguments depending on from where to read the media\uff1a read from local\uff1a working_dir field in local should be specified (the directory of local media) read from aliyun oss\uff1a all the field in ali_oss<span> </span> should be specified (including access_key_secret , endpoint , access_key_id , bucket_name , working_dir )","title":"Modify the configuration &amp; set the directory of media in dataset"},{"location":"en/getting_started/quick_start_ex1/#visualize-samples","text":"dsdl view -y <yaml-name>.yaml -c <config.py> -l ali-oss -n 10 -r -v -f Label BBox Attributes The description of each argument is shown below: simplified argument argument description -y --yaml The path of dsdl yaml file. -c --config The path of location configuration file. -l --location local or ali-oss \uff0cwhich means read media from local or aliyun oss. -n --num The number of samples to be visualized. -r --random Whether to load the samples in a random order. -v --visualize Whether to visualize the samples or just print the information in console. -f --field The field type to visualize, e.g. -f BBox means show the bounding box in samples, -f Attributes means show the attributes of a sample in the console . One can specify multiple field types simultaneously, such as -f Label BBox Attributes . -t --task The task you are working on, for example, -t detection is equivalent to -f Label BBox Polygon Attributes .","title":"Visualize samples"},{"location":"en/getting_started/quick_start_ex3/","text":"Get Started Use dsdl parser to deserialize the Yaml file to Python code dsdl parse --yaml demo/coco_demo.yaml Modify the configuration & set the directory of media in dataset Create a configuration file config.py with the following contents\uff08for now dsdl only reading from aliyun oss or local is supported\uff09\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) In config.py , the configuration of how to read the media in a dataset is defined. One should specify the arguments depending on from where to read the media\uff1a read from local\uff1a working_dir field in local should be specified (the directory of local media) read from aliyun oss\uff1a all the field in ali_oss<span> </span> should be specified (including access_key_secret , endpoint , access_key_id , bucket_name , working_dir ) Visualize samples dsdl view -y <yaml-name>.yaml -c <config.py> -l ali-oss -n 10 -r -v -f Label BBox Attributes The description of each argument is shown below: simplified argument argument description -y --yaml The path of dsdl yaml file. -c --config The path of location configuration file. -l --location local or ali-oss \uff0cwhich means read media from local or aliyun oss. -n --num The number of samples to be visualized. -r --random Whether to load the samples in a random order. -v --visualize Whether to visualize the samples or just print the information in console. -f --field The field type to visualize, e.g. -f BBox means show the bounding box in samples, -f Attributes means show the attributes of a sample in the console . One can specify multiple field types simultaneously, such as -f Label BBox Attributes . -t --task The task you are working on, for example, -t detection is equivalent to -f Label BBox Polygon Attributes .","title":"Quick start ex3"},{"location":"en/getting_started/quick_start_ex3/#get-started","text":"","title":"Get Started"},{"location":"en/getting_started/quick_start_ex3/#use-dsdl-parser-to-deserialize-the-yaml-file-to-python-code","text":"dsdl parse --yaml demo/coco_demo.yaml","title":"Use dsdl parser to deserialize the Yaml file to Python code"},{"location":"en/getting_started/quick_start_ex3/#modify-the-configuration-set-the-directory-of-media-in-dataset","text":"Create a configuration file config.py with the following contents\uff08for now dsdl only reading from aliyun oss or local is supported\uff09\uff1a local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" ) In config.py , the configuration of how to read the media in a dataset is defined. One should specify the arguments depending on from where to read the media\uff1a read from local\uff1a working_dir field in local should be specified (the directory of local media) read from aliyun oss\uff1a all the field in ali_oss<span> </span> should be specified (including access_key_secret , endpoint , access_key_id , bucket_name , working_dir )","title":"Modify the configuration &amp; set the directory of media in dataset"},{"location":"en/getting_started/quick_start_ex3/#visualize-samples","text":"dsdl view -y <yaml-name>.yaml -c <config.py> -l ali-oss -n 10 -r -v -f Label BBox Attributes The description of each argument is shown below: simplified argument argument description -y --yaml The path of dsdl yaml file. -c --config The path of location configuration file. -l --location local or ali-oss \uff0cwhich means read media from local or aliyun oss. -n --num The number of samples to be visualized. -r --random Whether to load the samples in a random order. -v --visualize Whether to visualize the samples or just print the information in console. -f --field The field type to visualize, e.g. -f BBox means show the bounding box in samples, -f Attributes means show the attributes of a sample in the console . One can specify multiple field types simultaneously, such as -f Label BBox Attributes . -t --task The task you are working on, for example, -t detection is equivalent to -f Label BBox Polygon Attributes .","title":"Visualize samples"},{"location":"en/tutorials/overview/","text":"A brief introduction of How this tutorial will be orgenized.","title":"Introduction"},{"location":"en/tutorials/advanced/dsdl_extend/","text":"DSDL\u7c7b\u578b\u6269\u5c55 DSDL\u5df2\u7ecf\u652f\u6301\u5f88\u591a\u57fa\u7840\u7c7b\u578bField\uff08Bool\u3001Int\u3001Num\u3001Str\u3001Dict\u3001Date\u3001Time\uff09\uff0c\u6807\u6ce8\u7c7b\u578bField\uff08Coord\u3001Coord3D\u3001Interval\u3001BBox\u3001RotatedBBox\u3001Polygon\u3001Label\u3001Keypoint\u3001Text\u3001ImageShape\u3001UniqueID\u3001InstanceID\uff09\u4ee5\u53ca\u5a92\u4f53\u7c7b\u578bField\uff08Image\u3001LabelMap\u3001InstanceMap\uff09\u3002\u4f46\u5728\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u9884\u8bbe\u7684Field\u65e0\u6cd5\u6ee1\u8db3\u7528\u6237\u7684\u5f00\u53d1\u9700\u6c42\uff0c\u56e0\u6b64\u672c\u7ae0\u8282\u4f1a\u8be6\u89e3\u5728DSDL\u4e2dField\u662f\u5982\u4f55\u5b9a\u4e49\u7684\uff0c\u4ece\u800c\u65b9\u4fbf\u7528\u6237\u81ea\u5df1\u62d3\u5c55DSDL Field\u3002 \u6269\u5c55DSDL Field\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4 \u8bbe\u8ba1Field\u7684\u58f0\u660e\u53c2\u6570\u7684jsonschema\uff1b \u8bbe\u8ba1\u8be5Field\u7684\u4f20\u5165\u503c\u7684jsonschema\uff1b \u5982\u6709\u5fc5\u8981\uff0c\u8fd8\u9700\u8981\u8bbe\u8ba1 \u53c2\u6570+\u503c \u7684\u8054\u5408jsonschema \u7528\u6237\u5b9a\u4e49\u8be5Field\u5bf9\u5e94\u7684geometry\u7c7b \u4e0b\u9762\u672c\u6587\u5c06\u4ee5 RotatedBBoxField \u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u5982\u4f55\u81ea\u5b9a\u4e49\u4e00\u4e2aDSDL Field\u3002 1. \u4efb\u52a1\u4ecb\u7ecd \u7528\u6237\u5728\u5b9a\u4e49\u4e00\u4e2aField\u4e4b\u524d\uff0c\u9700\u8981\u4e86\u89e3\u8be5Field\u7684\u4efb\u52a1\u7279\u70b9\uff0c\u4ee5\u65cb\u8f6c\u76ee\u6807\u68c0\u6d4b\u4e3a\u4f8b\uff0c\u5b83\u7684\u6807\u6ce8\u5e94\u8be5\u662f\u4e00\u4e2a\u65cb\u8f6c\u7684\u77e9\u5f62\u6846\uff0c\u5728\u5927\u591a\u6570\u4efb\u52a1\u4e2d\uff0c\u8be5\u77e9\u5f62\u6846\u4ee5 [x, y, w, h, theta] \u7684\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5176\u4e2dx,y\u5206\u522b\u4e3a\u77e9\u5f62\u6846\u4e2d\u5fc3\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\uff0c w,h \u5206\u522b\u4e3a\u4e3e\u884c\u6846\u7684\u5bbd\u548c\u9ad8\uff0c theta \u5219\u4e3a\u77e9\u5f62\u6846\u7684\u65cb\u8f6c\u89d2\u5ea6\uff0c\u5355\u4f4d\u4e3a\u89d2\u5ea6\u6216\u5f27\u5ea6\u3002\u800c\u4e5f\u6709\u5f88\u5927\u4e00\u90e8\u5206\u6570\u636e\u96c6\u5c06\u65cb\u8f6c\u77e9\u5f62\u6846\u4ee5polygon\u7684\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5373\u5c06\u5176\u6807\u6ce8\u4e3a\u77e9\u5f62\u68464\u4e2a\u9876\u70b9\u7684xy\u5750\u6807\uff0c\u8868\u793a\u4e3a [x1, y1, x2, y2, x3, y3, x4, y4] \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u81ea\u5b9a\u4e49\u4e00\u4e2a\u6bd4\u8f83\u901a\u7528\u7684RotatedBBox Field\uff0c\u9700\u8981\u8003\u8651\u503c\u662f\u4ee5 xywht\u5f62\u5f0f\u8fd8\u662fxyxy\u5f62\u5f0f\u7ed9\u51fa\uff0c\u4ee5\u53caxywht\u5f62\u5f0f\u4e0b\u7684\u89d2\u5ea6\u7684\u5355\u4f4d\u662f\u5ea6\u8fd8\u662f\u5f27\u5ea6\u3002 \u5e78\u8fd0\u7684\u662f\uff0cdsdl\u652f\u6301\u5728\u58f0\u660eField\u7684\u540c\u65f6\u4f20\u5165\u4e00\u4e9b\u53c2\u6570\u6765\u89c4\u5b9a\u8be5Field\u5728\u4e0d\u540c\u6a21\u5f0f\u4e0b\u5de5\u4f5c\uff0c\u4ee5 RotatedBBox Field\u4e3a\u4f8b\uff0c\u6211\u4eec\u4e00\u5171\u8981\u4e3aRotatedBBox Field\u5b9a\u4e493\u79cd\u6a21\u5f0f\uff1a LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox[mode=xywht, measure=radian] # \u4ee5xywht\u7684\u5f62\u5f0f\u7ed9\u503c\uff0c\u4e14\u89d2\u5ea6\u5355\u4f4d\u4e3a\u5f27\u5ea6 LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox[mode=xywht, measure=degree] # \u4ee5xywht\u7684\u5f62\u5f0f\u7ed9\u503c\uff0c\u4e14\u89d2\u5ea6\u5355\u4f4d\u4e3a\u5ea6 LocalObjectEntry : $def : struct $fields : rbbox : RotatedBBox[mode=xyxy] # \u4ee5xyxy\u7684\u5f62\u5f0f\u7ed9\u503c \u786e\u5b9a\u4e86RotatedBBox\u7684\u6837\u5f0f\uff0c\u6211\u4eec\u4e0b\u9762\u53ef\u4ee5\u5f00\u59cb\u5b9a\u4e49\u5b83\u7684\u53c2\u6570jsonschema 2. \u53c2\u6570schema\u5b9a\u4e49 \u5728RotatedBBox\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86 mode \u3001 measure \u4e24\u4e2a\u5f62\u53c2\uff0c\u5e76\u89c4\u5b9a\u4e86 mode \u7684\u5b9e\u53c2\u53ea\u80fd\u662f xywht \u6216 xyxy \uff0c measure \u7684\u5b9e\u53c2\u53ea\u80fd\u662f radian \u6216 degree \u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684jsonschema\u6765\u63cf\u8ff0\u8be5\u7ea6\u675f\uff1a args_schema = { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" , \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] } \u5728\u4e0a\u9762\u7684jsonschema\u4e2d\uff0c\u6211\u4eec\u7ea6\u675f\u4e86RotatedBBox\u7684\u5173\u952e\u5b57\u53c2\u6570\u5b57\u5178\u4e2d\u5fc5\u987b\u5305\u542b\u4e14\u53ea\u80fd\u5305\u542b\u4e24\u4e2a\u952e\uff1a measure \u548c mode \uff0c\u5e76\u4e14 measure \u952e\u5bf9\u5e94\u7684\u503c\u53ea\u80fd\u662f \"radian\" \u5b57\u7b26\u4e32\u6216\u662f \"xyxy\" \u5b57\u7b26\u4e32\uff1b mode \u952e\u5bf9\u5e94\u7684\u503c\u53ea\u80fd\u662f \"xywht\" \u5b57\u7b26\u4e32\u6216 \"xyxy\" \u5b57\u7b26\u4e32\u3002 \u6b64\u5916\u6709\u4e9b\u60c5\u51b5\u4e0b\u6211\u4eec\u5e0c\u671b\u5728\u4e3aField\u4f20\u5165\u53c2\u6570\u7684\u65f6\u5019\uff0cField\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u9ed8\u8ba4\u4f20\u53c2\u5b57\u5178\uff1a default_args = { \"mode\" : \"xywht\" , \"measure\" : \"radian\" } \u4e0a\u9762\u7684\u9ed8\u8ba4\u5b57\u5178\u89c4\u5b9a\u4e86\u5728\u4e0d\u4f20\u5165\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4 mode=\"xywht\" \uff0c measure=\"radian\" \u5b9a\u4e49\u5b8c\u53c2\u6570schema\u540e\uff0c\u6211\u4eec\u5219\u9700\u8981\u89c4\u5b9a\u5177\u4f53\u4f20\u5165\u7684\u503c\u7684jsonschema\u3002 3. \u503cschema\u5b9a\u4e49 \u5728RotatedBBox\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f20\u5165\u7684\u503c\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u5982\u679cRotatedBBox Field\u7684 mode \u662f \"xywht\" \uff0c\u5219\u4f20\u5165\u7684\u503c\u9700\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5143\u7d20\u6570\u76ee\u4e3a5\uff0c\u7c7b\u578b\u4e3a\u6570\u5b57\u7c7b\u578b\uff0c\u5206\u522b\u4ee3\u8868\u4e86\u65cb\u8f6c\u6846\u7684\u4e2d\u5fc3\u70b9xy\u5750\u6807\uff0c\u5bbd\u9ad8\uff0c\u4ee5\u53ca\u65cb\u8f6c\u89d2\u5ea6\u3002 \u5982\u679cRotatedBBox Field\u7684 mode \u662f xyxy \uff0c\u5219\u4f20\u5165\u7684\u503c\u9700\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u5143\u7d20\u6570\u76ee\u4e3a8\uff0c\u7c7b\u578b\u4e3a\u6570\u5b57\u7c7b\u578b\uff0c\u5206\u522b\u4ee3\u8868\u4e86\u65cb\u8f6c\u6846\u7684\u56db\u4e2a\u9876\u70b9\u7684xy\u5750\u6807\uff1a [x1, y1, x2, y2, x3, y3, x4, y4] \u56e0\u6b64\uff0c\u503cjsonschema\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a data_schema = { \"$id\" : \"/special/rotatedbbox\" , \"title\" : \"RotatedBBoxField\" , \"description\" : \"Rotated bounding box field in dsdl.\" , \"type\" : \"array\" , \"oneOf\" : [ { \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }]}, { \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} ] } \u4e0a\u9762\u7684jsonschema\u505a\u51fa\u4e86\u5982\u4e0b\u7684\u7ea6\u675f\uff1a \u4f20\u5165RotatedBBox Field\u503c\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u5217\u8868\uff1b \u5217\u8868\u7684\u5143\u7d20\u7ea6\u675f\u9700\u8981\u6ee1\u8db3\u4e0b\u9762\u4e24\u79cd\u60c5\u51b5\u4e4b\u4e00\uff1a \u5143\u7d20\u6570\u76ee\u4e3a5\uff0c\u7c7b\u578b\u90fd\u662fnumber\uff0c\u4e14\u8868\u793a\u5bbd\u9ad8\u7684\u7b2c3\u4e2a\u548c\u7b2c4\u4e2a\u5143\u7d20\u90fd\u5fc5\u987b\u8981\u662f\u5927\u4e8e0\u7684\u6570\uff1b \u5143\u7d20\u6570\u76ee\u4e3a8\uff0c\u7c7b\u578b\u90fd\u662fnumber \u6b64\u5916\uff0c\u5728RotatedBBox Field\u4e2d\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u786e\u5b9a\u53c2\u6570schema\u548c\u503cschema\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5f53 mode=\"xywht\" \u65f6\u4f20\u5165\u7684\u503c\u5fc5\u987b\u662f5\u5143\u7d20\u5217\u8868\uff1b\u5f53 mode=xyxy \u65f6\uff0c\u4f20\u5165\u7684\u503c\u5fc5\u987b\u662f8\u5143\u7d20\u5217\u8868\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u989d\u5916\u5b9a\u4e00\u4e2a\u53c2\u6570+\u503c\u7684\u6574\u4f53schema\uff1a whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } \u53ea\u6709\u5728\u53c2\u6570\u548c\u503c\u7684\u5f62\u5f0f\u4e00\u4e00\u5bf9\u5e94\u7684\u60c5\u51b5\u4e0b\u624d\u9700\u8981\u5b9a\u4e49\u4e0a\u9762\u7684 whole_schema \u4e3a\u4e86\u7406\u89e3 whole_schema \uff0c\u6211\u4eec\u7ed9\u51fa\u4e0b\u9762\u51e0\u4e2a\u4f8b\u5b50\uff1a data_args = { \"args\" : { \"mode\" : \"xywht\" , \"measure\" : \"radian\" }, \"value\" : [ 1 , 2 , 3 , 4 , 5 ] } # \u6b63\u786e\uff0c\u6ee1\u8db3whole_schema\u7684\u89c4\u5b9a data_args = { \"args\" : { \"mode\" : \"xywht\" , \"measure\" : \"radian\" }, \"value\" : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] } # \u9519\u8bef\uff0cvalue\u5fc5\u987b\u662f5\u5143\u7d20\u5217\u8868\uff0c\u56e0\u6b64mode\u662f\"xywht\" data_args = { \"args\" : { \"mode\" : \"xyxy\" , \"measure\" : \"radian\" }, \"value\" : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] } # \u6b63\u786e\uff0c\u6ee1\u8db3whole_schema\u7684\u89c4\u5b9a 4. \u6570\u636e\u7c7b\u7684\u5b9a\u4e49 \u5728dsdl\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528jsonschema\u6765\u68c0\u67e5\u7ed9\u5b9a\u7684\u6570\u636e\u662f\u5426\u5408\u89c4\uff0c\u4f46\u662f\u8fd9\u53ea\u662f\u5728\u57fa\u7840\u6570\u636e\u7c7b\u578b\u65b9\u9762\u7684\u68c0\u67e5\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u53ea\u80fd\u786e\u4fdd\u4f8b\u5982BBox\u7684\u6570\u636e\u5fc5\u987b\u4e3a\u4e00\u4e2a4\u5143\u7d20\u5217\u8868\uff0c\u6216\u662fpolygon\u5fc5\u987b\u662f\u4e00\u4e2a3\u5c42\u5d4c\u5957\u5217\u8868\u8fd9\u79cd\u7ea6\u675f\uff0c\u4e3a\u4e86\u80fd\u8fdb\u4e00\u6b65\u8868\u793a\u5404\u79cd\u4e0d\u540c\u7684\u6570\u636e\uff0c\u5c06\u8d4b\u4e88\u4ed6\u4eec\u8bed\u4e49\u4fe1\u606f\uff0c\u6211\u4eec\u8fd8\u4f1a\u5c06\u8fd9\u4e9b\u901a\u8fc7jsonschema\u9a8c\u8bc1\u7684\u6570\u636e\u5c01\u88c5\u5728\u4e00\u4e2adsdl\u6570\u636e\u7c7b\uff08 dsdl.geometry.BaseGeometry \uff09\u5f53\u4e2d\uff0c\u4ece\u800c\u65b9\u4fbf\u7528\u6237\u8c03\u7528\u5404\u79cd\u65b9\u6cd5\u6765\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u3002 \u5bf9\u4e8eRotatedBBox Field\u800c\u8a00\uff0c\u6211\u4eec\u5c06\u7b26\u5408data schema\u7684\u6570\u636e\u5c01\u88c5\u5728\u4e86 dsdl.geometry.RBBox \u7c7b\u5f53\u4e2d\u3002\u56e0\u6b64\u7528\u6237\u5728\u5b9e\u73b0\u81ea\u5b9a\u4e49Field\u65f6\uff0c\u5efa\u8bae\u4e5f\u53ef\u4ee5\u5728 dsdl.geometry \u5305\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u6570\u636e\u7c7b\u3002 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ee5 dsdl.geometry.RBBox \u4e3a\u4f8b\uff0c\u8bb2\u89e3\u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a\u6570\u636e\u7c7b\uff08\u5728dsdl\u4e2d\uff0c\u6211\u4eec\u5c06\u6570\u636e\u7c7b\u6210\u4e3a Geometry \u7c7b\uff09\u3002 \u5b9a\u4e49\u4e00\u4e2a Geometry \u7c7b\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u7ee7\u627f dsdl.geometry.BaseGeometry \u7236\u7c7b \u5b9a\u4e49\u521d\u59cb\u5316\u65b9\u6cd5 \u5b9a\u4e49\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5 \u5982\u679c\u5f53\u524dfield\u9700\u8981\u5728dsdl view\u547d\u4ee4\u4e2d\u88ab\u53ef\u89c6\u5316\u5c55\u793a\uff0c\u5219\u9700\u8981\u91cd\u5199\u7236\u7c7b\u65b9\u6cd5\u4e2d\u7684 visualize \u65b9\u6cd5\uff08\u8be5\u6b65\u9aa4\u4e0d\u4f1a\u5728\u672c\u6587\u4e2d\u6d89\u53ca\uff09 4.1 \u5b9a\u4e49\u521d\u59cb\u5316\u65b9\u6cd5 from .base_geometry import BaseGeometry class RBBox ( BaseGeometry ): def __init__ ( self , value , mode = \"xywht\" , measure = \"radian\" ): assert mode in ( \"xywht\" , \"xyxy\" ) and measure in ( \"radian\" , \"degree\" ) if mode == \"xywht\" : self . _polygon = None if measure == \"degree\" : value = value . copy () value [ - 1 ] = value [ - 1 ] / 180 * math . pi self . _rbbox = value else : self . _polygon = value self . _rbbox = None \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7528\u6237\u5b9a\u4e49\u7684Geometry\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u9700\u8981\u4f20\u5165\u7684\u503c\u9700\u8981\u5305\u542b\uff1a \u5177\u4f53\u7684\u6570\u636evalue \u8be5Geometry\u7c7b\u5bf9\u5e94\u7684Field\u7684\u58f0\u660e\u53c2\u6570 \u5177\u4f53\u6765\u8bf4\uff0c\u7531\u4e8eRotatedBBox Field\u7684\u58f0\u660e\u53c2\u6570\u5305\u542b mode \u548c measure \uff0c\u56e0\u6b64\u5b83\u5bf9\u5e94\u7684Geometry\u7c7bRBBox\u7684\u521d\u59cb\u5316\u53c2\u6570\u9664\u4e86\u5177\u4f53value\u6570\u636e\uff0c\u4e5f\u5fc5\u987b\u5305\u542b mode \u548c measure \u4e24\u4e2a\u53c2\u6570\uff0c\u4e14\u542b\u4e49\u4e0eRotatedBBox Field\u4e2d\u7684\u4e00\u81f4\u3002 \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u6839\u636e\u4f20\u5165\u7684 mode \u548c measure \u5bf9\u4f20\u5165\u7684\u6570\u636e value \u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\uff0c\u6bd4\u5982\uff1a \u5982\u679c measure \u4e3a degree \uff0c\u5219\u9700\u8981\u5c06 value \u4e2d\u7684\u89d2\u5ea6\u7684\u503c\u8f6c\u6362\u4e3a\u5f27\u5ea6\u5355\u4f4d\uff1b \u5982\u679c mode \u4e3a xywht \uff0c\u5219\u9700\u8981\u5c06value\u5b58\u50a8\u4e3a self._rbbox \u5c5e\u6027\uff0c\u5982\u679c mode \u4e3a xyxy \uff0c\u5219\u9700\u8981\u5c06value\u5b58\u50a8\u4e3a self._polygon 4.2 \u5b9a\u4e49\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5 \u6211\u4eec\u6709\u53ef\u80fd\u60f3\u5bf9\u5c01\u88c5\u7684\u6570\u636e\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5219\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u76f8\u5e94\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982\u5728RBBox\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\uff1a @staticmethod def rbbox2polygon ( value ): x , y , width , height , angle = value cosA , sinA = math . cos ( angle ), math . sin ( angle ) def _rotate ( p_ ): # clockwise x_ , y_ = p_ x_r = ( x_ - x ) * cosA - ( y_ - y ) * sinA + x y_r = ( x_ - x ) * sinA + ( y_ - y ) * cosA + y return [ x_r , y_r ] x_l , x_r , y_t , y_b = x - width / 2 , x + width / 2 , y - height / 2 , y + height / 2 p_lt , p_lb , p_rt , p_rb = [ x_l , y_t ], [ x_l , y_b ], [ x_r , y_t ], [ x_r , y_b ] return [ _rotate ( p_lt ), _rotate ( p_lb ), _rotate ( p_rb ), _rotate ( p_rt )] @staticmethod def polygon2rbbox ( value ): res = cv2 . minAreaRect ( np . array ( value ) . astype ( np . int32 )) x , y = res [ 0 ] width , height = res [ 1 ] # width is \"first edge\" angle = res [ 2 ] if width < height : width , height = height , width angle = angle + 90 angle = 1 - angle / 180 * math . pi return [ x , y , width , height , angle ] @property def polygon_value ( self ): if self . _polygon is None : self . _polygon = self . rbbox2polygon ( self . _rbbox ) return self . _polygon @property def rbbox_value ( self ): if self . _rbbox is None : self . _rbbox = self . polygon2rbbox ( self . _polygon ) return self . _rbbox \u4e0a\u9762\u7684\u65b9\u6cd5\u5b9e\u73b0\u4e86 mode \u4e3a xywht \u548c xyxy \u4e4b\u95f4\u6570\u636e\u7684\u76f8\u4e92\u8f6c\u6362 5. \u5b9a\u4e49Field\u7c7b \u5728\u5b8c\u6210\u4e86\u4e0a\u8ff0\u7684\u64cd\u4f5c\u540e\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u5c06\u4e0a\u9762\u5b9a\u4e49\u7684\u5185\u5bb9\u7ec4\u88c5\u5230\u4e00\u4e2aField\u7c7b\u4e2d\uff0c\u5373\u5b9a\u4e49Field\u7c7b\u672c\u8eab\u3002 \u4ee5RotatedBBox Field\u4e3a\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u5728 dsdl.fields \u5305\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u540c\u540d\u7684\u7c7b\uff0c\u5e76\u8ba9\u5b83\u7ee7\u627f dsdl.base_field.BaseField \u57fa\u7c7b\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5c06\u4e0a\u9762\u51e0\u5c0f\u8282\u5b9a\u4e49\u7684jsonschema\u8bbe\u7f6e\u4e3a\u5b83\u7684\u7c7b\u5c5e\u6027\uff0c\u5206\u522b\u4e3a\uff1a default_args \uff1aField\u58f0\u660e\u9ed8\u8ba4\u53c2\u6570 args_schema \uff1a\u58f0\u660eField\u65f6\u4f20\u5165\u53c2\u6570\u9700\u8981\u9075\u5b88\u7684 jsonschema data_schema \uff1a\u8be5Field\u7684\u5b9e\u4f8b\u6570\u636e\u9700\u8981\u9075\u5b88\u7684jsonschema whole_schema \uff1a\u8be5Field\u7684\u58f0\u660e\u53c2\u6570\u548c\u5b9e\u4f8b\u6570\u636e\u9700\u8981\u9075\u5b88\u7684\u6574\u4f53schema\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\uff09 geometry_class \uff1a\u8be5Field\u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u7684\u7c7b\u540d\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7c7b\u540d\u4e3a RBBox \u56e0\u6b64\uff0c\u6700\u7ec8\u5b9a\u4e49\u7684Field\u7c7b\u5982\u4e0b\u6240\u793a\uff1a class RotatedBBox ( BaseField ): default_args = { \"mode\" : \"xywht\" , \"measure\" : \"radian\" } data_schema = { \"$id\" : \"/special/rotatedbbox\" , \"title\" : \"RotatedBBoxField\" , \"description\" : \"Rotated bounding box field in dsdl.\" , \"type\" : \"array\" , \"oneOf\" : [ { \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }]}, { \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} ] } args_schema = { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" , \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] } whole_schema = { \"type\" : \"object\" , \"oneOf\" : [ { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xywht\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ] }, \"value\" : { \"type\" : \"array\" , \"minItems\" : 5 , \"maxItems\" : 5 , \"items\" : [{ \"type\" : \"number\" }, { \"type\" : \"number\" }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" , \"minimum\" : 0 }, { \"type\" : \"number\" }] } } }, { \"properties\" : { \"args\" : { \"type\" : \"object\" , \"properties\" : { \"measure\" : { \"type\" : \"string\" , \"enum\" : [ \"radian\" , \"degree\" ]}, \"mode\" : { \"type\" : \"string\" , \"enum\" : [ \"xyxy\" ]} }, \"minProperties\" : 2 , \"maxProperties\" : 2 , \"required\" : [ \"measure\" , \"mode\" ]}, \"value\" : { \"type\" : \"array\" , \"minItems\" : 8 , \"maxItems\" : 8 , \"items\" : { \"type\" : \"number\" }} } } ], \"required\" : [ \"args\" , \"value\" ] } geometry_class = \"RBBox\" \u901a\u8fc7\u4e0a\u8ff0\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u5c31\u5b9a\u4e49\u4e86\u4e00\u4e2aRotatedBBox Field\uff0cpython\u4ee3\u7801\u7684\u4f7f\u7528\u5b9e\u4f8b\u5982\u4e0b\uff1a from dsdl.fields import RotatedBBox # import RotatedBBox field field = RotatedBBox ( mode = \"xywht\" , measure = \"radian\" ) # decare the RotatedBBox field data = [ 10 , 12 , 60 , 70 , 3.14 ] # define the data of a rotated bounding box rotated_bbox_obj = field . validate ( data ) # return a dsdl.geometry.RBBox object \u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u8c03\u7528\u5176\u65b9\u6cd5\uff1a rotated_bbox_obj . polygon_value # \u8f93\u51fa\u8be5rotated bounding box\u7684xyxy\u5f62\u5f0f rotated_bbox_obj . rbbox_value # \u8f93\u51fa\u8be5rotated bounding box\u7684xywht\u5f62\u5f0f ...","title":"Field Extend"},{"location":"en/tutorials/config/location_config/","text":"dataset configuration Users who downloaded original dataset, can pull dsdl file and modify it's location configuration, it works too. we use config.py to set dataset's location configuration, it supports two type locations: load form local\uff1a set type = LocalFileReader , and change working_dir to actual path. load from ali-oss\uff1a set type = AliOSSFileReader , then input your identification such as access_key_secret , endpoint , access_key_id , you also need to set bucket_name and working_dir so the loader can find your dataset. an example of config.py file shown as: local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" )","title":"**dataset configuration**"},{"location":"en/tutorials/config/location_config/#dataset-configuration","text":"Users who downloaded original dataset, can pull dsdl file and modify it's location configuration, it works too. we use config.py to set dataset's location configuration, it supports two type locations: load form local\uff1a set type = LocalFileReader , and change working_dir to actual path. load from ali-oss\uff1a set type = AliOSSFileReader , then input your identification such as access_key_secret , endpoint , access_key_id , you also need to set bucket_name and working_dir so the loader can find your dataset. an example of config.py file shown as: local = dict ( type = \"LocalFileReader\" , working_dir = \"local path of your media\" , ) ali_oss = dict ( type = \"AliOSSFileReader\" , access_key_secret = \"your secret key of aliyun oss\" , endpoint = \"your endpoint of aliyun oss\" , access_key_id = \"your access key of aliyun oss\" , bucket_name = \"your bucket name of aliyun oss\" , working_dir = \"the relative path of your media dir in the bucket\" )","title":"dataset configuration"}]}